{"searchDocs":[{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/regal-ui-docs/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/regal-ui-docs/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":"","version":null},{"title":"Mocking data","type":0,"sectionRef":"#","url":"/regal-ui-docs/blog/2024/01/02/mocks","content":"We are mainly working with objects and when mocking data we are concerned with 2 aspects: shape and concrete values. When writing tests, the focus is generally concentrated around a small subset of the data which is directly manipulated or observed, the rest is either mocked or ignored completely. There is a large amount of this auxiliary data that is needed for a test: a brand being set up, agent, feature flags, tasks etc. In other words: the shape of the data prevents the application from crashing while the concrete values help us define the business logic.","keywords":"","version":null},{"title":"Welcome","type":0,"sectionRef":"#","url":"/regal-ui-docs/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":"","version":null},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/regal-ui-docs/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":"","version":null},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/congratulations","content":"","keywords":"","version":"Next"},{"title":"What's next?​","type":1,"pageTitle":"Congratulations!","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/congratulations#whats-next","content":" Read the official documentationModify your site configuration with docusaurus.config.jsAdd navbar and footer items with themeConfigAdd a custom Design and LayoutAdd a search barFind inspirations in the Docusaurus showcaseGet involved in the Docusaurus Community ","version":"Next","tagName":"h2"},{"title":"Create a Page","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-page","content":"","keywords":"","version":"Next"},{"title":"Create your first React Page​","type":1,"pageTitle":"Create a Page","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-page#create-your-first-react-page","content":" Create a file at src/pages/my-react-page.js:  src/pages/my-react-page.js import React from 'react'; import Layout from '@theme/Layout'; export default function MyReactPage() { return ( &lt;Layout&gt; &lt;h1&gt;My React page&lt;/h1&gt; &lt;p&gt;This is a React page&lt;/p&gt; &lt;/Layout&gt; ); }   A new page is now available at http://localhost:3000/my-react-page.  ","version":"Next","tagName":"h2"},{"title":"Create your first Markdown Page​","type":1,"pageTitle":"Create a Page","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-page#create-your-first-markdown-page","content":" Create a file at src/pages/my-markdown-page.md:  src/pages/my-markdown-page.md # My Markdown page This is a Markdown page   A new page is now available at http://localhost:3000/my-markdown-page. ","version":"Next","tagName":"h2"},{"title":"Tests","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/tests/","content":"Tests","keywords":"","version":"Next"},{"title":"Docusaurus Intro","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/intro","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Docusaurus Intro","url":"/regal-ui-docs/docs/docusaurus/intro#getting-started","content":" Get started by creating a new site.  Or try Docusaurus immediately with docusaurus.new.  ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"Docusaurus Intro","url":"/regal-ui-docs/docs/docusaurus/intro#what-youll-need","content":" Node.js version 18.0 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies.  ","version":"Next","tagName":"h3"},{"title":"Generate a new site​","type":1,"pageTitle":"Docusaurus Intro","url":"/regal-ui-docs/docs/docusaurus/intro#generate-a-new-site","content":" Generate a new Docusaurus site using the classic template.  The classic template will automatically be added to your project after you run the command:  npm init docusaurus@latest my-website classic   You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor.  The command also installs all necessary dependencies you need to run Docusaurus.  ","version":"Next","tagName":"h2"},{"title":"Start your site​","type":1,"pageTitle":"Docusaurus Intro","url":"/regal-ui-docs/docs/docusaurus/intro#start-your-site","content":" Run the development server:  cd my-website npm run start   The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there.  The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/.  Open docs/docusaurus/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes. ","version":"Next","tagName":"h2"},{"title":"Create a Blog Post","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-blog-post","content":"","keywords":"","version":"Next"},{"title":"Create your first Post​","type":1,"pageTitle":"Create a Blog Post","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-blog-post#create-your-first-post","content":" Create a file at blog/2021-02-28-greetings.md:  blog/2021-02-28-greetings.md --- slug: greetings title: Greetings! authors: - name: Joel Marcey title: Co-creator of Docusaurus 1 url: https://github.com/JoelMarcey image_url: https://github.com/JoelMarcey.png - name: Sébastien Lorber title: Docusaurus maintainer url: https://sebastienlorber.com image_url: https://github.com/slorber.png tags: [greetings] --- Congratulations, you have made your first post! Feel free to play around and edit this post as much as you like.   A new blog post is now available at http://localhost:3000/blog/greetings. ","version":"Next","tagName":"h2"},{"title":"Deploy your site","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/deploy-your-site","content":"","keywords":"","version":"Next"},{"title":"Build your site​","type":1,"pageTitle":"Deploy your site","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/deploy-your-site#build-your-site","content":" Build your site for production:  npm run build   The static files are generated in the build folder.  ","version":"Next","tagName":"h2"},{"title":"Deploy your site​","type":1,"pageTitle":"Deploy your site","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/deploy-your-site#deploy-your-site-1","content":" Test your production build locally:  npm run serve   The build folder is now served at http://localhost:3000/.  You can now deploy the build folder almost anywhere easily, for free or very small cost (read the Deployment Guide). ","version":"Next","tagName":"h2"},{"title":"Create a Document","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-document","content":"","keywords":"","version":"Next"},{"title":"Create your first Doc​","type":1,"pageTitle":"Create a Document","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-document#create-your-first-doc","content":" Create a Markdown file at docs/hello.md:  docs/hello.md # Hello This is my **first Docusaurus document**!   A new document is now available at http://localhost:3000/docs/hello.  ","version":"Next","tagName":"h2"},{"title":"Configure the Sidebar​","type":1,"pageTitle":"Create a Document","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/create-a-document#configure-the-sidebar","content":" Docusaurus automatically creates a sidebar from the docs folder.  Add metadata to customize the sidebar label and position:  docs/hello.md --- sidebar_label: &quot;Hi!&quot; sidebar_position: 3 --- # Hello This is my **first Docusaurus document**!   It is also possible to create your sidebar explicitly in sidebars.js:  sidebars.js export default { docusaurusTutorialSidebar: [ &quot;intro&quot;, &quot;hello&quot;, { type: &quot;category&quot;, label: &quot;Tutorial&quot;, items: [&quot;tutorial-basics/create-a-document&quot;], }, ], };  ","version":"Next","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/manage-docs-versions","content":"","keywords":"","version":"Next"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/manage-docs-versions#create-a-docs-version","content":" Release a version 1.0 of your project:  npm run docusaurus docs:version 1.0   The docs folder is copied into versioned_docs/version-1.0 and versions.json is created.  Your docs now have 2 versions:  1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs  ","version":"Next","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/manage-docs-versions#add-a-version-dropdown","content":" To navigate seamlessly across versions, add a version dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: 'docsVersionDropdown', }, ], }, }, };   The docs version dropdown appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/manage-docs-versions#update-an-existing-version","content":" It is possible to edit versioned docs in their respective folder:  versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"Next","tagName":"h2"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/translate-your-site","content":"","keywords":"","version":"Next"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/translate-your-site#configure-i18n","content":" Modify docusaurus.config.js to add support for the fr locale:  docusaurus.config.js export default { i18n: { defaultLocale: &quot;en&quot;, locales: [&quot;en&quot;, &quot;fr&quot;], }, };   ","version":"Next","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/translate-your-site#translate-a-doc","content":" Copy the docs/docusaurus/intro.md file to the i18n/fr folder:  mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/docusaurus/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md   Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French.  ","version":"Next","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/translate-your-site#start-your-localized-site","content":" Start your site on the French locale:  npm run start -- --locale fr   Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated.  caution In development, you can only use one locale at a time.  ","version":"Next","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/translate-your-site#add-a-locale-dropdown","content":" To navigate seamlessly across languages, add a locale dropdown.  Modify the docusaurus.config.js file:  docusaurus.config.js export default { themeConfig: { navbar: { items: [ { type: &quot;localeDropdown&quot;, }, ], }, }, };   The locale dropdown now appears in your navbar:    ","version":"Next","tagName":"h2"},{"title":"Build your localized site​","type":1,"pageTitle":"Translate your site","url":"/regal-ui-docs/docs/docusaurus/docusaurus-extras/translate-your-site#build-your-localized-site","content":" Build your site for a specific locale:  npm run build -- --locale fr   Or build your site to include all the locales at once:  npm run build  ","version":"Next","tagName":"h2"},{"title":"Markdown Features","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/markdown-features","content":"","keywords":"","version":"Next"},{"title":"Front Matter​","type":1,"pageTitle":"Markdown Features","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/markdown-features#front-matter","content":" Markdown documents have metadata at the top called Front Matter:  my-doc.md --- id: my-doc-id title: My document title description: My document description slug: /my-custom-url --- ## Markdown heading Markdown text with [links](./hello.md)   ","version":"Next","tagName":"h2"},{"title":"Links​","type":1,"pageTitle":"Markdown Features","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/markdown-features#links","content":" Regular Markdown links are supported, using url paths or relative file paths.  Let's see how to [Create a page](/create-a-page).   Let's see how to [Create a page](./create-a-page.md).   Result: Let's see how to Create a page.  ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Markdown Features","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/markdown-features#images","content":" Regular Markdown images are supported.  You can use absolute paths to reference images in the static directory (static/img/docusaurus.png):  ![Docusaurus logo](/img/docusaurus.png)     You can reference images relative to the current file as well. This is particularly useful to colocate images close to the Markdown files using them:  ![Docusaurus logo](./img/docusaurus.png)   ","version":"Next","tagName":"h2"},{"title":"Code Blocks​","type":1,"pageTitle":"Markdown Features","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/markdown-features#code-blocks","content":" Markdown code blocks are supported with Syntax highlighting.  ```jsx title=&quot;src/components/HelloDocusaurus.js&quot; function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; } ```   src/components/HelloDocusaurus.js function HelloDocusaurus() { return &lt;h1&gt;Hello, Docusaurus!&lt;/h1&gt;; }   ","version":"Next","tagName":"h2"},{"title":"Admonitions​","type":1,"pageTitle":"Markdown Features","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/markdown-features#admonitions","content":" Docusaurus has a special syntax to create admonitions and callouts:  :::tip[My tip] Use this awesome feature option ::: :::danger[Take care] This action is dangerous :::   My tip Use this awesome feature option  Take care This action is dangerous  ","version":"Next","tagName":"h2"},{"title":"MDX and React Components​","type":1,"pageTitle":"Markdown Features","url":"/regal-ui-docs/docs/docusaurus/docusaurus-basics/markdown-features#mdx-and-react-components","content":" MDX can make your documentation more interactive and allows using any React components inside Markdown:  export const Highlight = ({children, color}) =&gt; ( &lt;span style={{ backgroundColor: color, borderRadius: '20px', color: '#fff', padding: '10px', cursor: 'pointer', }} onClick={() =&gt; { alert(`You clicked the color ${color} with label ${children}`) }}&gt; {children} &lt;/span&gt; ); This is &lt;Highlight color=&quot;#25c2a0&quot;&gt;Docusaurus green&lt;/Highlight&gt; ! This is &lt;Highlight color=&quot;#1877F2&quot;&gt;Facebook blue&lt;/Highlight&gt; !     This is Docusaurus green !  This is Facebook blue ! ","version":"Next","tagName":"h2"},{"title":"Mocks","type":0,"sectionRef":"#","url":"/regal-ui-docs/docs/tests/mocks/","content":"","keywords":"","version":"Next"},{"title":"Conventions​","type":1,"pageTitle":"Mocks","url":"/regal-ui-docs/docs/tests/mocks/#conventions","content":" Each mocked entity should have the same name as the original entity, prefixed with &quot;Mock&quot;. Example: MockEmailAddress.Each mock function should take an overrides object which allows passing predefined data to the mock. Note: this only applies to mocks for &quot;object&quot; typesTODO: Each mock function should accept a second argument for specifying the seedWhen a property from &quot;EntityA&quot; references &quot;EntityB&quot;, the mock for that property should just call the mock generator for &quot;EntityB&quot; (if available). See the examples below.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Mocks","url":"/regal-ui-docs/docs/tests/mocks/#example","content":" Here's a concrete example of implementing mocks for a few entities.  ","version":"Next","tagName":"h2"},{"title":"Diagram​","type":1,"pageTitle":"Mocks","url":"/regal-ui-docs/docs/tests/mocks/#diagram","content":"   ","version":"Next","tagName":"h3"},{"title":"Type Definitions​","type":1,"pageTitle":"Mocks","url":"/regal-ui-docs/docs/tests/mocks/#type-definitions","content":" info The data models used in this example are not real. For brevity reasons, most of the fields are omitted.  export interface ActivityFeedItem { eventType: string; createdAt: number; updatedAt: number; } export interface MessageEvent extends ActivityFeedItem { content: string; direction: &quot;INBOUND&quot; | &quot;OUTBOUND&quot;; eventType: &quot;message_event&quot;; } export declare type EmailAddress = { name: string; address: string; }; export declare type EmailBaseAttributes = { senderEmail: EmailAddress; toEmails: EmailAddress[]; subject: string; threadId: string; messageId: string; bodySnippet: string; name: &quot;Email Sent&quot; | &quot;Email Received&quot;; direction: &quot;inbound&quot; | &quot;outbound&quot;; }; export interface EmailEvent extends EmailBaseAttributes, ActivityFeedItem { eventType: &quot;email&quot;; } export interface EmailSentEvent extends EmailEvent { name: &quot;Email Sent&quot;; direction: &quot;outbound&quot;; } export interface EmailReceivedEvent extends EmailEvent { name: &quot;Email Received&quot;; direction: &quot;inbound&quot;; } export interface EmailThread { eventType: &quot;email-thread&quot;; threadId: string; events: Array&lt;EmailSentEvent | EmailReceivedEvent&gt;; } export type ActivityFeedItemLike = | MessageEvent | EmailSentEvent | EmailReceivedEvent | EmailThread;   ","version":"Next","tagName":"h3"},{"title":"Mocks​","type":1,"pageTitle":"Mocks","url":"/regal-ui-docs/docs/tests/mocks/#mocks-1","content":" MockActivityFeedItem​  export function MockActivityFeedItem( overrides: Partial&lt;ActivityFeedItem&gt; = {} ): ActivityFeedItem { const result = { eventType: faker.word.words(), createdAt: new Date(faker.date.recent()).getTime(), updatedAt: new Date(faker.date.recent()).getTime(), }; return { ...result, ...overrides }; }   MockMessageEvent​  export function MockMessageEvent( overrides: Partial&lt;MessageEvent&gt; = {} ): MessageEvent { const result = { ...MockActivityFeedItem(), content: faker.word.words(), direction: faker.helpers.arrayElement([&quot;INBOUND&quot;, &quot;OUTBOUND&quot;]), eventType: &quot;message_event&quot;, }; return { ...result, ...overrides }; }   MockEmailAddress​  export function MockEmailAddress( overrides: Partial&lt;EmailAddress&gt; = {} ): EmailAddress { const result = { name: faker.person.fullName(), address: faker.internet.email(), }; return { ...result, ...overrides }; }   MockEmailBaseAttributes​  export function MockEmailBaseAttributes( overrides: Partial&lt;EmailBaseAttributes&gt; = {} ): EmailBaseAttributes { const result = { senderEmail: MockEmailAddress(), toEmails: faker.helpers.multiple(() =&gt; MockEmailAddress()), subject: faker.word.words(), threadId: faker.string.alpha(34), messageId: faker.string.alpha(34), bodySnippet: faker.word.words(), name: faker.helpers.arrayElement([&quot;Email Sent&quot;, &quot;Email Received&quot;]), direction: faker.helpers.arrayElement([&quot;inbound&quot;, &quot;outbound&quot;]), }; return { ...result, ...overrides }; }   MockEmailEvent​  export function MockEmailEvent( overrides: Partial&lt;EmailEvent&gt; = {} ): EmailEvent { const result = { ...MockEmailBaseAttributes(), ...MockActivityFeedItem(), eventType: &quot;email&quot;, }; return { ...result, ...overrides }; }   MockEmailSentEvent​  export function MockEmailSentEvent( overrides: Partial&lt;EmailSentEvent&gt; = {} ): EmailSentEvent { const result = { ...MockEmailEvent(), name: &quot;Email Sent&quot;, direction: &quot;outbound&quot;, }; return { ...result, ...overrides }; }   MockEmailReceivedEvent​  export function MockEmailReceivedEvent( overrides: Partial&lt;EmailReceivedEvent&gt; = {} ): EmailReceivedEvent { const result = { ...MockEmailEvent(), name: &quot;Email Received&quot;, direction: &quot;inbound&quot;, }; return { ...result, ...overrides }; }   MockEmailThread​  export function MockEmailThread( overrides: Partial&lt;EmailThread&gt; = {} ): EmailThread { const result = { eventType: &quot;email-thread&quot;, threadId: faker.string.alpha(34), events: faker.helpers.multiple(() =&gt; faker.helpers.arrayElement([ MockEmailSentEvent(), MockEmailReceivedEvent(), ]) ), }; return { ...result, ...overrides }; }   MockActivityFeedItemLike​  export function MockActivityFeedItemLike( overrides: Partial&lt;ActivityFeedItemLike&gt; = {} ): ActivityFeedItemLike { const result = faker.helpers.arrayElement([ faker.helpers.arrayElement([ MockMessageEvent(), MockEmailSentEvent(), MockEmailReceivedEvent(), MockEmailThread(), ]), ]); return { ...result, ...overrides }; }   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Mocks","url":"/regal-ui-docs/docs/tests/mocks/#usage","content":" Defaults​  const randomMessageEvent = MockMessageEvent(); const randomEmailThread = MockEmailThread(); // returns one of MessageEvent, EmailSentEvent, EmailReceivedEvent or EmailThread const randomActivityFeedItemLike = MockActivityFeedItem();   Overrides​  Properties​  const messageEvent = MockMessageEvent({ content: &quot;Hardcoded message for this particular test&quot;, });   Nested properties​  If you need more control of the threads, for example making sure the sender and to email addresses are correct:  const agentEmail: EmailAddress = { name: &quot;Michael Scott&quot;, address: &quot;michael.scott@regal.io&quot;, }; const contactEmail: EmailAddress = { name: &quot;Holly Flax&quot;, address: &quot;holly.flax@gmail.com&quot;, }; const emailThread = MockEmailThread({ events: [ MockEmailSentEvent({ senderEmail: agentEmail, toEmails: [contactEmail] }), MockEmailReceivedEvent({ senderEmail: contactEmail, toEmails: [agentEmail], }), ], });  ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}