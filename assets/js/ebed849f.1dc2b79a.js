"use strict";(self.webpackChunkregal_ui_docs=self.webpackChunkregal_ui_docs||[]).push([[5696],{25819:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  c: () => (/* binding */ generate)\n});\n\n// UNUSED EXPORTS: getFakerGenerator\n\n;// ./src/lib/generator/category.ts\nfunction generateRegexp(text){const escaped=text.replace(/\\./g,"\\\\.").replace(/\\*/g,".*?");return new RegExp(`^${escaped}$`,"i");}function defineCategories(categories){const matchers=[];for(const[key,value]of Object.entries(categories)){value.forEach(expression=>{matchers.push([generateRegexp(expression),key]);});}return function inferCategory(path){return matchers.find(_ref=>{let[expression]=_ref;return expression.test(path);})?.[1];};}\n;// ./src/lib/generator/generator.ts\n// console.clear();\nconst inferCategory=defineCategories({email:["*email*.address","*.*email*.address","*.*email"],phone:["*.*phone"],name:["*.*agent*name","*.*by","*email*.name"],url:["*.*url"],timestamp:["*.*created*","*.*updated*"],uuid:["*.*uuid"],workerSid:["*.*workerSid"],taskSid:["*.*taskSid"],conversationSid:["*.*conversationSid"],sid:["*.*sid","*.*id"],color:["*.*color*"],emoji:["*.*emoji"],notes:["*.*notes"],friendlyId:["*.*friendlyId"]});function getFakerGenerator(type,path){const category=inferCategory(path);const categoryOrType=category??type;switch(categoryOrType){case"any":case"unknown":case"string":return"faker.word.words()";case"number":return"faker.number.int(10000)";case"boolean":return"faker.datatype.boolean()";case"null":return"null";case"email":return"faker.internet.email()";case"phone":return"faker.phone.number({ style: \'international\' })";case"url":return"faker.image.url()";case"uuid":return"faker.string.uuid()";case"timestamp":return"new Date(faker.date.recent()).getTime()";case"sid":return"faker.string.alpha(34)";case"workerSid":return"\'WK\' + faker.string.alpha(32)";case"taskSid":return"\'WT\' + faker.string.alpha(32)";case"conversationSid":return"\'CH\' + faker.string.alpha(32)";case"color":return"faker.color.rgb()";case"emoji":return"faker.internet.emoji()";case"notes":return"faker.word.words(10)";case"name":return"faker.person.fullName()";case"friendlyId":return"faker.number.int(100)";default:return"faker.word.words()";}}function generatePrimitive(prop,path){return getFakerGenerator(prop.value,path);}function generateConstantValue(prop,path,includeTypes){const value=typeof prop.value==="string"?`"${prop.value}"`:prop.value.toString();if(includeTypes){const[entity,...propPath]=path.split(".");if(entity&&propPath.length){const accessKeys=propPath.map(key=>`["${key}"]`).join("");return`${value} as ${entity}${accessKeys}`;}}return value;}function generateArrayValue(prop,path,includeTypes){const[type]=prop.value;const value=generateValue(type,path,includeTypes);return`faker.helpers.multiple(() => ${type.type==="object"?`(${value})`:value})`;}function generateRecordValue(prop,path){const[keyType,valueType]=prop.value;// const key = generateValue(keyType, path);\n// const value = generateValue(valueType, path);\nreturn`{ /* TODO Record<${keyType.value}, ${valueType.value}> */ }`;}function generateReferenceValue(prop){return`Mock${prop.value}()`;}function generateUnionValue(prop,path,includeTypes){const values=prop.value.map(val=>generateValue(val,path,includeTypes)).join(", ");return`faker.helpers.arrayElement([${values}])`;}function generateIntersectionValue(prop,path,includeTypes){const properties=prop.value.map(item=>{const value=generateValue(item,path,includeTypes);if(item.type==="reference"){// spread the reference types\nreturn`...${value}`;}if(item.type==="object"||item.type==="record"){// remove the curly braces\nif(value.at(0)==="{"&&value.at(-1)==="}"){return value.substring(1,value.length-1);}}return value;}).join(", ");return`{ ${properties} }`;}function generateObjectValue(prop,path,includeTypes){const properties=prop.value.map(item=>generateProperty(item,item.name,path,includeTypes)).join(", ");return`{ ${properties} }`;}function generateFunctionValue(prop){return`() => { /* TODO function */ }`;}function generateValue(prop,path,includeTypes){switch(prop.type){case"primitive":return generatePrimitive(prop,path);case"constant":return generateConstantValue(prop,path,includeTypes);case"reference":return generateReferenceValue(prop);case"union":return generateUnionValue(prop,path,includeTypes);case"intersection":return generateIntersectionValue(prop,path,includeTypes);case"record":return generateRecordValue(prop,path);case"array":return generateArrayValue(prop,path,includeTypes);case"object":return generateObjectValue(prop,path,includeTypes);case"function":return generateFunctionValue(prop);default:return`"/* TODO ${prop.type} */"`;}}function generateProperty(prop,name,path,includeTypes){return`"${name}": ${generateValue(prop,`${path}.${name}`,includeTypes)}`;}function generate(data,includeTypes,useExport){if(includeTypes===void 0){includeTypes=false;}if(useExport===void 0){useExport=false;}const body=data.map(item=>{const overridesType=includeTypes?`: Partial<${item.name}>`:"";const resultType=includeTypes?`: ${item.name}`:"";const exportKeyword=useExport?`export `:"";const anyType=includeTypes?`: any`:"";const output=[];if(item.isExported){switch(item.type){case"alias":{const values=item.entities.map(entity=>`Mock${entity}()`).join(", ");output.push(`${exportKeyword}function Mock${item.name}(overrides${overridesType} = {})${resultType} {`);output.push(`  const result = faker.helpers.arrayElement([`);output.push(`    faker.helpers.arrayElement([${values}])`);output.push(`  ]);`);output.push(`  return { ...result, ...overrides }`);output.push(`}`);output.push("");}return output.join("\\n");case"union":{const values=item.values.map(value=>{return generateConstantValue(value,item.name,includeTypes);}).join(", ");output.push(`${exportKeyword}function Mock${item.name}(overrides${overridesType})${resultType} {`);// output.push(`  const result = faker.helpers.arrayElement([`);\n// output.push(`   ${values}`);\n// output.push(`  ]);`);\n// output.push(`  return overrides ?? result`);\noutput.push(`  return overrides ?? faker.helpers.arrayElement([${values}]);`);output.push(`}`);output.push("");}return output.join("\\n");case"instance":{const inherits=item.inherits?.map(entity=>`...Mock${entity}()`);const properties=item.properties.map(prop=>generateProperty(prop,prop.name,item.name,includeTypes));output.push(`${exportKeyword}function Mock${item.name}(overrides${overridesType} = {})${resultType} {`);output.push(`  const result = {`);if(inherits?.length){output.push(`    ${inherits.join(",\\n    ")},`);}output.push(`    ${properties.join(",\\n    ")}`);output.push(`  };`);output.push(`  return { ...result, ...overrides }`);output.push(`}`);output.push("");}return output.join("\\n");case"placeholder":{// 1\n// output.push(\n//   `${exportKeyword}function Mock${item.name}(overrides?${overridesType})${resultType} {`\n// );\n// 2\n// output.push(\n//   `${exportKeyword}function Mock${item.name}(overrides${\n//     includeTypes ? `?${resultType}` : ""\n//   })${resultType} {`\n// );\noutput.push(`${exportKeyword}function Mock${item.name}(overrides${anyType})${resultType} {`);output.push(`  return {`);output.push(`    /* TODO this is a placeholder because the original type or interface couldn\'t be parsed. */`);output.push(`    ...overrides`);output.push(`  };`);output.push(`}`);output.push("");}return output.join("\\n");case"constant":{const value=generateConstantValue(item.value,item.name,includeTypes);output.push(`${exportKeyword}function Mock${item.name}()${resultType} {`);output.push(`  return ${value};`);output.push(`}`);output.push("");}return output.join("\\n");case"primitive":{const value=generatePrimitive(item.value,"");output.push(`${exportKeyword}function Mock${item.name}()${resultType} {`);output.push(`  return ${value}`);output.push(`}`);output.push("");}return output.join("\\n");case"array":{const value=generateArrayValue(item.value,"",includeTypes);output.push(`${exportKeyword}function Mock${item.name}(overrides${resultType?`?${resultType}`:""})${resultType} {`);output.push(`  const result = ${value}`);output.push(`  return overrides ?? result;`);output.push(`}`);output.push("");}return output.join("\\n");}}});return body.join("\\n");}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25819\n')},16853:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  O: () => (/* binding */ parseContents)\n});\n\n;// ./src/lib/parser/env.ts\n// @ts-ignore\nwindow.process={env:{}};\n// EXTERNAL MODULE: ./node_modules/@babel/parser/lib/index.js\nvar lib = __webpack_require__(22172);\n// EXTERNAL MODULE: ./node_modules/@babel/traverse/lib/index.js\nvar traverse_lib = __webpack_require__(25781);\n// EXTERNAL MODULE: ./node_modules/@babel/types/lib/index.js\nvar types_lib = __webpack_require__(2352);\n;// ./src/lib/parser/types/literal.ts\nfunction parseLiteral(literalType){switch(literalType.literal.type){case"StringLiteral":case"NumericLiteral":case"BooleanLiteral":return{type:"constant",value:literalType.literal.value};default:throw new Error(`Unexpected literal: ${literalType.literal.type}`);}}\n;// ./src/lib/parser/types/union.ts\nfunction parseUnion(union){return{type:"union",value:union.types.map(parseAnnotation)};}\n;// ./src/lib/parser/types/reference.ts\nfunction parseReference(annotation){(0,types_lib.assertIdentifier)(annotation.typeName);switch(annotation.typeName.name){case"Array":(0,types_lib.assertTSTypeParameterInstantiation)(annotation.typeParameters);return{type:"array",value:annotation.typeParameters.params.map(parseAnnotation)};case"Record":(0,types_lib.assertTSTypeParameterInstantiation)(annotation.typeParameters);const[keyParam,valueParam]=annotation.typeParameters.params.map(parseAnnotation);return{type:"record",value:[keyParam,valueParam]};case"Promise":(0,types_lib.assertTSTypeParameterInstantiation)(annotation.typeParameters);return{type:"promise",value:annotation.typeParameters.params.map(parseAnnotation)};default:return{type:"reference",value:annotation.typeName.name};}}\n;// ./src/lib/parser/types/intersection.ts\nfunction parseIntersection(intersection){return{type:"intersection",value:intersection.types.map(parseAnnotation)};}\n;// ./src/lib/parser/types/annotation.ts\nfunction parseAnnotation(annotation){switch(annotation.type){case"TSStringKeyword":return{type:"primitive",value:"string"};case"TSNumberKeyword":return{type:"primitive",value:"number"};case"TSBooleanKeyword":return{type:"primitive",value:"boolean"};case"TSNullKeyword":return{type:"primitive",value:"null"};case"TSAnyKeyword":return{type:"primitive",value:"any"};case"TSUnknownKeyword":return{type:"primitive",value:"unknown"};case"TSLiteralType":return parseLiteral(annotation);case"TSUnionType":return parseUnion(annotation);case"TSIntersectionType":return parseIntersection(annotation);case"TSTypeReference":return parseReference(annotation);case"TSArrayType":return{type:"array",value:[parseAnnotation(annotation.elementType)]};case"TSTypeLiteral":return{type:"object",value:parseTypeLiteral(annotation)};case"TSFunctionType":(0,types_lib.assertTSTypeAnnotation)(annotation.typeAnnotation);return{type:"function",value:parseAnnotation(annotation.typeAnnotation.typeAnnotation)};case"TSParenthesizedType":return parseAnnotation(annotation.typeAnnotation);// case "TSTypeQuery":\n//   return parseTypeQuery(annotation);\n// case "TSTypeOperator":\n//   return parseTypeOperator(annotation);\ndefault:console.log(annotation);throw new Error(`Unexpected type: ${annotation.type}`);}}\n;// ./src/lib/parser/types/type-literal.ts\nfunction parseTypeLiteral(annotation){return annotation.members.filter(member=>!(0,types_lib.isTSIndexSignature)(member)).map(member=>{(0,types_lib.assertTSPropertySignature)(member);(0,types_lib.assertIdentifier)(member.key);(0,types_lib.assertTSTypeAnnotation)(member.typeAnnotation);const name=member.key.name;const optional=member.optional??false;const{type,value}=parseAnnotation(member.typeAnnotation.typeAnnotation);return{name,type,value,optional};});}\n;// ./src/lib/parser/types/type-intersection.ts\nfunction parseTypeIntersection(annotation){const inherits=[];let properties=[];annotation.types.map(type=>{switch(type.type){case"TSTypeReference":const{value}=parseReference(type);inherits.push(value);break;case"TSTypeLiteral":properties=properties.concat(parseTypeLiteral(type));break;}});return{inherits,properties};}\n;// ./src/lib/parser/types/type-union.ts\nfunction parseTypeUnion(annotation){const isLiteralUnion=annotation.types.every(type=>(0,types_lib.isTSLiteralType)(type));if(isLiteralUnion){const{type,value}=parseUnion(annotation);return{type,values:value};}return{type:"alias",entities:annotation.types.map(type=>{(0,types_lib.assertTSTypeReference)(type);(0,types_lib.assertIdentifier)(type.typeName);return type.typeName.name;})};}\n;// ./src/lib/parser/parser.ts\nfunction parseContents(contents){const ast=(0,lib.parse)(contents,{sourceType:"module",ranges:false,plugins:["jsx","typescript"]});const entities=[];(0,traverse_lib["default"])(ast,{TSTypeAliasDeclaration(path){const{node}=path;(0,types_lib.assertIdentifier)(node.id);const isExported=path.parent.type==="ExportNamedDeclaration";try{switch(node.typeAnnotation.type){case"TSTypeLiteral":{const properties=parseTypeLiteral(node.typeAnnotation);entities.push({name:node.id.name,type:"instance",properties,isExported});}break;case"TSIntersectionType":{const{properties,inherits}=parseTypeIntersection(node.typeAnnotation);entities.push({name:node.id.name,type:"instance",properties,inherits,isExported});}break;case"TSUnionType":{const entity=parseTypeUnion(node.typeAnnotation);entities.push({name:node.id.name,isExported,...entity});}break;case"TSLiteralType":{const value=parseLiteral(node.typeAnnotation);entities.push({name:node.id.name,type:"constant",value,isExported});break;}case"TSArrayType":{const value=parseAnnotation(node.typeAnnotation);entities.push({name:node.id.name,type:"array",value,isExported});}break;// case "TSTypeQuery":\n//   {\n//     const referenceType = parseTypeQuery(node.typeAnnotation);\n//     const value = findDeclaration(referenceType.value as string, ast);\n//     entities.push({\n//       name: node.id.name,\n//       type: value.type,\n//       value,\n//     });\n//   }\n//   break;\n// case "TSIndexedAccessType":\n//   {\n//     // const value = parseTypeIndexed(\n//     //   node.typeAnnotation,\n//     //   entities\n//     // ) as ASTPrimitiveProperty;\n//     // entities.push({\n//     //   name: node.id.name,\n//     //   type: value.type,\n//     //   value,\n//     // });\n//     console.log(\n//       ">>> INDEXED",\n//       parseTypeIndexed(node.typeAnnotation, entities, ast)\n//     );\n//   }\n//   break;\ndefault:console.log(`Couldn\'t parse ${node.typeAnnotation.type}`);entities.push({name:node.id.name,type:"placeholder",isExported});}}catch(e){console.log(e);// we couldn\'t fully parse this entity\n// but we stil want to be able to reference it from other entities\nentities.push({name:node.id.name,type:"placeholder",isExported});}},TSInterfaceDeclaration(path){const{node}=path;(0,types_lib.assertIdentifier)(node.id);const isExported=path.parent.type==="ExportNamedDeclaration";try{const properties=node.body.body.map(prop=>{(0,types_lib.assertTSPropertySignature)(prop);(0,types_lib.assertIdentifier)(prop.key);(0,types_lib.assertTSTypeAnnotation)(prop.typeAnnotation);return{name:prop.key.name,optional:prop.optional??false,...parseAnnotation(prop.typeAnnotation.typeAnnotation)};});const inherits=node.extends?.map(item=>{(0,types_lib.assertTSExpressionWithTypeArguments)(item);(0,types_lib.assertIdentifier)(item.expression);return item.expression.name;})??[];entities.push({name:node.id.name,type:"instance",properties,inherits,isExported});}catch(e){console.log(e);// we couldn\'t fully parse this entity\n// but we stil want to be able to reference it from other entities\nentities.push({name:node.id.name,type:"placeholder",isExported});}}});return entities;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16853\n')},76778:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ GeneratorPage)\n/* harmony export */ });\n/* harmony import */ var _docusaurus_BrowserOnly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(78478);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96540);\n/* harmony import */ var _docusaurus_theme_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(95293);\n/* harmony import */ var _theme_Layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24837);\n/* harmony import */ var _monaco_editor_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(68553);\n/* harmony import */ var _styles_module_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(45904);\n/* harmony import */ var _lib_parser_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(16853);\n/* harmony import */ var _lib_generator_generator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(25819);\n/* harmony import */ var react_split__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(85130);\n/* harmony import */ var _faker_js_faker__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(59512);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(74848);\n// import useDocusaurusContext from "@docusaurus/useDocusaurusContext";\n// import initialContent from "./feed";\n// import initialContent from "./__mocks__/code";\nconst initialContent=`\n`;function generateImports(entities){const importedTypes=entities.filter(entity=>entity.isExported).map(entity=>entity.name).join(", ");if(!importedTypes.length){return"";}return["// #region Imports",`import type { ${importedTypes} } from "types";`,"var faker: any;","// #endregion"].join("\\n");}function generateBody(code){const ast=(0,_lib_parser_parser__WEBPACK_IMPORTED_MODULE_5__/* .parseContents */ .O)(code);return[generateImports(ast),(0,_lib_generator_generator__WEBPACK_IMPORTED_MODULE_6__/* .generate */ .c)(ast,true,true)].join("\\n\\n");}let code=initialContent;function EditorGroup(){const{colorMode}=(0,_docusaurus_theme_common__WEBPACK_IMPORTED_MODULE_9__/* .useColorMode */ .G)();const[generatedCode,setGeneratedCode]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{try{return generateBody(code);}catch{return"";}});const[generatedJson,setGeneratedJson]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();const handleEditorChange=value=>{if(value!==undefined){code=value;try{setGeneratedCode(generateBody(value));}catch{}}};const handleSecondEditorChange=value=>{if(value!==undefined){setGeneratedCode(value);}};const evalCode=mockName=>{try{const jsCode=(0,_lib_generator_generator__WEBPACK_IMPORTED_MODULE_6__/* .generate */ .c)((0,_lib_parser_parser__WEBPACK_IMPORTED_MODULE_5__/* .parseContents */ .O)(code),false,false);const fn=eval(`(faker) => {${jsCode}; return ${mockName}(); }`);setGeneratedJson(JSON.stringify(fn(_faker_js_faker__WEBPACK_IMPORTED_MODULE_10__.a),null,2));}catch(e){console.error(e);}};function handleMocksEditorDidMount(editor,monaco){// Explanation:\n// Press F1 => the action will appear and run if it is enabled\n// Press Ctrl-F10 => the action will run if it is enabled\n// Press Chord Ctrl-K, Ctrl-M => the action will run if it is enabled\neditor.addAction({// An unique identifier of the contributed action.\nid:"mock-generator",// A label of the action that will be presented to the user.\nlabel:"Generate Mock",// An optional array of keybindings for the action.\nkeybindings:[monaco.KeyMod.CtrlCmd|monaco.KeyCode.F10,// chord\nmonaco.KeyMod.chord(monaco.KeyMod.CtrlCmd|monaco.KeyCode.KeyK,monaco.KeyMod.CtrlCmd|monaco.KeyCode.KeyM)],// A precondition for this action.\nprecondition:null,// A rule to evaluate on top of the precondition in order to dispatch the keybindings.\nkeybindingContext:null,contextMenuGroupId:"navigation",contextMenuOrder:1,// Method that will be executed when the action is triggered.\n// @param editor The editor instance is passed in as a convenience\nrun:function(ed){const position=ed.getPosition();const word=ed.getModel()?.getWordAtPosition(position);if(word){evalCode(word?.word);}}});}return/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)("div",{className:_styles_module_css__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A.page,children:/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(react_split__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .A,{className:_styles_module_css__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A.container,gutterSize:8/*sizes={[25, 50, 25]}*/,children:[/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)("div",{className:_styles_module_css__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A.editor,children:/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_monaco_editor_react__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay,{height:"100%",defaultLanguage:"typescript",defaultValue:code,theme:colorMode==="dark"?"vs-dark":"vs-light",onChange:handleEditorChange,options:{scrollBeyondLastLine:false,minimap:{enabled:false}},defaultPath:"types.ts"})}),/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)("div",{className:_styles_module_css__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A.editor,children:/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_monaco_editor_react__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay,{height:"100%",defaultLanguage:"typescript",defaultValue:generatedCode,value:generatedCode,theme:colorMode==="dark"?"vs-dark":"vs-light",onChange:handleSecondEditorChange,options:{scrollBeyondLastLine:false,minimap:{enabled:false}},defaultPath:"mocks.ts",onMount:handleMocksEditorDidMount})}),/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)("div",{className:_styles_module_css__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A.editor,children:/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_monaco_editor_react__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay,{height:"100%",defaultLanguage:"json",defaultValue:"",value:generatedJson,theme:colorMode==="dark"?"vs-dark":"vs-light",options:{scrollBeyondLastLine:false,lineNumbers:"off"}})})]})});}function GeneratorPage(){// const { siteConfig } = useDocusaurusContext();\nreturn/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_docusaurus_BrowserOnly__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A,{fallback:/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)("div",{children:"Mock Generator Page"}),children:()=>/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_theme_Layout__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A,{title:"Mock Generator Page",description:"Tools for generating mocks",noFooter:true,children:/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(EditorGroup,{})})});}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///76778\n')},70317:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Index)\n/* harmony export */ });\n/* harmony import */ var _docusaurus_BrowserOnly__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(78478);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74848);\nfunction Index(){return/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_docusaurus_BrowserOnly__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A,{fallback:/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("h1",{children:"Mock Generator Page"}),children:()=>{const Page=(__webpack_require__(76778)/* ["default"] */ .A);return/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Page,{});}});}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAzMTcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRWUsUUFBUyxDQUFBRyxLQUFLQSxDQUFBLENBQUcsQ0FDOUIsbUJBQ0VELHNEQUFBLENBQUNGLHdFQUFXLEVBQUNJLFFBQVEsY0FBRUYsc0RBQUEsT0FBQUcsUUFBQSxDQUFJLHFCQUFtQixDQUFJLENBQUUsQ0FBQUEsUUFBQSxDQUNqREEsQ0FBQSxHQUFNLENBQ0wsS0FBTSxDQUFBQyxJQUFJLENBQUdDLGdEQUFzQyxDQUNuRCxtQkFBT0wsc0RBQUEsQ0FBQ0ksSUFBSSxHQUFFLENBQUMsQ0FDakIsQ0FBQyxDQUNVLENBQUMsQ0FFbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vc3JjL3BhZ2VzL21vY2tzL2dlbmVyYXRvci50c3g/YzE1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnJvd3Nlck9ubHkgZnJvbSBcIkBkb2N1c2F1cnVzL0Jyb3dzZXJPbmx5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEluZGV4KCkge1xuICByZXR1cm4gKFxuICAgIDxCcm93c2VyT25seSBmYWxsYmFjaz17PGgxPk1vY2sgR2VuZXJhdG9yIFBhZ2U8L2gxPn0+XG4gICAgICB7KCkgPT4ge1xuICAgICAgICBjb25zdCBQYWdlID0gcmVxdWlyZShcIi4vX2dlbmVyYXRvcl9jbGllbnRcIikuZGVmYXVsdDtcbiAgICAgICAgcmV0dXJuIDxQYWdlIC8+O1xuICAgICAgfX1cbiAgICA8L0Jyb3dzZXJPbmx5PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIkJyb3dzZXJPbmx5IiwianN4IiwiX2pzeCIsIkluZGV4IiwiZmFsbGJhY2siLCJjaGlsZHJlbiIsIlBhZ2UiLCJyZXF1aXJlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70317\n')},45904:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"page":"page_naXY","container":"container_KapK","editor":"editor_Wu4G","split":"split_FEIX","actionToolbar":"actionToolbar_G27i","hidden":"hidden_RwEk"});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU5MDQuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQSxpRUFBZSxDQUFDLHdKQUF3SiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9zcmMvcGFnZXMvbW9ja3Mvc3R5bGVzLm1vZHVsZS5jc3M/YTllMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcInBhZ2VcIjpcInBhZ2VfbmFYWVwiLFwiY29udGFpbmVyXCI6XCJjb250YWluZXJfS2FwS1wiLFwiZWRpdG9yXCI6XCJlZGl0b3JfV3U0R1wiLFwic3BsaXRcIjpcInNwbGl0X0ZFSVhcIixcImFjdGlvblRvb2xiYXJcIjpcImFjdGlvblRvb2xiYXJfRzI3aVwiLFwiaGlkZGVuXCI6XCJoaWRkZW5fUndFa1wifTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45904\n')}}]);