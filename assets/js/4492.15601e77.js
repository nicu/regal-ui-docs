"use strict";(self.webpackChunkregal_ui_docs=self.webpackChunkregal_ui_docs||[]).push([[4492],{50053:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseClone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68675);\n\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return (0,_baseClone_js__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A)(value, CLONE_SYMBOLS_FLAG);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clone);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAwNTMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF3Qzs7QUFFeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLEdBQUc7QUFDaEI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVEsSUFBSSxRQUFRO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0VBQVM7QUFDbEI7O0FBRUEsaUVBQWUsS0FBSyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2xvbmUuanM/YjMwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmFzZUNsb25lIGZyb20gJy4vX2Jhc2VDbG9uZS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZURlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50053\n")},84492:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  render: () => (/* binding */ render)\n});\n\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-66SQ7PYY.mjs\nvar chunk_66SQ7PYY = __webpack_require__(37938);\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-7NZE2EM7.mjs\nvar chunk_7NZE2EM7 = __webpack_require__(1282);\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-OPO4IU42.mjs + 12 modules\nvar chunk_OPO4IU42 = __webpack_require__(64532);\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-3JNJP5BE.mjs\nvar chunk_3JNJP5BE = __webpack_require__(47588);\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-3X56UNUX.mjs\nvar chunk_3X56UNUX = __webpack_require__(33115);\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6JOS74DS.mjs + 1 modules\nvar chunk_6JOS74DS = __webpack_require__(10483);\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-7DKRZKHE.mjs\nvar chunk_7DKRZKHE = __webpack_require__(8159);\n// EXTERNAL MODULE: ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6DBFFHIP.mjs + 3 modules\nvar chunk_6DBFFHIP = __webpack_require__(10009);\n// EXTERNAL MODULE: ./node_modules/dagre-d3-es/src/dagre/index.js + 62 modules\nvar dagre = __webpack_require__(62334);\n// EXTERNAL MODULE: ./node_modules/lodash-es/isUndefined.js\nvar isUndefined = __webpack_require__(69592);\n// EXTERNAL MODULE: ./node_modules/lodash-es/clone.js\nvar clone = __webpack_require__(50053);\n// EXTERNAL MODULE: ./node_modules/lodash-es/map.js\nvar map = __webpack_require__(74722);\n// EXTERNAL MODULE: ./node_modules/dagre-d3-es/src/graphlib/graph.js + 1 modules\nvar graph = __webpack_require__(37981);\n;// ./node_modules/dagre-d3-es/src/graphlib/json.js\n\n\n\n\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!isUndefined/* default */.A(g.graph())) {\n    json.value = clone/* default */.A(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return map/* default */.A(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!isUndefined/* default */.A(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!isUndefined/* default */.A(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return map/* default */.A(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!isUndefined/* default */.A(e.name)) {\n      edge.name = e.name;\n    }\n    if (!isUndefined/* default */.A(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n\n// EXTERNAL MODULE: ./node_modules/dagre-d3-es/src/graphlib/index.js\nvar graphlib = __webpack_require__(697);\n;// ./node_modules/mermaid/dist/chunks/mermaid.core/dagre-4EVJKHTY.mjs\n\n\n\n\n\n\n\n\n\n// src/rendering-util/layout-algorithms/dagre/index.js\n\n\n\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\n\n\nvar clusterDb = /* @__PURE__ */ new Map();\nvar descendants = /* @__PURE__ */ new Map();\nvar parents = /* @__PURE__ */ new Map();\nvar clear4 = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, "clear");\nvar isDescendant = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  chunk_6DBFFHIP/* log */.Rm.trace("In isDescendant", ancestorId, " ", id, " = ", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, "isDescendant");\nvar edgeInCluster = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  chunk_6DBFFHIP/* log */.Rm.info("Descendants of ", clusterId, " is ", clusterDescendants);\n  chunk_6DBFFHIP/* log */.Rm.info("Edge is ", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    chunk_6DBFFHIP/* log */.Rm.debug("Tilt, ", clusterId, ",not in descendants");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, "edgeInCluster");\nvar copy = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((clusterId, graph, newGraph, rootId) => {\n  chunk_6DBFFHIP/* log */.Rm.warn(\n    "Copying children of ",\n    clusterId,\n    "root",\n    rootId,\n    "data",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  chunk_6DBFFHIP/* log */.Rm.warn("Copying (nodes) clusterId", clusterId, "nodes", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      chunk_6DBFFHIP/* log */.Rm.info("cp ", node, " to ", rootId, " with parent ", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        chunk_6DBFFHIP/* log */.Rm.warn("Setting parent", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        chunk_6DBFFHIP/* log */.Rm.debug("Setting parent", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        chunk_6DBFFHIP/* log */.Rm.info("In copy ", clusterId, "root", rootId, "data", graph.node(clusterId), rootId);\n        chunk_6DBFFHIP/* log */.Rm.debug(\n          "Not Setting parent for node=",\n          node,\n          "cluster!==rootId",\n          clusterId !== rootId,\n          "node!==clusterId",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      chunk_6DBFFHIP/* log */.Rm.debug("Copying Edges", edges);\n      edges.forEach((edge) => {\n        chunk_6DBFFHIP/* log */.Rm.info("Edge", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        chunk_6DBFFHIP/* log */.Rm.info("Edge data", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            chunk_6DBFFHIP/* log */.Rm.info("Copying as ", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            chunk_6DBFFHIP/* log */.Rm.info("newGraph edges ", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            chunk_6DBFFHIP/* log */.Rm.info(\n              "Skipping copy of edge ",\n              edge.v,\n              "--\x3e",\n              edge.w,\n              " rootId: ",\n              rootId,\n              " clusterId:",\n              clusterId\n            );\n          }\n        } catch (e) {\n          chunk_6DBFFHIP/* log */.Rm.error(e);\n        }\n      });\n    }\n    chunk_6DBFFHIP/* log */.Rm.debug("Removing node", node);\n    graph.removeNode(node);\n  });\n}, "copy");\nvar extractDescendants = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, "extractDescendants");\nvar findCommonEdges = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((graph, id1, id2) => {\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map((edge) => {\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\n  });\n  const edges2Prim = edges2.map((edge) => {\n    return { v: edge.v, w: edge.w };\n  });\n  const result = edges1Prim.filter((edgeIn1) => {\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, "findCommonEdges");\nvar findNonClusterChild = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((id, graph, clusterId) => {\n  const children = graph.children(id);\n  chunk_6DBFFHIP/* log */.Rm.trace("Searching children of id ", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, "findNonClusterChild");\nvar getAnchorId = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((id) => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, "getAnchorId");\nvar adjustClustersAndEdges = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((graph, depth) => {\n  if (!graph || depth > 10) {\n    chunk_6DBFFHIP/* log */.Rm.debug("Opting out, no graph ");\n    return;\n  } else {\n    chunk_6DBFFHIP/* log */.Rm.debug("Opting in, graph ");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      chunk_6DBFFHIP/* log */.Rm.warn(\n        "Cluster identified",\n        id,\n        " Replacement id in edges: ",\n        findNonClusterChild(id, graph, id)\n      );\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      chunk_6DBFFHIP/* log */.Rm.debug("Cluster identified", id, descendants);\n      edges.forEach((edge) => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          chunk_6DBFFHIP/* log */.Rm.warn("Edge: ", edge, " leaves cluster ", id);\n          chunk_6DBFFHIP/* log */.Rm.warn("Descendants of XXX ", id, ": ", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      chunk_6DBFFHIP/* log */.Rm.debug("Not a cluster ", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    chunk_6DBFFHIP/* log */.Rm.warn("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(e));\n    chunk_6DBFFHIP/* log */.Rm.warn("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    chunk_6DBFFHIP/* log */.Rm.warn(\n      "Fix XXX",\n      clusterDb,\n      "ids:",\n      e.v,\n      e.w,\n      "Translating: ",\n      clusterDb.get(e.v),\n      " --- ",\n      clusterDb.get(e.w)\n    );\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      chunk_6DBFFHIP/* log */.Rm.warn("Fixing and trying - removing XXX", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      chunk_6DBFFHIP/* log */.Rm.warn("Fix Replacing with XXX", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  chunk_6DBFFHIP/* log */.Rm.warn("Adjusted Graph", write(graph));\n  extractor(graph, 0);\n  chunk_6DBFFHIP/* log */.Rm.trace(clusterDb);\n}, "adjustClustersAndEdges");\nvar extractor = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((graph, depth) => {\n  chunk_6DBFFHIP/* log */.Rm.warn("extractor - ", depth, write(graph), graph.children("D"));\n  if (depth > 10) {\n    chunk_6DBFFHIP/* log */.Rm.error("Bailing out");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    chunk_6DBFFHIP/* log */.Rm.debug("Done, no node has children", graph.nodes());\n    return;\n  }\n  chunk_6DBFFHIP/* log */.Rm.debug("Nodes = ", nodes, depth);\n  for (const node of nodes) {\n    chunk_6DBFFHIP/* log */.Rm.debug(\n      "Extracting node",\n      node,\n      clusterDb,\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children("D"),\n      " Depth ",\n      depth\n    );\n    if (!clusterDb.has(node)) {\n      chunk_6DBFFHIP/* log */.Rm.debug("Not a cluster", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      chunk_6DBFFHIP/* log */.Rm.warn(\n        "Cluster without external connections, without a parent and with children",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === "TB" ? "LR" : "TB";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        chunk_6DBFFHIP/* log */.Rm.warn("Fixing dir", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib/* Graph */.T({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      chunk_6DBFFHIP/* log */.Rm.warn("Old graph before copy", write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      chunk_6DBFFHIP/* log */.Rm.warn("New graph after copy node: (", node, ")", write(clusterGraph));\n      chunk_6DBFFHIP/* log */.Rm.debug("Old graph after copy", write(graph));\n    } else {\n      chunk_6DBFFHIP/* log */.Rm.warn(\n        "Cluster ** ",\n        node,\n        " **not meeting the criteria !externalConnections:",\n        !clusterDb.get(node).externalConnections,\n        " no parent: ",\n        !graph.parent(node),\n        " children ",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children("D"),\n        depth\n      );\n      chunk_6DBFFHIP/* log */.Rm.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  chunk_6DBFFHIP/* log */.Rm.warn("New list of nodes", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    chunk_6DBFFHIP/* log */.Rm.warn(" Now next level", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, "extractor");\nvar sorter = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, "sorter");\nvar sortNodesByHierarchy = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)((graph) => sorter(graph, graph.children()), "sortNodesByHierarchy");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  chunk_6DBFFHIP/* log */.Rm.warn("Graph in recursive render:XAX", write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  chunk_6DBFFHIP/* log */.Rm.trace("Dir in recursive render - dir:", dir);\n  const elem = _elem.insert("g").attr("class", "root");\n  if (!graph.nodes()) {\n    chunk_6DBFFHIP/* log */.Rm.info("No nodes found for", graph);\n  } else {\n    chunk_6DBFFHIP/* log */.Rm.info("Recursive render XXX", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    chunk_6DBFFHIP/* log */.Rm.info("Recursive edges", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert("g").attr("class", "clusters");\n  const edgePaths = elem.insert("g").attr("class", "edgePaths");\n  const edgeLabels = elem.insert("g").attr("class", "edgeLabels");\n  const nodes = elem.insert("g").attr("class", "nodes");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        chunk_6DBFFHIP/* log */.Rm.trace(\n          "Setting data for parent cluster XXX\\n Node.id = ",\n          v,\n          "\\n data=",\n          data.height,\n          "\\nParent cluster",\n          parentCluster.height\n        );\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          chunk_6DBFFHIP/* log */.Rm.trace("Setting parent", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      chunk_6DBFFHIP/* log */.Rm.info("(Insert) Node XXX" + v + ": " + JSON.stringify(graph.node(v)));\n      if (node?.clusterNode) {\n        chunk_6DBFFHIP/* log */.Rm.info("Cluster identified XBX", v, node.width, graph.node(v));\n        const { ranksep, nodesep } = graph.graph();\n        node.graph.setGraph({\n          ...node.graph.graph(),\n          ranksep: ranksep + 25,\n          nodesep\n        });\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        (0,chunk_7NZE2EM7/* updateNodeBounds */.lC)(node, newEl);\n        node.diff = o.diff || 0;\n        chunk_6DBFFHIP/* log */.Rm.info(\n          "New compound node after recursive render XAX",\n          v,\n          "width",\n          // node,\n          node.width,\n          "height",\n          node.height\n          // node.x,\n          // node.y\n        );\n        (0,chunk_7NZE2EM7/* setNodeElem */.U7)(newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          chunk_6DBFFHIP/* log */.Rm.trace(\n            "Cluster - the non recursive path XBX",\n            v,\n            node.id,\n            node,\n            node.width,\n            "Graph:",\n            graph\n          );\n          chunk_6DBFFHIP/* log */.Rm.trace(findNonClusterChild(node.id, graph));\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\n        } else {\n          chunk_6DBFFHIP/* log */.Rm.trace("Node - the non recursive path XAX", v, nodes, graph.node(v), dir);\n          await (0,chunk_7NZE2EM7/* insertNode */.on)(nodes, graph.node(v), { config: siteConfig, dir });\n        }\n      }\n    })\n  );\n  const processEdges = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)(async () => {\n    const edgePromises = graph.edges().map(async function(e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      chunk_6DBFFHIP/* log */.Rm.info("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(e));\n      chunk_6DBFFHIP/* log */.Rm.info("Edge " + e.v + " -> " + e.w + ": ", e, " ", JSON.stringify(graph.edge(e)));\n      chunk_6DBFFHIP/* log */.Rm.info(\n        "Fix",\n        clusterDb,\n        "ids:",\n        e.v,\n        e.w,\n        "Translating: ",\n        clusterDb.get(e.v),\n        clusterDb.get(e.w)\n      );\n      await (0,chunk_66SQ7PYY/* insertEdgeLabel */.jP)(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, "processEdges");\n  await processEdges();\n  chunk_6DBFFHIP/* log */.Rm.info("Graph before layout:", JSON.stringify(write(graph)));\n  chunk_6DBFFHIP/* log */.Rm.info("############################################# XXX");\n  chunk_6DBFFHIP/* log */.Rm.info("###                Layout                 ### XXX");\n  chunk_6DBFFHIP/* log */.Rm.info("############################################# XXX");\n  (0,dagre/* layout */.Zp)(graph);\n  chunk_6DBFFHIP/* log */.Rm.info("Graph after layout:", JSON.stringify(write(graph)));\n  let diff = 0;\n  let { subGraphTitleTotalMargin } = (0,chunk_3X56UNUX/* getSubGraphTitleMargins */.O)(siteConfig);\n  await Promise.all(\n    sortNodesByHierarchy(graph).map(async function(v) {\n      const node = graph.node(v);\n      chunk_6DBFFHIP/* log */.Rm.info(\n        "Position XBX => " + v + ": (" + node.x,\n        "," + node.y,\n        ") width: ",\n        node.width,\n        " height: ",\n        node.height\n      );\n      if (node?.clusterNode) {\n        node.y += subGraphTitleTotalMargin;\n        chunk_6DBFFHIP/* log */.Rm.info(\n          "A tainted cluster node XBX1",\n          v,\n          node.id,\n          node.width,\n          node.height,\n          node.x,\n          node.y,\n          graph.parent(v)\n        );\n        clusterDb.get(node.id).node = node;\n        (0,chunk_7NZE2EM7/* positionNode */.U_)(node);\n      } else {\n        if (graph.children(v).length > 0) {\n          chunk_6DBFFHIP/* log */.Rm.info(\n            "A pure cluster node XBX1",\n            v,\n            node.id,\n            node.x,\n            node.y,\n            node.width,\n            node.height,\n            graph.parent(v)\n          );\n          node.height += subGraphTitleTotalMargin;\n          graph.node(node.parentId);\n          const halfPadding = node?.padding / 2 || 0;\n          const labelHeight = node?.labelBBox?.height || 0;\n          const offsetY = labelHeight - halfPadding || 0;\n          chunk_6DBFFHIP/* log */.Rm.debug("OffsetY", offsetY, "labelHeight", labelHeight, "halfPadding", halfPadding);\n          await (0,chunk_7NZE2EM7/* insertCluster */.U)(clusters, node);\n          clusterDb.get(node.id).node = node;\n        } else {\n          const parent = graph.node(node.parentId);\n          node.y += subGraphTitleTotalMargin / 2;\n          chunk_6DBFFHIP/* log */.Rm.info(\n            "A regular node XBX1 - using the padding",\n            node.id,\n            "parent",\n            node.parentId,\n            node.width,\n            node.height,\n            node.x,\n            node.y,\n            "offsetY",\n            node.offsetY,\n            "parent",\n            parent,\n            parent?.offsetY,\n            node\n          );\n          (0,chunk_7NZE2EM7/* positionNode */.U_)(node);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    chunk_6DBFFHIP/* log */.Rm.info("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = (0,chunk_66SQ7PYY/* insertEdge */.Jo)(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    (0,chunk_66SQ7PYY/* positionEdgeLabel */.T_)(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    chunk_6DBFFHIP/* log */.Rm.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  chunk_6DBFFHIP/* log */.Rm.warn("Returning from recursive render XAX", elem, diff);\n  return { elem, diff };\n}, "recursiveRender");\nvar render = /* @__PURE__ */ (0,chunk_6DBFFHIP/* __name */.K2)(async (data4Layout, svg) => {\n  const graph = new graphlib/* Graph */.T({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const element = svg.select("g");\n  (0,chunk_66SQ7PYY/* markers_default */.g0)(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  (0,chunk_7NZE2EM7/* clear2 */.gh)();\n  (0,chunk_66SQ7PYY/* clear */.IU)();\n  (0,chunk_7NZE2EM7/* clear */.IU)();\n  clear4();\n  data4Layout.nodes.forEach((node) => {\n    graph.setNode(node.id, { ...node });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  chunk_6DBFFHIP/* log */.Rm.debug("Edges:", data4Layout.edges);\n  data4Layout.edges.forEach((edge) => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + "---" + nodeId + "---1";\n      const specialId2 = nodeId + "---" + nodeId + "---2";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: "",\n        label: "",\n        padding: 0,\n        shape: "labelRect",\n        // shape: \'rect\',\n        style: "",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: "",\n        padding: 0,\n        // shape: \'rect\',\n        shape: "labelRect",\n        label: "",\n        style: "",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = "";\n      edge1.arrowTypeEnd = "none";\n      edge1.id = nodeId + "-cyclic-special-1";\n      edgeMid.arrowTypeEnd = "none";\n      edgeMid.id = nodeId + "-cyclic-special-mid";\n      edge2.label = "";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + "-cyclic-special-2";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + "-cyclic-special-0");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + "-cyclic-special-1");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + "-cyc<lic-special-2");\n    } else {\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\n    }\n  });\n  chunk_6DBFFHIP/* log */.Rm.warn("Graph at first:", JSON.stringify(write(graph)));\n  adjustClustersAndEdges(graph);\n  chunk_6DBFFHIP/* log */.Rm.warn("Graph after XAX:", JSON.stringify(write(graph)));\n  const siteConfig = (0,chunk_6DBFFHIP/* getConfig2 */.D7)();\n  await recursiveRender(\n    element,\n    graph,\n    data4Layout.type,\n    data4Layout.diagramId,\n    void 0,\n    siteConfig\n  );\n}, "render");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///84492\n')}}]);