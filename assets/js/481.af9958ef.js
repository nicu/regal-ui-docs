(self.webpackChunkregal_ui_docs=self.webpackChunkregal_ui_docs||[]).push([[481],{17833:(module,exports,__webpack_require__)=>{eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(40736)(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17833\n")},40736:(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(6585);\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40736\n")},97627:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\nmodule.exports = __webpack_require__(14652);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc2MjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwyQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL2dsb2JhbHMvaW5kZXguanM/ODU0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZ2xvYmFscy5qc29uJyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///97627\n")},65879:(__unused_webpack_module,exports)=>{eval('// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\n// License: MIT. (See LICENSE.)\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}))\n\n// This regex comes from regex.coffee, and is inserted here by generate-index.js\n// (run `npm run build`).\nexports["default"] = /(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g\n\nexports.matchToToken = function(match) {\n  var token = {type: "invalid", value: match[0], closed: undefined}\n       if (match[ 1]) token.type = "string" , token.closed = !!(match[3] || match[4])\n  else if (match[ 5]) token.type = "comment"\n  else if (match[ 6]) token.type = "comment", token.closed = !!match[7]\n  else if (match[ 8]) token.type = "regex"\n  else if (match[ 9]) token.type = "number"\n  else if (match[10]) token.type = "name"\n  else if (match[11]) token.type = "punctuator"\n  else if (match[12]) token.type = "whitespace"\n  return token\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU4NzkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQSw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUY7QUFDQTtBQUNBLGtCQUFlLDhFQUE4RSxNQUFNLE9BQU8sSUFBSSxHQUFHLElBQUksS0FBSyxpSkFBaUosK0JBQStCLElBQUksOENBQThDLGtKQUFrSixFQUFFLE1BQU0sYUFBYSwyQkFBMkIsRUFBRSxtQkFBbUIsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLE9BQU8sSUFBSSxXQUFXLE9BQU87O0FBRWxtQixvQkFBb0I7QUFDcEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9qcy10b2tlbnMvaW5kZXguanM/NjhhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNCwgMjAxNSwgMjAxNiwgMjAxNywgMjAxOCBTaW1vbiBMeWRlbGxcbi8vIExpY2Vuc2U6IE1JVC4gKFNlZSBMSUNFTlNFLilcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KVxuXG4vLyBUaGlzIHJlZ2V4IGNvbWVzIGZyb20gcmVnZXguY29mZmVlLCBhbmQgaXMgaW5zZXJ0ZWQgaGVyZSBieSBnZW5lcmF0ZS1pbmRleC5qc1xuLy8gKHJ1biBgbnBtIHJ1biBidWlsZGApLlxuZXhwb3J0cy5kZWZhdWx0ID0gLygoWydcIl0pKD86KD8hXFwyfFxcXFwpLnxcXFxcKD86XFxyXFxufFtcXHNcXFNdKSkqKFxcMik/fGAoPzpbXmBcXFxcJF18XFxcXFtcXHNcXFNdfFxcJCg/IVxceyl8XFwkXFx7KD86W157fV18XFx7W159XSpcXH0/KSpcXH0/KSooYCk/KXwoXFwvXFwvLiopfChcXC9cXCooPzpbXipdfFxcKig/IVxcLykpKihcXCpcXC8pPyl8KFxcLyg/IVxcKikoPzpcXFsoPzooPyFbXFxdXFxcXF0pLnxcXFxcLikqXFxdfCg/IVtcXC9cXF1cXFxcXSkufFxcXFwuKStcXC8oPzooPyFcXHMqKD86XFxifFtcXHUwMDgwLVxcdUZGRkYkXFxcXCdcIn4oe118WytcXC0hXSg/IT0pfFxcLj9cXGQpKXxbZ21peXVzXXsxLDZ9XFxiKD8hW1xcdTAwODAtXFx1RkZGRiRcXFxcXXxcXHMqKD86WytcXC0qJSZ8Xjw+IT0/KHtdfFxcLyg/IVtcXC8qXSkpKSkpfCgwW3hYXVtcXGRhLWZBLUZdK3wwW29PXVswLTddK3wwW2JCXVswMV0rfCg/OlxcZCpcXC5cXGQrfFxcZCtcXC4/KSg/OltlRV1bKy1dP1xcZCspPyl8KCg/IVxcZCkoPzooPyFcXHMpWyRcXHdcXHUwMDgwLVxcdUZGRkZdfFxcXFx1W1xcZGEtZkEtRl17NH18XFxcXHVcXHtbXFxkYS1mQS1GXStcXH0pKyl8KC0tfFxcK1xcK3wmJnxcXHxcXHx8PT58XFwuezN9fCg/OlsrXFwtXFwvJSZ8Xl18XFwqezEsMn18PHsxLDJ9fD57MSwzfXwhPT98PXsxLDJ9KT0/fFs/fi4sOjtbXFxdKCl7fV0pfChcXHMrKXwoXiR8W1xcc1xcU10pL2dcblxuZXhwb3J0cy5tYXRjaFRvVG9rZW4gPSBmdW5jdGlvbihtYXRjaCkge1xuICB2YXIgdG9rZW4gPSB7dHlwZTogXCJpbnZhbGlkXCIsIHZhbHVlOiBtYXRjaFswXSwgY2xvc2VkOiB1bmRlZmluZWR9XG4gICAgICAgaWYgKG1hdGNoWyAxXSkgdG9rZW4udHlwZSA9IFwic3RyaW5nXCIgLCB0b2tlbi5jbG9zZWQgPSAhIShtYXRjaFszXSB8fCBtYXRjaFs0XSlcbiAgZWxzZSBpZiAobWF0Y2hbIDVdKSB0b2tlbi50eXBlID0gXCJjb21tZW50XCJcbiAgZWxzZSBpZiAobWF0Y2hbIDZdKSB0b2tlbi50eXBlID0gXCJjb21tZW50XCIsIHRva2VuLmNsb3NlZCA9ICEhbWF0Y2hbN11cbiAgZWxzZSBpZiAobWF0Y2hbIDhdKSB0b2tlbi50eXBlID0gXCJyZWdleFwiXG4gIGVsc2UgaWYgKG1hdGNoWyA5XSkgdG9rZW4udHlwZSA9IFwibnVtYmVyXCJcbiAgZWxzZSBpZiAobWF0Y2hbMTBdKSB0b2tlbi50eXBlID0gXCJuYW1lXCJcbiAgZWxzZSBpZiAobWF0Y2hbMTFdKSB0b2tlbi50eXBlID0gXCJwdW5jdHVhdG9yXCJcbiAgZWxzZSBpZiAobWF0Y2hbMTJdKSB0b2tlbi50eXBlID0gXCJ3aGl0ZXNwYWNlXCJcbiAgcmV0dXJuIHRva2VuXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65879\n')},17159:module=>{"use strict";eval("\n\nconst object = {};\nconst hasOwnProperty = object.hasOwnProperty;\nconst forOwn = (object, callback) => {\n\tfor (const key in object) {\n\t\tif (hasOwnProperty.call(object, key)) {\n\t\t\tcallback(key, object[key]);\n\t\t}\n\t}\n};\n\nconst extend = (destination, source) => {\n\tif (!source) {\n\t\treturn destination;\n\t}\n\tforOwn(source, (key, value) => {\n\t\tdestination[key] = value;\n\t});\n\treturn destination;\n};\n\nconst forEach = (array, callback) => {\n\tconst length = array.length;\n\tlet index = -1;\n\twhile (++index < length) {\n\t\tcallback(array[index]);\n\t}\n};\n\nconst fourHexEscape = (hex) => {\n\treturn '\\\\u' + ('0000' + hex).slice(-4);\n}\n\nconst hexadecimal = (code, lowercase) => {\n\tlet hexadecimal = code.toString(16);\n\tif (lowercase) return hexadecimal;\n\treturn hexadecimal.toUpperCase();\n};\n\nconst toString = object.toString;\nconst isArray = Array.isArray;\nconst isBuffer = (value) => {\n\treturn typeof Buffer === 'function' && Buffer.isBuffer(value);\n};\nconst isObject = (value) => {\n\t// This is a very simple check, but it\u2019s good enough for what we need.\n\treturn toString.call(value) == '[object Object]';\n};\nconst isString = (value) => {\n\treturn typeof value == 'string' ||\n\t\ttoString.call(value) == '[object String]';\n};\nconst isNumber = (value) => {\n\treturn typeof value == 'number' ||\n\t\ttoString.call(value) == '[object Number]';\n};\nconst isFunction = (value) => {\n\treturn typeof value == 'function';\n};\nconst isMap = (value) => {\n\treturn toString.call(value) == '[object Map]';\n};\nconst isSet = (value) => {\n\treturn toString.call(value) == '[object Set]';\n};\n\n/*--------------------------------------------------------------------------*/\n\n// https://mathiasbynens.be/notes/javascript-escapes#single\nconst singleEscapes = {\n\t'\\\\': '\\\\\\\\',\n\t'\\b': '\\\\b',\n\t'\\f': '\\\\f',\n\t'\\n': '\\\\n',\n\t'\\r': '\\\\r',\n\t'\\t': '\\\\t'\n\t// `\\v` is omitted intentionally, because in IE < 9, '\\v' == 'v'.\n\t// '\\v': '\\\\x0B'\n};\nconst regexSingleEscape = /[\\\\\\b\\f\\n\\r\\t]/;\n\nconst regexDigit = /[0-9]/;\nconst regexWhitespace = /[\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n\nconst escapeEverythingRegex = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])|([\\uD800-\\uDFFF])|(['\"`])|[^]/g;\nconst escapeNonAsciiRegex = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])|([\\uD800-\\uDFFF])|(['\"`])|[^ !#-&\\(-\\[\\]-_a-~]/g;\n\nconst jsesc = (argument, options) => {\n\tconst increaseIndentation = () => {\n\t\toldIndent = indent;\n\t\t++options.indentLevel;\n\t\tindent = options.indent.repeat(options.indentLevel)\n\t};\n\t// Handle options\n\tconst defaults = {\n\t\t'escapeEverything': false,\n\t\t'minimal': false,\n\t\t'isScriptContext': false,\n\t\t'quotes': 'single',\n\t\t'wrap': false,\n\t\t'es6': false,\n\t\t'json': false,\n\t\t'compact': true,\n\t\t'lowercaseHex': false,\n\t\t'numbers': 'decimal',\n\t\t'indent': '\\t',\n\t\t'indentLevel': 0,\n\t\t'__inline1__': false,\n\t\t'__inline2__': false\n\t};\n\tconst json = options && options.json;\n\tif (json) {\n\t\tdefaults.quotes = 'double';\n\t\tdefaults.wrap = true;\n\t}\n\toptions = extend(defaults, options);\n\tif (\n\t\toptions.quotes != 'single' &&\n\t\toptions.quotes != 'double' &&\n\t\toptions.quotes != 'backtick'\n\t) {\n\t\toptions.quotes = 'single';\n\t}\n\tconst quote = options.quotes == 'double' ?\n\t\t'\"' :\n\t\t(options.quotes == 'backtick' ?\n\t\t\t'`' :\n\t\t\t'\\''\n\t\t);\n\tconst compact = options.compact;\n\tconst lowercaseHex = options.lowercaseHex;\n\tlet indent = options.indent.repeat(options.indentLevel);\n\tlet oldIndent = '';\n\tconst inline1 = options.__inline1__;\n\tconst inline2 = options.__inline2__;\n\tconst newLine = compact ? '' : '\\n';\n\tlet result;\n\tlet isEmpty = true;\n\tconst useBinNumbers = options.numbers == 'binary';\n\tconst useOctNumbers = options.numbers == 'octal';\n\tconst useDecNumbers = options.numbers == 'decimal';\n\tconst useHexNumbers = options.numbers == 'hexadecimal';\n\n\tif (json && argument && isFunction(argument.toJSON)) {\n\t\targument = argument.toJSON();\n\t}\n\n\tif (!isString(argument)) {\n\t\tif (isMap(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Map()';\n\t\t\t}\n\t\t\tif (!compact) {\n\t\t\t\toptions.__inline1__ = true;\n\t\t\t\toptions.__inline2__ = false;\n\t\t\t}\n\t\t\treturn 'new Map(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isSet(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Set()';\n\t\t\t}\n\t\t\treturn 'new Set(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isBuffer(argument)) {\n\t\t\tif (argument.length == 0) {\n\t\t\t\treturn 'Buffer.from([])';\n\t\t\t}\n\t\t\treturn 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isArray(argument)) {\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tif (inline1) {\n\t\t\t\toptions.__inline1__ = false;\n\t\t\t\toptions.__inline2__ = true;\n\t\t\t}\n\t\t\tif (!inline2) {\n\t\t\t\tincreaseIndentation();\n\t\t\t}\n\t\t\tforEach(argument, (value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tif (inline2) {\n\t\t\t\t\toptions.__inline2__ = false;\n\t\t\t\t}\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact || inline2 ? '' : indent) +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\tif (inline2) {\n\t\t\t\treturn '[' + result.join(', ') + ']';\n\t\t\t}\n\t\t\treturn '[' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + ']';\n\t\t} else if (isNumber(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// Some number values (e.g. `Infinity`) cannot be represented in JSON.\n\t\t\t\treturn JSON.stringify(argument);\n\t\t\t}\n\t\t\tif (useDecNumbers) {\n\t\t\t\treturn String(argument);\n\t\t\t}\n\t\t\tif (useHexNumbers) {\n\t\t\t\tlet hexadecimal = argument.toString(16);\n\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t}\n\t\t\t\treturn '0x' + hexadecimal;\n\t\t\t}\n\t\t\tif (useBinNumbers) {\n\t\t\t\treturn '0b' + argument.toString(2);\n\t\t\t}\n\t\t\tif (useOctNumbers) {\n\t\t\t\treturn '0o' + argument.toString(8);\n\t\t\t}\n\t\t} else if (!isObject(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// For some values (e.g. `undefined`, `function` objects),\n\t\t\t\t// `JSON.stringify(value)` returns `undefined` (which isn\u2019t valid\n\t\t\t\t// JSON) instead of `'null'`.\n\t\t\t\treturn JSON.stringify(argument) || 'null';\n\t\t\t}\n\t\t\treturn String(argument);\n\t\t} else { // it\u2019s an object\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tincreaseIndentation();\n\t\t\tforOwn(argument, (key, value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact ? '' : indent) +\n\t\t\t\t\tjsesc(key, options) + ':' +\n\t\t\t\t\t(compact ? '' : ' ') +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '{}';\n\t\t\t}\n\t\t\treturn '{' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + '}';\n\t\t}\n\t}\n\n\tconst regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;\n\tresult = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {\n\t\tif (pair) {\n\t\t\tif (options.minimal) return pair;\n\t\t\tconst first = pair.charCodeAt(0);\n\t\t\tconst second = pair.charCodeAt(1);\n\t\t\tif (options.es6) {\n\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\tconst codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\tconst hex = hexadecimal(codePoint, lowercaseHex);\n\t\t\t\treturn '\\\\u{' + hex + '}';\n\t\t\t}\n\t\t\treturn fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));\n\t\t}\n\n\t\tif (lone) {\n\t\t\treturn fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));\n\t\t}\n\n\t\tif (\n\t\t\tchar == '\\0' &&\n\t\t\t!json &&\n\t\t\t!regexDigit.test(string.charAt(index + 1))\n\t\t) {\n\t\t\treturn '\\\\0';\n\t\t}\n\n\t\tif (quoteChar) {\n\t\t\tif (quoteChar == quote || options.escapeEverything) {\n\t\t\t\treturn '\\\\' + quoteChar;\n\t\t\t}\n\t\t\treturn quoteChar;\n\t\t}\n\n\t\tif (regexSingleEscape.test(char)) {\n\t\t\t// no need for a `hasOwnProperty` check here\n\t\t\treturn singleEscapes[char];\n\t\t}\n\n\t\tif (options.minimal && !regexWhitespace.test(char)) {\n\t\t\treturn char;\n\t\t}\n\n\t\tconst hex = hexadecimal(char.charCodeAt(0), lowercaseHex);\n\t\tif (json || hex.length > 2) {\n\t\t\treturn fourHexEscape(hex);\n\t\t}\n\n\t\treturn '\\\\x' + ('00' + hex).slice(-2);\n\t});\n\n\tif (quote == '`') {\n\t\tresult = result.replace(/\\$\\{/g, '\\\\${');\n\t}\n\tif (options.isScriptContext) {\n\t\t// https://mathiasbynens.be/notes/etago\n\t\tresult = result\n\t\t\t.replace(/<\\/(script|style)/gi, '<\\\\/$1')\n\t\t\t.replace(/\x3c!--/g, json ? '\\\\u003C!--' : '\\\\x3C!--');\n\t}\n\tif (options.wrap) {\n\t\tresult = quote + result + quote;\n\t}\n\treturn result;\n};\n\njsesc.version = '3.0.2';\n\nmodule.exports = jsesc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17159\n")},6585:module=>{eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU4NS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixZQUFZLE9BQU87QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/M2E3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6585\n")},48633:module=>{eval("var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x,blackBright:x,redBright:x,greenBright:x,yellowBright:x,blueBright:x,magentaBright:x,cyanBright:x,whiteBright:x,bgBlackBright:x,bgRedBright:x,bgGreenBright:x,bgYellowBright:x,bgBlueBright:x,bgMagentaBright:x,bgCyanBright:x,bgWhiteBright:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2MzMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBLDJCQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvcGljb2NvbG9ycy9waWNvY29sb3JzLmJyb3dzZXIuanM/ZmFhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgeD1TdHJpbmc7XG52YXIgY3JlYXRlPWZ1bmN0aW9uKCkge3JldHVybiB7aXNDb2xvclN1cHBvcnRlZDpmYWxzZSxyZXNldDp4LGJvbGQ6eCxkaW06eCxpdGFsaWM6eCx1bmRlcmxpbmU6eCxpbnZlcnNlOngsaGlkZGVuOngsc3RyaWtldGhyb3VnaDp4LGJsYWNrOngscmVkOngsZ3JlZW46eCx5ZWxsb3c6eCxibHVlOngsbWFnZW50YTp4LGN5YW46eCx3aGl0ZTp4LGdyYXk6eCxiZ0JsYWNrOngsYmdSZWQ6eCxiZ0dyZWVuOngsYmdZZWxsb3c6eCxiZ0JsdWU6eCxiZ01hZ2VudGE6eCxiZ0N5YW46eCxiZ1doaXRlOngsYmxhY2tCcmlnaHQ6eCxyZWRCcmlnaHQ6eCxncmVlbkJyaWdodDp4LHllbGxvd0JyaWdodDp4LGJsdWVCcmlnaHQ6eCxtYWdlbnRhQnJpZ2h0OngsY3lhbkJyaWdodDp4LHdoaXRlQnJpZ2h0OngsYmdCbGFja0JyaWdodDp4LGJnUmVkQnJpZ2h0OngsYmdHcmVlbkJyaWdodDp4LGJnWWVsbG93QnJpZ2h0OngsYmdCbHVlQnJpZ2h0OngsYmdNYWdlbnRhQnJpZ2h0OngsYmdDeWFuQnJpZ2h0OngsYmdXaGl0ZUJyaWdodDp4fX07XG5tb2R1bGUuZXhwb3J0cz1jcmVhdGUoKTtcbm1vZHVsZS5leHBvcnRzLmNyZWF0ZUNvbG9ycyA9IGNyZWF0ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///48633\n")},85130:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ react_split_es)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(5556);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n;// ./node_modules/split.js/dist/split.es.js\n// The programming goals of Split.js are to deliver readable, understandable and\n// maintainable code, while at the same time manually optimizing for tiny minified file size,\n// browser compatibility without additional requirements\n// and very few assumptions about the user's page layout.\nvar global = typeof window !== 'undefined' ? window : null;\nvar ssr = global === null;\nvar split_es_document = !ssr ? global.document : undefined;\n\n// Save a couple long function names that are used frequently.\n// This optimization saves around 400 bytes.\nvar addEventListener = 'addEventListener';\nvar removeEventListener = 'removeEventListener';\nvar getBoundingClientRect = 'getBoundingClientRect';\nvar gutterStartDragging = '_a';\nvar aGutterSize = '_b';\nvar bGutterSize = '_c';\nvar HORIZONTAL = 'horizontal';\nvar NOOP = function () { return false; };\n\n// Helper function determines which prefixes of CSS calc we need.\n// We only need to do this once on startup, when this anonymous function is called.\n//\n// Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n// http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\nvar calc = ssr\n    ? 'calc'\n    : ((['', '-webkit-', '-moz-', '-o-']\n          .filter(function (prefix) {\n              var el = split_es_document.createElement('div');\n              el.style.cssText = \"width:\" + prefix + \"calc(9px)\";\n\n              return !!el.style.length\n          })\n          .shift()) + \"calc\");\n\n// Helper function checks if its argument is a string-like type\nvar isString = function (v) { return typeof v === 'string' || v instanceof String; };\n\n// Helper function allows elements and string selectors to be used\n// interchangeably. In either case an element is returned. This allows us to\n// do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.\nvar elementOrSelector = function (el) {\n    if (isString(el)) {\n        var ele = split_es_document.querySelector(el);\n        if (!ele) {\n            throw new Error((\"Selector \" + el + \" did not match a DOM element\"))\n        }\n        return ele\n    }\n\n    return el\n};\n\n// Helper function gets a property from the properties object, with a default fallback\nvar getOption = function (options, propName, def) {\n    var value = options[propName];\n    if (value !== undefined) {\n        return value\n    }\n    return def\n};\n\nvar getGutterSize = function (gutterSize, isFirst, isLast, gutterAlign) {\n    if (isFirst) {\n        if (gutterAlign === 'end') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    } else if (isLast) {\n        if (gutterAlign === 'start') {\n            return 0\n        }\n        if (gutterAlign === 'center') {\n            return gutterSize / 2\n        }\n    }\n\n    return gutterSize\n};\n\n// Default options\nvar defaultGutterFn = function (i, gutterDirection) {\n    var gut = split_es_document.createElement('div');\n    gut.className = \"gutter gutter-\" + gutterDirection;\n    return gut\n};\n\nvar defaultElementStyleFn = function (dim, size, gutSize) {\n    var style = {};\n\n    if (!isString(size)) {\n        style[dim] = calc + \"(\" + size + \"% - \" + gutSize + \"px)\";\n    } else {\n        style[dim] = size;\n    }\n\n    return style\n};\n\nvar defaultGutterStyleFn = function (dim, gutSize) {\n    var obj;\n\n    return (( obj = {}, obj[dim] = (gutSize + \"px\"), obj ));\n};\n\n// The main function to initialize a split. Split.js thinks about each pair\n// of elements as an independant pair. Dragging the gutter between two elements\n// only changes the dimensions of elements in that pair. This is key to understanding\n// how the following functions operate, since each function is bound to a pair.\n//\n// A pair object is shaped like this:\n//\n// {\n//     a: DOM element,\n//     b: DOM element,\n//     aMin: Number,\n//     bMin: Number,\n//     dragging: Boolean,\n//     parent: DOM element,\n//     direction: 'horizontal' | 'vertical'\n// }\n//\n// The basic sequence:\n//\n// 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n// 2. Initialize a bunch of strings based on the direction we're splitting.\n//    A lot of the behavior in the rest of the library is paramatized down to\n//    rely on CSS strings and classes.\n// 3. Define the dragging helper functions, and a few helpers to go with them.\n// 4. Loop through the elements while pairing them off. Every pair gets an\n//    `pair` object and a gutter.\n// 5. Actually size the pair elements, insert gutters and attach event listeners.\nvar Split = function (idsOption, options) {\n    if ( options === void 0 ) options = {};\n\n    if (ssr) { return {} }\n\n    var ids = idsOption;\n    var dimension;\n    var clientAxis;\n    var position;\n    var positionEnd;\n    var clientSize;\n    var elements;\n\n    // Allow HTMLCollection to be used as an argument when supported\n    if (Array.from) {\n        ids = Array.from(ids);\n    }\n\n    // All DOM elements in the split should have a common parent. We can grab\n    // the first elements parent and hope users read the docs because the\n    // behavior will be whacky otherwise.\n    var firstElement = elementOrSelector(ids[0]);\n    var parent = firstElement.parentNode;\n    var parentStyle = getComputedStyle ? getComputedStyle(parent) : null;\n    var parentFlexDirection = parentStyle ? parentStyle.flexDirection : null;\n\n    // Set default options.sizes to equal percentages of the parent element.\n    var sizes = getOption(options, 'sizes') || ids.map(function () { return 100 / ids.length; });\n\n    // Standardize minSize and maxSize to an array if it isn't already.\n    // This allows minSize and maxSize to be passed as a number.\n    var minSize = getOption(options, 'minSize', 100);\n    var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () { return minSize; });\n    var maxSize = getOption(options, 'maxSize', Infinity);\n    var maxSizes = Array.isArray(maxSize) ? maxSize : ids.map(function () { return maxSize; });\n\n    // Get other options\n    var expandToMin = getOption(options, 'expandToMin', false);\n    var gutterSize = getOption(options, 'gutterSize', 10);\n    var gutterAlign = getOption(options, 'gutterAlign', 'center');\n    var snapOffset = getOption(options, 'snapOffset', 30);\n    var snapOffsets = Array.isArray(snapOffset) ? snapOffset : ids.map(function () { return snapOffset; });\n    var dragInterval = getOption(options, 'dragInterval', 1);\n    var direction = getOption(options, 'direction', HORIZONTAL);\n    var cursor = getOption(\n        options,\n        'cursor',\n        direction === HORIZONTAL ? 'col-resize' : 'row-resize'\n    );\n    var gutter = getOption(options, 'gutter', defaultGutterFn);\n    var elementStyle = getOption(\n        options,\n        'elementStyle',\n        defaultElementStyleFn\n    );\n    var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn);\n\n    // 2. Initialize a bunch of strings based on the direction we're splitting.\n    // A lot of the behavior in the rest of the library is paramatized down to\n    // rely on CSS strings and classes.\n    if (direction === HORIZONTAL) {\n        dimension = 'width';\n        clientAxis = 'clientX';\n        position = 'left';\n        positionEnd = 'right';\n        clientSize = 'clientWidth';\n    } else if (direction === 'vertical') {\n        dimension = 'height';\n        clientAxis = 'clientY';\n        position = 'top';\n        positionEnd = 'bottom';\n        clientSize = 'clientHeight';\n    }\n\n    // 3. Define the dragging helper functions, and a few helpers to go with them.\n    // Each helper is bound to a pair object that contains its metadata. This\n    // also makes it easy to store references to listeners that that will be\n    // added and removed.\n    //\n    // Even though there are no other functions contained in them, aliasing\n    // this to self saves 50 bytes or so since it's used so frequently.\n    //\n    // The pair object saves metadata like dragging state, position and\n    // event listener references.\n\n    function setElementSize(el, size, gutSize, i) {\n        // Split.js allows setting sizes via numbers (ideally), or if you must,\n        // by string, like '300px'. This is less than ideal, because it breaks\n        // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n        // make sure you calculate the gutter size by hand.\n        var style = elementStyle(dimension, size, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            el.style[prop] = style[prop];\n        });\n    }\n\n    function setGutterSize(gutterElement, gutSize, i) {\n        var style = gutterStyle(dimension, gutSize, i);\n\n        Object.keys(style).forEach(function (prop) {\n            // eslint-disable-next-line no-param-reassign\n            gutterElement.style[prop] = style[prop];\n        });\n    }\n\n    function getSizes() {\n        return elements.map(function (element) { return element.size; })\n    }\n\n    // Supports touch events, but not multitouch, so only the first\n    // finger `touches[0]` is counted.\n    function getMousePosition(e) {\n        if ('touches' in e) { return e.touches[0][clientAxis] }\n        return e[clientAxis]\n    }\n\n    // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n    // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n    // which allows the viewport to be resized without additional logic.\n    // Element a's size is the same as offset. b's size is total size - a size.\n    // Both sizes are calculated from the initial parent percentage,\n    // then the gutter size is subtracted.\n    function adjust(offset) {\n        var a = elements[this.a];\n        var b = elements[this.b];\n        var percentage = a.size + b.size;\n\n        a.size = (offset / this.size) * percentage;\n        b.size = percentage - (offset / this.size) * percentage;\n\n        setElementSize(a.element, a.size, this[aGutterSize], a.i);\n        setElementSize(b.element, b.size, this[bGutterSize], b.i);\n    }\n\n    // drag, where all the magic happens. The logic is really quite simple:\n    //\n    // 1. Ignore if the pair is not dragging.\n    // 2. Get the offset of the event.\n    // 3. Snap offset to min if within snappable range (within min + snapOffset).\n    // 4. Actually adjust each element in the pair to offset.\n    //\n    // ---------------------------------------------------------------------\n    // |    | <- a.minSize               ||              b.minSize -> |    |\n    // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n    // |    |  |                         ||                        |  |    |\n    // |    |  |                         ||                        |  |    |\n    // ---------------------------------------------------------------------\n    // | <- this.start                                        this.size -> |\n    function drag(e) {\n        var offset;\n        var a = elements[this.a];\n        var b = elements[this.b];\n\n        if (!this.dragging) { return }\n\n        // Get the offset of the event from the first side of the\n        // pair `this.start`. Then offset by the initial position of the\n        // mouse compared to the gutter size.\n        offset =\n            getMousePosition(e) -\n            this.start +\n            (this[aGutterSize] - this.dragOffset);\n\n        if (dragInterval > 1) {\n            offset = Math.round(offset / dragInterval) * dragInterval;\n        }\n\n        // If within snapOffset of min or max, set offset to min or max.\n        // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.\n        // Include the appropriate gutter sizes to prevent overflows.\n        if (offset <= a.minSize + a.snapOffset + this[aGutterSize]) {\n            offset = a.minSize + this[aGutterSize];\n        } else if (\n            offset >=\n            this.size - (b.minSize + b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.minSize + this[bGutterSize]);\n        }\n\n        if (offset >= a.maxSize - a.snapOffset + this[aGutterSize]) {\n            offset = a.maxSize + this[aGutterSize];\n        } else if (\n            offset <=\n            this.size - (b.maxSize - b.snapOffset + this[bGutterSize])\n        ) {\n            offset = this.size - (b.maxSize + this[bGutterSize]);\n        }\n\n        // Actually adjust the size.\n        adjust.call(this, offset);\n\n        // Call the drag callback continously. Don't do anything too intensive\n        // in this callback.\n        getOption(options, 'onDrag', NOOP)(getSizes());\n    }\n\n    // Cache some important sizes when drag starts, so we don't have to do that\n    // continously:\n    //\n    // `size`: The total size of the pair. First + second + first gutter + second gutter.\n    // `start`: The leading side of the first element.\n    //\n    // ------------------------------------------------\n    // |      aGutterSize -> |||                      |\n    // |                     |||                      |\n    // |                     |||                      |\n    // |                     ||| <- bGutterSize       |\n    // ------------------------------------------------\n    // | <- start                             size -> |\n    function calculateSizes() {\n        // Figure out the parent size minus padding.\n        var a = elements[this.a].element;\n        var b = elements[this.b].element;\n\n        var aBounds = a[getBoundingClientRect]();\n        var bBounds = b[getBoundingClientRect]();\n\n        this.size =\n            aBounds[dimension] +\n            bBounds[dimension] +\n            this[aGutterSize] +\n            this[bGutterSize];\n        this.start = aBounds[position];\n        this.end = aBounds[positionEnd];\n    }\n\n    function innerSize(element) {\n        // Return nothing if getComputedStyle is not supported (< IE9)\n        // Or if parent element has no layout yet\n        if (!getComputedStyle) { return null }\n\n        var computedStyle = getComputedStyle(element);\n\n        if (!computedStyle) { return null }\n\n        var size = element[clientSize];\n\n        if (size === 0) { return null }\n\n        if (direction === HORIZONTAL) {\n            size -=\n                parseFloat(computedStyle.paddingLeft) +\n                parseFloat(computedStyle.paddingRight);\n        } else {\n            size -=\n                parseFloat(computedStyle.paddingTop) +\n                parseFloat(computedStyle.paddingBottom);\n        }\n\n        return size\n    }\n\n    // When specifying percentage sizes that are less than the computed\n    // size of the element minus the gutter, the lesser percentages must be increased\n    // (and decreased from the other elements) to make space for the pixels\n    // subtracted by the gutters.\n    function trimToMin(sizesToTrim) {\n        // Try to get inner size of parent element.\n        // If it's no supported, return original sizes.\n        var parentSize = innerSize(parent);\n        if (parentSize === null) {\n            return sizesToTrim\n        }\n\n        if (minSizes.reduce(function (a, b) { return a + b; }, 0) > parentSize) {\n            return sizesToTrim\n        }\n\n        // Keep track of the excess pixels, the amount of pixels over the desired percentage\n        // Also keep track of the elements with pixels to spare, to decrease after if needed\n        var excessPixels = 0;\n        var toSpare = [];\n\n        var pixelSizes = sizesToTrim.map(function (size, i) {\n            // Convert requested percentages to pixel sizes\n            var pixelSize = (parentSize * size) / 100;\n            var elementGutterSize = getGutterSize(\n                gutterSize,\n                i === 0,\n                i === sizesToTrim.length - 1,\n                gutterAlign\n            );\n            var elementMinSize = minSizes[i] + elementGutterSize;\n\n            // If element is too smal, increase excess pixels by the difference\n            // and mark that it has no pixels to spare\n            if (pixelSize < elementMinSize) {\n                excessPixels += elementMinSize - pixelSize;\n                toSpare.push(0);\n                return elementMinSize\n            }\n\n            // Otherwise, mark the pixels it has to spare and return it's original size\n            toSpare.push(pixelSize - elementMinSize);\n            return pixelSize\n        });\n\n        // If nothing was adjusted, return the original sizes\n        if (excessPixels === 0) {\n            return sizesToTrim\n        }\n\n        return pixelSizes.map(function (pixelSize, i) {\n            var newPixelSize = pixelSize;\n\n            // While there's still pixels to take, and there's enough pixels to spare,\n            // take as many as possible up to the total excess pixels\n            if (excessPixels > 0 && toSpare[i] - excessPixels > 0) {\n                var takenPixels = Math.min(\n                    excessPixels,\n                    toSpare[i] - excessPixels\n                );\n\n                // Subtract the amount taken for the next iteration\n                excessPixels -= takenPixels;\n                newPixelSize = pixelSize - takenPixels;\n            }\n\n            // Return the pixel size adjusted as a percentage\n            return (newPixelSize / parentSize) * 100\n        })\n    }\n\n    // stopDragging is very similar to startDragging in reverse.\n    function stopDragging() {\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        if (self.dragging) {\n            getOption(options, 'onDragEnd', NOOP)(getSizes());\n        }\n\n        self.dragging = false;\n\n        // Remove the stored event listeners. This is why we store them.\n        global[removeEventListener]('mouseup', self.stop);\n        global[removeEventListener]('touchend', self.stop);\n        global[removeEventListener]('touchcancel', self.stop);\n        global[removeEventListener]('mousemove', self.move);\n        global[removeEventListener]('touchmove', self.move);\n\n        // Clear bound function references\n        self.stop = null;\n        self.move = null;\n\n        a[removeEventListener]('selectstart', NOOP);\n        a[removeEventListener]('dragstart', NOOP);\n        b[removeEventListener]('selectstart', NOOP);\n        b[removeEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = '';\n        a.style.webkitUserSelect = '';\n        a.style.MozUserSelect = '';\n        a.style.pointerEvents = '';\n\n        b.style.userSelect = '';\n        b.style.webkitUserSelect = '';\n        b.style.MozUserSelect = '';\n        b.style.pointerEvents = '';\n\n        self.gutter.style.cursor = '';\n        self.parent.style.cursor = '';\n        split_es_document.body.style.cursor = '';\n    }\n\n    // startDragging calls `calculateSizes` to store the inital size in the pair object.\n    // It also adds event listeners for mouse/touch events,\n    // and prevents selection while dragging so avoid the selecting text.\n    function startDragging(e) {\n        // Right-clicking can't start dragging.\n        if ('button' in e && e.button !== 0) {\n            return\n        }\n\n        // Alias frequently used variables to save space. 200 bytes.\n        var self = this;\n        var a = elements[self.a].element;\n        var b = elements[self.b].element;\n\n        // Call the onDragStart callback.\n        if (!self.dragging) {\n            getOption(options, 'onDragStart', NOOP)(getSizes());\n        }\n\n        // Don't actually drag the element. We emulate that in the drag function.\n        e.preventDefault();\n\n        // Set the dragging property of the pair object.\n        self.dragging = true;\n\n        // Create two event listeners bound to the same pair object and store\n        // them in the pair object.\n        self.move = drag.bind(self);\n        self.stop = stopDragging.bind(self);\n\n        // All the binding. `window` gets the stop events in case we drag out of the elements.\n        global[addEventListener]('mouseup', self.stop);\n        global[addEventListener]('touchend', self.stop);\n        global[addEventListener]('touchcancel', self.stop);\n        global[addEventListener]('mousemove', self.move);\n        global[addEventListener]('touchmove', self.move);\n\n        // Disable selection. Disable!\n        a[addEventListener]('selectstart', NOOP);\n        a[addEventListener]('dragstart', NOOP);\n        b[addEventListener]('selectstart', NOOP);\n        b[addEventListener]('dragstart', NOOP);\n\n        a.style.userSelect = 'none';\n        a.style.webkitUserSelect = 'none';\n        a.style.MozUserSelect = 'none';\n        a.style.pointerEvents = 'none';\n\n        b.style.userSelect = 'none';\n        b.style.webkitUserSelect = 'none';\n        b.style.MozUserSelect = 'none';\n        b.style.pointerEvents = 'none';\n\n        // Set the cursor at multiple levels\n        self.gutter.style.cursor = cursor;\n        self.parent.style.cursor = cursor;\n        split_es_document.body.style.cursor = cursor;\n\n        // Cache the initial sizes of the pair.\n        calculateSizes.call(self);\n\n        // Determine the position of the mouse compared to the gutter\n        self.dragOffset = getMousePosition(e) - self.end;\n    }\n\n    // adjust sizes to ensure percentage is within min size and gutter.\n    sizes = trimToMin(sizes);\n\n    // 5. Create pair and element objects. Each pair has an index reference to\n    // elements `a` and `b` of the pair (first and second elements).\n    // Loop through the elements while pairing them off. Every pair gets a\n    // `pair` object and a gutter.\n    //\n    // Basic logic:\n    //\n    // - Starting with the second element `i > 0`, create `pair` objects with\n    //   `a = i - 1` and `b = i`\n    // - Set gutter sizes based on the _pair_ being first/last. The first and last\n    //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n    // - Create gutter elements and add event listeners.\n    // - Set the size of the elements, minus the gutter sizes.\n    //\n    // -----------------------------------------------------------------------\n    // |     i=0     |         i=1         |        i=2       |      i=3     |\n    // |             |                     |                  |              |\n    // |           pair 0                pair 1             pair 2           |\n    // |             |                     |                  |              |\n    // -----------------------------------------------------------------------\n    var pairs = [];\n    elements = ids.map(function (id, i) {\n        // Create the element object.\n        var element = {\n            element: elementOrSelector(id),\n            size: sizes[i],\n            minSize: minSizes[i],\n            maxSize: maxSizes[i],\n            snapOffset: snapOffsets[i],\n            i: i,\n        };\n\n        var pair;\n\n        if (i > 0) {\n            // Create the pair object with its metadata.\n            pair = {\n                a: i - 1,\n                b: i,\n                dragging: false,\n                direction: direction,\n                parent: parent,\n            };\n\n            pair[aGutterSize] = getGutterSize(\n                gutterSize,\n                i - 1 === 0,\n                false,\n                gutterAlign\n            );\n            pair[bGutterSize] = getGutterSize(\n                gutterSize,\n                false,\n                i === ids.length - 1,\n                gutterAlign\n            );\n\n            // if the parent has a reverse flex-direction, switch the pair elements.\n            if (\n                parentFlexDirection === 'row-reverse' ||\n                parentFlexDirection === 'column-reverse'\n            ) {\n                var temp = pair.a;\n                pair.a = pair.b;\n                pair.b = temp;\n            }\n        }\n\n        // Determine the size of the current element. IE8 is supported by\n        // staticly assigning sizes without draggable gutters. Assigns a string\n        // to `size`.\n        //\n        // Create gutter elements for each pair.\n        if (i > 0) {\n            var gutterElement = gutter(i, direction, element.element);\n            setGutterSize(gutterElement, gutterSize, i);\n\n            // Save bound event listener for removal later\n            pair[gutterStartDragging] = startDragging.bind(pair);\n\n            // Attach bound event listener\n            gutterElement[addEventListener](\n                'mousedown',\n                pair[gutterStartDragging]\n            );\n            gutterElement[addEventListener](\n                'touchstart',\n                pair[gutterStartDragging]\n            );\n\n            parent.insertBefore(gutterElement, element.element);\n\n            pair.gutter = gutterElement;\n        }\n\n        setElementSize(\n            element.element,\n            element.size,\n            getGutterSize(\n                gutterSize,\n                i === 0,\n                i === ids.length - 1,\n                gutterAlign\n            ),\n            i\n        );\n\n        // After the first iteration, and we have a pair object, append it to the\n        // list of pairs.\n        if (i > 0) {\n            pairs.push(pair);\n        }\n\n        return element\n    });\n\n    function adjustToMin(element) {\n        var isLast = element.i === pairs.length;\n        var pair = isLast ? pairs[element.i - 1] : pairs[element.i];\n\n        calculateSizes.call(pair);\n\n        var size = isLast\n            ? pair.size - element.minSize - pair[bGutterSize]\n            : element.minSize + pair[aGutterSize];\n\n        adjust.call(pair, size);\n    }\n\n    elements.forEach(function (element) {\n        var computedSize = element.element[getBoundingClientRect]()[dimension];\n\n        if (computedSize < element.minSize) {\n            if (expandToMin) {\n                adjustToMin(element);\n            } else {\n                // eslint-disable-next-line no-param-reassign\n                element.minSize = computedSize;\n            }\n        }\n    });\n\n    function setSizes(newSizes) {\n        var trimmed = trimToMin(newSizes);\n        trimmed.forEach(function (newSize, i) {\n            if (i > 0) {\n                var pair = pairs[i - 1];\n\n                var a = elements[pair.a];\n                var b = elements[pair.b];\n\n                a.size = trimmed[i - 1];\n                b.size = newSize;\n\n                setElementSize(a.element, a.size, pair[aGutterSize], a.i);\n                setElementSize(b.element, b.size, pair[bGutterSize], b.i);\n            }\n        });\n    }\n\n    function destroy(preserveStyles, preserveGutter) {\n        pairs.forEach(function (pair) {\n            if (preserveGutter !== true) {\n                pair.parent.removeChild(pair.gutter);\n            } else {\n                pair.gutter[removeEventListener](\n                    'mousedown',\n                    pair[gutterStartDragging]\n                );\n                pair.gutter[removeEventListener](\n                    'touchstart',\n                    pair[gutterStartDragging]\n                );\n            }\n\n            if (preserveStyles !== true) {\n                var style = elementStyle(\n                    dimension,\n                    pair.a.size,\n                    pair[aGutterSize]\n                );\n\n                Object.keys(style).forEach(function (prop) {\n                    elements[pair.a].element.style[prop] = '';\n                    elements[pair.b].element.style[prop] = '';\n                });\n            }\n        });\n    }\n\n    return {\n        setSizes: setSizes,\n        getSizes: getSizes,\n        collapse: function collapse(i) {\n            adjustToMin(elements[i]);\n        },\n        destroy: destroy,\n        parent: parent,\n        pairs: pairs,\n    }\n};\n\n/* harmony default export */ const split_es = (Split);\n\n;// ./node_modules/react-split/dist/react-split.es.js\n\n\n\n\nfunction objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }\n\nvar SplitWrapper = /*@__PURE__*/(function (superclass) {\n    function SplitWrapper () {\n        superclass.apply(this, arguments);\n    }\n\n    if ( superclass ) SplitWrapper.__proto__ = superclass;\n    SplitWrapper.prototype = Object.create( superclass && superclass.prototype );\n    SplitWrapper.prototype.constructor = SplitWrapper;\n\n    SplitWrapper.prototype.componentDidMount = function componentDidMount () {\n        var ref = this.props;\n        ref.children;\n        var gutter = ref.gutter;\n        var rest = objectWithoutProperties( ref, [\"children\", \"gutter\"] );\n        var options = rest;\n\n        options.gutter = function (index, direction) {\n            var gutterElement;\n\n            if (gutter) {\n                gutterElement = gutter(index, direction);\n            } else {\n                gutterElement = document.createElement('div');\n                gutterElement.className = \"gutter gutter-\" + direction;\n            }\n\n            // eslint-disable-next-line no-underscore-dangle\n            gutterElement.__isSplitGutter = true;\n            return gutterElement\n        };\n\n        this.split = split_es(this.parent.children, options);\n    };\n\n    SplitWrapper.prototype.componentDidUpdate = function componentDidUpdate (prevProps) {\n        var this$1 = this;\n\n        var ref = this.props;\n        ref.children;\n        var minSize = ref.minSize;\n        var sizes = ref.sizes;\n        var collapsed = ref.collapsed;\n        var rest = objectWithoutProperties( ref, [\"children\", \"minSize\", \"sizes\", \"collapsed\"] );\n        var options = rest;\n        var prevMinSize = prevProps.minSize;\n        var prevSizes = prevProps.sizes;\n        var prevCollapsed = prevProps.collapsed;\n\n        var otherProps = [\n            'maxSize',\n            'expandToMin',\n            'gutterSize',\n            'gutterAlign',\n            'snapOffset',\n            'dragInterval',\n            'direction',\n            'cursor' ];\n\n        var needsRecreate = otherProps\n            // eslint-disable-next-line react/destructuring-assignment\n            .map(function (prop) { return this$1.props[prop] !== prevProps[prop]; })\n            .reduce(function (accum, same) { return accum || same; }, false);\n\n        // Compare minSize when both are arrays, when one is an array and when neither is an array\n        if (Array.isArray(minSize) && Array.isArray(prevMinSize)) {\n            var minSizeChanged = false;\n\n            minSize.forEach(function (minSizeI, i) {\n                minSizeChanged = minSizeChanged || minSizeI !== prevMinSize[i];\n            });\n\n            needsRecreate = needsRecreate || minSizeChanged;\n        } else if (Array.isArray(minSize) || Array.isArray(prevMinSize)) {\n            needsRecreate = true;\n        } else {\n            needsRecreate = needsRecreate || minSize !== prevMinSize;\n        }\n\n        // Destroy and re-create split if options changed\n        if (needsRecreate) {\n            options.minSize = minSize;\n            options.sizes = sizes || this.split.getSizes();\n            this.split.destroy(true, true);\n            options.gutter = function (index, direction, pairB) { return pairB.previousSibling; };\n            this.split = split_es(\n                Array.from(this.parent.children).filter(\n                    // eslint-disable-next-line no-underscore-dangle\n                    function (element) { return !element.__isSplitGutter; }\n                ),\n                options\n            );\n        } else if (sizes) {\n            // If only the size has changed, set the size. No need to do this if re-created.\n            var sizeChanged = false;\n\n            sizes.forEach(function (sizeI, i) {\n                sizeChanged = sizeChanged || sizeI !== prevSizes[i];\n            });\n\n            if (sizeChanged) {\n                // eslint-disable-next-line react/destructuring-assignment\n                this.split.setSizes(this.props.sizes);\n            }\n        }\n\n        // Collapse after re-created or when collapsed changed.\n        if (\n            Number.isInteger(collapsed) &&\n            (collapsed !== prevCollapsed || needsRecreate)\n        ) {\n            this.split.collapse(collapsed);\n        }\n    };\n\n    SplitWrapper.prototype.componentWillUnmount = function componentWillUnmount () {\n        this.split.destroy();\n        delete this.split;\n    };\n\n    SplitWrapper.prototype.render = function render () {\n        var this$1 = this;\n\n        var ref = this.props;\n        ref.sizes;\n        ref.minSize;\n        ref.maxSize;\n        ref.expandToMin;\n        ref.gutterSize;\n        ref.gutterAlign;\n        ref.snapOffset;\n        ref.dragInterval;\n        ref.direction;\n        ref.cursor;\n        ref.gutter;\n        ref.elementStyle;\n        ref.gutterStyle;\n        ref.onDrag;\n        ref.onDragStart;\n        ref.onDragEnd;\n        ref.collapsed;\n        var children = ref.children;\n        var rest$1 = objectWithoutProperties( ref, [\"sizes\", \"minSize\", \"maxSize\", \"expandToMin\", \"gutterSize\", \"gutterAlign\", \"snapOffset\", \"dragInterval\", \"direction\", \"cursor\", \"gutter\", \"elementStyle\", \"gutterStyle\", \"onDrag\", \"onDragStart\", \"onDragEnd\", \"collapsed\", \"children\"] );\n        var rest = rest$1;\n\n        return (\n            react.createElement( 'div', Object.assign({},\n                { ref: function (parent) {\n                    this$1.parent = parent;\n                } }, rest),\n                children\n            )\n        )\n    };\n\n    return SplitWrapper;\n}(react.Component));\n\nSplitWrapper.propTypes = {\n    sizes: prop_types_default().arrayOf((prop_types_default()).number),\n    minSize: prop_types_default().oneOfType([\n        (prop_types_default()).number,\n        prop_types_default().arrayOf((prop_types_default()).number) ]),\n    maxSize: prop_types_default().oneOfType([\n        (prop_types_default()).number,\n        prop_types_default().arrayOf((prop_types_default()).number) ]),\n    expandToMin: (prop_types_default()).bool,\n    gutterSize: (prop_types_default()).number,\n    gutterAlign: (prop_types_default()).string,\n    snapOffset: prop_types_default().oneOfType([\n        (prop_types_default()).number,\n        prop_types_default().arrayOf((prop_types_default()).number) ]),\n    dragInterval: (prop_types_default()).number,\n    direction: (prop_types_default()).string,\n    cursor: (prop_types_default()).string,\n    gutter: (prop_types_default()).func,\n    elementStyle: (prop_types_default()).func,\n    gutterStyle: (prop_types_default()).func,\n    onDrag: (prop_types_default()).func,\n    onDragStart: (prop_types_default()).func,\n    onDragEnd: (prop_types_default()).func,\n    collapsed: (prop_types_default()).number,\n    children: prop_types_default().arrayOf((prop_types_default()).element),\n};\n\nSplitWrapper.defaultProps = {\n    sizes: undefined,\n    minSize: undefined,\n    maxSize: undefined,\n    expandToMin: undefined,\n    gutterSize: undefined,\n    gutterAlign: undefined,\n    snapOffset: undefined,\n    dragInterval: undefined,\n    direction: undefined,\n    cursor: undefined,\n    gutter: undefined,\n    elementStyle: undefined,\n    gutterStyle: undefined,\n    onDrag: undefined,\n    onDragStart: undefined,\n    onDragEnd: undefined,\n    collapsed: undefined,\n    children: undefined,\n};\n\n/* harmony default export */ const react_split_es = (SplitWrapper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85130\n")},62882:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n\nvar picocolors = __webpack_require__(48633);\nvar jsTokens = __webpack_require__(65879);\nvar helperValidatorIdentifier = __webpack_require__(61000);\n\nfunction isColorSupported() {\n  return (typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? false : picocolors.isColorSupported\n  );\n}\nconst compose = (f, g) => v => f(g(v));\nfunction buildDefs(colors) {\n  return {\n    keyword: colors.cyan,\n    capitalized: colors.yellow,\n    jsxIdentifier: colors.yellow,\n    punctuator: colors.yellow,\n    number: colors.magenta,\n    string: colors.green,\n    regex: colors.magenta,\n    comment: colors.gray,\n    invalid: compose(compose(colors.white, colors.bgRed), colors.bold),\n    gutter: colors.gray,\n    marker: compose(colors.red, colors.bold),\n    message: compose(colors.red, colors.bold),\n    reset: colors.reset\n  };\n}\nconst defsOn = buildDefs(picocolors.createColors(true));\nconst defsOff = buildDefs(picocolors.createColors(false));\nfunction getDefs(enabled) {\n  return enabled ? defsOn : defsOff;\n}\n\nconst sometimesKeywords = new Set(["as", "async", "from", "get", "of", "set"]);\nconst NEWLINE$1 = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nconst BRACKET = /^[()[\\]{}]$/;\nlet tokenize;\n{\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n  const getTokenType = function (token, offset, text) {\n    if (token.type === "name") {\n      if (helperValidatorIdentifier.isKeyword(token.value) || helperValidatorIdentifier.isStrictReservedWord(token.value, true) || sometimesKeywords.has(token.value)) {\n        return "keyword";\n      }\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) === "</")) {\n        return "jsxIdentifier";\n      }\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return "capitalized";\n      }\n    }\n    if (token.type === "punctuator" && BRACKET.test(token.value)) {\n      return "bracket";\n    }\n    if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {\n      return "punctuator";\n    }\n    return token.type;\n  };\n  tokenize = function* (text) {\n    let match;\n    while (match = jsTokens.default.exec(text)) {\n      const token = jsTokens.matchToToken(match);\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value\n      };\n    }\n  };\n}\nfunction highlight(text) {\n  if (text === "") return "";\n  const defs = getDefs(true);\n  let highlighted = "";\n  for (const {\n    type,\n    value\n  } of tokenize(text)) {\n    if (type in defs) {\n      highlighted += value.split(NEWLINE$1).map(str => defs[type](str)).join("\\n");\n    } else {\n      highlighted += value;\n    }\n  }\n  return highlighted;\n}\n\nlet deprecationWarningShown = false;\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nfunction getMarkerLines(loc, source, opts) {\n  const startLoc = Object.assign({\n    column: 0,\n    line: -1\n  }, loc.start);\n  const endLoc = Object.assign({}, startLoc, loc.end);\n  const {\n    linesAbove = 2,\n    linesBelow = 3\n  } = opts || {};\n  const startLine = startLoc.line;\n  const startColumn = startLoc.column;\n  const endLine = endLoc.line;\n  const endColumn = endLoc.column;\n  let start = Math.max(startLine - (linesAbove + 1), 0);\n  let end = Math.min(source.length, endLine + linesBelow);\n  if (startLine === -1) {\n    start = 0;\n  }\n  if (endLine === -1) {\n    end = source.length;\n  }\n  const lineDiff = endLine - startLine;\n  const markerLines = {};\n  if (lineDiff) {\n    for (let i = 0; i <= lineDiff; i++) {\n      const lineNumber = i + startLine;\n      if (!startColumn) {\n        markerLines[lineNumber] = true;\n      } else if (i === 0) {\n        const sourceLength = source[lineNumber - 1].length;\n        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n      } else if (i === lineDiff) {\n        markerLines[lineNumber] = [0, endColumn];\n      } else {\n        const sourceLength = source[lineNumber - i].length;\n        markerLines[lineNumber] = [0, sourceLength];\n      }\n    }\n  } else {\n    if (startColumn === endColumn) {\n      if (startColumn) {\n        markerLines[startLine] = [startColumn, 0];\n      } else {\n        markerLines[startLine] = true;\n      }\n    } else {\n      markerLines[startLine] = [startColumn, endColumn - startColumn];\n    }\n  }\n  return {\n    start,\n    end,\n    markerLines\n  };\n}\nfunction codeFrameColumns(rawLines, loc, opts = {}) {\n  const shouldHighlight = opts.forceColor || isColorSupported() && opts.highlightCode;\n  const defs = getDefs(shouldHighlight);\n  const lines = rawLines.split(NEWLINE);\n  const {\n    start,\n    end,\n    markerLines\n  } = getMarkerLines(loc, lines, opts);\n  const hasColumns = loc.start && typeof loc.start.column === "number";\n  const numberMaxWidth = String(end).length;\n  const highlightedLines = shouldHighlight ? highlight(rawLines) : rawLines;\n  let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {\n    const number = start + 1 + index;\n    const paddedNumber = ` ${number}`.slice(-numberMaxWidth);\n    const gutter = ` ${paddedNumber} |`;\n    const hasMarker = markerLines[number];\n    const lastMarkerLine = !markerLines[number + 1];\n    if (hasMarker) {\n      let markerLine = "";\n      if (Array.isArray(hasMarker)) {\n        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\t]/g, " ");\n        const numberOfMarkers = hasMarker[1] || 1;\n        markerLine = ["\\n ", defs.gutter(gutter.replace(/\\d/g, " ")), " ", markerSpacing, defs.marker("^").repeat(numberOfMarkers)].join("");\n        if (lastMarkerLine && opts.message) {\n          markerLine += " " + defs.message(opts.message);\n        }\n      }\n      return [defs.marker(">"), defs.gutter(gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");\n    } else {\n      return ` ${defs.gutter(gutter)}${line.length > 0 ? ` ${line}` : ""}`;\n    }\n  }).join("\\n");\n  if (opts.message && !hasColumns) {\n    frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}\\n${frame}`;\n  }\n  if (shouldHighlight) {\n    return defs.reset(frame);\n  } else {\n    return frame;\n  }\n}\nfunction index (rawLines, lineNumber, colNumber, opts = {}) {\n  if (!deprecationWarningShown) {\n    deprecationWarningShown = true;\n    const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";\n    if (process.emitWarning) {\n      process.emitWarning(message, "DeprecationWarning");\n    } else {\n      const deprecationError = new Error(message);\n      deprecationError.name = "DeprecationWarning";\n      console.warn(new Error(message));\n    }\n  }\n  colNumber = Math.max(colNumber, 0);\n  const location = {\n    start: {\n      column: colNumber,\n      line: lineNumber\n    }\n  };\n  return codeFrameColumns(rawLines, location, opts);\n}\n\nexports.codeFrameColumns = codeFrameColumns;\nexports["default"] = index;\nexports.highlight = highlight;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///62882\n')},74960:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nclass Buffer {\n  constructor(map, indentChar) {\n    this._map = null;\n    this._buf = "";\n    this._str = "";\n    this._appendCount = 0;\n    this._last = 0;\n    this._queue = [];\n    this._queueCursor = 0;\n    this._canMarkIdName = true;\n    this._indentChar = "";\n    this._fastIndentations = [];\n    this._position = {\n      line: 1,\n      column: 0\n    };\n    this._sourcePosition = {\n      identifierName: undefined,\n      identifierNamePos: undefined,\n      line: undefined,\n      column: undefined,\n      filename: undefined\n    };\n    this._map = map;\n    this._indentChar = indentChar;\n    for (let i = 0; i < 64; i++) {\n      this._fastIndentations.push(indentChar.repeat(i));\n    }\n    this._allocQueue();\n  }\n  _allocQueue() {\n    const queue = this._queue;\n    for (let i = 0; i < 16; i++) {\n      queue.push({\n        char: 0,\n        repeat: 1,\n        line: undefined,\n        column: undefined,\n        identifierName: undefined,\n        identifierNamePos: undefined,\n        filename: ""\n      });\n    }\n  }\n  _pushQueue(char, repeat, line, column, filename) {\n    const cursor = this._queueCursor;\n    if (cursor === this._queue.length) {\n      this._allocQueue();\n    }\n    const item = this._queue[cursor];\n    item.char = char;\n    item.repeat = repeat;\n    item.line = line;\n    item.column = column;\n    item.filename = filename;\n    this._queueCursor++;\n  }\n  _popQueue() {\n    if (this._queueCursor === 0) {\n      throw new Error("Cannot pop from empty queue");\n    }\n    return this._queue[--this._queueCursor];\n  }\n  get() {\n    this._flush();\n    const map = this._map;\n    const result = {\n      code: (this._buf + this._str).trimRight(),\n      decodedMap: map == null ? void 0 : map.getDecoded(),\n      get __mergedMap() {\n        return this.map;\n      },\n      get map() {\n        const resultMap = map ? map.get() : null;\n        result.map = resultMap;\n        return resultMap;\n      },\n      set map(value) {\n        Object.defineProperty(result, "map", {\n          value,\n          writable: true\n        });\n      },\n      get rawMappings() {\n        const mappings = map == null ? void 0 : map.getRawMappings();\n        result.rawMappings = mappings;\n        return mappings;\n      },\n      set rawMappings(value) {\n        Object.defineProperty(result, "rawMappings", {\n          value,\n          writable: true\n        });\n      }\n    };\n    return result;\n  }\n  append(str, maybeNewline) {\n    this._flush();\n    this._append(str, this._sourcePosition, maybeNewline);\n  }\n  appendChar(char) {\n    this._flush();\n    this._appendChar(char, 1, this._sourcePosition);\n  }\n  queue(char) {\n    if (char === 10) {\n      while (this._queueCursor !== 0) {\n        const char = this._queue[this._queueCursor - 1].char;\n        if (char !== 32 && char !== 9) {\n          break;\n        }\n        this._queueCursor--;\n      }\n    }\n    const sourcePosition = this._sourcePosition;\n    this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);\n  }\n  queueIndentation(repeat) {\n    if (repeat === 0) return;\n    this._pushQueue(-1, repeat, undefined, undefined, undefined);\n  }\n  _flush() {\n    const queueCursor = this._queueCursor;\n    const queue = this._queue;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      this._appendChar(item.char, item.repeat, item);\n    }\n    this._queueCursor = 0;\n  }\n  _appendChar(char, repeat, sourcePos) {\n    this._last = char;\n    if (char === -1) {\n      const fastIndentation = this._fastIndentations[repeat];\n      if (fastIndentation !== undefined) {\n        this._str += fastIndentation;\n      } else {\n        this._str += repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;\n      }\n    } else {\n      this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);\n    }\n    if (char !== 10) {\n      this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename);\n      this._position.column += repeat;\n    } else {\n      this._position.line++;\n      this._position.column = 0;\n    }\n    if (this._canMarkIdName) {\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n  }\n  _append(str, sourcePos, maybeNewline) {\n    const len = str.length;\n    const position = this._position;\n    this._last = str.charCodeAt(len - 1);\n    if (++this._appendCount > 4096) {\n      +this._str;\n      this._buf += this._str;\n      this._str = str;\n      this._appendCount = 0;\n    } else {\n      this._str += str;\n    }\n    if (!maybeNewline && !this._map) {\n      position.column += len;\n      return;\n    }\n    const {\n      column,\n      identifierName,\n      identifierNamePos,\n      filename\n    } = sourcePos;\n    let line = sourcePos.line;\n    if ((identifierName != null || identifierNamePos != null) && this._canMarkIdName) {\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n    let i = str.indexOf("\\n");\n    let last = 0;\n    if (i !== 0) {\n      this._mark(line, column, identifierName, identifierNamePos, filename);\n    }\n    while (i !== -1) {\n      position.line++;\n      position.column = 0;\n      last = i + 1;\n      if (last < len && line !== undefined) {\n        this._mark(++line, 0, null, null, filename);\n      }\n      i = str.indexOf("\\n", last);\n    }\n    position.column += len - last;\n  }\n  _mark(line, column, identifierName, identifierNamePos, filename) {\n    var _this$_map;\n    (_this$_map = this._map) == null || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);\n  }\n  removeTrailingNewline() {\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 10) {\n      this._queueCursor--;\n    }\n  }\n  removeLastSemicolon() {\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 59) {\n      this._queueCursor--;\n    }\n  }\n  getLastChar() {\n    const queueCursor = this._queueCursor;\n    return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;\n  }\n  getNewlineCount() {\n    const queueCursor = this._queueCursor;\n    let count = 0;\n    if (queueCursor === 0) return this._last === 10 ? 1 : 0;\n    for (let i = queueCursor - 1; i >= 0; i--) {\n      if (this._queue[i].char !== 10) {\n        break;\n      }\n      count++;\n    }\n    return count === queueCursor && this._last === 10 ? count + 1 : count;\n  }\n  endsWithCharAndNewline() {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0) {\n      const lastCp = queue[queueCursor - 1].char;\n      if (lastCp !== 10) return;\n      if (queueCursor > 1) {\n        return queue[queueCursor - 2].char;\n      } else {\n        return this._last;\n      }\n    }\n  }\n  hasContent() {\n    return this._queueCursor !== 0 || !!this._last;\n  }\n  exactSource(loc, cb) {\n    if (!this._map) {\n      cb();\n      return;\n    }\n    this.source("start", loc);\n    const identifierName = loc.identifierName;\n    const sourcePos = this._sourcePosition;\n    if (identifierName) {\n      this._canMarkIdName = false;\n      sourcePos.identifierName = identifierName;\n    }\n    cb();\n    if (identifierName) {\n      this._canMarkIdName = true;\n      sourcePos.identifierName = undefined;\n      sourcePos.identifierNamePos = undefined;\n    }\n    this.source("end", loc);\n  }\n  source(prop, loc) {\n    if (!this._map) return;\n    this._normalizePosition(prop, loc, 0);\n  }\n  sourceWithOffset(prop, loc, columnOffset) {\n    if (!this._map) return;\n    this._normalizePosition(prop, loc, columnOffset);\n  }\n  _normalizePosition(prop, loc, columnOffset) {\n    const pos = loc[prop];\n    const target = this._sourcePosition;\n    if (pos) {\n      target.line = pos.line;\n      target.column = Math.max(pos.column + columnOffset, 0);\n      target.filename = loc.filename;\n    }\n  }\n  getCurrentColumn() {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    let lastIndex = -1;\n    let len = 0;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      if (item.char === 10) {\n        lastIndex = len;\n      }\n      len += item.repeat;\n    }\n    return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;\n  }\n  getCurrentLine() {\n    let count = 0;\n    const queue = this._queue;\n    for (let i = 0; i < this._queueCursor; i++) {\n      if (queue[i].char === 10) {\n        count++;\n      }\n    }\n    return this._position.line + count;\n  }\n}\nexports["default"] = Buffer;\n\n//# sourceMappingURL=buffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74960\n')},90546:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.BlockStatement = BlockStatement;\nexports.Directive = Directive;\nexports.DirectiveLiteral = DirectiveLiteral;\nexports.File = File;\nexports.InterpreterDirective = InterpreterDirective;\nexports.Placeholder = Placeholder;\nexports.Program = Program;\nfunction File(node) {\n  if (node.program) {\n    this.print(node.program.interpreter);\n  }\n  this.print(node.program);\n}\nfunction Program(node) {\n  var _node$directives;\n  this.noIndentInnerCommentsHere();\n  this.printInnerComments();\n  const directivesLen = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;\n  if (directivesLen) {\n    var _node$directives$trai;\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, {\n      trailingCommentsLineOffset: newline\n    });\n    if (!((_node$directives$trai = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai.length)) {\n      this.newline(newline);\n    }\n  }\n  this.printSequence(node.body);\n}\nfunction BlockStatement(node) {\n  var _node$directives2;\n  this.tokenChar(123);\n  const exit = this.enterDelimited();\n  const directivesLen = (_node$directives2 = node.directives) == null ? void 0 : _node$directives2.length;\n  if (directivesLen) {\n    var _node$directives$trai2;\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, {\n      indent: true,\n      trailingCommentsLineOffset: newline\n    });\n    if (!((_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai2.length)) {\n      this.newline(newline);\n    }\n  }\n  this.printSequence(node.body, {\n    indent: true\n  });\n  exit();\n  this.rightBrace(node);\n}\nfunction Directive(node) {\n  this.print(node.value);\n  this.semicolon();\n}\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*"/;\nfunction DirectiveLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n  const {\n    value\n  } = node;\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`"${value}"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`\'${value}\'`);\n  } else {\n    throw new Error("Malformed AST: it is not possible to print a directive containing" + " both unescaped single and double quotes.");\n  }\n}\nfunction InterpreterDirective(node) {\n  this.token(`#!${node.value}`);\n  this.newline(1, true);\n}\nfunction Placeholder(node) {\n  this.token("%%");\n  this.print(node.name);\n  this.token("%%");\n  if (node.expectedNode === "Statement") {\n    this.semicolon();\n  }\n}\n\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA1NDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0JBQXNCO0FBQ3RCLGlCQUFpQjtBQUNqQix3QkFBd0I7QUFDeEIsWUFBWTtBQUNaLDRCQUE0QjtBQUM1QixtQkFBbUI7QUFDbkIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxtQkFBbUIsTUFBTTtBQUN6QixJQUFJO0FBQ0osbUJBQW1CLE1BQU07QUFDekIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFdBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9nZW5lcmF0b3IvbGliL2dlbmVyYXRvcnMvYmFzZS5qcz8zZjA2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CbG9ja1N0YXRlbWVudCA9IEJsb2NrU3RhdGVtZW50O1xuZXhwb3J0cy5EaXJlY3RpdmUgPSBEaXJlY3RpdmU7XG5leHBvcnRzLkRpcmVjdGl2ZUxpdGVyYWwgPSBEaXJlY3RpdmVMaXRlcmFsO1xuZXhwb3J0cy5GaWxlID0gRmlsZTtcbmV4cG9ydHMuSW50ZXJwcmV0ZXJEaXJlY3RpdmUgPSBJbnRlcnByZXRlckRpcmVjdGl2ZTtcbmV4cG9ydHMuUGxhY2Vob2xkZXIgPSBQbGFjZWhvbGRlcjtcbmV4cG9ydHMuUHJvZ3JhbSA9IFByb2dyYW07XG5mdW5jdGlvbiBGaWxlKG5vZGUpIHtcbiAgaWYgKG5vZGUucHJvZ3JhbSkge1xuICAgIHRoaXMucHJpbnQobm9kZS5wcm9ncmFtLmludGVycHJldGVyKTtcbiAgfVxuICB0aGlzLnByaW50KG5vZGUucHJvZ3JhbSk7XG59XG5mdW5jdGlvbiBQcm9ncmFtKG5vZGUpIHtcbiAgdmFyIF9ub2RlJGRpcmVjdGl2ZXM7XG4gIHRoaXMubm9JbmRlbnRJbm5lckNvbW1lbnRzSGVyZSgpO1xuICB0aGlzLnByaW50SW5uZXJDb21tZW50cygpO1xuICBjb25zdCBkaXJlY3RpdmVzTGVuID0gKF9ub2RlJGRpcmVjdGl2ZXMgPSBub2RlLmRpcmVjdGl2ZXMpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRkaXJlY3RpdmVzLmxlbmd0aDtcbiAgaWYgKGRpcmVjdGl2ZXNMZW4pIHtcbiAgICB2YXIgX25vZGUkZGlyZWN0aXZlcyR0cmFpO1xuICAgIGNvbnN0IG5ld2xpbmUgPSBub2RlLmJvZHkubGVuZ3RoID8gMiA6IDE7XG4gICAgdGhpcy5wcmludFNlcXVlbmNlKG5vZGUuZGlyZWN0aXZlcywge1xuICAgICAgdHJhaWxpbmdDb21tZW50c0xpbmVPZmZzZXQ6IG5ld2xpbmVcbiAgICB9KTtcbiAgICBpZiAoISgoX25vZGUkZGlyZWN0aXZlcyR0cmFpID0gbm9kZS5kaXJlY3RpdmVzW2RpcmVjdGl2ZXNMZW4gLSAxXS50cmFpbGluZ0NvbW1lbnRzKSAhPSBudWxsICYmIF9ub2RlJGRpcmVjdGl2ZXMkdHJhaS5sZW5ndGgpKSB7XG4gICAgICB0aGlzLm5ld2xpbmUobmV3bGluZSk7XG4gICAgfVxuICB9XG4gIHRoaXMucHJpbnRTZXF1ZW5jZShub2RlLmJvZHkpO1xufVxuZnVuY3Rpb24gQmxvY2tTdGF0ZW1lbnQobm9kZSkge1xuICB2YXIgX25vZGUkZGlyZWN0aXZlczI7XG4gIHRoaXMudG9rZW5DaGFyKDEyMyk7XG4gIGNvbnN0IGV4aXQgPSB0aGlzLmVudGVyRGVsaW1pdGVkKCk7XG4gIGNvbnN0IGRpcmVjdGl2ZXNMZW4gPSAoX25vZGUkZGlyZWN0aXZlczIgPSBub2RlLmRpcmVjdGl2ZXMpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRkaXJlY3RpdmVzMi5sZW5ndGg7XG4gIGlmIChkaXJlY3RpdmVzTGVuKSB7XG4gICAgdmFyIF9ub2RlJGRpcmVjdGl2ZXMkdHJhaTI7XG4gICAgY29uc3QgbmV3bGluZSA9IG5vZGUuYm9keS5sZW5ndGggPyAyIDogMTtcbiAgICB0aGlzLnByaW50U2VxdWVuY2Uobm9kZS5kaXJlY3RpdmVzLCB7XG4gICAgICBpbmRlbnQ6IHRydWUsXG4gICAgICB0cmFpbGluZ0NvbW1lbnRzTGluZU9mZnNldDogbmV3bGluZVxuICAgIH0pO1xuICAgIGlmICghKChfbm9kZSRkaXJlY3RpdmVzJHRyYWkyID0gbm9kZS5kaXJlY3RpdmVzW2RpcmVjdGl2ZXNMZW4gLSAxXS50cmFpbGluZ0NvbW1lbnRzKSAhPSBudWxsICYmIF9ub2RlJGRpcmVjdGl2ZXMkdHJhaTIubGVuZ3RoKSkge1xuICAgICAgdGhpcy5uZXdsaW5lKG5ld2xpbmUpO1xuICAgIH1cbiAgfVxuICB0aGlzLnByaW50U2VxdWVuY2Uobm9kZS5ib2R5LCB7XG4gICAgaW5kZW50OiB0cnVlXG4gIH0pO1xuICBleGl0KCk7XG4gIHRoaXMucmlnaHRCcmFjZShub2RlKTtcbn1cbmZ1bmN0aW9uIERpcmVjdGl2ZShub2RlKSB7XG4gIHRoaXMucHJpbnQobm9kZS52YWx1ZSk7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG59XG5jb25zdCB1bmVzY2FwZWRTaW5nbGVRdW90ZVJFID0gLyg/Ol58W15cXFxcXSkoPzpcXFxcXFxcXCkqJy87XG5jb25zdCB1bmVzY2FwZWREb3VibGVRdW90ZVJFID0gLyg/Ol58W15cXFxcXSkoPzpcXFxcXFxcXCkqXCIvO1xuZnVuY3Rpb24gRGlyZWN0aXZlTGl0ZXJhbChub2RlKSB7XG4gIGNvbnN0IHJhdyA9IHRoaXMuZ2V0UG9zc2libGVSYXcobm9kZSk7XG4gIGlmICghdGhpcy5mb3JtYXQubWluaWZpZWQgJiYgcmF3ICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnRva2VuKHJhdyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtcbiAgICB2YWx1ZVxuICB9ID0gbm9kZTtcbiAgaWYgKCF1bmVzY2FwZWREb3VibGVRdW90ZVJFLnRlc3QodmFsdWUpKSB7XG4gICAgdGhpcy50b2tlbihgXCIke3ZhbHVlfVwiYCk7XG4gIH0gZWxzZSBpZiAoIXVuZXNjYXBlZFNpbmdsZVF1b3RlUkUudGVzdCh2YWx1ZSkpIHtcbiAgICB0aGlzLnRva2VuKGAnJHt2YWx1ZX0nYCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIEFTVDogaXQgaXMgbm90IHBvc3NpYmxlIHRvIHByaW50IGEgZGlyZWN0aXZlIGNvbnRhaW5pbmdcIiArIFwiIGJvdGggdW5lc2NhcGVkIHNpbmdsZSBhbmQgZG91YmxlIHF1b3Rlcy5cIik7XG4gIH1cbn1cbmZ1bmN0aW9uIEludGVycHJldGVyRGlyZWN0aXZlKG5vZGUpIHtcbiAgdGhpcy50b2tlbihgIyEke25vZGUudmFsdWV9YCk7XG4gIHRoaXMubmV3bGluZSgxLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIFBsYWNlaG9sZGVyKG5vZGUpIHtcbiAgdGhpcy50b2tlbihcIiUlXCIpO1xuICB0aGlzLnByaW50KG5vZGUubmFtZSk7XG4gIHRoaXMudG9rZW4oXCIlJVwiKTtcbiAgaWYgKG5vZGUuZXhwZWN0ZWROb2RlID09PSBcIlN0YXRlbWVudFwiKSB7XG4gICAgdGhpcy5zZW1pY29sb24oKTtcbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///90546\n')},76271:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ClassAccessorProperty = ClassAccessorProperty;\nexports.ClassBody = ClassBody;\nexports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;\nexports.ClassMethod = ClassMethod;\nexports.ClassPrivateMethod = ClassPrivateMethod;\nexports.ClassPrivateProperty = ClassPrivateProperty;\nexports.ClassProperty = ClassProperty;\nexports.StaticBlock = StaticBlock;\nexports._classMethodHead = _classMethodHead;\nvar _t = __webpack_require__(2352);\nconst {\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration\n} = _t;\nfunction ClassDeclaration(node, parent) {\n  const inExport = isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent);\n  if (!inExport || !this._shouldPrintDecoratorsBeforeExport(parent)) {\n    this.printJoin(node.decorators);\n  }\n  if (node.declare) {\n    this.word("declare");\n    this.space();\n  }\n  if (node.abstract) {\n    this.word("abstract");\n    this.space();\n  }\n  this.word("class");\n  if (node.id) {\n    this.space();\n    this.print(node.id);\n  }\n  this.print(node.typeParameters);\n  if (node.superClass) {\n    this.space();\n    this.word("extends");\n    this.space();\n    this.print(node.superClass);\n    this.print(node.superTypeParameters);\n  }\n  if (node.implements) {\n    this.space();\n    this.word("implements");\n    this.space();\n    this.printList(node.implements);\n  }\n  this.space();\n  this.print(node.body);\n}\nfunction ClassBody(node) {\n  this.tokenChar(123);\n  if (node.body.length === 0) {\n    this.tokenChar(125);\n  } else {\n    this.newline();\n    const separator = classBodyEmptySemicolonsPrinter(this, node);\n    separator == null || separator(-1);\n    const exit = this.enterDelimited();\n    this.printJoin(node.body, {\n      statement: true,\n      indent: true,\n      separator,\n      printTrailingSeparator: true\n    });\n    exit();\n    if (!this.endsWith(10)) this.newline();\n    this.rightBrace(node);\n  }\n}\nfunction classBodyEmptySemicolonsPrinter(printer, node) {\n  if (!printer.tokenMap || node.start == null || node.end == null) {\n    return null;\n  }\n  const indexes = printer.tokenMap.getIndexes(node);\n  if (!indexes) return null;\n  let k = 1;\n  let occurrenceCount = 0;\n  let nextLocIndex = 0;\n  const advanceNextLocIndex = () => {\n    while (nextLocIndex < node.body.length && node.body[nextLocIndex].start == null) {\n      nextLocIndex++;\n    }\n  };\n  advanceNextLocIndex();\n  return i => {\n    if (nextLocIndex <= i) {\n      nextLocIndex = i + 1;\n      advanceNextLocIndex();\n    }\n    const end = nextLocIndex === node.body.length ? node.end : node.body[nextLocIndex].start;\n    let tok;\n    while (k < indexes.length && printer.tokenMap.matchesOriginal(tok = printer._tokens[indexes[k]], ";") && tok.start < end) {\n      printer.token(";", undefined, occurrenceCount++);\n      k++;\n    }\n  };\n}\nfunction ClassProperty(node) {\n  this.printJoin(node.decorators);\n  if (!node.static && !this.format.preserveFormat) {\n    var _node$key$loc;\n    const endLine = (_node$key$loc = node.key.loc) == null || (_node$key$loc = _node$key$loc.end) == null ? void 0 : _node$key$loc.line;\n    if (endLine) this.catchUp(endLine);\n  }\n  this.tsPrintClassMemberModifiers(node);\n  if (node.computed) {\n    this.tokenChar(91);\n    this.print(node.key);\n    this.tokenChar(93);\n  } else {\n    this._variance(node);\n    this.print(node.key);\n  }\n  if (node.optional) {\n    this.tokenChar(63);\n  }\n  if (node.definite) {\n    this.tokenChar(33);\n  }\n  this.print(node.typeAnnotation);\n  if (node.value) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.value);\n  }\n  this.semicolon();\n}\nfunction ClassAccessorProperty(node) {\n  var _node$key$loc2;\n  this.printJoin(node.decorators);\n  const endLine = (_node$key$loc2 = node.key.loc) == null || (_node$key$loc2 = _node$key$loc2.end) == null ? void 0 : _node$key$loc2.line;\n  if (endLine) this.catchUp(endLine);\n  this.tsPrintClassMemberModifiers(node);\n  this.word("accessor", true);\n  this.space();\n  if (node.computed) {\n    this.tokenChar(91);\n    this.print(node.key);\n    this.tokenChar(93);\n  } else {\n    this._variance(node);\n    this.print(node.key);\n  }\n  if (node.optional) {\n    this.tokenChar(63);\n  }\n  if (node.definite) {\n    this.tokenChar(33);\n  }\n  this.print(node.typeAnnotation);\n  if (node.value) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.value);\n  }\n  this.semicolon();\n}\nfunction ClassPrivateProperty(node) {\n  this.printJoin(node.decorators);\n  if (node.static) {\n    this.word("static");\n    this.space();\n  }\n  this.print(node.key);\n  this.print(node.typeAnnotation);\n  if (node.value) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.value);\n  }\n  this.semicolon();\n}\nfunction ClassMethod(node) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body);\n}\nfunction ClassPrivateMethod(node) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body);\n}\nfunction _classMethodHead(node) {\n  this.printJoin(node.decorators);\n  if (!this.format.preserveFormat) {\n    var _node$key$loc3;\n    const endLine = (_node$key$loc3 = node.key.loc) == null || (_node$key$loc3 = _node$key$loc3.end) == null ? void 0 : _node$key$loc3.line;\n    if (endLine) this.catchUp(endLine);\n  }\n  this.tsPrintClassMemberModifiers(node);\n  this._methodHead(node);\n}\nfunction StaticBlock(node) {\n  this.word("static");\n  this.space();\n  this.tokenChar(123);\n  if (node.body.length === 0) {\n    this.tokenChar(125);\n  } else {\n    this.newline();\n    this.printSequence(node.body, {\n      indent: true\n    });\n    this.rightBrace(node);\n  }\n}\n\n//# sourceMappingURL=classes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///76271\n')},34436:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;\nexports.AssignmentPattern = AssignmentPattern;\nexports.AwaitExpression = AwaitExpression;\nexports.BindExpression = BindExpression;\nexports.CallExpression = CallExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.Decorator = Decorator;\nexports.DoExpression = DoExpression;\nexports.EmptyStatement = EmptyStatement;\nexports.ExpressionStatement = ExpressionStatement;\nexports.Import = Import;\nexports.MemberExpression = MemberExpression;\nexports.MetaProperty = MetaProperty;\nexports.ModuleExpression = ModuleExpression;\nexports.NewExpression = NewExpression;\nexports.OptionalCallExpression = OptionalCallExpression;\nexports.OptionalMemberExpression = OptionalMemberExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.PrivateName = PrivateName;\nexports.SequenceExpression = SequenceExpression;\nexports.Super = Super;\nexports.ThisExpression = ThisExpression;\nexports.UnaryExpression = UnaryExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;\nexports.YieldExpression = YieldExpression;\nexports._shouldPrintDecoratorsBeforeExport = _shouldPrintDecoratorsBeforeExport;\nvar _t = __webpack_require__(2352);\nvar _index = __webpack_require__(31373);\nconst {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression,\n  isPattern\n} = _t;\nfunction UnaryExpression(node) {\n  const {\n    operator\n  } = node;\n  if (operator === "void" || operator === "delete" || operator === "typeof" || operator === "throw") {\n    this.word(operator);\n    this.space();\n  } else {\n    this.token(operator);\n  }\n  this.print(node.argument);\n}\nfunction DoExpression(node) {\n  if (node.async) {\n    this.word("async", true);\n    this.space();\n  }\n  this.word("do");\n  this.space();\n  this.print(node.body);\n}\nfunction ParenthesizedExpression(node) {\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.print(node.expression);\n  exit();\n  this.rightParens(node);\n}\nfunction UpdateExpression(node) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument);\n  } else {\n    this.print(node.argument, true);\n    this.token(node.operator);\n  }\n}\nfunction ConditionalExpression(node) {\n  this.print(node.test);\n  this.space();\n  this.tokenChar(63);\n  this.space();\n  this.print(node.consequent);\n  this.space();\n  this.tokenChar(58);\n  this.space();\n  this.print(node.alternate);\n}\nfunction NewExpression(node, parent) {\n  this.word("new");\n  this.space();\n  this.print(node.callee);\n  if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, {\n    callee: node\n  }) && !isMemberExpression(parent) && !isNewExpression(parent)) {\n    return;\n  }\n  this.print(node.typeArguments);\n  this.print(node.typeParameters);\n  if (node.optional) {\n    this.token("?.");\n  }\n  if (node.arguments.length === 0 && this.tokenMap && !this.tokenMap.endMatches(node, ")")) {\n    return;\n  }\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.printList(node.arguments, {\n    printTrailingSeparator: this.shouldPrintTrailingComma(")")\n  });\n  exit();\n  this.rightParens(node);\n}\nfunction SequenceExpression(node) {\n  this.printList(node.expressions);\n}\nfunction ThisExpression() {\n  this.word("this");\n}\nfunction Super() {\n  this.word("super");\n}\nfunction _shouldPrintDecoratorsBeforeExport(node) {\n  if (typeof this.format.decoratorsBeforeExport === "boolean") {\n    return this.format.decoratorsBeforeExport;\n  }\n  return typeof node.start === "number" && node.start === node.declaration.start;\n}\nfunction Decorator(node) {\n  this.tokenChar(64);\n  this.print(node.expression);\n  this.newline();\n}\nfunction OptionalMemberExpression(node) {\n  let {\n    computed\n  } = node;\n  const {\n    optional,\n    property\n  } = node;\n  this.print(node.object);\n  if (!computed && isMemberExpression(property)) {\n    throw new TypeError("Got a MemberExpression for MemberExpression property");\n  }\n  if (isLiteral(property) && typeof property.value === "number") {\n    computed = true;\n  }\n  if (optional) {\n    this.token("?.");\n  }\n  if (computed) {\n    this.tokenChar(91);\n    this.print(property);\n    this.tokenChar(93);\n  } else {\n    if (!optional) {\n      this.tokenChar(46);\n    }\n    this.print(property);\n  }\n}\nfunction OptionalCallExpression(node) {\n  this.print(node.callee);\n  this.print(node.typeParameters);\n  if (node.optional) {\n    this.token("?.");\n  }\n  this.print(node.typeArguments);\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.printList(node.arguments);\n  exit();\n  this.rightParens(node);\n}\nfunction CallExpression(node) {\n  this.print(node.callee);\n  this.print(node.typeArguments);\n  this.print(node.typeParameters);\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.printList(node.arguments, {\n    printTrailingSeparator: this.shouldPrintTrailingComma(")")\n  });\n  exit();\n  this.rightParens(node);\n}\nfunction Import() {\n  this.word("import");\n}\nfunction AwaitExpression(node) {\n  this.word("await");\n  if (node.argument) {\n    this.space();\n    this.printTerminatorless(node.argument);\n  }\n}\nfunction YieldExpression(node) {\n  this.word("yield", true);\n  if (node.delegate) {\n    this.tokenChar(42);\n    if (node.argument) {\n      this.space();\n      this.print(node.argument);\n    }\n  } else {\n    if (node.argument) {\n      this.space();\n      this.printTerminatorless(node.argument);\n    }\n  }\n}\nfunction EmptyStatement() {\n  this.semicolon(true);\n}\nfunction ExpressionStatement(node) {\n  this.tokenContext |= _index.TokenContext.expressionStatement;\n  this.print(node.expression);\n  this.semicolon();\n}\nfunction AssignmentPattern(node) {\n  this.print(node.left);\n  if (node.left.type === "Identifier" || isPattern(node.left)) {\n    if (node.left.optional) this.tokenChar(63);\n    this.print(node.left.typeAnnotation);\n  }\n  this.space();\n  this.tokenChar(61);\n  this.space();\n  this.print(node.right);\n}\nfunction AssignmentExpression(node) {\n  this.print(node.left);\n  this.space();\n  if (node.operator === "in" || node.operator === "instanceof") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n    this._endsWithDiv = node.operator === "/";\n  }\n  this.space();\n  this.print(node.right);\n}\nfunction BindExpression(node) {\n  this.print(node.object);\n  this.token("::");\n  this.print(node.callee);\n}\nfunction MemberExpression(node) {\n  this.print(node.object);\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError("Got a MemberExpression for MemberExpression property");\n  }\n  let computed = node.computed;\n  if (isLiteral(node.property) && typeof node.property.value === "number") {\n    computed = true;\n  }\n  if (computed) {\n    const exit = this.enterDelimited();\n    this.tokenChar(91);\n    this.print(node.property);\n    this.tokenChar(93);\n    exit();\n  } else {\n    this.tokenChar(46);\n    this.print(node.property);\n  }\n}\nfunction MetaProperty(node) {\n  this.print(node.meta);\n  this.tokenChar(46);\n  this.print(node.property);\n}\nfunction PrivateName(node) {\n  this.tokenChar(35);\n  this.print(node.id);\n}\nfunction V8IntrinsicIdentifier(node) {\n  this.tokenChar(37);\n  this.word(node.name);\n}\nfunction ModuleExpression(node) {\n  this.word("module", true);\n  this.space();\n  this.tokenChar(123);\n  this.indent();\n  const {\n    body\n  } = node;\n  if (body.body.length || body.directives.length) {\n    this.newline();\n  }\n  this.print(body);\n  this.dedent();\n  this.rightBrace(node);\n}\n\n//# sourceMappingURL=expressions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34436\n')},72259:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.AnyTypeAnnotation = AnyTypeAnnotation;\nexports.ArrayTypeAnnotation = ArrayTypeAnnotation;\nexports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;\nexports.BooleanTypeAnnotation = BooleanTypeAnnotation;\nexports.DeclareClass = DeclareClass;\nexports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;\nexports.DeclareExportDeclaration = DeclareExportDeclaration;\nexports.DeclareFunction = DeclareFunction;\nexports.DeclareInterface = DeclareInterface;\nexports.DeclareModule = DeclareModule;\nexports.DeclareModuleExports = DeclareModuleExports;\nexports.DeclareOpaqueType = DeclareOpaqueType;\nexports.DeclareTypeAlias = DeclareTypeAlias;\nexports.DeclareVariable = DeclareVariable;\nexports.DeclaredPredicate = DeclaredPredicate;\nexports.EmptyTypeAnnotation = EmptyTypeAnnotation;\nexports.EnumBooleanBody = EnumBooleanBody;\nexports.EnumBooleanMember = EnumBooleanMember;\nexports.EnumDeclaration = EnumDeclaration;\nexports.EnumDefaultedMember = EnumDefaultedMember;\nexports.EnumNumberBody = EnumNumberBody;\nexports.EnumNumberMember = EnumNumberMember;\nexports.EnumStringBody = EnumStringBody;\nexports.EnumStringMember = EnumStringMember;\nexports.EnumSymbolBody = EnumSymbolBody;\nexports.ExistsTypeAnnotation = ExistsTypeAnnotation;\nexports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.FunctionTypeParam = FunctionTypeParam;\nexports.IndexedAccessType = IndexedAccessType;\nexports.InferredPredicate = InferredPredicate;\nexports.InterfaceDeclaration = InterfaceDeclaration;\nexports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;\nexports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;\nexports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;\nexports.MixedTypeAnnotation = MixedTypeAnnotation;\nexports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nObject.defineProperty(exports, "NumberLiteralTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _types2.NumericLiteral;\n  }\n}));\nexports.NumberTypeAnnotation = NumberTypeAnnotation;\nexports.ObjectTypeAnnotation = ObjectTypeAnnotation;\nexports.ObjectTypeCallProperty = ObjectTypeCallProperty;\nexports.ObjectTypeIndexer = ObjectTypeIndexer;\nexports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;\nexports.ObjectTypeProperty = ObjectTypeProperty;\nexports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;\nexports.OpaqueType = OpaqueType;\nexports.OptionalIndexedAccessType = OptionalIndexedAccessType;\nexports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;\nObject.defineProperty(exports, "StringLiteralTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _types2.StringLiteral;\n  }\n}));\nexports.StringTypeAnnotation = StringTypeAnnotation;\nexports.SymbolTypeAnnotation = SymbolTypeAnnotation;\nexports.ThisTypeAnnotation = ThisTypeAnnotation;\nexports.TupleTypeAnnotation = TupleTypeAnnotation;\nexports.TypeAlias = TypeAlias;\nexports.TypeAnnotation = TypeAnnotation;\nexports.TypeCastExpression = TypeCastExpression;\nexports.TypeParameter = TypeParameter;\nexports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;\nexports.TypeofTypeAnnotation = TypeofTypeAnnotation;\nexports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.Variance = Variance;\nexports.VoidTypeAnnotation = VoidTypeAnnotation;\nexports._interfaceish = _interfaceish;\nexports._variance = _variance;\nvar _t = __webpack_require__(2352);\nvar _modules = __webpack_require__(89638);\nvar _index = __webpack_require__(31373);\nvar _types2 = __webpack_require__(7942);\nconst {\n  isDeclareExportDeclaration,\n  isStatement\n} = _t;\nfunction AnyTypeAnnotation() {\n  this.word("any");\n}\nfunction ArrayTypeAnnotation(node) {\n  this.print(node.elementType, true);\n  this.tokenChar(91);\n  this.tokenChar(93);\n}\nfunction BooleanTypeAnnotation() {\n  this.word("boolean");\n}\nfunction BooleanLiteralTypeAnnotation(node) {\n  this.word(node.value ? "true" : "false");\n}\nfunction NullLiteralTypeAnnotation() {\n  this.word("null");\n}\nfunction DeclareClass(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word("declare");\n    this.space();\n  }\n  this.word("class");\n  this.space();\n  this._interfaceish(node);\n}\nfunction DeclareFunction(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word("declare");\n    this.space();\n  }\n  this.word("function");\n  this.space();\n  this.print(node.id);\n  this.print(node.id.typeAnnotation.typeAnnotation);\n  if (node.predicate) {\n    this.space();\n    this.print(node.predicate);\n  }\n  this.semicolon();\n}\nfunction InferredPredicate() {\n  this.tokenChar(37);\n  this.word("checks");\n}\nfunction DeclaredPredicate(node) {\n  this.tokenChar(37);\n  this.word("checks");\n  this.tokenChar(40);\n  this.print(node.value);\n  this.tokenChar(41);\n}\nfunction DeclareInterface(node) {\n  this.word("declare");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\nfunction DeclareModule(node) {\n  this.word("declare");\n  this.space();\n  this.word("module");\n  this.space();\n  this.print(node.id);\n  this.space();\n  this.print(node.body);\n}\nfunction DeclareModuleExports(node) {\n  this.word("declare");\n  this.space();\n  this.word("module");\n  this.tokenChar(46);\n  this.word("exports");\n  this.print(node.typeAnnotation);\n}\nfunction DeclareTypeAlias(node) {\n  this.word("declare");\n  this.space();\n  this.TypeAlias(node);\n}\nfunction DeclareOpaqueType(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word("declare");\n    this.space();\n  }\n  this.OpaqueType(node);\n}\nfunction DeclareVariable(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word("declare");\n    this.space();\n  }\n  this.word("var");\n  this.space();\n  this.print(node.id);\n  this.print(node.id.typeAnnotation);\n  this.semicolon();\n}\nfunction DeclareExportDeclaration(node) {\n  this.word("declare");\n  this.space();\n  this.word("export");\n  this.space();\n  if (node.default) {\n    this.word("default");\n    this.space();\n  }\n  FlowExportDeclaration.call(this, node);\n}\nfunction DeclareExportAllDeclaration(node) {\n  this.word("declare");\n  this.space();\n  _modules.ExportAllDeclaration.call(this, node);\n}\nfunction EnumDeclaration(node) {\n  const {\n    id,\n    body\n  } = node;\n  this.word("enum");\n  this.space();\n  this.print(id);\n  this.print(body);\n}\nfunction enumExplicitType(context, name, hasExplicitType) {\n  if (hasExplicitType) {\n    context.space();\n    context.word("of");\n    context.space();\n    context.word(name);\n  }\n  context.space();\n}\nfunction enumBody(context, node) {\n  const {\n    members\n  } = node;\n  context.token("{");\n  context.indent();\n  context.newline();\n  for (const member of members) {\n    context.print(member);\n    context.newline();\n  }\n  if (node.hasUnknownMembers) {\n    context.token("...");\n    context.newline();\n  }\n  context.dedent();\n  context.token("}");\n}\nfunction EnumBooleanBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, "boolean", explicitType);\n  enumBody(this, node);\n}\nfunction EnumNumberBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, "number", explicitType);\n  enumBody(this, node);\n}\nfunction EnumStringBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, "string", explicitType);\n  enumBody(this, node);\n}\nfunction EnumSymbolBody(node) {\n  enumExplicitType(this, "symbol", true);\n  enumBody(this, node);\n}\nfunction EnumDefaultedMember(node) {\n  const {\n    id\n  } = node;\n  this.print(id);\n  this.tokenChar(44);\n}\nfunction enumInitializedMember(context, node) {\n  context.print(node.id);\n  context.space();\n  context.token("=");\n  context.space();\n  context.print(node.init);\n  context.token(",");\n}\nfunction EnumBooleanMember(node) {\n  enumInitializedMember(this, node);\n}\nfunction EnumNumberMember(node) {\n  enumInitializedMember(this, node);\n}\nfunction EnumStringMember(node) {\n  enumInitializedMember(this, node);\n}\nfunction FlowExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    this.tokenChar(123);\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers);\n      this.space();\n    }\n    this.tokenChar(125);\n    if (node.source) {\n      this.space();\n      this.word("from");\n      this.space();\n      this.print(node.source);\n    }\n    this.semicolon();\n  }\n}\nfunction ExistsTypeAnnotation() {\n  this.tokenChar(42);\n}\nfunction FunctionTypeAnnotation(node, parent) {\n  this.print(node.typeParameters);\n  this.tokenChar(40);\n  if (node.this) {\n    this.word("this");\n    this.tokenChar(58);\n    this.space();\n    this.print(node.this.typeAnnotation);\n    if (node.params.length || node.rest) {\n      this.tokenChar(44);\n      this.space();\n    }\n  }\n  this.printList(node.params);\n  if (node.rest) {\n    if (node.params.length) {\n      this.tokenChar(44);\n      this.space();\n    }\n    this.token("...");\n    this.print(node.rest);\n  }\n  this.tokenChar(41);\n  const type = parent == null ? void 0 : parent.type;\n  if (type != null && (type === "ObjectTypeCallProperty" || type === "ObjectTypeInternalSlot" || type === "DeclareFunction" || type === "ObjectTypeProperty" && parent.method)) {\n    this.tokenChar(58);\n  } else {\n    this.space();\n    this.token("=>");\n  }\n  this.space();\n  this.print(node.returnType);\n}\nfunction FunctionTypeParam(node) {\n  this.print(node.name);\n  if (node.optional) this.tokenChar(63);\n  if (node.name) {\n    this.tokenChar(58);\n    this.space();\n  }\n  this.print(node.typeAnnotation);\n}\nfunction InterfaceExtends(node) {\n  this.print(node.id);\n  this.print(node.typeParameters, true);\n}\nfunction _interfaceish(node) {\n  var _node$extends;\n  this.print(node.id);\n  this.print(node.typeParameters);\n  if ((_node$extends = node.extends) != null && _node$extends.length) {\n    this.space();\n    this.word("extends");\n    this.space();\n    this.printList(node.extends);\n  }\n  if (node.type === "DeclareClass") {\n    var _node$mixins, _node$implements;\n    if ((_node$mixins = node.mixins) != null && _node$mixins.length) {\n      this.space();\n      this.word("mixins");\n      this.space();\n      this.printList(node.mixins);\n    }\n    if ((_node$implements = node.implements) != null && _node$implements.length) {\n      this.space();\n      this.word("implements");\n      this.space();\n      this.printList(node.implements);\n    }\n  }\n  this.space();\n  this.print(node.body);\n}\nfunction _variance(node) {\n  var _node$variance;\n  const kind = (_node$variance = node.variance) == null ? void 0 : _node$variance.kind;\n  if (kind != null) {\n    if (kind === "plus") {\n      this.tokenChar(43);\n    } else if (kind === "minus") {\n      this.tokenChar(45);\n    }\n  }\n}\nfunction InterfaceDeclaration(node) {\n  this.word("interface");\n  this.space();\n  this._interfaceish(node);\n}\nfunction andSeparator(occurrenceCount) {\n  this.space();\n  this.token("&", false, occurrenceCount);\n  this.space();\n}\nfunction InterfaceTypeAnnotation(node) {\n  var _node$extends2;\n  this.word("interface");\n  if ((_node$extends2 = node.extends) != null && _node$extends2.length) {\n    this.space();\n    this.word("extends");\n    this.space();\n    this.printList(node.extends);\n  }\n  this.space();\n  this.print(node.body);\n}\nfunction IntersectionTypeAnnotation(node) {\n  this.printJoin(node.types, {\n    separator: andSeparator\n  });\n}\nfunction MixedTypeAnnotation() {\n  this.word("mixed");\n}\nfunction EmptyTypeAnnotation() {\n  this.word("empty");\n}\nfunction NullableTypeAnnotation(node) {\n  this.tokenChar(63);\n  this.print(node.typeAnnotation);\n}\nfunction NumberTypeAnnotation() {\n  this.word("number");\n}\nfunction StringTypeAnnotation() {\n  this.word("string");\n}\nfunction ThisTypeAnnotation() {\n  this.word("this");\n}\nfunction TupleTypeAnnotation(node) {\n  this.tokenChar(91);\n  this.printList(node.types);\n  this.tokenChar(93);\n}\nfunction TypeofTypeAnnotation(node) {\n  this.word("typeof");\n  this.space();\n  this.print(node.argument);\n}\nfunction TypeAlias(node) {\n  this.word("type");\n  this.space();\n  this.print(node.id);\n  this.print(node.typeParameters);\n  this.space();\n  this.tokenChar(61);\n  this.space();\n  this.print(node.right);\n  this.semicolon();\n}\nfunction TypeAnnotation(node, parent) {\n  this.tokenChar(58);\n  this.space();\n  if (parent.type === "ArrowFunctionExpression") {\n    this.tokenContext |= _index.TokenContext.arrowFlowReturnType;\n  } else if (node.optional) {\n    this.tokenChar(63);\n  }\n  this.print(node.typeAnnotation);\n}\nfunction TypeParameterInstantiation(node) {\n  this.tokenChar(60);\n  this.printList(node.params, {});\n  this.tokenChar(62);\n}\nfunction TypeParameter(node) {\n  this._variance(node);\n  this.word(node.name);\n  if (node.bound) {\n    this.print(node.bound);\n  }\n  if (node.default) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.default);\n  }\n}\nfunction OpaqueType(node) {\n  this.word("opaque");\n  this.space();\n  this.word("type");\n  this.space();\n  this.print(node.id);\n  this.print(node.typeParameters);\n  if (node.supertype) {\n    this.tokenChar(58);\n    this.space();\n    this.print(node.supertype);\n  }\n  if (node.impltype) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.impltype);\n  }\n  this.semicolon();\n}\nfunction ObjectTypeAnnotation(node) {\n  if (node.exact) {\n    this.token("{|");\n  } else {\n    this.tokenChar(123);\n  }\n  const props = [...node.properties, ...(node.callProperties || []), ...(node.indexers || []), ...(node.internalSlots || [])];\n  if (props.length) {\n    this.newline();\n    this.space();\n    this.printJoin(props, {\n      addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n      indent: true,\n      statement: true,\n      iterator: () => {\n        if (props.length !== 1 || node.inexact) {\n          this.tokenChar(44);\n          this.space();\n        }\n      }\n    });\n    this.space();\n  }\n  if (node.inexact) {\n    this.indent();\n    this.token("...");\n    if (props.length) {\n      this.newline();\n    }\n    this.dedent();\n  }\n  if (node.exact) {\n    this.token("|}");\n  } else {\n    this.tokenChar(125);\n  }\n}\nfunction ObjectTypeInternalSlot(node) {\n  if (node.static) {\n    this.word("static");\n    this.space();\n  }\n  this.tokenChar(91);\n  this.tokenChar(91);\n  this.print(node.id);\n  this.tokenChar(93);\n  this.tokenChar(93);\n  if (node.optional) this.tokenChar(63);\n  if (!node.method) {\n    this.tokenChar(58);\n    this.space();\n  }\n  this.print(node.value);\n}\nfunction ObjectTypeCallProperty(node) {\n  if (node.static) {\n    this.word("static");\n    this.space();\n  }\n  this.print(node.value);\n}\nfunction ObjectTypeIndexer(node) {\n  if (node.static) {\n    this.word("static");\n    this.space();\n  }\n  this._variance(node);\n  this.tokenChar(91);\n  if (node.id) {\n    this.print(node.id);\n    this.tokenChar(58);\n    this.space();\n  }\n  this.print(node.key);\n  this.tokenChar(93);\n  this.tokenChar(58);\n  this.space();\n  this.print(node.value);\n}\nfunction ObjectTypeProperty(node) {\n  if (node.proto) {\n    this.word("proto");\n    this.space();\n  }\n  if (node.static) {\n    this.word("static");\n    this.space();\n  }\n  if (node.kind === "get" || node.kind === "set") {\n    this.word(node.kind);\n    this.space();\n  }\n  this._variance(node);\n  this.print(node.key);\n  if (node.optional) this.tokenChar(63);\n  if (!node.method) {\n    this.tokenChar(58);\n    this.space();\n  }\n  this.print(node.value);\n}\nfunction ObjectTypeSpreadProperty(node) {\n  this.token("...");\n  this.print(node.argument);\n}\nfunction QualifiedTypeIdentifier(node) {\n  this.print(node.qualification);\n  this.tokenChar(46);\n  this.print(node.id);\n}\nfunction SymbolTypeAnnotation() {\n  this.word("symbol");\n}\nfunction orSeparator(occurrenceCount) {\n  this.space();\n  this.token("|", false, occurrenceCount);\n  this.space();\n}\nfunction UnionTypeAnnotation(node) {\n  this.printJoin(node.types, {\n    separator: orSeparator\n  });\n}\nfunction TypeCastExpression(node) {\n  this.tokenChar(40);\n  this.print(node.expression);\n  this.print(node.typeAnnotation);\n  this.tokenChar(41);\n}\nfunction Variance(node) {\n  if (node.kind === "plus") {\n    this.tokenChar(43);\n  } else {\n    this.tokenChar(45);\n  }\n}\nfunction VoidTypeAnnotation() {\n  this.word("void");\n}\nfunction IndexedAccessType(node) {\n  this.print(node.objectType, true);\n  this.tokenChar(91);\n  this.print(node.indexType);\n  this.tokenChar(93);\n}\nfunction OptionalIndexedAccessType(node) {\n  this.print(node.objectType);\n  if (node.optional) {\n    this.token("?.");\n  }\n  this.tokenChar(91);\n  this.print(node.indexType);\n  this.tokenChar(93);\n}\n\n//# sourceMappingURL=flow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///72259\n')},66735:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nvar _templateLiterals = __webpack_require__(12226);\nObject.keys(_templateLiterals).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _templateLiterals[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _templateLiterals[key];\n    }\n  });\n});\nvar _expressions = __webpack_require__(34436);\nObject.keys(_expressions).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _expressions[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _expressions[key];\n    }\n  });\n});\nvar _statements = __webpack_require__(70521);\nObject.keys(_statements).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _statements[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _statements[key];\n    }\n  });\n});\nvar _classes = __webpack_require__(76271);\nObject.keys(_classes).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _classes[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _classes[key];\n    }\n  });\n});\nvar _methods = __webpack_require__(2861);\nObject.keys(_methods).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _methods[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _methods[key];\n    }\n  });\n});\nvar _modules = __webpack_require__(89638);\nObject.keys(_modules).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _modules[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _modules[key];\n    }\n  });\n});\nvar _types = __webpack_require__(7942);\nObject.keys(_types).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _types[key];\n    }\n  });\n});\nvar _flow = __webpack_require__(72259);\nObject.keys(_flow).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _flow[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _flow[key];\n    }\n  });\n});\nvar _base = __webpack_require__(90546);\nObject.keys(_base).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _base[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _base[key];\n    }\n  });\n});\nvar _jsx = __webpack_require__(73962);\nObject.keys(_jsx).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _jsx[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _jsx[key];\n    }\n  });\n});\nvar _typescript = __webpack_require__(9276);\nObject.keys(_typescript).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _typescript[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _typescript[key];\n    }\n  });\n});\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY3MzUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0JBQXdCLG1CQUFPLENBQUMsS0FBd0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsbUJBQW1CLG1CQUFPLENBQUMsS0FBa0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Qsa0JBQWtCLG1CQUFPLENBQUMsS0FBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSxtQkFBTyxDQUFDLEtBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSxtQkFBTyxDQUFDLElBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsZUFBZSxtQkFBTyxDQUFDLEtBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsYUFBYSxtQkFBTyxDQUFDLElBQVk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsWUFBWSxtQkFBTyxDQUFDLEtBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsWUFBWSxtQkFBTyxDQUFDLEtBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsV0FBVyxtQkFBTyxDQUFDLEtBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Qsa0JBQWtCLG1CQUFPLENBQUMsSUFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvZ2VuZXJhdG9yL2xpYi9nZW5lcmF0b3JzL2luZGV4LmpzPzU1ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgX3RlbXBsYXRlTGl0ZXJhbHMgPSByZXF1aXJlKFwiLi90ZW1wbGF0ZS1saXRlcmFscy5qc1wiKTtcbk9iamVjdC5rZXlzKF90ZW1wbGF0ZUxpdGVyYWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfdGVtcGxhdGVMaXRlcmFsc1trZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90ZW1wbGF0ZUxpdGVyYWxzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9leHByZXNzaW9ucyA9IHJlcXVpcmUoXCIuL2V4cHJlc3Npb25zLmpzXCIpO1xuT2JqZWN0LmtleXMoX2V4cHJlc3Npb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfZXhwcmVzc2lvbnNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZXhwcmVzc2lvbnNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3N0YXRlbWVudHMgPSByZXF1aXJlKFwiLi9zdGF0ZW1lbnRzLmpzXCIpO1xuT2JqZWN0LmtleXMoX3N0YXRlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9zdGF0ZW1lbnRzW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3N0YXRlbWVudHNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX2NsYXNzZXMgPSByZXF1aXJlKFwiLi9jbGFzc2VzLmpzXCIpO1xuT2JqZWN0LmtleXMoX2NsYXNzZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9jbGFzc2VzW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2NsYXNzZXNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX21ldGhvZHMgPSByZXF1aXJlKFwiLi9tZXRob2RzLmpzXCIpO1xuT2JqZWN0LmtleXMoX21ldGhvZHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9tZXRob2RzW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX21ldGhvZHNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX21vZHVsZXMgPSByZXF1aXJlKFwiLi9tb2R1bGVzLmpzXCIpO1xuT2JqZWN0LmtleXMoX21vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9tb2R1bGVzW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX21vZHVsZXNba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3R5cGVzID0gcmVxdWlyZShcIi4vdHlwZXMuanNcIik7XG5PYmplY3Qua2V5cyhfdHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF90eXBlc1trZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90eXBlc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfZmxvdyA9IHJlcXVpcmUoXCIuL2Zsb3cuanNcIik7XG5PYmplY3Qua2V5cyhfZmxvdykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2Zsb3dba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZmxvd1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfYmFzZSA9IHJlcXVpcmUoXCIuL2Jhc2UuanNcIik7XG5PYmplY3Qua2V5cyhfYmFzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2Jhc2Vba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfYmFzZVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfanN4ID0gcmVxdWlyZShcIi4vanN4LmpzXCIpO1xuT2JqZWN0LmtleXMoX2pzeCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2pzeFtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9qc3hba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3R5cGVzY3JpcHQgPSByZXF1aXJlKFwiLi90eXBlc2NyaXB0LmpzXCIpO1xuT2JqZWN0LmtleXMoX3R5cGVzY3JpcHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF90eXBlc2NyaXB0W2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3R5cGVzY3JpcHRba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66735\n')},73962:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.JSXAttribute = JSXAttribute;\nexports.JSXClosingElement = JSXClosingElement;\nexports.JSXClosingFragment = JSXClosingFragment;\nexports.JSXElement = JSXElement;\nexports.JSXEmptyExpression = JSXEmptyExpression;\nexports.JSXExpressionContainer = JSXExpressionContainer;\nexports.JSXFragment = JSXFragment;\nexports.JSXIdentifier = JSXIdentifier;\nexports.JSXMemberExpression = JSXMemberExpression;\nexports.JSXNamespacedName = JSXNamespacedName;\nexports.JSXOpeningElement = JSXOpeningElement;\nexports.JSXOpeningFragment = JSXOpeningFragment;\nexports.JSXSpreadAttribute = JSXSpreadAttribute;\nexports.JSXSpreadChild = JSXSpreadChild;\nexports.JSXText = JSXText;\nfunction JSXAttribute(node) {\n  this.print(node.name);\n  if (node.value) {\n    this.tokenChar(61);\n    this.print(node.value);\n  }\n}\nfunction JSXIdentifier(node) {\n  this.word(node.name);\n}\nfunction JSXNamespacedName(node) {\n  this.print(node.namespace);\n  this.tokenChar(58);\n  this.print(node.name);\n}\nfunction JSXMemberExpression(node) {\n  this.print(node.object);\n  this.tokenChar(46);\n  this.print(node.property);\n}\nfunction JSXSpreadAttribute(node) {\n  this.tokenChar(123);\n  this.token("...");\n  this.print(node.argument);\n  this.rightBrace(node);\n}\nfunction JSXExpressionContainer(node) {\n  this.tokenChar(123);\n  this.print(node.expression);\n  this.rightBrace(node);\n}\nfunction JSXSpreadChild(node) {\n  this.tokenChar(123);\n  this.token("...");\n  this.print(node.expression);\n  this.rightBrace(node);\n}\nfunction JSXText(node) {\n  const raw = this.getPossibleRaw(node);\n  if (raw !== undefined) {\n    this.token(raw, true);\n  } else {\n    this.token(node.value, true);\n  }\n}\nfunction JSXElement(node) {\n  const open = node.openingElement;\n  this.print(open);\n  if (open.selfClosing) return;\n  this.indent();\n  for (const child of node.children) {\n    this.print(child);\n  }\n  this.dedent();\n  this.print(node.closingElement);\n}\nfunction spaceSeparator() {\n  this.space();\n}\nfunction JSXOpeningElement(node) {\n  this.tokenChar(60);\n  this.print(node.name);\n  this.print(node.typeParameters);\n  if (node.attributes.length > 0) {\n    this.space();\n    this.printJoin(node.attributes, {\n      separator: spaceSeparator\n    });\n  }\n  if (node.selfClosing) {\n    this.space();\n    this.tokenChar(47);\n  }\n  this.tokenChar(62);\n}\nfunction JSXClosingElement(node) {\n  this.tokenChar(60);\n  this.tokenChar(47);\n  this.print(node.name);\n  this.tokenChar(62);\n}\nfunction JSXEmptyExpression() {\n  this.printInnerComments();\n}\nfunction JSXFragment(node) {\n  this.print(node.openingFragment);\n  this.indent();\n  for (const child of node.children) {\n    this.print(child);\n  }\n  this.dedent();\n  this.print(node.closingFragment);\n}\nfunction JSXOpeningFragment() {\n  this.tokenChar(60);\n  this.tokenChar(62);\n}\nfunction JSXClosingFragment() {\n  this.token("</");\n  this.tokenChar(62);\n}\n\n//# sourceMappingURL=jsx.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM5NjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9CO0FBQ3BCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsa0JBQWtCO0FBQ2xCLDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsbUJBQW1CO0FBQ25CLHFCQUFxQjtBQUNyQiwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLHNCQUFzQjtBQUN0QixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9nZW5lcmF0b3IvbGliL2dlbmVyYXRvcnMvanN4LmpzP2UyNzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkpTWEF0dHJpYnV0ZSA9IEpTWEF0dHJpYnV0ZTtcbmV4cG9ydHMuSlNYQ2xvc2luZ0VsZW1lbnQgPSBKU1hDbG9zaW5nRWxlbWVudDtcbmV4cG9ydHMuSlNYQ2xvc2luZ0ZyYWdtZW50ID0gSlNYQ2xvc2luZ0ZyYWdtZW50O1xuZXhwb3J0cy5KU1hFbGVtZW50ID0gSlNYRWxlbWVudDtcbmV4cG9ydHMuSlNYRW1wdHlFeHByZXNzaW9uID0gSlNYRW1wdHlFeHByZXNzaW9uO1xuZXhwb3J0cy5KU1hFeHByZXNzaW9uQ29udGFpbmVyID0gSlNYRXhwcmVzc2lvbkNvbnRhaW5lcjtcbmV4cG9ydHMuSlNYRnJhZ21lbnQgPSBKU1hGcmFnbWVudDtcbmV4cG9ydHMuSlNYSWRlbnRpZmllciA9IEpTWElkZW50aWZpZXI7XG5leHBvcnRzLkpTWE1lbWJlckV4cHJlc3Npb24gPSBKU1hNZW1iZXJFeHByZXNzaW9uO1xuZXhwb3J0cy5KU1hOYW1lc3BhY2VkTmFtZSA9IEpTWE5hbWVzcGFjZWROYW1lO1xuZXhwb3J0cy5KU1hPcGVuaW5nRWxlbWVudCA9IEpTWE9wZW5pbmdFbGVtZW50O1xuZXhwb3J0cy5KU1hPcGVuaW5nRnJhZ21lbnQgPSBKU1hPcGVuaW5nRnJhZ21lbnQ7XG5leHBvcnRzLkpTWFNwcmVhZEF0dHJpYnV0ZSA9IEpTWFNwcmVhZEF0dHJpYnV0ZTtcbmV4cG9ydHMuSlNYU3ByZWFkQ2hpbGQgPSBKU1hTcHJlYWRDaGlsZDtcbmV4cG9ydHMuSlNYVGV4dCA9IEpTWFRleHQ7XG5mdW5jdGlvbiBKU1hBdHRyaWJ1dGUobm9kZSkge1xuICB0aGlzLnByaW50KG5vZGUubmFtZSk7XG4gIGlmIChub2RlLnZhbHVlKSB7XG4gICAgdGhpcy50b2tlbkNoYXIoNjEpO1xuICAgIHRoaXMucHJpbnQobm9kZS52YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIEpTWElkZW50aWZpZXIobm9kZSkge1xuICB0aGlzLndvcmQobm9kZS5uYW1lKTtcbn1cbmZ1bmN0aW9uIEpTWE5hbWVzcGFjZWROYW1lKG5vZGUpIHtcbiAgdGhpcy5wcmludChub2RlLm5hbWVzcGFjZSk7XG4gIHRoaXMudG9rZW5DaGFyKDU4KTtcbiAgdGhpcy5wcmludChub2RlLm5hbWUpO1xufVxuZnVuY3Rpb24gSlNYTWVtYmVyRXhwcmVzc2lvbihub2RlKSB7XG4gIHRoaXMucHJpbnQobm9kZS5vYmplY3QpO1xuICB0aGlzLnRva2VuQ2hhcig0Nik7XG4gIHRoaXMucHJpbnQobm9kZS5wcm9wZXJ0eSk7XG59XG5mdW5jdGlvbiBKU1hTcHJlYWRBdHRyaWJ1dGUobm9kZSkge1xuICB0aGlzLnRva2VuQ2hhcigxMjMpO1xuICB0aGlzLnRva2VuKFwiLi4uXCIpO1xuICB0aGlzLnByaW50KG5vZGUuYXJndW1lbnQpO1xuICB0aGlzLnJpZ2h0QnJhY2Uobm9kZSk7XG59XG5mdW5jdGlvbiBKU1hFeHByZXNzaW9uQ29udGFpbmVyKG5vZGUpIHtcbiAgdGhpcy50b2tlbkNoYXIoMTIzKTtcbiAgdGhpcy5wcmludChub2RlLmV4cHJlc3Npb24pO1xuICB0aGlzLnJpZ2h0QnJhY2Uobm9kZSk7XG59XG5mdW5jdGlvbiBKU1hTcHJlYWRDaGlsZChub2RlKSB7XG4gIHRoaXMudG9rZW5DaGFyKDEyMyk7XG4gIHRoaXMudG9rZW4oXCIuLi5cIik7XG4gIHRoaXMucHJpbnQobm9kZS5leHByZXNzaW9uKTtcbiAgdGhpcy5yaWdodEJyYWNlKG5vZGUpO1xufVxuZnVuY3Rpb24gSlNYVGV4dChub2RlKSB7XG4gIGNvbnN0IHJhdyA9IHRoaXMuZ2V0UG9zc2libGVSYXcobm9kZSk7XG4gIGlmIChyYXcgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMudG9rZW4ocmF3LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnRva2VuKG5vZGUudmFsdWUsIHRydWUpO1xuICB9XG59XG5mdW5jdGlvbiBKU1hFbGVtZW50KG5vZGUpIHtcbiAgY29uc3Qgb3BlbiA9IG5vZGUub3BlbmluZ0VsZW1lbnQ7XG4gIHRoaXMucHJpbnQob3Blbik7XG4gIGlmIChvcGVuLnNlbGZDbG9zaW5nKSByZXR1cm47XG4gIHRoaXMuaW5kZW50KCk7XG4gIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikge1xuICAgIHRoaXMucHJpbnQoY2hpbGQpO1xuICB9XG4gIHRoaXMuZGVkZW50KCk7XG4gIHRoaXMucHJpbnQobm9kZS5jbG9zaW5nRWxlbWVudCk7XG59XG5mdW5jdGlvbiBzcGFjZVNlcGFyYXRvcigpIHtcbiAgdGhpcy5zcGFjZSgpO1xufVxuZnVuY3Rpb24gSlNYT3BlbmluZ0VsZW1lbnQobm9kZSkge1xuICB0aGlzLnRva2VuQ2hhcig2MCk7XG4gIHRoaXMucHJpbnQobm9kZS5uYW1lKTtcbiAgdGhpcy5wcmludChub2RlLnR5cGVQYXJhbWV0ZXJzKTtcbiAgaWYgKG5vZGUuYXR0cmlidXRlcy5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5zcGFjZSgpO1xuICAgIHRoaXMucHJpbnRKb2luKG5vZGUuYXR0cmlidXRlcywge1xuICAgICAgc2VwYXJhdG9yOiBzcGFjZVNlcGFyYXRvclxuICAgIH0pO1xuICB9XG4gIGlmIChub2RlLnNlbGZDbG9zaW5nKSB7XG4gICAgdGhpcy5zcGFjZSgpO1xuICAgIHRoaXMudG9rZW5DaGFyKDQ3KTtcbiAgfVxuICB0aGlzLnRva2VuQ2hhcig2Mik7XG59XG5mdW5jdGlvbiBKU1hDbG9zaW5nRWxlbWVudChub2RlKSB7XG4gIHRoaXMudG9rZW5DaGFyKDYwKTtcbiAgdGhpcy50b2tlbkNoYXIoNDcpO1xuICB0aGlzLnByaW50KG5vZGUubmFtZSk7XG4gIHRoaXMudG9rZW5DaGFyKDYyKTtcbn1cbmZ1bmN0aW9uIEpTWEVtcHR5RXhwcmVzc2lvbigpIHtcbiAgdGhpcy5wcmludElubmVyQ29tbWVudHMoKTtcbn1cbmZ1bmN0aW9uIEpTWEZyYWdtZW50KG5vZGUpIHtcbiAgdGhpcy5wcmludChub2RlLm9wZW5pbmdGcmFnbWVudCk7XG4gIHRoaXMuaW5kZW50KCk7XG4gIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikge1xuICAgIHRoaXMucHJpbnQoY2hpbGQpO1xuICB9XG4gIHRoaXMuZGVkZW50KCk7XG4gIHRoaXMucHJpbnQobm9kZS5jbG9zaW5nRnJhZ21lbnQpO1xufVxuZnVuY3Rpb24gSlNYT3BlbmluZ0ZyYWdtZW50KCkge1xuICB0aGlzLnRva2VuQ2hhcig2MCk7XG4gIHRoaXMudG9rZW5DaGFyKDYyKTtcbn1cbmZ1bmN0aW9uIEpTWENsb3NpbmdGcmFnbWVudCgpIHtcbiAgdGhpcy50b2tlbihcIjwvXCIpO1xuICB0aGlzLnRva2VuQ2hhcig2Mik7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzeC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///73962\n')},2861:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ArrowFunctionExpression = ArrowFunctionExpression;\nexports.FunctionDeclaration = exports.FunctionExpression = FunctionExpression;\nexports._functionHead = _functionHead;\nexports._methodHead = _methodHead;\nexports._param = _param;\nexports._parameters = _parameters;\nexports._params = _params;\nexports._predicate = _predicate;\nexports._shouldPrintArrowParamsParens = _shouldPrintArrowParamsParens;\nvar _t = __webpack_require__(2352);\nvar _index = __webpack_require__(31373);\nconst {\n  isIdentifier\n} = _t;\nfunction _params(node, idNode, parentNode) {\n  this.print(node.typeParameters);\n  const nameInfo = _getFuncIdName.call(this, idNode, parentNode);\n  if (nameInfo) {\n    this.sourceIdentifierName(nameInfo.name, nameInfo.pos);\n  }\n  this.tokenChar(40);\n  this._parameters(node.params, ")");\n  const noLineTerminator = node.type === "ArrowFunctionExpression";\n  this.print(node.returnType, noLineTerminator);\n  this._noLineTerminator = noLineTerminator;\n}\nfunction _parameters(parameters, endToken) {\n  const exit = this.enterDelimited();\n  const trailingComma = this.shouldPrintTrailingComma(endToken);\n  const paramLength = parameters.length;\n  for (let i = 0; i < paramLength; i++) {\n    this._param(parameters[i]);\n    if (trailingComma || i < paramLength - 1) {\n      this.token(",", null, i);\n      this.space();\n    }\n  }\n  this.token(endToken);\n  exit();\n}\nfunction _param(parameter) {\n  this.printJoin(parameter.decorators);\n  this.print(parameter);\n  if (parameter.optional) {\n    this.tokenChar(63);\n  }\n  this.print(parameter.typeAnnotation);\n}\nfunction _methodHead(node) {\n  const kind = node.kind;\n  const key = node.key;\n  if (kind === "get" || kind === "set") {\n    this.word(kind);\n    this.space();\n  }\n  if (node.async) {\n    this.word("async", true);\n    this.space();\n  }\n  if (kind === "method" || kind === "init") {\n    if (node.generator) {\n      this.tokenChar(42);\n    }\n  }\n  if (node.computed) {\n    this.tokenChar(91);\n    this.print(key);\n    this.tokenChar(93);\n  } else {\n    this.print(key);\n  }\n  if (node.optional) {\n    this.tokenChar(63);\n  }\n  this._params(node, node.computed && node.key.type !== "StringLiteral" ? undefined : node.key, undefined);\n}\nfunction _predicate(node, noLineTerminatorAfter) {\n  if (node.predicate) {\n    if (!node.returnType) {\n      this.tokenChar(58);\n    }\n    this.space();\n    this.print(node.predicate, noLineTerminatorAfter);\n  }\n}\nfunction _functionHead(node, parent) {\n  if (node.async) {\n    this.word("async");\n    if (!this.format.preserveFormat) {\n      this._endsWithInnerRaw = false;\n    }\n    this.space();\n  }\n  this.word("function");\n  if (node.generator) {\n    if (!this.format.preserveFormat) {\n      this._endsWithInnerRaw = false;\n    }\n    this.tokenChar(42);\n  }\n  this.space();\n  if (node.id) {\n    this.print(node.id);\n  }\n  this._params(node, node.id, parent);\n  if (node.type !== "TSDeclareFunction") {\n    this._predicate(node);\n  }\n}\nfunction FunctionExpression(node, parent) {\n  this._functionHead(node, parent);\n  this.space();\n  this.print(node.body);\n}\nfunction ArrowFunctionExpression(node, parent) {\n  if (node.async) {\n    this.word("async", true);\n    this.space();\n  }\n  if (this._shouldPrintArrowParamsParens(node)) {\n    this._params(node, undefined, parent);\n  } else {\n    this.print(node.params[0], true);\n  }\n  this._predicate(node, true);\n  this.space();\n  this.printInnerComments();\n  this.token("=>");\n  this.space();\n  this.tokenContext |= _index.TokenContext.arrowBody;\n  this.print(node.body);\n}\nfunction _shouldPrintArrowParamsParens(node) {\n  var _firstParam$leadingCo, _firstParam$trailingC;\n  if (node.params.length !== 1) return true;\n  if (node.typeParameters || node.returnType || node.predicate) {\n    return true;\n  }\n  const firstParam = node.params[0];\n  if (!isIdentifier(firstParam) || firstParam.typeAnnotation || firstParam.optional || (_firstParam$leadingCo = firstParam.leadingComments) != null && _firstParam$leadingCo.length || (_firstParam$trailingC = firstParam.trailingComments) != null && _firstParam$trailingC.length) {\n    return true;\n  }\n  if (this.tokenMap) {\n    if (node.loc == null) return true;\n    if (this.tokenMap.findMatching(node, "(") !== null) return true;\n    const arrowToken = this.tokenMap.findMatching(node, "=>");\n    if ((arrowToken == null ? void 0 : arrowToken.loc) == null) return true;\n    return arrowToken.loc.start.line !== node.loc.start.line;\n  }\n  if (this.format.retainLines) return true;\n  return false;\n}\nfunction _getFuncIdName(idNode, parent) {\n  let id = idNode;\n  if (!id && parent) {\n    const parentType = parent.type;\n    if (parentType === "VariableDeclarator") {\n      id = parent.id;\n    } else if (parentType === "AssignmentExpression" || parentType === "AssignmentPattern") {\n      id = parent.left;\n    } else if (parentType === "ObjectProperty" || parentType === "ClassProperty") {\n      if (!parent.computed || parent.key.type === "StringLiteral") {\n        id = parent.key;\n      }\n    } else if (parentType === "ClassPrivateProperty" || parentType === "ClassAccessorProperty") {\n      id = parent.key;\n    }\n  }\n  if (!id) return;\n  let nameInfo;\n  if (id.type === "Identifier") {\n    var _id$loc, _id$loc2;\n    nameInfo = {\n      pos: (_id$loc = id.loc) == null ? void 0 : _id$loc.start,\n      name: ((_id$loc2 = id.loc) == null ? void 0 : _id$loc2.identifierName) || id.name\n    };\n  } else if (id.type === "PrivateName") {\n    var _id$loc3;\n    nameInfo = {\n      pos: (_id$loc3 = id.loc) == null ? void 0 : _id$loc3.start,\n      name: "#" + id.id.name\n    };\n  } else if (id.type === "StringLiteral") {\n    var _id$loc4;\n    nameInfo = {\n      pos: (_id$loc4 = id.loc) == null ? void 0 : _id$loc4.start,\n      name: id.value\n    };\n  }\n  return nameInfo;\n}\n\n//# sourceMappingURL=methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2861\n')},89638:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ImportExpression = ImportExpression;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\nexports.ImportSpecifier = ImportSpecifier;\nexports._printAttributes = _printAttributes;\nvar _t = __webpack_require__(2352);\nvar _index = __webpack_require__(31373);\nconst {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement\n} = _t;\nfunction ImportSpecifier(node) {\n  if (node.importKind === "type" || node.importKind === "typeof") {\n    this.word(node.importKind);\n    this.space();\n  }\n  this.print(node.imported);\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word("as");\n    this.space();\n    this.print(node.local);\n  }\n}\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local);\n}\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported);\n}\nfunction ExportSpecifier(node) {\n  if (node.exportKind === "type") {\n    this.word("type");\n    this.space();\n  }\n  this.print(node.local);\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word("as");\n    this.space();\n    this.print(node.exported);\n  }\n}\nfunction ExportNamespaceSpecifier(node) {\n  this.tokenChar(42);\n  this.space();\n  this.word("as");\n  this.space();\n  this.print(node.exported);\n}\nlet warningShown = false;\nfunction _printAttributes(node, hasPreviousBrace) {\n  const {\n    importAttributesKeyword\n  } = this.format;\n  const {\n    attributes,\n    assertions\n  } = node;\n  if (attributes && !importAttributesKeyword && !warningShown) {\n    warningShown = true;\n    console.warn(`\\\nYou are using import attributes, without specifying the desired output syntax.\nPlease specify the "importAttributesKeyword" generator option, whose value can be one of:\n - "with"        : \\`import { a } from "b" with { type: "json" };\\`\n - "assert"      : \\`import { a } from "b" assert { type: "json" };\\`\n - "with-legacy" : \\`import { a } from "b" with type: "json";\\`\n`);\n  }\n  const useAssertKeyword = importAttributesKeyword === "assert" || !importAttributesKeyword && assertions;\n  this.word(useAssertKeyword ? "assert" : "with");\n  this.space();\n  if (!useAssertKeyword && importAttributesKeyword !== "with") {\n    this.printList(attributes || assertions);\n    return;\n  }\n  const occurrenceCount = hasPreviousBrace ? 1 : 0;\n  this.token("{", null, occurrenceCount);\n  this.space();\n  this.printList(attributes || assertions, {\n    printTrailingSeparator: this.shouldPrintTrailingComma("}")\n  });\n  this.space();\n  this.token("}", null, occurrenceCount);\n}\nfunction ExportAllDeclaration(node) {\n  var _node$attributes, _node$assertions;\n  this.word("export");\n  this.space();\n  if (node.exportKind === "type") {\n    this.word("type");\n    this.space();\n  }\n  this.tokenChar(42);\n  this.space();\n  this.word("from");\n  this.space();\n  if ((_node$attributes = node.attributes) != null && _node$attributes.length || (_node$assertions = node.assertions) != null && _node$assertions.length) {\n    this.print(node.source, true);\n    this.space();\n    this._printAttributes(node, false);\n  } else {\n    this.print(node.source);\n  }\n  this.semicolon();\n}\nfunction maybePrintDecoratorsBeforeExport(printer, node) {\n  if (isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node)) {\n    printer.printJoin(node.declaration.decorators);\n  }\n}\nfunction ExportNamedDeclaration(node) {\n  maybePrintDecoratorsBeforeExport(this, node);\n  this.word("export");\n  this.space();\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === "type") {\n      this.word("type");\n      this.space();\n    }\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n    for (;;) {\n      const first = specifiers[0];\n      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift());\n        if (specifiers.length) {\n          this.tokenChar(44);\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n    let hasBrace = false;\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      hasBrace = true;\n      this.tokenChar(123);\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, {\n          printTrailingSeparator: this.shouldPrintTrailingComma("}")\n        });\n        this.space();\n      }\n      this.tokenChar(125);\n    }\n    if (node.source) {\n      var _node$attributes2, _node$assertions2;\n      this.space();\n      this.word("from");\n      this.space();\n      if ((_node$attributes2 = node.attributes) != null && _node$attributes2.length || (_node$assertions2 = node.assertions) != null && _node$assertions2.length) {\n        this.print(node.source, true);\n        this.space();\n        this._printAttributes(node, hasBrace);\n      } else {\n        this.print(node.source);\n      }\n    }\n    this.semicolon();\n  }\n}\nfunction ExportDefaultDeclaration(node) {\n  maybePrintDecoratorsBeforeExport(this, node);\n  this.word("export");\n  this.noIndentInnerCommentsHere();\n  this.space();\n  this.word("default");\n  this.space();\n  this.tokenContext |= _index.TokenContext.exportDefault;\n  const declar = node.declaration;\n  this.print(declar);\n  if (!isStatement(declar)) this.semicolon();\n}\nfunction ImportDeclaration(node) {\n  var _node$attributes3, _node$assertions3;\n  this.word("import");\n  this.space();\n  const isTypeKind = node.importKind === "type" || node.importKind === "typeof";\n  if (isTypeKind) {\n    this.noIndentInnerCommentsHere();\n    this.word(node.importKind);\n    this.space();\n  } else if (node.module) {\n    this.noIndentInnerCommentsHere();\n    this.word("module");\n    this.space();\n  } else if (node.phase) {\n    this.noIndentInnerCommentsHere();\n    this.word(node.phase);\n    this.space();\n  }\n  const specifiers = node.specifiers.slice(0);\n  const hasSpecifiers = !!specifiers.length;\n  while (hasSpecifiers) {\n    const first = specifiers[0];\n    if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n      this.print(specifiers.shift());\n      if (specifiers.length) {\n        this.tokenChar(44);\n        this.space();\n      }\n    } else {\n      break;\n    }\n  }\n  let hasBrace = false;\n  if (specifiers.length) {\n    hasBrace = true;\n    this.tokenChar(123);\n    this.space();\n    this.printList(specifiers, {\n      printTrailingSeparator: this.shouldPrintTrailingComma("}")\n    });\n    this.space();\n    this.tokenChar(125);\n  } else if (isTypeKind && !hasSpecifiers) {\n    hasBrace = true;\n    this.tokenChar(123);\n    this.tokenChar(125);\n  }\n  if (hasSpecifiers || isTypeKind) {\n    this.space();\n    this.word("from");\n    this.space();\n  }\n  if ((_node$attributes3 = node.attributes) != null && _node$attributes3.length || (_node$assertions3 = node.assertions) != null && _node$assertions3.length) {\n    this.print(node.source, true);\n    this.space();\n    this._printAttributes(node, hasBrace);\n  } else {\n    this.print(node.source);\n  }\n  this.semicolon();\n}\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.tokenChar(58);\n  this.space();\n  this.print(node.value);\n}\nfunction ImportNamespaceSpecifier(node) {\n  this.tokenChar(42);\n  this.space();\n  this.word("as");\n  this.space();\n  this.print(node.local);\n}\nfunction ImportExpression(node) {\n  this.word("import");\n  if (node.phase) {\n    this.tokenChar(46);\n    this.word(node.phase);\n  }\n  this.tokenChar(40);\n  this.print(node.source);\n  if (node.options != null) {\n    this.tokenChar(44);\n    this.space();\n    this.print(node.options);\n  }\n  this.tokenChar(41);\n}\n\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89638\n')},70521:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.BreakStatement = BreakStatement;\nexports.CatchClause = CatchClause;\nexports.ContinueStatement = ContinueStatement;\nexports.DebuggerStatement = DebuggerStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.ForOfStatement = exports.ForInStatement = void 0;\nexports.ForStatement = ForStatement;\nexports.IfStatement = IfStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.ReturnStatement = ReturnStatement;\nexports.SwitchCase = SwitchCase;\nexports.SwitchStatement = SwitchStatement;\nexports.ThrowStatement = ThrowStatement;\nexports.TryStatement = TryStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.WhileStatement = WhileStatement;\nexports.WithStatement = WithStatement;\nvar _t = __webpack_require__(2352);\nvar _index = __webpack_require__(31373);\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = _t;\nfunction WithStatement(node) {\n  this.word("with");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.object);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\nfunction IfStatement(node) {\n  this.word("if");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test);\n  this.tokenChar(41);\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n  if (needsBlock) {\n    this.tokenChar(123);\n    this.newline();\n    this.indent();\n  }\n  this.printAndIndentOnComments(node.consequent);\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.tokenChar(125);\n  }\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word("else");\n    this.space();\n    this.printAndIndentOnComments(node.alternate);\n  }\n}\nfunction getLastStatement(statement) {\n  const {\n    body\n  } = statement;\n  if (isStatement(body) === false) {\n    return statement;\n  }\n  return getLastStatement(body);\n}\nfunction ForStatement(node) {\n  this.word("for");\n  this.space();\n  this.tokenChar(40);\n  {\n    const exit = this.enterForStatementInit();\n    this.tokenContext |= _index.TokenContext.forHead;\n    this.print(node.init);\n    exit();\n  }\n  this.tokenChar(59);\n  if (node.test) {\n    this.space();\n    this.print(node.test);\n  }\n  this.token(";", false, 1);\n  if (node.update) {\n    this.space();\n    this.print(node.update);\n  }\n  this.tokenChar(41);\n  this.printBlock(node);\n}\nfunction WhileStatement(node) {\n  this.word("while");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\nfunction ForXStatement(node) {\n  this.word("for");\n  this.space();\n  const isForOf = node.type === "ForOfStatement";\n  if (isForOf && node.await) {\n    this.word("await");\n    this.space();\n  }\n  this.noIndentInnerCommentsHere();\n  this.tokenChar(40);\n  {\n    const exit = isForOf ? null : this.enterForStatementInit();\n    this.tokenContext |= isForOf ? _index.TokenContext.forOfHead : _index.TokenContext.forInHead;\n    this.print(node.left);\n    exit == null || exit();\n  }\n  this.space();\n  this.word(isForOf ? "of" : "in");\n  this.space();\n  this.print(node.right);\n  this.tokenChar(41);\n  this.printBlock(node);\n}\nconst ForInStatement = exports.ForInStatement = ForXStatement;\nconst ForOfStatement = exports.ForOfStatement = ForXStatement;\nfunction DoWhileStatement(node) {\n  this.word("do");\n  this.space();\n  this.print(node.body);\n  this.space();\n  this.word("while");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.test);\n  this.tokenChar(41);\n  this.semicolon();\n}\nfunction printStatementAfterKeyword(printer, node) {\n  if (node) {\n    printer.space();\n    printer.printTerminatorless(node);\n  }\n  printer.semicolon();\n}\nfunction BreakStatement(node) {\n  this.word("break");\n  printStatementAfterKeyword(this, node.label);\n}\nfunction ContinueStatement(node) {\n  this.word("continue");\n  printStatementAfterKeyword(this, node.label);\n}\nfunction ReturnStatement(node) {\n  this.word("return");\n  printStatementAfterKeyword(this, node.argument);\n}\nfunction ThrowStatement(node) {\n  this.word("throw");\n  printStatementAfterKeyword(this, node.argument);\n}\nfunction LabeledStatement(node) {\n  this.print(node.label);\n  this.tokenChar(58);\n  this.space();\n  this.print(node.body);\n}\nfunction TryStatement(node) {\n  this.word("try");\n  this.space();\n  this.print(node.block);\n  this.space();\n  if (node.handlers) {\n    this.print(node.handlers[0]);\n  } else {\n    this.print(node.handler);\n  }\n  if (node.finalizer) {\n    this.space();\n    this.word("finally");\n    this.space();\n    this.print(node.finalizer);\n  }\n}\nfunction CatchClause(node) {\n  this.word("catch");\n  this.space();\n  if (node.param) {\n    this.tokenChar(40);\n    this.print(node.param);\n    this.print(node.param.typeAnnotation);\n    this.tokenChar(41);\n    this.space();\n  }\n  this.print(node.body);\n}\nfunction SwitchStatement(node) {\n  this.word("switch");\n  this.space();\n  this.tokenChar(40);\n  this.print(node.discriminant);\n  this.tokenChar(41);\n  this.space();\n  this.tokenChar(123);\n  this.printSequence(node.cases, {\n    indent: true,\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n  });\n  this.rightBrace(node);\n}\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word("case");\n    this.space();\n    this.print(node.test);\n    this.tokenChar(58);\n  } else {\n    this.word("default");\n    this.tokenChar(58);\n  }\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, {\n      indent: true\n    });\n  }\n}\nfunction DebuggerStatement() {\n  this.word("debugger");\n  this.semicolon();\n}\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word("declare");\n    this.space();\n  }\n  const {\n    kind\n  } = node;\n  if (kind === "await using") {\n    this.word("await");\n    this.space();\n    this.word("using", true);\n  } else {\n    this.word(kind, kind === "using");\n  }\n  this.space();\n  let hasInits = false;\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n  this.printList(node.declarations, {\n    separator: hasInits ? function (occurrenceCount) {\n      this.token(",", false, occurrenceCount);\n      this.newline();\n    } : undefined,\n    indent: node.declarations.length > 1 ? true : false\n  });\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n  this.semicolon();\n}\nfunction VariableDeclarator(node) {\n  this.print(node.id);\n  if (node.definite) this.tokenChar(33);\n  this.print(node.id.typeAnnotation);\n  if (node.init) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.init);\n  }\n}\n\n//# sourceMappingURL=statements.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///70521\n')},12226:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nexports.TemplateElement = TemplateElement;\nexports.TemplateLiteral = TemplateLiteral;\nfunction TaggedTemplateExpression(node) {\n  this.print(node.tag);\n  this.print(node.typeParameters);\n  this.print(node.quasi);\n}\nfunction TemplateElement() {\n  throw new Error("TemplateElement printing is handled in TemplateLiteral");\n}\nfunction TemplateLiteral(node) {\n  const quasis = node.quasis;\n  let partRaw = "`";\n  for (let i = 0; i < quasis.length; i++) {\n    partRaw += quasis[i].value.raw;\n    if (i + 1 < quasis.length) {\n      this.token(partRaw + "${", true);\n      this.print(node.expressions[i]);\n      partRaw = "}";\n      if (this.tokenMap) {\n        const token = this.tokenMap.findMatching(node, "}", i);\n        if (token) this._catchUpTo(token.loc.start);\n      }\n    }\n  }\n  this.token(partRaw + "`", true);\n}\n\n//# sourceMappingURL=template-literals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyMjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZ0NBQWdDO0FBQ2hDLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9nZW5lcmF0b3IvbGliL2dlbmVyYXRvcnMvdGVtcGxhdGUtbGl0ZXJhbHMuanM/YjgxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uID0gVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uO1xuZXhwb3J0cy5UZW1wbGF0ZUVsZW1lbnQgPSBUZW1wbGF0ZUVsZW1lbnQ7XG5leHBvcnRzLlRlbXBsYXRlTGl0ZXJhbCA9IFRlbXBsYXRlTGl0ZXJhbDtcbmZ1bmN0aW9uIFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihub2RlKSB7XG4gIHRoaXMucHJpbnQobm9kZS50YWcpO1xuICB0aGlzLnByaW50KG5vZGUudHlwZVBhcmFtZXRlcnMpO1xuICB0aGlzLnByaW50KG5vZGUucXVhc2kpO1xufVxuZnVuY3Rpb24gVGVtcGxhdGVFbGVtZW50KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJUZW1wbGF0ZUVsZW1lbnQgcHJpbnRpbmcgaXMgaGFuZGxlZCBpbiBUZW1wbGF0ZUxpdGVyYWxcIik7XG59XG5mdW5jdGlvbiBUZW1wbGF0ZUxpdGVyYWwobm9kZSkge1xuICBjb25zdCBxdWFzaXMgPSBub2RlLnF1YXNpcztcbiAgbGV0IHBhcnRSYXcgPSBcImBcIjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWFzaXMubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0UmF3ICs9IHF1YXNpc1tpXS52YWx1ZS5yYXc7XG4gICAgaWYgKGkgKyAxIDwgcXVhc2lzLmxlbmd0aCkge1xuICAgICAgdGhpcy50b2tlbihwYXJ0UmF3ICsgXCIke1wiLCB0cnVlKTtcbiAgICAgIHRoaXMucHJpbnQobm9kZS5leHByZXNzaW9uc1tpXSk7XG4gICAgICBwYXJ0UmF3ID0gXCJ9XCI7XG4gICAgICBpZiAodGhpcy50b2tlbk1hcCkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5NYXAuZmluZE1hdGNoaW5nKG5vZGUsIFwifVwiLCBpKTtcbiAgICAgICAgaWYgKHRva2VuKSB0aGlzLl9jYXRjaFVwVG8odG9rZW4ubG9jLnN0YXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGhpcy50b2tlbihwYXJ0UmF3ICsgXCJgXCIsIHRydWUpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wbGF0ZS1saXRlcmFscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12226\n')},7942:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ArgumentPlaceholder = ArgumentPlaceholder;\nexports.ArrayPattern = exports.ArrayExpression = ArrayExpression;\nexports.BigIntLiteral = BigIntLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.DecimalLiteral = DecimalLiteral;\nexports.Identifier = Identifier;\nexports.NullLiteral = NullLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.ObjectPattern = exports.ObjectExpression = ObjectExpression;\nexports.ObjectMethod = ObjectMethod;\nexports.ObjectProperty = ObjectProperty;\nexports.PipelineBareFunction = PipelineBareFunction;\nexports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;\nexports.PipelineTopicExpression = PipelineTopicExpression;\nexports.RecordExpression = RecordExpression;\nexports.RegExpLiteral = RegExpLiteral;\nexports.SpreadElement = exports.RestElement = RestElement;\nexports.StringLiteral = StringLiteral;\nexports.TopicReference = TopicReference;\nexports.TupleExpression = TupleExpression;\nexports._getRawIdentifier = _getRawIdentifier;\nvar _t = __webpack_require__(2352);\nvar _jsesc = __webpack_require__(17159);\nconst {\n  isAssignmentPattern,\n  isIdentifier\n} = _t;\nlet lastRawIdentNode = null;\nlet lastRawIdentResult = "";\nfunction _getRawIdentifier(node) {\n  if (node === lastRawIdentNode) return lastRawIdentResult;\n  lastRawIdentNode = node;\n  const {\n    name\n  } = node;\n  const token = this.tokenMap.find(node, tok => tok.value === name);\n  if (token) {\n    lastRawIdentResult = this._originalCode.slice(token.start, token.end);\n    return lastRawIdentResult;\n  }\n  return lastRawIdentResult = node.name;\n}\nfunction Identifier(node) {\n  var _node$loc;\n  this.sourceIdentifierName(((_node$loc = node.loc) == null ? void 0 : _node$loc.identifierName) || node.name);\n  this.word(this.tokenMap ? this._getRawIdentifier(node) : node.name);\n}\nfunction ArgumentPlaceholder() {\n  this.tokenChar(63);\n}\nfunction RestElement(node) {\n  this.token("...");\n  this.print(node.argument);\n}\nfunction ObjectExpression(node) {\n  const props = node.properties;\n  this.tokenChar(123);\n  if (props.length) {\n    const exit = this.enterDelimited();\n    this.space();\n    this.printList(props, {\n      indent: true,\n      statement: true,\n      printTrailingSeparator: this.shouldPrintTrailingComma("}")\n    });\n    this.space();\n    exit();\n  }\n  this.sourceWithOffset("end", node.loc, -1);\n  this.tokenChar(125);\n}\nfunction ObjectMethod(node) {\n  this.printJoin(node.decorators);\n  this._methodHead(node);\n  this.space();\n  this.print(node.body);\n}\nfunction ObjectProperty(node) {\n  this.printJoin(node.decorators);\n  if (node.computed) {\n    this.tokenChar(91);\n    this.print(node.key);\n    this.tokenChar(93);\n  } else {\n    if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) {\n      this.print(node.value);\n      return;\n    }\n    this.print(node.key);\n    if (node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) {\n      return;\n    }\n  }\n  this.tokenChar(58);\n  this.space();\n  this.print(node.value);\n}\nfunction ArrayExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  this.tokenChar(91);\n  const exit = this.enterDelimited();\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem);\n      if (i < len - 1 || this.shouldPrintTrailingComma("]")) {\n        this.token(",", false, i);\n      }\n    } else {\n      this.token(",", false, i);\n    }\n  }\n  exit();\n  this.tokenChar(93);\n}\nfunction RecordExpression(node) {\n  const props = node.properties;\n  let startToken;\n  let endToken;\n  {\n    if (this.format.recordAndTupleSyntaxType === "bar") {\n      startToken = "{|";\n      endToken = "|}";\n    } else if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null) {\n      throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);\n    } else {\n      startToken = "#{";\n      endToken = "}";\n    }\n  }\n  this.token(startToken);\n  if (props.length) {\n    this.space();\n    this.printList(props, {\n      indent: true,\n      statement: true,\n      printTrailingSeparator: this.shouldPrintTrailingComma(endToken)\n    });\n    this.space();\n  }\n  this.token(endToken);\n}\nfunction TupleExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  let startToken;\n  let endToken;\n  {\n    if (this.format.recordAndTupleSyntaxType === "bar") {\n      startToken = "[|";\n      endToken = "|]";\n    } else if (this.format.recordAndTupleSyntaxType === "hash") {\n      startToken = "#[";\n      endToken = "]";\n    } else {\n      throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);\n    }\n  }\n  this.token(startToken);\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem);\n      if (i < len - 1 || this.shouldPrintTrailingComma(endToken)) {\n        this.token(",", false, i);\n      }\n    }\n  }\n  this.token(endToken);\n}\nfunction RegExpLiteral(node) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\nfunction BooleanLiteral(node) {\n  this.word(node.value ? "true" : "false");\n}\nfunction NullLiteral() {\n  this.word("null");\n}\nfunction NumericLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value;\n  const str = value + "";\n  if (opts.numbers) {\n    this.number(_jsesc(value, opts), value);\n  } else if (raw == null) {\n    this.number(str, value);\n  } else if (this.format.minified) {\n    this.number(raw.length < str.length ? raw : str, value);\n  } else {\n    this.number(raw, value);\n  }\n}\nfunction StringLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n  const val = _jsesc(node.value, this.format.jsescOption);\n  this.token(val);\n}\nfunction BigIntLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + "n");\n}\nfunction DecimalLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + "m");\n}\nconst validTopicTokenSet = new Set(["^^", "@@", "^", "%", "#"]);\nfunction TopicReference() {\n  const {\n    topicToken\n  } = this.format;\n  if (validTopicTokenSet.has(topicToken)) {\n    this.token(topicToken);\n  } else {\n    const givenTopicTokenJSON = JSON.stringify(topicToken);\n    const validTopics = Array.from(validTopicTokenSet, v => JSON.stringify(v));\n    throw new Error(`The "topicToken" generator option must be one of ` + `${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);\n  }\n}\nfunction PipelineTopicExpression(node) {\n  this.print(node.expression);\n}\nfunction PipelineBareFunction(node) {\n  this.print(node.callee);\n}\nfunction PipelinePrimaryTopicReference() {\n  this.tokenChar(35);\n}\n\n//# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7942\n')},9276:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSArrayType = TSArrayType;\nexports.TSSatisfiesExpression = exports.TSAsExpression = TSTypeExpression;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSInterfaceHeritage = exports.TSExpressionWithTypeArguments = exports.TSClassImplements = TSClassImplements;\nexports.TSConditionalType = TSConditionalType;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSConstructorType = TSConstructorType;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSFunctionType = TSFunctionType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSImportType = TSImportType;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSInferType = TSInferType;\nexports.TSInstantiationExpression = TSInstantiationExpression;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSIntersectionType = TSIntersectionType;\nexports.TSIntrinsicKeyword = TSIntrinsicKeyword;\nexports.TSLiteralType = TSLiteralType;\nexports.TSMappedType = TSMappedType;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSNamedTupleMember = TSNamedTupleMember;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSOptionalType = TSOptionalType;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSPropertySignature = TSPropertySignature;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSRestType = TSRestType;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSThisType = TSThisType;\nexports.TSTupleType = TSTupleType;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeReference = TSTypeReference;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSUnionType = TSUnionType;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nfunction TSTypeAnnotation(node, parent) {\n  this.token((parent.type === "TSFunctionType" || parent.type === "TSConstructorType") && parent.typeAnnotation === node ? "=>" : ":");\n  this.space();\n  if (node.optional) this.tokenChar(63);\n  this.print(node.typeAnnotation);\n}\nfunction TSTypeParameterInstantiation(node, parent) {\n  this.tokenChar(60);\n  let printTrailingSeparator = parent.type === "ArrowFunctionExpression" && node.params.length === 1;\n  if (this.tokenMap && node.start != null && node.end != null) {\n    printTrailingSeparator && (printTrailingSeparator = !!this.tokenMap.find(node, t => this.tokenMap.matchesOriginal(t, ",")));\n    printTrailingSeparator || (printTrailingSeparator = this.shouldPrintTrailingComma(">"));\n  }\n  this.printList(node.params, {\n    printTrailingSeparator\n  });\n  this.tokenChar(62);\n}\nfunction TSTypeParameter(node) {\n  if (node.in) {\n    this.word("in");\n    this.space();\n  }\n  if (node.out) {\n    this.word("out");\n    this.space();\n  }\n  this.word(node.name);\n  if (node.constraint) {\n    this.space();\n    this.word("extends");\n    this.space();\n    this.print(node.constraint);\n  }\n  if (node.default) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(node.default);\n  }\n}\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n  if (node.readonly) {\n    this.word("readonly");\n    this.space();\n  }\n  this._param(node.parameter);\n}\nfunction TSDeclareFunction(node, parent) {\n  if (node.declare) {\n    this.word("declare");\n    this.space();\n  }\n  this._functionHead(node, parent);\n  this.semicolon();\n}\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n  this.semicolon();\n}\nfunction TSQualifiedName(node) {\n  this.print(node.left);\n  this.tokenChar(46);\n  this.print(node.right);\n}\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  maybePrintTrailingCommaOrSemicolon(this, node);\n}\nfunction maybePrintTrailingCommaOrSemicolon(printer, node) {\n  if (!printer.tokenMap || !node.start || !node.end) {\n    printer.semicolon();\n    return;\n  }\n  if (printer.tokenMap.endMatches(node, ",")) {\n    printer.token(",");\n  } else if (printer.tokenMap.endMatches(node, ";")) {\n    printer.semicolon();\n  }\n}\nfunction TSConstructSignatureDeclaration(node) {\n  this.word("new");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  maybePrintTrailingCommaOrSemicolon(this, node);\n}\nfunction TSPropertySignature(node) {\n  const {\n    readonly\n  } = node;\n  if (readonly) {\n    this.word("readonly");\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation);\n  maybePrintTrailingCommaOrSemicolon(this, node);\n}\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.tokenChar(91);\n  }\n  this.print(node.key);\n  if (node.computed) {\n    this.tokenChar(93);\n  }\n  if (node.optional) {\n    this.tokenChar(63);\n  }\n}\nfunction TSMethodSignature(node) {\n  const {\n    kind\n  } = node;\n  if (kind === "set" || kind === "get") {\n    this.word(kind);\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  maybePrintTrailingCommaOrSemicolon(this, node);\n}\nfunction TSIndexSignature(node) {\n  const {\n    readonly,\n    static: isStatic\n  } = node;\n  if (isStatic) {\n    this.word("static");\n    this.space();\n  }\n  if (readonly) {\n    this.word("readonly");\n    this.space();\n  }\n  this.tokenChar(91);\n  this._parameters(node.parameters, "]");\n  this.print(node.typeAnnotation);\n  maybePrintTrailingCommaOrSemicolon(this, node);\n}\nfunction TSAnyKeyword() {\n  this.word("any");\n}\nfunction TSBigIntKeyword() {\n  this.word("bigint");\n}\nfunction TSUnknownKeyword() {\n  this.word("unknown");\n}\nfunction TSNumberKeyword() {\n  this.word("number");\n}\nfunction TSObjectKeyword() {\n  this.word("object");\n}\nfunction TSBooleanKeyword() {\n  this.word("boolean");\n}\nfunction TSStringKeyword() {\n  this.word("string");\n}\nfunction TSSymbolKeyword() {\n  this.word("symbol");\n}\nfunction TSVoidKeyword() {\n  this.word("void");\n}\nfunction TSUndefinedKeyword() {\n  this.word("undefined");\n}\nfunction TSNullKeyword() {\n  this.word("null");\n}\nfunction TSNeverKeyword() {\n  this.word("never");\n}\nfunction TSIntrinsicKeyword() {\n  this.word("intrinsic");\n}\nfunction TSThisType() {\n  this.word("this");\n}\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\nfunction TSConstructorType(node) {\n  if (node.abstract) {\n    this.word("abstract");\n    this.space();\n  }\n  this.word("new");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters\n  } = node;\n  const parameters = node.parameters;\n  this.print(typeParameters);\n  this.tokenChar(40);\n  this._parameters(parameters, ")");\n  this.space();\n  const returnType = node.typeAnnotation;\n  this.print(returnType);\n}\nfunction TSTypeReference(node) {\n  this.print(node.typeName, !!node.typeParameters);\n  this.print(node.typeParameters);\n}\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word("asserts");\n    this.space();\n  }\n  this.print(node.parameterName);\n  if (node.typeAnnotation) {\n    this.space();\n    this.word("is");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\nfunction TSTypeQuery(node) {\n  this.word("typeof");\n  this.space();\n  this.print(node.exprName);\n  if (node.typeParameters) {\n    this.print(node.typeParameters);\n  }\n}\nfunction TSTypeLiteral(node) {\n  printBraced(this, node, () => this.printJoin(node.members, {\n    indent: true,\n    statement: true\n  }));\n}\nfunction TSArrayType(node) {\n  this.print(node.elementType, true);\n  this.tokenChar(91);\n  this.tokenChar(93);\n}\nfunction TSTupleType(node) {\n  this.tokenChar(91);\n  this.printList(node.elementTypes, {\n    printTrailingSeparator: this.shouldPrintTrailingComma("]")\n  });\n  this.tokenChar(93);\n}\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation);\n  this.tokenChar(63);\n}\nfunction TSRestType(node) {\n  this.token("...");\n  this.print(node.typeAnnotation);\n}\nfunction TSNamedTupleMember(node) {\n  this.print(node.label);\n  if (node.optional) this.tokenChar(63);\n  this.tokenChar(58);\n  this.space();\n  this.print(node.elementType);\n}\nfunction TSUnionType(node) {\n  tsPrintUnionOrIntersectionType(this, node, "|");\n}\nfunction TSIntersectionType(node) {\n  tsPrintUnionOrIntersectionType(this, node, "&");\n}\nfunction tsPrintUnionOrIntersectionType(printer, node, sep) {\n  var _printer$tokenMap;\n  let hasLeadingToken = 0;\n  if ((_printer$tokenMap = printer.tokenMap) != null && _printer$tokenMap.startMatches(node, sep)) {\n    hasLeadingToken = 1;\n    printer.token(sep);\n  }\n  printer.printJoin(node.types, {\n    separator(i) {\n      this.space();\n      this.token(sep, null, i + hasLeadingToken);\n      this.space();\n    }\n  });\n}\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word("extends");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.tokenChar(63);\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.tokenChar(58);\n  this.space();\n  this.print(node.falseType);\n}\nfunction TSInferType(node) {\n  this.word("infer");\n  this.print(node.typeParameter);\n}\nfunction TSParenthesizedType(node) {\n  this.tokenChar(40);\n  this.print(node.typeAnnotation);\n  this.tokenChar(41);\n}\nfunction TSTypeOperator(node) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation);\n}\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, true);\n  this.tokenChar(91);\n  this.print(node.indexType);\n  this.tokenChar(93);\n}\nfunction TSMappedType(node) {\n  const {\n    nameType,\n    optional,\n    readonly,\n    typeAnnotation\n  } = node;\n  this.tokenChar(123);\n  const exit = this.enterDelimited();\n  this.space();\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word("readonly");\n    this.space();\n  }\n  this.tokenChar(91);\n  {\n    this.word(node.typeParameter.name);\n  }\n  this.space();\n  this.word("in");\n  this.space();\n  {\n    this.print(node.typeParameter.constraint);\n  }\n  if (nameType) {\n    this.space();\n    this.word("as");\n    this.space();\n    this.print(nameType);\n  }\n  this.tokenChar(93);\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.tokenChar(63);\n  }\n  if (typeAnnotation) {\n    this.tokenChar(58);\n    this.space();\n    this.print(typeAnnotation);\n  }\n  this.space();\n  exit();\n  this.tokenChar(125);\n}\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\nfunction TSLiteralType(node) {\n  this.print(node.literal);\n}\nfunction TSClassImplements(node) {\n  this.print(node.expression);\n  this.print(node.typeParameters);\n}\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n  if (declare) {\n    this.word("declare");\n    this.space();\n  }\n  this.word("interface");\n  this.space();\n  this.print(id);\n  this.print(typeParameters);\n  if (extendz != null && extendz.length) {\n    this.space();\n    this.word("extends");\n    this.space();\n    this.printList(extendz);\n  }\n  this.space();\n  this.print(body);\n}\nfunction TSInterfaceBody(node) {\n  printBraced(this, node, () => this.printJoin(node.body, {\n    indent: true,\n    statement: true\n  }));\n}\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n  if (declare) {\n    this.word("declare");\n    this.space();\n  }\n  this.word("type");\n  this.space();\n  this.print(id);\n  this.print(typeParameters);\n  this.space();\n  this.tokenChar(61);\n  this.space();\n  this.print(typeAnnotation);\n  this.semicolon();\n}\nfunction TSTypeExpression(node) {\n  const {\n    type,\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, true);\n  this.space();\n  this.word(type === "TSAsExpression" ? "as" : "satisfies");\n  this.space();\n  this.print(typeAnnotation);\n}\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.tokenChar(60);\n  this.print(typeAnnotation);\n  this.tokenChar(62);\n  this.space();\n  this.print(expression);\n}\nfunction TSInstantiationExpression(node) {\n  this.print(node.expression);\n  this.print(node.typeParameters);\n}\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n  if (declare) {\n    this.word("declare");\n    this.space();\n  }\n  if (isConst) {\n    this.word("const");\n    this.space();\n  }\n  this.word("enum");\n  this.space();\n  this.print(id);\n  this.space();\n  printBraced(this, node, () => {\n    var _this$shouldPrintTrai;\n    return this.printList(members, {\n      indent: true,\n      statement: true,\n      printTrailingSeparator: (_this$shouldPrintTrai = this.shouldPrintTrailingComma("}")) != null ? _this$shouldPrintTrai : true\n    });\n  });\n}\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id);\n  if (initializer) {\n    this.space();\n    this.tokenChar(61);\n    this.space();\n    this.print(initializer);\n  }\n}\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id,\n    kind\n  } = node;\n  if (declare) {\n    this.word("declare");\n    this.space();\n  }\n  if (!node.global) {\n    this.word(kind != null ? kind : id.type === "Identifier" ? "namespace" : "module");\n    this.space();\n  }\n  this.print(id);\n  if (!node.body) {\n    this.semicolon();\n    return;\n  }\n  let body = node.body;\n  while (body.type === "TSModuleDeclaration") {\n    this.tokenChar(46);\n    this.print(body.id);\n    body = body.body;\n  }\n  this.space();\n  this.print(body);\n}\nfunction TSModuleBlock(node) {\n  printBraced(this, node, () => this.printSequence(node.body, {\n    indent: true\n  }));\n}\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word("import");\n  this.tokenChar(40);\n  this.print(argument);\n  this.tokenChar(41);\n  if (qualifier) {\n    this.tokenChar(46);\n    this.print(qualifier);\n  }\n  if (typeParameters) {\n    this.print(typeParameters);\n  }\n}\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n  if (isExport) {\n    this.word("export");\n    this.space();\n  }\n  this.word("import");\n  this.space();\n  this.print(id);\n  this.space();\n  this.tokenChar(61);\n  this.space();\n  this.print(moduleReference);\n  this.semicolon();\n}\nfunction TSExternalModuleReference(node) {\n  this.token("require(");\n  this.print(node.expression);\n  this.tokenChar(41);\n}\nfunction TSNonNullExpression(node) {\n  this.print(node.expression);\n  this.tokenChar(33);\n}\nfunction TSExportAssignment(node) {\n  this.word("export");\n  this.space();\n  this.tokenChar(61);\n  this.space();\n  this.print(node.expression);\n  this.semicolon();\n}\nfunction TSNamespaceExportDeclaration(node) {\n  this.word("export");\n  this.space();\n  this.word("as");\n  this.space();\n  this.word("namespace");\n  this.space();\n  this.print(node.id);\n  this.semicolon();\n}\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters\n  } = node;\n  const parameters = node.parameters;\n  this.print(typeParameters);\n  this.tokenChar(40);\n  this._parameters(parameters, ")");\n  const returnType = node.typeAnnotation;\n  this.print(returnType);\n}\nfunction tsPrintClassMemberModifiers(node) {\n  const isField = node.type === "ClassAccessorProperty" || node.type === "ClassProperty";\n  printModifiersList(this, node, [isField && node.declare && "declare", node.accessibility]);\n  if (node.static) {\n    this.word("static");\n    this.space();\n  }\n  printModifiersList(this, node, [node.override && "override", node.abstract && "abstract", isField && node.readonly && "readonly"]);\n}\nfunction printBraced(printer, node, cb) {\n  printer.token("{");\n  const exit = printer.enterDelimited();\n  cb();\n  exit();\n  printer.rightBrace(node);\n}\nfunction printModifiersList(printer, node, modifiers) {\n  var _printer$tokenMap2;\n  const modifiersSet = new Set();\n  for (const modifier of modifiers) {\n    if (modifier) modifiersSet.add(modifier);\n  }\n  (_printer$tokenMap2 = printer.tokenMap) == null || _printer$tokenMap2.find(node, tok => {\n    if (modifiersSet.has(tok.value)) {\n      printer.token(tok.value);\n      printer.space();\n      modifiersSet.delete(tok.value);\n      return modifiersSet.size === 0;\n    }\n  });\n  for (const modifier of modifiersSet) {\n    printer.word(modifier);\n    printer.space();\n  }\n}\n\n//# sourceMappingURL=typescript.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9276\n')},78992:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = generate;\nvar _sourceMap = __webpack_require__(44068);\nvar _printer = __webpack_require__(66636);\nfunction normalizeOptions(code, opts, ast) {\n  if (opts.experimental_preserveFormat) {\n    if (typeof code !== "string") {\n      throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");\n    }\n    if (!opts.retainLines) {\n      throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");\n    }\n    if (opts.compact && opts.compact !== "auto") {\n      throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");\n    }\n    if (opts.minified) {\n      throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");\n    }\n    if (opts.jsescOption) {\n      throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");\n    }\n    if (!Array.isArray(ast.tokens)) {\n      throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable the `tokens: true` parser option.");\n    }\n  }\n  const format = {\n    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n    shouldPrintComment: opts.shouldPrintComment,\n    preserveFormat: opts.experimental_preserveFormat,\n    retainLines: opts.retainLines,\n    retainFunctionParens: opts.retainFunctionParens,\n    comments: opts.comments == null || opts.comments,\n    compact: opts.compact,\n    minified: opts.minified,\n    concise: opts.concise,\n    indent: {\n      adjustMultilineComment: true,\n      style: "  "\n    },\n    jsescOption: Object.assign({\n      quotes: "double",\n      wrap: true,\n      minimal: false\n    }, opts.jsescOption),\n    topicToken: opts.topicToken,\n    importAttributesKeyword: opts.importAttributesKeyword\n  };\n  {\n    var _opts$recordAndTupleS;\n    format.decoratorsBeforeExport = opts.decoratorsBeforeExport;\n    format.jsescOption.json = opts.jsonCompatibleStrings;\n    format.recordAndTupleSyntaxType = (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) != null ? _opts$recordAndTupleS : "hash";\n  }\n  if (format.minified) {\n    format.compact = true;\n    format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);\n  } else {\n    format.shouldPrintComment = format.shouldPrintComment || (value => format.comments || value.includes("@license") || value.includes("@preserve"));\n  }\n  if (format.compact === "auto") {\n    format.compact = typeof code === "string" && code.length > 500000;\n    if (format.compact) {\n      console.error("[BABEL] Note: The code generator has deoptimised the styling of " + `${opts.filename} as it exceeds the max of ${"500KB"}.`);\n    }\n  }\n  if (format.compact || format.preserveFormat) {\n    format.indent.adjustMultilineComment = false;\n  }\n  const {\n    auxiliaryCommentBefore,\n    auxiliaryCommentAfter,\n    shouldPrintComment\n  } = format;\n  if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {\n    format.auxiliaryCommentBefore = undefined;\n  }\n  if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {\n    format.auxiliaryCommentAfter = undefined;\n  }\n  return format;\n}\n{\n  exports.CodeGenerator = class CodeGenerator {\n    constructor(ast, opts = {}, code) {\n      this._ast = void 0;\n      this._format = void 0;\n      this._map = void 0;\n      this._ast = ast;\n      this._format = normalizeOptions(code, opts, ast);\n      this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;\n    }\n    generate() {\n      const printer = new _printer.default(this._format, this._map);\n      return printer.generate(this._ast);\n    }\n  };\n}\nfunction generate(ast, opts = {}, code) {\n  const format = normalizeOptions(code, opts, ast);\n  const map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;\n  const printer = new _printer.default(format, map, ast.tokens, typeof code === "string" ? code : null);\n  return printer.generate(ast);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg5OTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixpQkFBaUIsbUJBQU8sQ0FBQyxLQUFpQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEZBQTRGLGVBQWUsMkJBQTJCLFFBQVE7QUFDOUk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUscUJBQXFCO0FBQ3ZCLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvZ2VuZXJhdG9yL2xpYi9pbmRleC5qcz9hM2YzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2VuZXJhdGU7XG52YXIgX3NvdXJjZU1hcCA9IHJlcXVpcmUoXCIuL3NvdXJjZS1tYXAuanNcIik7XG52YXIgX3ByaW50ZXIgPSByZXF1aXJlKFwiLi9wcmludGVyLmpzXCIpO1xuZnVuY3Rpb24gbm9ybWFsaXplT3B0aW9ucyhjb2RlLCBvcHRzLCBhc3QpIHtcbiAgaWYgKG9wdHMuZXhwZXJpbWVudGFsX3ByZXNlcnZlRm9ybWF0KSB7XG4gICAgaWYgKHR5cGVvZiBjb2RlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZXhwZXJpbWVudGFsX3ByZXNlcnZlRm9ybWF0YCByZXF1aXJlcyB0aGUgb3JpZ2luYWwgYGNvZGVgIHRvIGJlIHBhc3NlZCB0byBAYmFiZWwvZ2VuZXJhdG9yIGFzIGEgc3RyaW5nXCIpO1xuICAgIH1cbiAgICBpZiAoIW9wdHMucmV0YWluTGluZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBleHBlcmltZW50YWxfcHJlc2VydmVGb3JtYXRgIHJlcXVpcmVzIGByZXRhaW5MaW5lc2AgdG8gYmUgc2V0IHRvIGB0cnVlYFwiKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29tcGFjdCAmJiBvcHRzLmNvbXBhY3QgIT09IFwiYXV0b1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZXhwZXJpbWVudGFsX3ByZXNlcnZlRm9ybWF0YCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBgY29tcGFjdGAgb3B0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAob3B0cy5taW5pZmllZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGV4cGVyaW1lbnRhbF9wcmVzZXJ2ZUZvcm1hdGAgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgYG1pbmlmaWVkYCBvcHRpb25cIik7XG4gICAgfVxuICAgIGlmIChvcHRzLmpzZXNjT3B0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZXhwZXJpbWVudGFsX3ByZXNlcnZlRm9ybWF0YCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBganNlc2NPcHRpb25gIG9wdGlvblwiKTtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFzdC50b2tlbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZXhwZXJpbWVudGFsX3ByZXNlcnZlRm9ybWF0YCByZXF1aXJlcyB0aGUgQVNUIHRvIGhhdmUgYXR0YXRjaGVkIHRoZSB0b2tlbiBvZiB0aGUgaW5wdXQgY29kZS4gTWFrZSBzdXJlIHRvIGVuYWJsZSB0aGUgYHRva2VuczogdHJ1ZWAgcGFyc2VyIG9wdGlvbi5cIik7XG4gICAgfVxuICB9XG4gIGNvbnN0IGZvcm1hdCA9IHtcbiAgICBhdXhpbGlhcnlDb21tZW50QmVmb3JlOiBvcHRzLmF1eGlsaWFyeUNvbW1lbnRCZWZvcmUsXG4gICAgYXV4aWxpYXJ5Q29tbWVudEFmdGVyOiBvcHRzLmF1eGlsaWFyeUNvbW1lbnRBZnRlcixcbiAgICBzaG91bGRQcmludENvbW1lbnQ6IG9wdHMuc2hvdWxkUHJpbnRDb21tZW50LFxuICAgIHByZXNlcnZlRm9ybWF0OiBvcHRzLmV4cGVyaW1lbnRhbF9wcmVzZXJ2ZUZvcm1hdCxcbiAgICByZXRhaW5MaW5lczogb3B0cy5yZXRhaW5MaW5lcyxcbiAgICByZXRhaW5GdW5jdGlvblBhcmVuczogb3B0cy5yZXRhaW5GdW5jdGlvblBhcmVucyxcbiAgICBjb21tZW50czogb3B0cy5jb21tZW50cyA9PSBudWxsIHx8IG9wdHMuY29tbWVudHMsXG4gICAgY29tcGFjdDogb3B0cy5jb21wYWN0LFxuICAgIG1pbmlmaWVkOiBvcHRzLm1pbmlmaWVkLFxuICAgIGNvbmNpc2U6IG9wdHMuY29uY2lzZSxcbiAgICBpbmRlbnQ6IHtcbiAgICAgIGFkanVzdE11bHRpbGluZUNvbW1lbnQ6IHRydWUsXG4gICAgICBzdHlsZTogXCIgIFwiXG4gICAgfSxcbiAgICBqc2VzY09wdGlvbjogT2JqZWN0LmFzc2lnbih7XG4gICAgICBxdW90ZXM6IFwiZG91YmxlXCIsXG4gICAgICB3cmFwOiB0cnVlLFxuICAgICAgbWluaW1hbDogZmFsc2VcbiAgICB9LCBvcHRzLmpzZXNjT3B0aW9uKSxcbiAgICB0b3BpY1Rva2VuOiBvcHRzLnRvcGljVG9rZW4sXG4gICAgaW1wb3J0QXR0cmlidXRlc0tleXdvcmQ6IG9wdHMuaW1wb3J0QXR0cmlidXRlc0tleXdvcmRcbiAgfTtcbiAge1xuICAgIHZhciBfb3B0cyRyZWNvcmRBbmRUdXBsZVM7XG4gICAgZm9ybWF0LmRlY29yYXRvcnNCZWZvcmVFeHBvcnQgPSBvcHRzLmRlY29yYXRvcnNCZWZvcmVFeHBvcnQ7XG4gICAgZm9ybWF0LmpzZXNjT3B0aW9uLmpzb24gPSBvcHRzLmpzb25Db21wYXRpYmxlU3RyaW5ncztcbiAgICBmb3JtYXQucmVjb3JkQW5kVHVwbGVTeW50YXhUeXBlID0gKF9vcHRzJHJlY29yZEFuZFR1cGxlUyA9IG9wdHMucmVjb3JkQW5kVHVwbGVTeW50YXhUeXBlKSAhPSBudWxsID8gX29wdHMkcmVjb3JkQW5kVHVwbGVTIDogXCJoYXNoXCI7XG4gIH1cbiAgaWYgKGZvcm1hdC5taW5pZmllZCkge1xuICAgIGZvcm1hdC5jb21wYWN0ID0gdHJ1ZTtcbiAgICBmb3JtYXQuc2hvdWxkUHJpbnRDb21tZW50ID0gZm9ybWF0LnNob3VsZFByaW50Q29tbWVudCB8fCAoKCkgPT4gZm9ybWF0LmNvbW1lbnRzKTtcbiAgfSBlbHNlIHtcbiAgICBmb3JtYXQuc2hvdWxkUHJpbnRDb21tZW50ID0gZm9ybWF0LnNob3VsZFByaW50Q29tbWVudCB8fCAodmFsdWUgPT4gZm9ybWF0LmNvbW1lbnRzIHx8IHZhbHVlLmluY2x1ZGVzKFwiQGxpY2Vuc2VcIikgfHwgdmFsdWUuaW5jbHVkZXMoXCJAcHJlc2VydmVcIikpO1xuICB9XG4gIGlmIChmb3JtYXQuY29tcGFjdCA9PT0gXCJhdXRvXCIpIHtcbiAgICBmb3JtYXQuY29tcGFjdCA9IHR5cGVvZiBjb2RlID09PSBcInN0cmluZ1wiICYmIGNvZGUubGVuZ3RoID4gNTAwMDAwO1xuICAgIGlmIChmb3JtYXQuY29tcGFjdCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIltCQUJFTF0gTm90ZTogVGhlIGNvZGUgZ2VuZXJhdG9yIGhhcyBkZW9wdGltaXNlZCB0aGUgc3R5bGluZyBvZiBcIiArIGAke29wdHMuZmlsZW5hbWV9IGFzIGl0IGV4Y2VlZHMgdGhlIG1heCBvZiAke1wiNTAwS0JcIn0uYCk7XG4gICAgfVxuICB9XG4gIGlmIChmb3JtYXQuY29tcGFjdCB8fCBmb3JtYXQucHJlc2VydmVGb3JtYXQpIHtcbiAgICBmb3JtYXQuaW5kZW50LmFkanVzdE11bHRpbGluZUNvbW1lbnQgPSBmYWxzZTtcbiAgfVxuICBjb25zdCB7XG4gICAgYXV4aWxpYXJ5Q29tbWVudEJlZm9yZSxcbiAgICBhdXhpbGlhcnlDb21tZW50QWZ0ZXIsXG4gICAgc2hvdWxkUHJpbnRDb21tZW50XG4gIH0gPSBmb3JtYXQ7XG4gIGlmIChhdXhpbGlhcnlDb21tZW50QmVmb3JlICYmICFzaG91bGRQcmludENvbW1lbnQoYXV4aWxpYXJ5Q29tbWVudEJlZm9yZSkpIHtcbiAgICBmb3JtYXQuYXV4aWxpYXJ5Q29tbWVudEJlZm9yZSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoYXV4aWxpYXJ5Q29tbWVudEFmdGVyICYmICFzaG91bGRQcmludENvbW1lbnQoYXV4aWxpYXJ5Q29tbWVudEFmdGVyKSkge1xuICAgIGZvcm1hdC5hdXhpbGlhcnlDb21tZW50QWZ0ZXIgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdDtcbn1cbntcbiAgZXhwb3J0cy5Db2RlR2VuZXJhdG9yID0gY2xhc3MgQ29kZUdlbmVyYXRvciB7XG4gICAgY29uc3RydWN0b3IoYXN0LCBvcHRzID0ge30sIGNvZGUpIHtcbiAgICAgIHRoaXMuX2FzdCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX2Zvcm1hdCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX21hcCA9IHZvaWQgMDtcbiAgICAgIHRoaXMuX2FzdCA9IGFzdDtcbiAgICAgIHRoaXMuX2Zvcm1hdCA9IG5vcm1hbGl6ZU9wdGlvbnMoY29kZSwgb3B0cywgYXN0KTtcbiAgICAgIHRoaXMuX21hcCA9IG9wdHMuc291cmNlTWFwcyA/IG5ldyBfc291cmNlTWFwLmRlZmF1bHQob3B0cywgY29kZSkgOiBudWxsO1xuICAgIH1cbiAgICBnZW5lcmF0ZSgpIHtcbiAgICAgIGNvbnN0IHByaW50ZXIgPSBuZXcgX3ByaW50ZXIuZGVmYXVsdCh0aGlzLl9mb3JtYXQsIHRoaXMuX21hcCk7XG4gICAgICByZXR1cm4gcHJpbnRlci5nZW5lcmF0ZSh0aGlzLl9hc3QpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlKGFzdCwgb3B0cyA9IHt9LCBjb2RlKSB7XG4gIGNvbnN0IGZvcm1hdCA9IG5vcm1hbGl6ZU9wdGlvbnMoY29kZSwgb3B0cywgYXN0KTtcbiAgY29uc3QgbWFwID0gb3B0cy5zb3VyY2VNYXBzID8gbmV3IF9zb3VyY2VNYXAuZGVmYXVsdChvcHRzLCBjb2RlKSA6IG51bGw7XG4gIGNvbnN0IHByaW50ZXIgPSBuZXcgX3ByaW50ZXIuZGVmYXVsdChmb3JtYXQsIG1hcCwgYXN0LnRva2VucywgdHlwZW9mIGNvZGUgPT09IFwic3RyaW5nXCIgPyBjb2RlIDogbnVsbCk7XG4gIHJldHVybiBwcmludGVyLmdlbmVyYXRlKGFzdCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///78992\n')},31373:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.TokenContext = void 0;\nexports.isLastChild = isLastChild;\nexports.needsParens = needsParens;\nexports.needsWhitespace = needsWhitespace;\nexports.needsWhitespaceAfter = needsWhitespaceAfter;\nexports.needsWhitespaceBefore = needsWhitespaceBefore;\nvar whitespace = __webpack_require__(42716);\nvar parens = __webpack_require__(11773);\nvar _t = __webpack_require__(2352);\nconst {\n  FLIPPED_ALIAS_KEYS,\n  VISITOR_KEYS,\n  isCallExpression,\n  isDecorator,\n  isExpressionStatement,\n  isMemberExpression,\n  isNewExpression,\n  isParenthesizedExpression\n} = _t;\nconst TokenContext = exports.TokenContext = {\n  expressionStatement: 1,\n  arrowBody: 2,\n  exportDefault: 4,\n  forHead: 8,\n  forInHead: 16,\n  forOfHead: 32,\n  arrowFlowReturnType: 64\n};\nfunction expandAliases(obj) {\n  const map = new Map();\n  function add(type, func) {\n    const fn = map.get(type);\n    map.set(type, fn ? function (node, parent, stack, inForInit, getRawIdentifier) {\n      var _fn;\n      return (_fn = fn(node, parent, stack, inForInit, getRawIdentifier)) != null ? _fn : func(node, parent, stack, inForInit, getRawIdentifier);\n    } : func);\n  }\n  for (const type of Object.keys(obj)) {\n    const aliases = FLIPPED_ALIAS_KEYS[type];\n    if (aliases) {\n      for (const alias of aliases) {\n        add(alias, obj[type]);\n      }\n    } else {\n      add(type, obj[type]);\n    }\n  }\n  return map;\n}\nconst expandedParens = expandAliases(parens);\nconst expandedWhitespaceNodes = expandAliases(whitespace.nodes);\nfunction isOrHasCallExpression(node) {\n  if (isCallExpression(node)) {\n    return true;\n  }\n  return isMemberExpression(node) && isOrHasCallExpression(node.object);\n}\nfunction needsWhitespace(node, parent, type) {\n  var _expandedWhitespaceNo;\n  if (!node) return false;\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n  const flag = (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) == null ? void 0 : _expandedWhitespaceNo(node, parent);\n  if (typeof flag === "number") {\n    return (flag & type) !== 0;\n  }\n  return false;\n}\nfunction needsWhitespaceBefore(node, parent) {\n  return needsWhitespace(node, parent, 1);\n}\nfunction needsWhitespaceAfter(node, parent) {\n  return needsWhitespace(node, parent, 2);\n}\nfunction needsParens(node, parent, tokenContext, inForInit, getRawIdentifier) {\n  var _expandedParens$get;\n  if (!parent) return false;\n  if (isNewExpression(parent) && parent.callee === node) {\n    if (isOrHasCallExpression(node)) return true;\n  }\n  if (isDecorator(parent)) {\n    return !isDecoratorMemberExpression(node) && !(isCallExpression(node) && isDecoratorMemberExpression(node.callee)) && !isParenthesizedExpression(node);\n  }\n  return (_expandedParens$get = expandedParens.get(node.type)) == null ? void 0 : _expandedParens$get(node, parent, tokenContext, inForInit, getRawIdentifier);\n}\nfunction isDecoratorMemberExpression(node) {\n  switch (node.type) {\n    case "Identifier":\n      return true;\n    case "MemberExpression":\n      return !node.computed && node.property.type === "Identifier" && isDecoratorMemberExpression(node.object);\n    default:\n      return false;\n  }\n}\nfunction isLastChild(parent, child) {\n  const visitorKeys = VISITOR_KEYS[parent.type];\n  for (let i = visitorKeys.length - 1; i >= 0; i--) {\n    const val = parent[visitorKeys[i]];\n    if (val === child) {\n      return true;\n    } else if (Array.isArray(val)) {\n      let j = val.length - 1;\n      while (j >= 0 && val[j] === null) j--;\n      return j >= 0 && val[j] === child;\n    } else if (val) {\n      return false;\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEzNzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9CO0FBQ3BCLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsdUJBQXVCO0FBQ3ZCLDRCQUE0QjtBQUM1Qiw2QkFBNkI7QUFDN0IsaUJBQWlCLG1CQUFPLENBQUMsS0FBaUI7QUFDMUMsYUFBYSxtQkFBTyxDQUFDLEtBQWtCO0FBQ3ZDLFNBQVMsbUJBQU8sQ0FBQyxJQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixxQkFBcUIsb0JBQW9CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9nZW5lcmF0b3IvbGliL25vZGUvaW5kZXguanM/YjkyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuVG9rZW5Db250ZXh0ID0gdm9pZCAwO1xuZXhwb3J0cy5pc0xhc3RDaGlsZCA9IGlzTGFzdENoaWxkO1xuZXhwb3J0cy5uZWVkc1BhcmVucyA9IG5lZWRzUGFyZW5zO1xuZXhwb3J0cy5uZWVkc1doaXRlc3BhY2UgPSBuZWVkc1doaXRlc3BhY2U7XG5leHBvcnRzLm5lZWRzV2hpdGVzcGFjZUFmdGVyID0gbmVlZHNXaGl0ZXNwYWNlQWZ0ZXI7XG5leHBvcnRzLm5lZWRzV2hpdGVzcGFjZUJlZm9yZSA9IG5lZWRzV2hpdGVzcGFjZUJlZm9yZTtcbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZShcIi4vd2hpdGVzcGFjZS5qc1wiKTtcbnZhciBwYXJlbnMgPSByZXF1aXJlKFwiLi9wYXJlbnRoZXNlcy5qc1wiKTtcbnZhciBfdCA9IHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIik7XG5jb25zdCB7XG4gIEZMSVBQRURfQUxJQVNfS0VZUyxcbiAgVklTSVRPUl9LRVlTLFxuICBpc0NhbGxFeHByZXNzaW9uLFxuICBpc0RlY29yYXRvcixcbiAgaXNFeHByZXNzaW9uU3RhdGVtZW50LFxuICBpc01lbWJlckV4cHJlc3Npb24sXG4gIGlzTmV3RXhwcmVzc2lvbixcbiAgaXNQYXJlbnRoZXNpemVkRXhwcmVzc2lvblxufSA9IF90O1xuY29uc3QgVG9rZW5Db250ZXh0ID0gZXhwb3J0cy5Ub2tlbkNvbnRleHQgPSB7XG4gIGV4cHJlc3Npb25TdGF0ZW1lbnQ6IDEsXG4gIGFycm93Qm9keTogMixcbiAgZXhwb3J0RGVmYXVsdDogNCxcbiAgZm9ySGVhZDogOCxcbiAgZm9ySW5IZWFkOiAxNixcbiAgZm9yT2ZIZWFkOiAzMixcbiAgYXJyb3dGbG93UmV0dXJuVHlwZTogNjRcbn07XG5mdW5jdGlvbiBleHBhbmRBbGlhc2VzKG9iaikge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gIGZ1bmN0aW9uIGFkZCh0eXBlLCBmdW5jKSB7XG4gICAgY29uc3QgZm4gPSBtYXAuZ2V0KHR5cGUpO1xuICAgIG1hcC5zZXQodHlwZSwgZm4gPyBmdW5jdGlvbiAobm9kZSwgcGFyZW50LCBzdGFjaywgaW5Gb3JJbml0LCBnZXRSYXdJZGVudGlmaWVyKSB7XG4gICAgICB2YXIgX2ZuO1xuICAgICAgcmV0dXJuIChfZm4gPSBmbihub2RlLCBwYXJlbnQsIHN0YWNrLCBpbkZvckluaXQsIGdldFJhd0lkZW50aWZpZXIpKSAhPSBudWxsID8gX2ZuIDogZnVuYyhub2RlLCBwYXJlbnQsIHN0YWNrLCBpbkZvckluaXQsIGdldFJhd0lkZW50aWZpZXIpO1xuICAgIH0gOiBmdW5jKTtcbiAgfVxuICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgIGNvbnN0IGFsaWFzZXMgPSBGTElQUEVEX0FMSUFTX0tFWVNbdHlwZV07XG4gICAgaWYgKGFsaWFzZXMpIHtcbiAgICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgICBhZGQoYWxpYXMsIG9ialt0eXBlXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZCh0eXBlLCBvYmpbdHlwZV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWFwO1xufVxuY29uc3QgZXhwYW5kZWRQYXJlbnMgPSBleHBhbmRBbGlhc2VzKHBhcmVucyk7XG5jb25zdCBleHBhbmRlZFdoaXRlc3BhY2VOb2RlcyA9IGV4cGFuZEFsaWFzZXMod2hpdGVzcGFjZS5ub2Rlcyk7XG5mdW5jdGlvbiBpc09ySGFzQ2FsbEV4cHJlc3Npb24obm9kZSkge1xuICBpZiAoaXNDYWxsRXhwcmVzc2lvbihub2RlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBpc01lbWJlckV4cHJlc3Npb24obm9kZSkgJiYgaXNPckhhc0NhbGxFeHByZXNzaW9uKG5vZGUub2JqZWN0KTtcbn1cbmZ1bmN0aW9uIG5lZWRzV2hpdGVzcGFjZShub2RlLCBwYXJlbnQsIHR5cGUpIHtcbiAgdmFyIF9leHBhbmRlZFdoaXRlc3BhY2VObztcbiAgaWYgKCFub2RlKSByZXR1cm4gZmFsc2U7XG4gIGlmIChpc0V4cHJlc3Npb25TdGF0ZW1lbnQobm9kZSkpIHtcbiAgICBub2RlID0gbm9kZS5leHByZXNzaW9uO1xuICB9XG4gIGNvbnN0IGZsYWcgPSAoX2V4cGFuZGVkV2hpdGVzcGFjZU5vID0gZXhwYW5kZWRXaGl0ZXNwYWNlTm9kZXMuZ2V0KG5vZGUudHlwZSkpID09IG51bGwgPyB2b2lkIDAgOiBfZXhwYW5kZWRXaGl0ZXNwYWNlTm8obm9kZSwgcGFyZW50KTtcbiAgaWYgKHR5cGVvZiBmbGFnID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIChmbGFnICYgdHlwZSkgIT09IDA7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gbmVlZHNXaGl0ZXNwYWNlQmVmb3JlKG5vZGUsIHBhcmVudCkge1xuICByZXR1cm4gbmVlZHNXaGl0ZXNwYWNlKG5vZGUsIHBhcmVudCwgMSk7XG59XG5mdW5jdGlvbiBuZWVkc1doaXRlc3BhY2VBZnRlcihub2RlLCBwYXJlbnQpIHtcbiAgcmV0dXJuIG5lZWRzV2hpdGVzcGFjZShub2RlLCBwYXJlbnQsIDIpO1xufVxuZnVuY3Rpb24gbmVlZHNQYXJlbnMobm9kZSwgcGFyZW50LCB0b2tlbkNvbnRleHQsIGluRm9ySW5pdCwgZ2V0UmF3SWRlbnRpZmllcikge1xuICB2YXIgX2V4cGFuZGVkUGFyZW5zJGdldDtcbiAgaWYgKCFwYXJlbnQpIHJldHVybiBmYWxzZTtcbiAgaWYgKGlzTmV3RXhwcmVzc2lvbihwYXJlbnQpICYmIHBhcmVudC5jYWxsZWUgPT09IG5vZGUpIHtcbiAgICBpZiAoaXNPckhhc0NhbGxFeHByZXNzaW9uKG5vZGUpKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWNvcmF0b3IocGFyZW50KSkge1xuICAgIHJldHVybiAhaXNEZWNvcmF0b3JNZW1iZXJFeHByZXNzaW9uKG5vZGUpICYmICEoaXNDYWxsRXhwcmVzc2lvbihub2RlKSAmJiBpc0RlY29yYXRvck1lbWJlckV4cHJlc3Npb24obm9kZS5jYWxsZWUpKSAmJiAhaXNQYXJlbnRoZXNpemVkRXhwcmVzc2lvbihub2RlKTtcbiAgfVxuICByZXR1cm4gKF9leHBhbmRlZFBhcmVucyRnZXQgPSBleHBhbmRlZFBhcmVucy5nZXQobm9kZS50eXBlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9leHBhbmRlZFBhcmVucyRnZXQobm9kZSwgcGFyZW50LCB0b2tlbkNvbnRleHQsIGluRm9ySW5pdCwgZ2V0UmF3SWRlbnRpZmllcik7XG59XG5mdW5jdGlvbiBpc0RlY29yYXRvck1lbWJlckV4cHJlc3Npb24obm9kZSkge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgXCJJZGVudGlmaWVyXCI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgcmV0dXJuICFub2RlLmNvbXB1dGVkICYmIG5vZGUucHJvcGVydHkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgaXNEZWNvcmF0b3JNZW1iZXJFeHByZXNzaW9uKG5vZGUub2JqZWN0KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBpc0xhc3RDaGlsZChwYXJlbnQsIGNoaWxkKSB7XG4gIGNvbnN0IHZpc2l0b3JLZXlzID0gVklTSVRPUl9LRVlTW3BhcmVudC50eXBlXTtcbiAgZm9yIChsZXQgaSA9IHZpc2l0b3JLZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgdmFsID0gcGFyZW50W3Zpc2l0b3JLZXlzW2ldXTtcbiAgICBpZiAodmFsID09PSBjaGlsZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIGxldCBqID0gdmFsLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaiA+PSAwICYmIHZhbFtqXSA9PT0gbnVsbCkgai0tO1xuICAgICAgcmV0dXJuIGogPj0gMCAmJiB2YWxbal0gPT09IGNoaWxkO1xuICAgIH0gZWxzZSBpZiAodmFsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31373\n')},11773:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.AssignmentExpression = AssignmentExpression;\nexports.Binary = Binary;\nexports.BinaryExpression = BinaryExpression;\nexports.ClassExpression = ClassExpression;\nexports.ArrowFunctionExpression = exports.ConditionalExpression = ConditionalExpression;\nexports.DoExpression = DoExpression;\nexports.FunctionExpression = FunctionExpression;\nexports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.Identifier = Identifier;\nexports.LogicalExpression = LogicalExpression;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.ObjectExpression = ObjectExpression;\nexports.OptionalIndexedAccessType = OptionalIndexedAccessType;\nexports.OptionalCallExpression = exports.OptionalMemberExpression = OptionalMemberExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.TSSatisfiesExpression = exports.TSAsExpression = TSAsExpression;\nexports.TSInferType = TSInferType;\nexports.TSInstantiationExpression = TSInstantiationExpression;\nexports.UnaryLike = exports.TSTypeAssertion = UnaryLike;\nexports.TSIntersectionType = exports.TSUnionType = TSUnionType;\nexports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.UpdateExpression = UpdateExpression;\nexports.AwaitExpression = exports.YieldExpression = YieldExpression;\nvar _t = __webpack_require__(2352);\nvar _index = __webpack_require__(31373);\nconst {\n  isArrayTypeAnnotation,\n  isBinaryExpression,\n  isCallExpression,\n  isForOfStatement,\n  isIndexedAccessType,\n  isMemberExpression,\n  isObjectPattern,\n  isOptionalMemberExpression,\n  isYieldExpression,\n  isStatement\n} = _t;\nconst PRECEDENCE = new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);\nfunction getBinaryPrecedence(node, nodeType) {\n  if (nodeType === "BinaryExpression" || nodeType === "LogicalExpression") {\n    return PRECEDENCE.get(node.operator);\n  }\n  if (nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression") {\n    return PRECEDENCE.get("in");\n  }\n}\nfunction isTSTypeExpression(nodeType) {\n  return nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" || nodeType === "TSTypeAssertion";\n}\nconst isClassExtendsClause = (node, parent) => {\n  const parentType = parent.type;\n  return (parentType === "ClassDeclaration" || parentType === "ClassExpression") && parent.superClass === node;\n};\nconst hasPostfixPart = (node, parent) => {\n  const parentType = parent.type;\n  return (parentType === "MemberExpression" || parentType === "OptionalMemberExpression") && parent.object === node || (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression") && parent.callee === node || parentType === "TaggedTemplateExpression" && parent.tag === node || parentType === "TSNonNullExpression";\n};\nfunction NullableTypeAnnotation(node, parent) {\n  return isArrayTypeAnnotation(parent);\n}\nfunction FunctionTypeAnnotation(node, parent, tokenContext) {\n  const parentType = parent.type;\n  return (parentType === "UnionTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "ArrayTypeAnnotation" || Boolean(tokenContext & _index.TokenContext.arrowFlowReturnType)\n  );\n}\nfunction UpdateExpression(node, parent) {\n  return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);\n}\nfunction needsParenBeforeExpressionBrace(tokenContext) {\n  return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.arrowBody));\n}\nfunction ObjectExpression(node, parent, tokenContext) {\n  return needsParenBeforeExpressionBrace(tokenContext);\n}\nfunction DoExpression(node, parent, tokenContext) {\n  return !node.async && Boolean(tokenContext & _index.TokenContext.expressionStatement);\n}\nfunction Binary(node, parent) {\n  const parentType = parent.type;\n  if (node.type === "BinaryExpression" && node.operator === "**" && parentType === "BinaryExpression" && parent.operator === "**") {\n    return parent.left === node;\n  }\n  if (isClassExtendsClause(node, parent)) {\n    return true;\n  }\n  if (hasPostfixPart(node, parent) || parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "AwaitExpression") {\n    return true;\n  }\n  const parentPos = getBinaryPrecedence(parent, parentType);\n  if (parentPos != null) {\n    const nodePos = getBinaryPrecedence(node, node.type);\n    if (parentPos === nodePos && parentType === "BinaryExpression" && parent.right === node || parentPos > nodePos) {\n      return true;\n    }\n  }\n  return undefined;\n}\nfunction UnionTypeAnnotation(node, parent) {\n  const parentType = parent.type;\n  return parentType === "ArrayTypeAnnotation" || parentType === "NullableTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "UnionTypeAnnotation";\n}\nfunction OptionalIndexedAccessType(node, parent) {\n  return isIndexedAccessType(parent) && parent.objectType === node;\n}\nfunction TSAsExpression(node, parent) {\n  if ((parent.type === "AssignmentExpression" || parent.type === "AssignmentPattern") && parent.left === node) {\n    return true;\n  }\n  if (parent.type === "BinaryExpression" && (parent.operator === "|" || parent.operator === "&") && node === parent.left) {\n    return true;\n  }\n  return Binary(node, parent);\n}\nfunction TSUnionType(node, parent) {\n  const parentType = parent.type;\n  return parentType === "TSArrayType" || parentType === "TSOptionalType" || parentType === "TSIntersectionType" || parentType === "TSRestType";\n}\nfunction TSInferType(node, parent) {\n  const parentType = parent.type;\n  return parentType === "TSArrayType" || parentType === "TSOptionalType";\n}\nfunction TSInstantiationExpression(node, parent) {\n  const parentType = parent.type;\n  return (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression" || parentType === "TSInstantiationExpression") && !!parent.typeParameters;\n}\nfunction BinaryExpression(node, parent, tokenContext, inForStatementInit) {\n  return node.operator === "in" && inForStatementInit;\n}\nfunction SequenceExpression(node, parent) {\n  const parentType = parent.type;\n  if (parentType === "SequenceExpression" || parentType === "ParenthesizedExpression" || parentType === "MemberExpression" && parent.property === node || parentType === "OptionalMemberExpression" && parent.property === node || parentType === "TemplateLiteral") {\n    return false;\n  }\n  if (parentType === "ClassDeclaration") {\n    return true;\n  }\n  if (parentType === "ForOfStatement") {\n    return parent.right === node;\n  }\n  if (parentType === "ExportDefaultDeclaration") {\n    return true;\n  }\n  return !isStatement(parent);\n}\nfunction YieldExpression(node, parent) {\n  const parentType = parent.type;\n  return parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "UnaryExpression" || parentType === "SpreadElement" || hasPostfixPart(node, parent) || parentType === "AwaitExpression" && isYieldExpression(node) || parentType === "ConditionalExpression" && node === parent.test || isClassExtendsClause(node, parent) || isTSTypeExpression(parentType);\n}\nfunction ClassExpression(node, parent, tokenContext) {\n  return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));\n}\nfunction UnaryLike(node, parent) {\n  return hasPostfixPart(node, parent) || isBinaryExpression(parent) && parent.operator === "**" && parent.left === node || isClassExtendsClause(node, parent);\n}\nfunction FunctionExpression(node, parent, tokenContext) {\n  return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));\n}\nfunction ConditionalExpression(node, parent) {\n  const parentType = parent.type;\n  if (parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "ConditionalExpression" && parent.test === node || parentType === "AwaitExpression" || isTSTypeExpression(parentType)) {\n    return true;\n  }\n  return UnaryLike(node, parent);\n}\nfunction OptionalMemberExpression(node, parent) {\n  return isCallExpression(parent) && parent.callee === node || isMemberExpression(parent) && parent.object === node;\n}\nfunction AssignmentExpression(node, parent, tokenContext) {\n  if (needsParenBeforeExpressionBrace(tokenContext) && isObjectPattern(node.left)) {\n    return true;\n  } else {\n    return ConditionalExpression(node, parent);\n  }\n}\nfunction LogicalExpression(node, parent) {\n  const parentType = parent.type;\n  if (isTSTypeExpression(parentType)) return true;\n  if (parentType !== "LogicalExpression") return false;\n  switch (node.operator) {\n    case "||":\n      return parent.operator === "??" || parent.operator === "&&";\n    case "&&":\n      return parent.operator === "??";\n    case "??":\n      return parent.operator !== "??";\n  }\n}\nfunction Identifier(node, parent, tokenContext, _inForInit, getRawIdentifier) {\n  var _node$extra;\n  const parentType = parent.type;\n  if ((_node$extra = node.extra) != null && _node$extra.parenthesized && parentType === "AssignmentExpression" && parent.left === node) {\n    const rightType = parent.right.type;\n    if ((rightType === "FunctionExpression" || rightType === "ClassExpression") && parent.right.id == null) {\n      return true;\n    }\n  }\n  if (getRawIdentifier && getRawIdentifier(node) !== node.name) {\n    return false;\n  }\n  if (node.name === "let") {\n    const isFollowedByBracket = isMemberExpression(parent, {\n      object: node,\n      computed: true\n    }) || isOptionalMemberExpression(parent, {\n      object: node,\n      computed: true,\n      optional: false\n    });\n    if (isFollowedByBracket && tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.forHead | _index.TokenContext.forInHead)) {\n      return true;\n    }\n    return Boolean(tokenContext & _index.TokenContext.forOfHead);\n  }\n  return node.name === "async" && isForOfStatement(parent, {\n    left: node,\n    await: false\n  });\n}\n\n//# sourceMappingURL=parentheses.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11773\n')},42716:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.nodes = void 0;\nvar _t = __webpack_require__(2352);\nconst {\n  FLIPPED_ALIAS_KEYS,\n  isArrayExpression,\n  isAssignmentExpression,\n  isBinary,\n  isBlockStatement,\n  isCallExpression,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isMemberExpression,\n  isObjectExpression,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isStringLiteral\n} = _t;\nfunction crawlInternal(node, state) {\n  if (!node) return state;\n  if (isMemberExpression(node) || isOptionalMemberExpression(node)) {\n    crawlInternal(node.object, state);\n    if (node.computed) crawlInternal(node.property, state);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    crawlInternal(node.left, state);\n    crawlInternal(node.right, state);\n  } else if (isCallExpression(node) || isOptionalCallExpression(node)) {\n    state.hasCall = true;\n    crawlInternal(node.callee, state);\n  } else if (isFunction(node)) {\n    state.hasFunction = true;\n  } else if (isIdentifier(node)) {\n    state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee);\n  }\n  return state;\n}\nfunction crawl(node) {\n  return crawlInternal(node, {\n    hasCall: false,\n    hasFunction: false,\n    hasHelper: false\n  });\n}\nfunction isHelper(node) {\n  if (!node) return false;\n  if (isMemberExpression(node)) {\n    return isHelper(node.object) || isHelper(node.property);\n  } else if (isIdentifier(node)) {\n    return node.name === "require" || node.name.charCodeAt(0) === 95;\n  } else if (isCallExpression(node)) {\n    return isHelper(node.callee);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    return isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);\n  } else {\n    return false;\n  }\n}\nfunction isType(node) {\n  return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);\n}\nconst nodes = exports.nodes = {\n  AssignmentExpression(node) {\n    const state = crawl(node.right);\n    if (state.hasCall && state.hasHelper || state.hasFunction) {\n      return state.hasFunction ? 1 | 2 : 2;\n    }\n  },\n  SwitchCase(node, parent) {\n    return (!!node.consequent.length || parent.cases[0] === node ? 1 : 0) | (!node.consequent.length && parent.cases[parent.cases.length - 1] === node ? 2 : 0);\n  },\n  LogicalExpression(node) {\n    if (isFunction(node.left) || isFunction(node.right)) {\n      return 2;\n    }\n  },\n  Literal(node) {\n    if (isStringLiteral(node) && node.value === "use strict") {\n      return 2;\n    }\n  },\n  CallExpression(node) {\n    if (isFunction(node.callee) || isHelper(node)) {\n      return 1 | 2;\n    }\n  },\n  OptionalCallExpression(node) {\n    if (isFunction(node.callee)) {\n      return 1 | 2;\n    }\n  },\n  VariableDeclaration(node) {\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n      let enabled = isHelper(declar.id) && !isType(declar.init);\n      if (!enabled && declar.init) {\n        const state = crawl(declar.init);\n        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;\n      }\n      if (enabled) {\n        return 1 | 2;\n      }\n    }\n  },\n  IfStatement(node) {\n    if (isBlockStatement(node.consequent)) {\n      return 1 | 2;\n    }\n  }\n};\nnodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function (node, parent) {\n  if (parent.properties[0] === node) {\n    return 1;\n  }\n};\nnodes.ObjectTypeCallProperty = function (node, parent) {\n  var _parent$properties;\n  if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {\n    return 1;\n  }\n};\nnodes.ObjectTypeIndexer = function (node, parent) {\n  var _parent$properties2, _parent$callPropertie;\n  if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {\n    return 1;\n  }\n};\nnodes.ObjectTypeInternalSlot = function (node, parent) {\n  var _parent$properties3, _parent$callPropertie2, _parent$indexers;\n  if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {\n    return 1;\n  }\n};\n[["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function ([type, amounts]) {\n  [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function (type) {\n    const ret = amounts ? 1 | 2 : 0;\n    nodes[type] = () => ret;\n  });\n});\n\n//# sourceMappingURL=whitespace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42716\n')},66636:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _buffer = __webpack_require__(74960);\nvar n = __webpack_require__(31373);\nvar _t = __webpack_require__(2352);\nvar _tokenMap = __webpack_require__(49594);\nvar generatorFunctions = __webpack_require__(66735);\nconst {\n  isExpression,\n  isFunction,\n  isStatement,\n  isClassBody,\n  isTSInterfaceBody,\n  isTSEnumDeclaration\n} = _t;\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst HAS_NEWLINE = /[\\n\\r\\u2028\\u2029]/;\nconst HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\\n\\r\\u2028\\u2029]|\\*\\//;\nfunction commentIsNewline(c) {\n  return c.type === "CommentLine" || HAS_NEWLINE.test(c.value);\n}\nconst {\n  needsParens\n} = n;\nclass Printer {\n  constructor(format, map, tokens, originalCode) {\n    this.inForStatementInit = false;\n    this.tokenContext = 0;\n    this._tokens = null;\n    this._originalCode = null;\n    this._currentNode = null;\n    this._indent = 0;\n    this._indentRepeat = 0;\n    this._insideAux = false;\n    this._noLineTerminator = false;\n    this._noLineTerminatorAfterNode = null;\n    this._printAuxAfterOnNextUserNode = false;\n    this._printedComments = new Set();\n    this._endsWithInteger = false;\n    this._endsWithWord = false;\n    this._endsWithDiv = false;\n    this._lastCommentLine = 0;\n    this._endsWithInnerRaw = false;\n    this._indentInnerComments = true;\n    this.tokenMap = null;\n    this._boundGetRawIdentifier = this._getRawIdentifier.bind(this);\n    this.format = format;\n    this._tokens = tokens;\n    this._originalCode = originalCode;\n    this._indentRepeat = format.indent.style.length;\n    this._inputMap = map == null ? void 0 : map._inputMap;\n    this._buf = new _buffer.default(map, format.indent.style[0]);\n  }\n  enterForStatementInit() {\n    if (this.inForStatementInit) return () => {};\n    this.inForStatementInit = true;\n    return () => {\n      this.inForStatementInit = false;\n    };\n  }\n  enterDelimited() {\n    const oldInForStatementInit = this.inForStatementInit;\n    const oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;\n    if (oldInForStatementInit === false && oldNoLineTerminatorAfterNode === null) {\n      return () => {};\n    }\n    this.inForStatementInit = false;\n    this._noLineTerminatorAfterNode = null;\n    return () => {\n      this.inForStatementInit = oldInForStatementInit;\n      this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;\n    };\n  }\n  generate(ast) {\n    if (this.format.preserveFormat) {\n      this.tokenMap = new _tokenMap.TokenMap(ast, this._tokens, this._originalCode);\n    }\n    this.print(ast);\n    this._maybeAddAuxComment();\n    return this._buf.get();\n  }\n  indent() {\n    const {\n      format\n    } = this;\n    if (format.preserveFormat || format.compact || format.concise) {\n      return;\n    }\n    this._indent++;\n  }\n  dedent() {\n    const {\n      format\n    } = this;\n    if (format.preserveFormat || format.compact || format.concise) {\n      return;\n    }\n    this._indent--;\n  }\n  semicolon(force = false) {\n    this._maybeAddAuxComment();\n    if (force) {\n      this._appendChar(59);\n      this._noLineTerminator = false;\n      return;\n    }\n    if (this.tokenMap) {\n      const node = this._currentNode;\n      if (node.start != null && node.end != null) {\n        if (!this.tokenMap.endMatches(node, ";")) {\n          return;\n        }\n        const indexes = this.tokenMap.getIndexes(this._currentNode);\n        this._catchUpTo(this._tokens[indexes[indexes.length - 1]].loc.start);\n      }\n    }\n    this._queue(59);\n    this._noLineTerminator = false;\n  }\n  rightBrace(node) {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n    this.sourceWithOffset("end", node.loc, -1);\n    this.tokenChar(125);\n  }\n  rightParens(node) {\n    this.sourceWithOffset("end", node.loc, -1);\n    this.tokenChar(41);\n  }\n  space(force = false) {\n    const {\n      format\n    } = this;\n    if (format.compact || format.preserveFormat) return;\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n      if (lastCp !== 32 && lastCp !== 10) {\n        this._space();\n      }\n    }\n  }\n  word(str, noLineTerminatorAfter = false) {\n    this.tokenContext = 0;\n    this._maybePrintInnerComments(str);\n    if (this._endsWithWord || this._endsWithDiv && str.charCodeAt(0) === 47) {\n      this._space();\n    }\n    this._maybeAddAuxComment();\n    this._append(str, false);\n    this._endsWithWord = true;\n    this._noLineTerminator = noLineTerminatorAfter;\n  }\n  number(str, number) {\n    function isNonDecimalLiteral(str) {\n      if (str.length > 2 && str.charCodeAt(0) === 48) {\n        const secondChar = str.charCodeAt(1);\n        return secondChar === 98 || secondChar === 111 || secondChar === 120;\n      }\n      return false;\n    }\n    this.word(str);\n    this._endsWithInteger = Number.isInteger(number) && !isNonDecimalLiteral(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;\n  }\n  token(str, maybeNewline = false, occurrenceCount = 0) {\n    this.tokenContext = 0;\n    this._maybePrintInnerComments(str, occurrenceCount);\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n    if (lastChar === 33 && (str === "--" || strFirst === 61) || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {\n      this._space();\n    }\n    this._maybeAddAuxComment();\n    this._append(str, maybeNewline, occurrenceCount);\n    this._noLineTerminator = false;\n  }\n  tokenChar(char) {\n    this.tokenContext = 0;\n    this._maybePrintInnerComments(String.fromCharCode(char));\n    const lastChar = this.getLastChar();\n    if (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) {\n      this._space();\n    }\n    this._maybeAddAuxComment();\n    this._appendChar(char);\n    this._noLineTerminator = false;\n  }\n  newline(i = 1, force) {\n    if (i <= 0) return;\n    if (!force) {\n      if (this.format.retainLines || this.format.compact) return;\n      if (this.format.concise) {\n        this.space();\n        return;\n      }\n    }\n    if (i > 2) i = 2;\n    i -= this._buf.getNewlineCount();\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n    return;\n  }\n  endsWith(char) {\n    return this.getLastChar() === char;\n  }\n  getLastChar() {\n    return this._buf.getLastChar();\n  }\n  endsWithCharAndNewline() {\n    return this._buf.endsWithCharAndNewline();\n  }\n  removeTrailingNewline() {\n    this._buf.removeTrailingNewline();\n  }\n  exactSource(loc, cb) {\n    if (!loc) {\n      cb();\n      return;\n    }\n    this._catchUp("start", loc);\n    this._buf.exactSource(loc, cb);\n  }\n  source(prop, loc) {\n    if (!loc) return;\n    this._catchUp(prop, loc);\n    this._buf.source(prop, loc);\n  }\n  sourceWithOffset(prop, loc, columnOffset) {\n    if (!loc || this.format.preserveFormat) return;\n    this._catchUp(prop, loc);\n    this._buf.sourceWithOffset(prop, loc, columnOffset);\n  }\n  sourceIdentifierName(identifierName, pos) {\n    if (!this._buf._canMarkIdName) return;\n    const sourcePosition = this._buf._sourcePosition;\n    sourcePosition.identifierNamePos = pos;\n    sourcePosition.identifierName = identifierName;\n  }\n  _space() {\n    this._queue(32);\n  }\n  _newline() {\n    this._queue(10);\n  }\n  _append(str, maybeNewline, occurrenceCount = 0) {\n    if (this.tokenMap) {\n      const token = this.tokenMap.findMatching(this._currentNode, str, occurrenceCount);\n      if (token) this._catchUpTo(token.loc.start);\n    }\n    this._maybeIndent(str.charCodeAt(0));\n    this._buf.append(str, maybeNewline);\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n    this._endsWithDiv = false;\n  }\n  _appendChar(char) {\n    if (this.tokenMap) {\n      const token = this.tokenMap.findMatching(this._currentNode, String.fromCharCode(char));\n      if (token) this._catchUpTo(token.loc.start);\n    }\n    this._maybeIndent(char);\n    this._buf.appendChar(char);\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n    this._endsWithDiv = false;\n  }\n  _queue(char) {\n    this._maybeIndent(char);\n    this._buf.queue(char);\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n  _maybeIndent(firstChar) {\n    if (this._indent && firstChar !== 10 && this.endsWith(10)) {\n      this._buf.queueIndentation(this._getIndent());\n    }\n  }\n  _shouldIndent(firstChar) {\n    if (this._indent && firstChar !== 10 && this.endsWith(10)) {\n      return true;\n    }\n  }\n  catchUp(line) {\n    if (!this.format.retainLines) return;\n    const count = line - this._buf.getCurrentLine();\n    for (let i = 0; i < count; i++) {\n      this._newline();\n    }\n  }\n  _catchUp(prop, loc) {\n    const {\n      format\n    } = this;\n    if (!format.preserveFormat) {\n      if (format.retainLines && loc != null && loc[prop]) {\n        this.catchUp(loc[prop].line);\n      }\n      return;\n    }\n    const pos = loc == null ? void 0 : loc[prop];\n    if (pos != null) this._catchUpTo(pos);\n  }\n  _catchUpTo({\n    line,\n    column,\n    index\n  }) {\n    const count = line - this._buf.getCurrentLine();\n    if (count > 0 && this._noLineTerminator) {\n      return;\n    }\n    for (let i = 0; i < count; i++) {\n      this._newline();\n    }\n    const spacesCount = count > 0 ? column : column - this._buf.getCurrentColumn();\n    if (spacesCount > 0) {\n      const spaces = this._originalCode ? this._originalCode.slice(index - spacesCount, index).replace(/[^\\t\\x0B\\f \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000\\uFEFF]/gu, " ") : " ".repeat(spacesCount);\n      this._append(spaces, false);\n    }\n  }\n  _getIndent() {\n    return this._indentRepeat * this._indent;\n  }\n  printTerminatorless(node) {\n    this._noLineTerminator = true;\n    this.print(node);\n  }\n  print(node, noLineTerminatorAfter, trailingCommentsLineOffset) {\n    var _node$extra, _node$leadingComments, _node$leadingComments2;\n    if (!node) return;\n    this._endsWithInnerRaw = false;\n    const nodeType = node.type;\n    const format = this.format;\n    const oldConcise = format.concise;\n    if (node._compact) {\n      format.concise = true;\n    }\n    const printMethod = this[nodeType];\n    if (printMethod === undefined) {\n      throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);\n    }\n    const parent = this._currentNode;\n    this._currentNode = node;\n    const oldInAux = this._insideAux;\n    this._insideAux = node.loc == null;\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n    const parenthesized = (_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized;\n    let shouldPrintParens = parenthesized && format.preserveFormat || parenthesized && format.retainFunctionParens && nodeType === "FunctionExpression" || needsParens(node, parent, this.tokenContext, this.inForStatementInit, format.preserveFormat ? this._boundGetRawIdentifier : undefined);\n    if (!shouldPrintParens && parenthesized && (_node$leadingComments = node.leadingComments) != null && _node$leadingComments.length && node.leadingComments[0].type === "CommentBlock") {\n      const parentType = parent == null ? void 0 : parent.type;\n      switch (parentType) {\n        case "ExpressionStatement":\n        case "VariableDeclarator":\n        case "AssignmentExpression":\n        case "ReturnStatement":\n          break;\n        case "CallExpression":\n        case "OptionalCallExpression":\n        case "NewExpression":\n          if (parent.callee !== node) break;\n        default:\n          shouldPrintParens = true;\n      }\n    }\n    let indentParenthesized = false;\n    if (!shouldPrintParens && this._noLineTerminator && ((_node$leadingComments2 = node.leadingComments) != null && _node$leadingComments2.some(commentIsNewline) || this.format.retainLines && node.loc && node.loc.start.line > this._buf.getCurrentLine())) {\n      shouldPrintParens = true;\n      indentParenthesized = true;\n    }\n    let oldNoLineTerminatorAfterNode;\n    let oldInForStatementInitWasTrue;\n    if (!shouldPrintParens) {\n      noLineTerminatorAfter || (noLineTerminatorAfter = parent && this._noLineTerminatorAfterNode === parent && n.isLastChild(parent, node));\n      if (noLineTerminatorAfter) {\n        var _node$trailingComment;\n        if ((_node$trailingComment = node.trailingComments) != null && _node$trailingComment.some(commentIsNewline)) {\n          if (isExpression(node)) shouldPrintParens = true;\n        } else {\n          oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;\n          this._noLineTerminatorAfterNode = node;\n        }\n      }\n    }\n    if (shouldPrintParens) {\n      this.tokenChar(40);\n      if (indentParenthesized) this.indent();\n      this._endsWithInnerRaw = false;\n      if (this.inForStatementInit) {\n        oldInForStatementInitWasTrue = true;\n        this.inForStatementInit = false;\n      }\n      oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;\n      this._noLineTerminatorAfterNode = null;\n    }\n    this._lastCommentLine = 0;\n    this._printLeadingComments(node, parent);\n    const loc = nodeType === "Program" || nodeType === "File" ? null : node.loc;\n    this.exactSource(loc, printMethod.bind(this, node, parent));\n    if (shouldPrintParens) {\n      this._printTrailingComments(node, parent);\n      if (indentParenthesized) {\n        this.dedent();\n        this.newline();\n      }\n      this.tokenChar(41);\n      this._noLineTerminator = noLineTerminatorAfter;\n      if (oldInForStatementInitWasTrue) this.inForStatementInit = true;\n    } else if (noLineTerminatorAfter && !this._noLineTerminator) {\n      this._noLineTerminator = true;\n      this._printTrailingComments(node, parent);\n    } else {\n      this._printTrailingComments(node, parent, trailingCommentsLineOffset);\n    }\n    this._currentNode = parent;\n    format.concise = oldConcise;\n    this._insideAux = oldInAux;\n    if (oldNoLineTerminatorAfterNode !== undefined) {\n      this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;\n    }\n    this._endsWithInnerRaw = false;\n  }\n  _maybeAddAuxComment(enteredPositionlessNode) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n    const comment = this.format.auxiliaryCommentBefore;\n    if (comment) {\n      this._printComment({\n        type: "CommentBlock",\n        value: comment\n      }, 0);\n    }\n  }\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n    const comment = this.format.auxiliaryCommentAfter;\n    if (comment) {\n      this._printComment({\n        type: "CommentBlock",\n        value: comment\n      }, 0);\n    }\n  }\n  getPossibleRaw(node) {\n    const extra = node.extra;\n    if ((extra == null ? void 0 : extra.raw) != null && extra.rawValue != null && node.value === extra.rawValue) {\n      return extra.raw;\n    }\n  }\n  printJoin(nodes, opts = {}) {\n    if (!(nodes != null && nodes.length)) return;\n    let {\n      indent\n    } = opts;\n    if (indent == null && this.format.retainLines) {\n      var _nodes$0$loc;\n      const startLine = (_nodes$0$loc = nodes[0].loc) == null ? void 0 : _nodes$0$loc.start.line;\n      if (startLine != null && startLine !== this._buf.getCurrentLine()) {\n        indent = true;\n      }\n    }\n    if (indent) this.indent();\n    const newlineOpts = {\n      addNewlines: opts.addNewlines,\n      nextNodeStartLine: 0\n    };\n    const separator = opts.separator ? opts.separator.bind(this) : null;\n    const len = nodes.length;\n    for (let i = 0; i < len; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n      if (opts.statement) this._printNewline(i === 0, newlineOpts);\n      this.print(node, undefined, opts.trailingCommentsLineOffset || 0);\n      opts.iterator == null || opts.iterator(node, i);\n      if (separator != null) {\n        if (i < len - 1) separator(i, false);else if (opts.printTrailingSeparator) separator(i, true);\n      }\n      if (opts.statement) {\n        var _node$trailingComment2;\n        if (!((_node$trailingComment2 = node.trailingComments) != null && _node$trailingComment2.length)) {\n          this._lastCommentLine = 0;\n        }\n        if (i + 1 === len) {\n          this.newline(1);\n        } else {\n          var _nextNode$loc;\n          const nextNode = nodes[i + 1];\n          newlineOpts.nextNodeStartLine = ((_nextNode$loc = nextNode.loc) == null ? void 0 : _nextNode$loc.start.line) || 0;\n          this._printNewline(true, newlineOpts);\n        }\n      }\n    }\n    if (indent) this.dedent();\n  }\n  printAndIndentOnComments(node) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node);\n    if (indent) this.dedent();\n  }\n  printBlock(parent) {\n    const node = parent.body;\n    if (node.type !== "EmptyStatement") {\n      this.space();\n    }\n    this.print(node);\n  }\n  _printTrailingComments(node, parent, lineOffset) {\n    const {\n      innerComments,\n      trailingComments\n    } = node;\n    if (innerComments != null && innerComments.length) {\n      this._printComments(2, innerComments, node, parent, lineOffset);\n    }\n    if (trailingComments != null && trailingComments.length) {\n      this._printComments(2, trailingComments, node, parent, lineOffset);\n    }\n  }\n  _printLeadingComments(node, parent) {\n    const comments = node.leadingComments;\n    if (!(comments != null && comments.length)) return;\n    this._printComments(0, comments, node, parent);\n  }\n  _maybePrintInnerComments(nextTokenStr, nextTokenOccurrenceCount) {\n    if (this._endsWithInnerRaw) {\n      var _this$tokenMap;\n      this.printInnerComments((_this$tokenMap = this.tokenMap) == null ? void 0 : _this$tokenMap.findMatching(this._currentNode, nextTokenStr, nextTokenOccurrenceCount));\n    }\n    this._endsWithInnerRaw = true;\n    this._indentInnerComments = true;\n  }\n  printInnerComments(nextToken) {\n    const node = this._currentNode;\n    const comments = node.innerComments;\n    if (!(comments != null && comments.length)) return;\n    const hasSpace = this.endsWith(32);\n    const indent = this._indentInnerComments;\n    const printedCommentsCount = this._printedComments.size;\n    if (indent) this.indent();\n    this._printComments(1, comments, node, undefined, undefined, nextToken);\n    if (hasSpace && printedCommentsCount !== this._printedComments.size) {\n      this.space();\n    }\n    if (indent) this.dedent();\n  }\n  noIndentInnerCommentsHere() {\n    this._indentInnerComments = false;\n  }\n  printSequence(nodes, opts = {}) {\n    var _opts$indent;\n    opts.statement = true;\n    (_opts$indent = opts.indent) != null ? _opts$indent : opts.indent = false;\n    this.printJoin(nodes, opts);\n  }\n  printList(items, opts = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n    this.printJoin(items, opts);\n  }\n  shouldPrintTrailingComma(listEnd) {\n    if (!this.tokenMap) return null;\n    const listEndIndex = this.tokenMap.findLastIndex(this._currentNode, token => this.tokenMap.matchesOriginal(token, listEnd));\n    if (listEndIndex <= 0) return null;\n    return this.tokenMap.matchesOriginal(this._tokens[listEndIndex - 1], ",");\n  }\n  _printNewline(newLine, opts) {\n    const format = this.format;\n    if (format.retainLines || format.compact) return;\n    if (format.concise) {\n      this.space();\n      return;\n    }\n    if (!newLine) {\n      return;\n    }\n    const startLine = opts.nextNodeStartLine;\n    const lastCommentLine = this._lastCommentLine;\n    if (startLine > 0 && lastCommentLine > 0) {\n      const offset = startLine - lastCommentLine;\n      if (offset >= 0) {\n        this.newline(offset || 1);\n        return;\n      }\n    }\n    if (this._buf.hasContent()) {\n      this.newline(1);\n    }\n  }\n  _shouldPrintComment(comment, nextToken) {\n    if (comment.ignore) return 0;\n    if (this._printedComments.has(comment)) return 0;\n    if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) {\n      return 2;\n    }\n    if (nextToken && this.tokenMap) {\n      const commentTok = this.tokenMap.find(this._currentNode, token => token.value === comment.value);\n      if (commentTok && commentTok.start > nextToken.start) {\n        return 2;\n      }\n    }\n    this._printedComments.add(comment);\n    if (!this.format.shouldPrintComment(comment.value)) {\n      return 0;\n    }\n    return 1;\n  }\n  _printComment(comment, skipNewLines) {\n    const noLineTerminator = this._noLineTerminator;\n    const isBlockComment = comment.type === "CommentBlock";\n    const printNewLines = isBlockComment && skipNewLines !== 1 && !this._noLineTerminator;\n    if (printNewLines && this._buf.hasContent() && skipNewLines !== 2) {\n      this.newline(1);\n    }\n    const lastCharCode = this.getLastChar();\n    if (lastCharCode !== 91 && lastCharCode !== 123 && lastCharCode !== 40) {\n      this.space();\n    }\n    let val;\n    if (isBlockComment) {\n      val = `/*${comment.value}*/`;\n      if (this.format.indent.adjustMultilineComment) {\n        var _comment$loc;\n        const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;\n        if (offset) {\n          const newlineRegex = new RegExp("\\\\n\\\\s{1," + offset + "}", "g");\n          val = val.replace(newlineRegex, "\\n");\n        }\n        if (this.format.concise) {\n          val = val.replace(/\\n(?!$)/g, `\\n`);\n        } else {\n          let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();\n          if (this._shouldIndent(47) || this.format.retainLines) {\n            indentSize += this._getIndent();\n          }\n          val = val.replace(/\\n(?!$)/g, `\\n${" ".repeat(indentSize)}`);\n        }\n      }\n    } else if (!noLineTerminator) {\n      val = `//${comment.value}`;\n    } else {\n      val = `/*${comment.value}*/`;\n    }\n    if (this._endsWithDiv) this._space();\n    this.source("start", comment.loc);\n    this._append(val, isBlockComment);\n    if (!isBlockComment && !noLineTerminator) {\n      this.newline(1, true);\n    }\n    if (printNewLines && skipNewLines !== 3) {\n      this.newline(1);\n    }\n  }\n  _printComments(type, comments, node, parent, lineOffset = 0, nextToken) {\n    const nodeLoc = node.loc;\n    const len = comments.length;\n    let hasLoc = !!nodeLoc;\n    const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;\n    const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;\n    let lastLine = 0;\n    let leadingCommentNewline = 0;\n    const maybeNewline = this._noLineTerminator ? function () {} : this.newline.bind(this);\n    for (let i = 0; i < len; i++) {\n      const comment = comments[i];\n      const shouldPrint = this._shouldPrintComment(comment, nextToken);\n      if (shouldPrint === 2) {\n        hasLoc = false;\n        break;\n      }\n      if (hasLoc && comment.loc && shouldPrint === 1) {\n        const commentStartLine = comment.loc.start.line;\n        const commentEndLine = comment.loc.end.line;\n        if (type === 0) {\n          let offset = 0;\n          if (i === 0) {\n            if (this._buf.hasContent() && (comment.type === "CommentLine" || commentStartLine !== commentEndLine)) {\n              offset = leadingCommentNewline = 1;\n            }\n          } else {\n            offset = commentStartLine - lastLine;\n          }\n          lastLine = commentEndLine;\n          maybeNewline(offset);\n          this._printComment(comment, 1);\n          if (i + 1 === len) {\n            maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline));\n            lastLine = nodeStartLine;\n          }\n        } else if (type === 1) {\n          const offset = commentStartLine - (i === 0 ? nodeStartLine : lastLine);\n          lastLine = commentEndLine;\n          maybeNewline(offset);\n          this._printComment(comment, 1);\n          if (i + 1 === len) {\n            maybeNewline(Math.min(1, nodeEndLine - lastLine));\n            lastLine = nodeEndLine;\n          }\n        } else {\n          const offset = commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);\n          lastLine = commentEndLine;\n          maybeNewline(offset);\n          this._printComment(comment, 1);\n        }\n      } else {\n        hasLoc = false;\n        if (shouldPrint !== 1) {\n          continue;\n        }\n        if (len === 1) {\n          const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value);\n          const shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);\n          if (type === 0) {\n            this._printComment(comment, shouldSkipNewline && node.type !== "ObjectExpression" || singleLine && isFunction(parent, {\n              body: node\n            }) ? 1 : 0);\n          } else if (shouldSkipNewline && type === 2) {\n            this._printComment(comment, 1);\n          } else {\n            this._printComment(comment, 0);\n          }\n        } else if (type === 1 && !(node.type === "ObjectExpression" && node.properties.length > 1) && node.type !== "ClassBody" && node.type !== "TSInterfaceBody") {\n          this._printComment(comment, i === 0 ? 2 : i === len - 1 ? 3 : 0);\n        } else {\n          this._printComment(comment, 0);\n        }\n      }\n    }\n    if (type === 2 && hasLoc && lastLine) {\n      this._lastCommentLine = lastLine;\n    }\n  }\n}\nObject.assign(Printer.prototype, generatorFunctions);\n{\n  Printer.prototype.Noop = function Noop() {};\n}\nvar _default = exports["default"] = Printer;\nfunction commaSeparator(occurrenceCount, last) {\n  this.token(",", false, occurrenceCount);\n  if (!last) this.space();\n}\n\n//# sourceMappingURL=printer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY2MzYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxRQUFRLG1CQUFPLENBQUMsS0FBaUI7QUFDakMsU0FBUyxtQkFBTyxDQUFDLElBQWM7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsS0FBZ0I7QUFDeEMseUJBQXlCLG1CQUFPLENBQUMsS0FBdUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELDBCQUEwQixtQkFBbUIsc0NBQXNDO0FBQzFJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxpQkFBaUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsdUJBQXVCO0FBQ3BFO0FBQ0E7QUFDQSxNQUFNO0FBQ04saUJBQWlCLGNBQWM7QUFDL0IsTUFBTTtBQUNOLGlCQUFpQixjQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrQkFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL2dlbmVyYXRvci9saWIvcHJpbnRlci5qcz84Y2Q0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9idWZmZXIgPSByZXF1aXJlKFwiLi9idWZmZXIuanNcIik7XG52YXIgbiA9IHJlcXVpcmUoXCIuL25vZGUvaW5kZXguanNcIik7XG52YXIgX3QgPSByZXF1aXJlKFwiQGJhYmVsL3R5cGVzXCIpO1xudmFyIF90b2tlbk1hcCA9IHJlcXVpcmUoXCIuL3Rva2VuLW1hcC5qc1wiKTtcbnZhciBnZW5lcmF0b3JGdW5jdGlvbnMgPSByZXF1aXJlKFwiLi9nZW5lcmF0b3JzL2luZGV4LmpzXCIpO1xuY29uc3Qge1xuICBpc0V4cHJlc3Npb24sXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RhdGVtZW50LFxuICBpc0NsYXNzQm9keSxcbiAgaXNUU0ludGVyZmFjZUJvZHksXG4gIGlzVFNFbnVtRGVjbGFyYXRpb25cbn0gPSBfdDtcbmNvbnN0IFNDSUVOVElGSUNfTk9UQVRJT04gPSAvZS9pO1xuY29uc3QgWkVST19ERUNJTUFMX0lOVEVHRVIgPSAvXFwuMCskLztcbmNvbnN0IEhBU19ORVdMSU5FID0gL1tcXG5cXHJcXHUyMDI4XFx1MjAyOV0vO1xuY29uc3QgSEFTX05FV0xJTkVfT1JfQmxPQ0tfQ09NTUVOVF9FTkQgPSAvW1xcblxcclxcdTIwMjhcXHUyMDI5XXxcXCpcXC8vO1xuZnVuY3Rpb24gY29tbWVudElzTmV3bGluZShjKSB7XG4gIHJldHVybiBjLnR5cGUgPT09IFwiQ29tbWVudExpbmVcIiB8fCBIQVNfTkVXTElORS50ZXN0KGMudmFsdWUpO1xufVxuY29uc3Qge1xuICBuZWVkc1BhcmVuc1xufSA9IG47XG5jbGFzcyBQcmludGVyIHtcbiAgY29uc3RydWN0b3IoZm9ybWF0LCBtYXAsIHRva2Vucywgb3JpZ2luYWxDb2RlKSB7XG4gICAgdGhpcy5pbkZvclN0YXRlbWVudEluaXQgPSBmYWxzZTtcbiAgICB0aGlzLnRva2VuQ29udGV4dCA9IDA7XG4gICAgdGhpcy5fdG9rZW5zID0gbnVsbDtcbiAgICB0aGlzLl9vcmlnaW5hbENvZGUgPSBudWxsO1xuICAgIHRoaXMuX2N1cnJlbnROb2RlID0gbnVsbDtcbiAgICB0aGlzLl9pbmRlbnQgPSAwO1xuICAgIHRoaXMuX2luZGVudFJlcGVhdCA9IDA7XG4gICAgdGhpcy5faW5zaWRlQXV4ID0gZmFsc2U7XG4gICAgdGhpcy5fbm9MaW5lVGVybWluYXRvciA9IGZhbHNlO1xuICAgIHRoaXMuX25vTGluZVRlcm1pbmF0b3JBZnRlck5vZGUgPSBudWxsO1xuICAgIHRoaXMuX3ByaW50QXV4QWZ0ZXJPbk5leHRVc2VyTm9kZSA9IGZhbHNlO1xuICAgIHRoaXMuX3ByaW50ZWRDb21tZW50cyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLl9lbmRzV2l0aEludGVnZXIgPSBmYWxzZTtcbiAgICB0aGlzLl9lbmRzV2l0aFdvcmQgPSBmYWxzZTtcbiAgICB0aGlzLl9lbmRzV2l0aERpdiA9IGZhbHNlO1xuICAgIHRoaXMuX2xhc3RDb21tZW50TGluZSA9IDA7XG4gICAgdGhpcy5fZW5kc1dpdGhJbm5lclJhdyA9IGZhbHNlO1xuICAgIHRoaXMuX2luZGVudElubmVyQ29tbWVudHMgPSB0cnVlO1xuICAgIHRoaXMudG9rZW5NYXAgPSBudWxsO1xuICAgIHRoaXMuX2JvdW5kR2V0UmF3SWRlbnRpZmllciA9IHRoaXMuX2dldFJhd0lkZW50aWZpZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLl90b2tlbnMgPSB0b2tlbnM7XG4gICAgdGhpcy5fb3JpZ2luYWxDb2RlID0gb3JpZ2luYWxDb2RlO1xuICAgIHRoaXMuX2luZGVudFJlcGVhdCA9IGZvcm1hdC5pbmRlbnQuc3R5bGUubGVuZ3RoO1xuICAgIHRoaXMuX2lucHV0TWFwID0gbWFwID09IG51bGwgPyB2b2lkIDAgOiBtYXAuX2lucHV0TWFwO1xuICAgIHRoaXMuX2J1ZiA9IG5ldyBfYnVmZmVyLmRlZmF1bHQobWFwLCBmb3JtYXQuaW5kZW50LnN0eWxlWzBdKTtcbiAgfVxuICBlbnRlckZvclN0YXRlbWVudEluaXQoKSB7XG4gICAgaWYgKHRoaXMuaW5Gb3JTdGF0ZW1lbnRJbml0KSByZXR1cm4gKCkgPT4ge307XG4gICAgdGhpcy5pbkZvclN0YXRlbWVudEluaXQgPSB0cnVlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLmluRm9yU3RhdGVtZW50SW5pdCA9IGZhbHNlO1xuICAgIH07XG4gIH1cbiAgZW50ZXJEZWxpbWl0ZWQoKSB7XG4gICAgY29uc3Qgb2xkSW5Gb3JTdGF0ZW1lbnRJbml0ID0gdGhpcy5pbkZvclN0YXRlbWVudEluaXQ7XG4gICAgY29uc3Qgb2xkTm9MaW5lVGVybWluYXRvckFmdGVyTm9kZSA9IHRoaXMuX25vTGluZVRlcm1pbmF0b3JBZnRlck5vZGU7XG4gICAgaWYgKG9sZEluRm9yU3RhdGVtZW50SW5pdCA9PT0gZmFsc2UgJiYgb2xkTm9MaW5lVGVybWluYXRvckFmdGVyTm9kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgIH1cbiAgICB0aGlzLmluRm9yU3RhdGVtZW50SW5pdCA9IGZhbHNlO1xuICAgIHRoaXMuX25vTGluZVRlcm1pbmF0b3JBZnRlck5vZGUgPSBudWxsO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLmluRm9yU3RhdGVtZW50SW5pdCA9IG9sZEluRm9yU3RhdGVtZW50SW5pdDtcbiAgICAgIHRoaXMuX25vTGluZVRlcm1pbmF0b3JBZnRlck5vZGUgPSBvbGROb0xpbmVUZXJtaW5hdG9yQWZ0ZXJOb2RlO1xuICAgIH07XG4gIH1cbiAgZ2VuZXJhdGUoYXN0KSB7XG4gICAgaWYgKHRoaXMuZm9ybWF0LnByZXNlcnZlRm9ybWF0KSB7XG4gICAgICB0aGlzLnRva2VuTWFwID0gbmV3IF90b2tlbk1hcC5Ub2tlbk1hcChhc3QsIHRoaXMuX3Rva2VucywgdGhpcy5fb3JpZ2luYWxDb2RlKTtcbiAgICB9XG4gICAgdGhpcy5wcmludChhc3QpO1xuICAgIHRoaXMuX21heWJlQWRkQXV4Q29tbWVudCgpO1xuICAgIHJldHVybiB0aGlzLl9idWYuZ2V0KCk7XG4gIH1cbiAgaW5kZW50KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGZvcm1hdFxuICAgIH0gPSB0aGlzO1xuICAgIGlmIChmb3JtYXQucHJlc2VydmVGb3JtYXQgfHwgZm9ybWF0LmNvbXBhY3QgfHwgZm9ybWF0LmNvbmNpc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5faW5kZW50Kys7XG4gIH1cbiAgZGVkZW50KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGZvcm1hdFxuICAgIH0gPSB0aGlzO1xuICAgIGlmIChmb3JtYXQucHJlc2VydmVGb3JtYXQgfHwgZm9ybWF0LmNvbXBhY3QgfHwgZm9ybWF0LmNvbmNpc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5faW5kZW50LS07XG4gIH1cbiAgc2VtaWNvbG9uKGZvcmNlID0gZmFsc2UpIHtcbiAgICB0aGlzLl9tYXliZUFkZEF1eENvbW1lbnQoKTtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHRoaXMuX2FwcGVuZENoYXIoNTkpO1xuICAgICAgdGhpcy5fbm9MaW5lVGVybWluYXRvciA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy50b2tlbk1hcCkge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuX2N1cnJlbnROb2RlO1xuICAgICAgaWYgKG5vZGUuc3RhcnQgIT0gbnVsbCAmJiBub2RlLmVuZCAhPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy50b2tlbk1hcC5lbmRNYXRjaGVzKG5vZGUsIFwiO1wiKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleGVzID0gdGhpcy50b2tlbk1hcC5nZXRJbmRleGVzKHRoaXMuX2N1cnJlbnROb2RlKTtcbiAgICAgICAgdGhpcy5fY2F0Y2hVcFRvKHRoaXMuX3Rva2Vuc1tpbmRleGVzW2luZGV4ZXMubGVuZ3RoIC0gMV1dLmxvYy5zdGFydCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3F1ZXVlKDU5KTtcbiAgICB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yID0gZmFsc2U7XG4gIH1cbiAgcmlnaHRCcmFjZShub2RlKSB7XG4gICAgaWYgKHRoaXMuZm9ybWF0Lm1pbmlmaWVkKSB7XG4gICAgICB0aGlzLl9idWYucmVtb3ZlTGFzdFNlbWljb2xvbigpO1xuICAgIH1cbiAgICB0aGlzLnNvdXJjZVdpdGhPZmZzZXQoXCJlbmRcIiwgbm9kZS5sb2MsIC0xKTtcbiAgICB0aGlzLnRva2VuQ2hhcigxMjUpO1xuICB9XG4gIHJpZ2h0UGFyZW5zKG5vZGUpIHtcbiAgICB0aGlzLnNvdXJjZVdpdGhPZmZzZXQoXCJlbmRcIiwgbm9kZS5sb2MsIC0xKTtcbiAgICB0aGlzLnRva2VuQ2hhcig0MSk7XG4gIH1cbiAgc3BhY2UoZm9yY2UgPSBmYWxzZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGZvcm1hdFxuICAgIH0gPSB0aGlzO1xuICAgIGlmIChmb3JtYXQuY29tcGFjdCB8fCBmb3JtYXQucHJlc2VydmVGb3JtYXQpIHJldHVybjtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHRoaXMuX3NwYWNlKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9idWYuaGFzQ29udGVudCgpKSB7XG4gICAgICBjb25zdCBsYXN0Q3AgPSB0aGlzLmdldExhc3RDaGFyKCk7XG4gICAgICBpZiAobGFzdENwICE9PSAzMiAmJiBsYXN0Q3AgIT09IDEwKSB7XG4gICAgICAgIHRoaXMuX3NwYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHdvcmQoc3RyLCBub0xpbmVUZXJtaW5hdG9yQWZ0ZXIgPSBmYWxzZSkge1xuICAgIHRoaXMudG9rZW5Db250ZXh0ID0gMDtcbiAgICB0aGlzLl9tYXliZVByaW50SW5uZXJDb21tZW50cyhzdHIpO1xuICAgIGlmICh0aGlzLl9lbmRzV2l0aFdvcmQgfHwgdGhpcy5fZW5kc1dpdGhEaXYgJiYgc3RyLmNoYXJDb2RlQXQoMCkgPT09IDQ3KSB7XG4gICAgICB0aGlzLl9zcGFjZSgpO1xuICAgIH1cbiAgICB0aGlzLl9tYXliZUFkZEF1eENvbW1lbnQoKTtcbiAgICB0aGlzLl9hcHBlbmQoc3RyLCBmYWxzZSk7XG4gICAgdGhpcy5fZW5kc1dpdGhXb3JkID0gdHJ1ZTtcbiAgICB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yID0gbm9MaW5lVGVybWluYXRvckFmdGVyO1xuICB9XG4gIG51bWJlcihzdHIsIG51bWJlcikge1xuICAgIGZ1bmN0aW9uIGlzTm9uRGVjaW1hbExpdGVyYWwoc3RyKSB7XG4gICAgICBpZiAoc3RyLmxlbmd0aCA+IDIgJiYgc3RyLmNoYXJDb2RlQXQoMCkgPT09IDQ4KSB7XG4gICAgICAgIGNvbnN0IHNlY29uZENoYXIgPSBzdHIuY2hhckNvZGVBdCgxKTtcbiAgICAgICAgcmV0dXJuIHNlY29uZENoYXIgPT09IDk4IHx8IHNlY29uZENoYXIgPT09IDExMSB8fCBzZWNvbmRDaGFyID09PSAxMjA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMud29yZChzdHIpO1xuICAgIHRoaXMuX2VuZHNXaXRoSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIobnVtYmVyKSAmJiAhaXNOb25EZWNpbWFsTGl0ZXJhbChzdHIpICYmICFTQ0lFTlRJRklDX05PVEFUSU9OLnRlc3Qoc3RyKSAmJiAhWkVST19ERUNJTUFMX0lOVEVHRVIudGVzdChzdHIpICYmIHN0ci5jaGFyQ29kZUF0KHN0ci5sZW5ndGggLSAxKSAhPT0gNDY7XG4gIH1cbiAgdG9rZW4oc3RyLCBtYXliZU5ld2xpbmUgPSBmYWxzZSwgb2NjdXJyZW5jZUNvdW50ID0gMCkge1xuICAgIHRoaXMudG9rZW5Db250ZXh0ID0gMDtcbiAgICB0aGlzLl9tYXliZVByaW50SW5uZXJDb21tZW50cyhzdHIsIG9jY3VycmVuY2VDb3VudCk7XG4gICAgY29uc3QgbGFzdENoYXIgPSB0aGlzLmdldExhc3RDaGFyKCk7XG4gICAgY29uc3Qgc3RyRmlyc3QgPSBzdHIuY2hhckNvZGVBdCgwKTtcbiAgICBpZiAobGFzdENoYXIgPT09IDMzICYmIChzdHIgPT09IFwiLS1cIiB8fCBzdHJGaXJzdCA9PT0gNjEpIHx8IHN0ckZpcnN0ID09PSA0MyAmJiBsYXN0Q2hhciA9PT0gNDMgfHwgc3RyRmlyc3QgPT09IDQ1ICYmIGxhc3RDaGFyID09PSA0NSB8fCBzdHJGaXJzdCA9PT0gNDYgJiYgdGhpcy5fZW5kc1dpdGhJbnRlZ2VyKSB7XG4gICAgICB0aGlzLl9zcGFjZSgpO1xuICAgIH1cbiAgICB0aGlzLl9tYXliZUFkZEF1eENvbW1lbnQoKTtcbiAgICB0aGlzLl9hcHBlbmQoc3RyLCBtYXliZU5ld2xpbmUsIG9jY3VycmVuY2VDb3VudCk7XG4gICAgdGhpcy5fbm9MaW5lVGVybWluYXRvciA9IGZhbHNlO1xuICB9XG4gIHRva2VuQ2hhcihjaGFyKSB7XG4gICAgdGhpcy50b2tlbkNvbnRleHQgPSAwO1xuICAgIHRoaXMuX21heWJlUHJpbnRJbm5lckNvbW1lbnRzKFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcikpO1xuICAgIGNvbnN0IGxhc3RDaGFyID0gdGhpcy5nZXRMYXN0Q2hhcigpO1xuICAgIGlmIChjaGFyID09PSA0MyAmJiBsYXN0Q2hhciA9PT0gNDMgfHwgY2hhciA9PT0gNDUgJiYgbGFzdENoYXIgPT09IDQ1IHx8IGNoYXIgPT09IDQ2ICYmIHRoaXMuX2VuZHNXaXRoSW50ZWdlcikge1xuICAgICAgdGhpcy5fc3BhY2UoKTtcbiAgICB9XG4gICAgdGhpcy5fbWF5YmVBZGRBdXhDb21tZW50KCk7XG4gICAgdGhpcy5fYXBwZW5kQ2hhcihjaGFyKTtcbiAgICB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yID0gZmFsc2U7XG4gIH1cbiAgbmV3bGluZShpID0gMSwgZm9yY2UpIHtcbiAgICBpZiAoaSA8PSAwKSByZXR1cm47XG4gICAgaWYgKCFmb3JjZSkge1xuICAgICAgaWYgKHRoaXMuZm9ybWF0LnJldGFpbkxpbmVzIHx8IHRoaXMuZm9ybWF0LmNvbXBhY3QpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLmZvcm1hdC5jb25jaXNlKSB7XG4gICAgICAgIHRoaXMuc3BhY2UoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA+IDIpIGkgPSAyO1xuICAgIGkgLT0gdGhpcy5fYnVmLmdldE5ld2xpbmVDb3VudCgpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICB0aGlzLl9uZXdsaW5lKCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBlbmRzV2l0aChjaGFyKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGFzdENoYXIoKSA9PT0gY2hhcjtcbiAgfVxuICBnZXRMYXN0Q2hhcigpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmLmdldExhc3RDaGFyKCk7XG4gIH1cbiAgZW5kc1dpdGhDaGFyQW5kTmV3bGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmLmVuZHNXaXRoQ2hhckFuZE5ld2xpbmUoKTtcbiAgfVxuICByZW1vdmVUcmFpbGluZ05ld2xpbmUoKSB7XG4gICAgdGhpcy5fYnVmLnJlbW92ZVRyYWlsaW5nTmV3bGluZSgpO1xuICB9XG4gIGV4YWN0U291cmNlKGxvYywgY2IpIHtcbiAgICBpZiAoIWxvYykge1xuICAgICAgY2IoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fY2F0Y2hVcChcInN0YXJ0XCIsIGxvYyk7XG4gICAgdGhpcy5fYnVmLmV4YWN0U291cmNlKGxvYywgY2IpO1xuICB9XG4gIHNvdXJjZShwcm9wLCBsb2MpIHtcbiAgICBpZiAoIWxvYykgcmV0dXJuO1xuICAgIHRoaXMuX2NhdGNoVXAocHJvcCwgbG9jKTtcbiAgICB0aGlzLl9idWYuc291cmNlKHByb3AsIGxvYyk7XG4gIH1cbiAgc291cmNlV2l0aE9mZnNldChwcm9wLCBsb2MsIGNvbHVtbk9mZnNldCkge1xuICAgIGlmICghbG9jIHx8IHRoaXMuZm9ybWF0LnByZXNlcnZlRm9ybWF0KSByZXR1cm47XG4gICAgdGhpcy5fY2F0Y2hVcChwcm9wLCBsb2MpO1xuICAgIHRoaXMuX2J1Zi5zb3VyY2VXaXRoT2Zmc2V0KHByb3AsIGxvYywgY29sdW1uT2Zmc2V0KTtcbiAgfVxuICBzb3VyY2VJZGVudGlmaWVyTmFtZShpZGVudGlmaWVyTmFtZSwgcG9zKSB7XG4gICAgaWYgKCF0aGlzLl9idWYuX2Nhbk1hcmtJZE5hbWUpIHJldHVybjtcbiAgICBjb25zdCBzb3VyY2VQb3NpdGlvbiA9IHRoaXMuX2J1Zi5fc291cmNlUG9zaXRpb247XG4gICAgc291cmNlUG9zaXRpb24uaWRlbnRpZmllck5hbWVQb3MgPSBwb3M7XG4gICAgc291cmNlUG9zaXRpb24uaWRlbnRpZmllck5hbWUgPSBpZGVudGlmaWVyTmFtZTtcbiAgfVxuICBfc3BhY2UoKSB7XG4gICAgdGhpcy5fcXVldWUoMzIpO1xuICB9XG4gIF9uZXdsaW5lKCkge1xuICAgIHRoaXMuX3F1ZXVlKDEwKTtcbiAgfVxuICBfYXBwZW5kKHN0ciwgbWF5YmVOZXdsaW5lLCBvY2N1cnJlbmNlQ291bnQgPSAwKSB7XG4gICAgaWYgKHRoaXMudG9rZW5NYXApIHtcbiAgICAgIGNvbnN0IHRva2VuID0gdGhpcy50b2tlbk1hcC5maW5kTWF0Y2hpbmcodGhpcy5fY3VycmVudE5vZGUsIHN0ciwgb2NjdXJyZW5jZUNvdW50KTtcbiAgICAgIGlmICh0b2tlbikgdGhpcy5fY2F0Y2hVcFRvKHRva2VuLmxvYy5zdGFydCk7XG4gICAgfVxuICAgIHRoaXMuX21heWJlSW5kZW50KHN0ci5jaGFyQ29kZUF0KDApKTtcbiAgICB0aGlzLl9idWYuYXBwZW5kKHN0ciwgbWF5YmVOZXdsaW5lKTtcbiAgICB0aGlzLl9lbmRzV2l0aFdvcmQgPSBmYWxzZTtcbiAgICB0aGlzLl9lbmRzV2l0aEludGVnZXIgPSBmYWxzZTtcbiAgICB0aGlzLl9lbmRzV2l0aERpdiA9IGZhbHNlO1xuICB9XG4gIF9hcHBlbmRDaGFyKGNoYXIpIHtcbiAgICBpZiAodGhpcy50b2tlbk1hcCkge1xuICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLnRva2VuTWFwLmZpbmRNYXRjaGluZyh0aGlzLl9jdXJyZW50Tm9kZSwgU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyKSk7XG4gICAgICBpZiAodG9rZW4pIHRoaXMuX2NhdGNoVXBUbyh0b2tlbi5sb2Muc3RhcnQpO1xuICAgIH1cbiAgICB0aGlzLl9tYXliZUluZGVudChjaGFyKTtcbiAgICB0aGlzLl9idWYuYXBwZW5kQ2hhcihjaGFyKTtcbiAgICB0aGlzLl9lbmRzV2l0aFdvcmQgPSBmYWxzZTtcbiAgICB0aGlzLl9lbmRzV2l0aEludGVnZXIgPSBmYWxzZTtcbiAgICB0aGlzLl9lbmRzV2l0aERpdiA9IGZhbHNlO1xuICB9XG4gIF9xdWV1ZShjaGFyKSB7XG4gICAgdGhpcy5fbWF5YmVJbmRlbnQoY2hhcik7XG4gICAgdGhpcy5fYnVmLnF1ZXVlKGNoYXIpO1xuICAgIHRoaXMuX2VuZHNXaXRoV29yZCA9IGZhbHNlO1xuICAgIHRoaXMuX2VuZHNXaXRoSW50ZWdlciA9IGZhbHNlO1xuICB9XG4gIF9tYXliZUluZGVudChmaXJzdENoYXIpIHtcbiAgICBpZiAodGhpcy5faW5kZW50ICYmIGZpcnN0Q2hhciAhPT0gMTAgJiYgdGhpcy5lbmRzV2l0aCgxMCkpIHtcbiAgICAgIHRoaXMuX2J1Zi5xdWV1ZUluZGVudGF0aW9uKHRoaXMuX2dldEluZGVudCgpKTtcbiAgICB9XG4gIH1cbiAgX3Nob3VsZEluZGVudChmaXJzdENoYXIpIHtcbiAgICBpZiAodGhpcy5faW5kZW50ICYmIGZpcnN0Q2hhciAhPT0gMTAgJiYgdGhpcy5lbmRzV2l0aCgxMCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBjYXRjaFVwKGxpbmUpIHtcbiAgICBpZiAoIXRoaXMuZm9ybWF0LnJldGFpbkxpbmVzKSByZXR1cm47XG4gICAgY29uc3QgY291bnQgPSBsaW5lIC0gdGhpcy5fYnVmLmdldEN1cnJlbnRMaW5lKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLl9uZXdsaW5lKCk7XG4gICAgfVxuICB9XG4gIF9jYXRjaFVwKHByb3AsIGxvYykge1xuICAgIGNvbnN0IHtcbiAgICAgIGZvcm1hdFxuICAgIH0gPSB0aGlzO1xuICAgIGlmICghZm9ybWF0LnByZXNlcnZlRm9ybWF0KSB7XG4gICAgICBpZiAoZm9ybWF0LnJldGFpbkxpbmVzICYmIGxvYyAhPSBudWxsICYmIGxvY1twcm9wXSkge1xuICAgICAgICB0aGlzLmNhdGNoVXAobG9jW3Byb3BdLmxpbmUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwb3MgPSBsb2MgPT0gbnVsbCA/IHZvaWQgMCA6IGxvY1twcm9wXTtcbiAgICBpZiAocG9zICE9IG51bGwpIHRoaXMuX2NhdGNoVXBUbyhwb3MpO1xuICB9XG4gIF9jYXRjaFVwVG8oe1xuICAgIGxpbmUsXG4gICAgY29sdW1uLFxuICAgIGluZGV4XG4gIH0pIHtcbiAgICBjb25zdCBjb3VudCA9IGxpbmUgLSB0aGlzLl9idWYuZ2V0Q3VycmVudExpbmUoKTtcbiAgICBpZiAoY291bnQgPiAwICYmIHRoaXMuX25vTGluZVRlcm1pbmF0b3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLl9uZXdsaW5lKCk7XG4gICAgfVxuICAgIGNvbnN0IHNwYWNlc0NvdW50ID0gY291bnQgPiAwID8gY29sdW1uIDogY29sdW1uIC0gdGhpcy5fYnVmLmdldEN1cnJlbnRDb2x1bW4oKTtcbiAgICBpZiAoc3BhY2VzQ291bnQgPiAwKSB7XG4gICAgICBjb25zdCBzcGFjZXMgPSB0aGlzLl9vcmlnaW5hbENvZGUgPyB0aGlzLl9vcmlnaW5hbENvZGUuc2xpY2UoaW5kZXggLSBzcGFjZXNDb3VudCwgaW5kZXgpLnJlcGxhY2UoL1teXFx0XFx4MEJcXGYgXFx4QTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1RkVGRl0vZ3UsIFwiIFwiKSA6IFwiIFwiLnJlcGVhdChzcGFjZXNDb3VudCk7XG4gICAgICB0aGlzLl9hcHBlbmQoc3BhY2VzLCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIF9nZXRJbmRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGVudFJlcGVhdCAqIHRoaXMuX2luZGVudDtcbiAgfVxuICBwcmludFRlcm1pbmF0b3JsZXNzKG5vZGUpIHtcbiAgICB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yID0gdHJ1ZTtcbiAgICB0aGlzLnByaW50KG5vZGUpO1xuICB9XG4gIHByaW50KG5vZGUsIG5vTGluZVRlcm1pbmF0b3JBZnRlciwgdHJhaWxpbmdDb21tZW50c0xpbmVPZmZzZXQpIHtcbiAgICB2YXIgX25vZGUkZXh0cmEsIF9ub2RlJGxlYWRpbmdDb21tZW50cywgX25vZGUkbGVhZGluZ0NvbW1lbnRzMjtcbiAgICBpZiAoIW5vZGUpIHJldHVybjtcbiAgICB0aGlzLl9lbmRzV2l0aElubmVyUmF3ID0gZmFsc2U7XG4gICAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLnR5cGU7XG4gICAgY29uc3QgZm9ybWF0ID0gdGhpcy5mb3JtYXQ7XG4gICAgY29uc3Qgb2xkQ29uY2lzZSA9IGZvcm1hdC5jb25jaXNlO1xuICAgIGlmIChub2RlLl9jb21wYWN0KSB7XG4gICAgICBmb3JtYXQuY29uY2lzZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHByaW50TWV0aG9kID0gdGhpc1tub2RlVHlwZV07XG4gICAgaWYgKHByaW50TWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihgdW5rbm93biBub2RlIG9mIHR5cGUgJHtKU09OLnN0cmluZ2lmeShub2RlVHlwZSl9IHdpdGggY29uc3RydWN0b3IgJHtKU09OLnN0cmluZ2lmeShub2RlLmNvbnN0cnVjdG9yLm5hbWUpfWApO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnQgPSB0aGlzLl9jdXJyZW50Tm9kZTtcbiAgICB0aGlzLl9jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgY29uc3Qgb2xkSW5BdXggPSB0aGlzLl9pbnNpZGVBdXg7XG4gICAgdGhpcy5faW5zaWRlQXV4ID0gbm9kZS5sb2MgPT0gbnVsbDtcbiAgICB0aGlzLl9tYXliZUFkZEF1eENvbW1lbnQodGhpcy5faW5zaWRlQXV4ICYmICFvbGRJbkF1eCk7XG4gICAgY29uc3QgcGFyZW50aGVzaXplZCA9IChfbm9kZSRleHRyYSA9IG5vZGUuZXh0cmEpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRleHRyYS5wYXJlbnRoZXNpemVkO1xuICAgIGxldCBzaG91bGRQcmludFBhcmVucyA9IHBhcmVudGhlc2l6ZWQgJiYgZm9ybWF0LnByZXNlcnZlRm9ybWF0IHx8IHBhcmVudGhlc2l6ZWQgJiYgZm9ybWF0LnJldGFpbkZ1bmN0aW9uUGFyZW5zICYmIG5vZGVUeXBlID09PSBcIkZ1bmN0aW9uRXhwcmVzc2lvblwiIHx8IG5lZWRzUGFyZW5zKG5vZGUsIHBhcmVudCwgdGhpcy50b2tlbkNvbnRleHQsIHRoaXMuaW5Gb3JTdGF0ZW1lbnRJbml0LCBmb3JtYXQucHJlc2VydmVGb3JtYXQgPyB0aGlzLl9ib3VuZEdldFJhd0lkZW50aWZpZXIgOiB1bmRlZmluZWQpO1xuICAgIGlmICghc2hvdWxkUHJpbnRQYXJlbnMgJiYgcGFyZW50aGVzaXplZCAmJiAoX25vZGUkbGVhZGluZ0NvbW1lbnRzID0gbm9kZS5sZWFkaW5nQ29tbWVudHMpICE9IG51bGwgJiYgX25vZGUkbGVhZGluZ0NvbW1lbnRzLmxlbmd0aCAmJiBub2RlLmxlYWRpbmdDb21tZW50c1swXS50eXBlID09PSBcIkNvbW1lbnRCbG9ja1wiKSB7XG4gICAgICBjb25zdCBwYXJlbnRUeXBlID0gcGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQudHlwZTtcbiAgICAgIHN3aXRjaCAocGFyZW50VHlwZSkge1xuICAgICAgICBjYXNlIFwiRXhwcmVzc2lvblN0YXRlbWVudFwiOlxuICAgICAgICBjYXNlIFwiVmFyaWFibGVEZWNsYXJhdG9yXCI6XG4gICAgICAgIGNhc2UgXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiOlxuICAgICAgICBjYXNlIFwiUmV0dXJuU3RhdGVtZW50XCI6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJDYWxsRXhwcmVzc2lvblwiOlxuICAgICAgICBjYXNlIFwiT3B0aW9uYWxDYWxsRXhwcmVzc2lvblwiOlxuICAgICAgICBjYXNlIFwiTmV3RXhwcmVzc2lvblwiOlxuICAgICAgICAgIGlmIChwYXJlbnQuY2FsbGVlICE9PSBub2RlKSBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzaG91bGRQcmludFBhcmVucyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBpbmRlbnRQYXJlbnRoZXNpemVkID0gZmFsc2U7XG4gICAgaWYgKCFzaG91bGRQcmludFBhcmVucyAmJiB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yICYmICgoX25vZGUkbGVhZGluZ0NvbW1lbnRzMiA9IG5vZGUubGVhZGluZ0NvbW1lbnRzKSAhPSBudWxsICYmIF9ub2RlJGxlYWRpbmdDb21tZW50czIuc29tZShjb21tZW50SXNOZXdsaW5lKSB8fCB0aGlzLmZvcm1hdC5yZXRhaW5MaW5lcyAmJiBub2RlLmxvYyAmJiBub2RlLmxvYy5zdGFydC5saW5lID4gdGhpcy5fYnVmLmdldEN1cnJlbnRMaW5lKCkpKSB7XG4gICAgICBzaG91bGRQcmludFBhcmVucyA9IHRydWU7XG4gICAgICBpbmRlbnRQYXJlbnRoZXNpemVkID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IG9sZE5vTGluZVRlcm1pbmF0b3JBZnRlck5vZGU7XG4gICAgbGV0IG9sZEluRm9yU3RhdGVtZW50SW5pdFdhc1RydWU7XG4gICAgaWYgKCFzaG91bGRQcmludFBhcmVucykge1xuICAgICAgbm9MaW5lVGVybWluYXRvckFmdGVyIHx8IChub0xpbmVUZXJtaW5hdG9yQWZ0ZXIgPSBwYXJlbnQgJiYgdGhpcy5fbm9MaW5lVGVybWluYXRvckFmdGVyTm9kZSA9PT0gcGFyZW50ICYmIG4uaXNMYXN0Q2hpbGQocGFyZW50LCBub2RlKSk7XG4gICAgICBpZiAobm9MaW5lVGVybWluYXRvckFmdGVyKSB7XG4gICAgICAgIHZhciBfbm9kZSR0cmFpbGluZ0NvbW1lbnQ7XG4gICAgICAgIGlmICgoX25vZGUkdHJhaWxpbmdDb21tZW50ID0gbm9kZS50cmFpbGluZ0NvbW1lbnRzKSAhPSBudWxsICYmIF9ub2RlJHRyYWlsaW5nQ29tbWVudC5zb21lKGNvbW1lbnRJc05ld2xpbmUpKSB7XG4gICAgICAgICAgaWYgKGlzRXhwcmVzc2lvbihub2RlKSkgc2hvdWxkUHJpbnRQYXJlbnMgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9sZE5vTGluZVRlcm1pbmF0b3JBZnRlck5vZGUgPSB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yQWZ0ZXJOb2RlO1xuICAgICAgICAgIHRoaXMuX25vTGluZVRlcm1pbmF0b3JBZnRlck5vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzaG91bGRQcmludFBhcmVucykge1xuICAgICAgdGhpcy50b2tlbkNoYXIoNDApO1xuICAgICAgaWYgKGluZGVudFBhcmVudGhlc2l6ZWQpIHRoaXMuaW5kZW50KCk7XG4gICAgICB0aGlzLl9lbmRzV2l0aElubmVyUmF3ID0gZmFsc2U7XG4gICAgICBpZiAodGhpcy5pbkZvclN0YXRlbWVudEluaXQpIHtcbiAgICAgICAgb2xkSW5Gb3JTdGF0ZW1lbnRJbml0V2FzVHJ1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5Gb3JTdGF0ZW1lbnRJbml0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBvbGROb0xpbmVUZXJtaW5hdG9yQWZ0ZXJOb2RlID0gdGhpcy5fbm9MaW5lVGVybWluYXRvckFmdGVyTm9kZTtcbiAgICAgIHRoaXMuX25vTGluZVRlcm1pbmF0b3JBZnRlck5vZGUgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLl9sYXN0Q29tbWVudExpbmUgPSAwO1xuICAgIHRoaXMuX3ByaW50TGVhZGluZ0NvbW1lbnRzKG5vZGUsIHBhcmVudCk7XG4gICAgY29uc3QgbG9jID0gbm9kZVR5cGUgPT09IFwiUHJvZ3JhbVwiIHx8IG5vZGVUeXBlID09PSBcIkZpbGVcIiA/IG51bGwgOiBub2RlLmxvYztcbiAgICB0aGlzLmV4YWN0U291cmNlKGxvYywgcHJpbnRNZXRob2QuYmluZCh0aGlzLCBub2RlLCBwYXJlbnQpKTtcbiAgICBpZiAoc2hvdWxkUHJpbnRQYXJlbnMpIHtcbiAgICAgIHRoaXMuX3ByaW50VHJhaWxpbmdDb21tZW50cyhub2RlLCBwYXJlbnQpO1xuICAgICAgaWYgKGluZGVudFBhcmVudGhlc2l6ZWQpIHtcbiAgICAgICAgdGhpcy5kZWRlbnQoKTtcbiAgICAgICAgdGhpcy5uZXdsaW5lKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnRva2VuQ2hhcig0MSk7XG4gICAgICB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yID0gbm9MaW5lVGVybWluYXRvckFmdGVyO1xuICAgICAgaWYgKG9sZEluRm9yU3RhdGVtZW50SW5pdFdhc1RydWUpIHRoaXMuaW5Gb3JTdGF0ZW1lbnRJbml0ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG5vTGluZVRlcm1pbmF0b3JBZnRlciAmJiAhdGhpcy5fbm9MaW5lVGVybWluYXRvcikge1xuICAgICAgdGhpcy5fbm9MaW5lVGVybWluYXRvciA9IHRydWU7XG4gICAgICB0aGlzLl9wcmludFRyYWlsaW5nQ29tbWVudHMobm9kZSwgcGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcHJpbnRUcmFpbGluZ0NvbW1lbnRzKG5vZGUsIHBhcmVudCwgdHJhaWxpbmdDb21tZW50c0xpbmVPZmZzZXQpO1xuICAgIH1cbiAgICB0aGlzLl9jdXJyZW50Tm9kZSA9IHBhcmVudDtcbiAgICBmb3JtYXQuY29uY2lzZSA9IG9sZENvbmNpc2U7XG4gICAgdGhpcy5faW5zaWRlQXV4ID0gb2xkSW5BdXg7XG4gICAgaWYgKG9sZE5vTGluZVRlcm1pbmF0b3JBZnRlck5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fbm9MaW5lVGVybWluYXRvckFmdGVyTm9kZSA9IG9sZE5vTGluZVRlcm1pbmF0b3JBZnRlck5vZGU7XG4gICAgfVxuICAgIHRoaXMuX2VuZHNXaXRoSW5uZXJSYXcgPSBmYWxzZTtcbiAgfVxuICBfbWF5YmVBZGRBdXhDb21tZW50KGVudGVyZWRQb3NpdGlvbmxlc3NOb2RlKSB7XG4gICAgaWYgKGVudGVyZWRQb3NpdGlvbmxlc3NOb2RlKSB0aGlzLl9wcmludEF1eEJlZm9yZUNvbW1lbnQoKTtcbiAgICBpZiAoIXRoaXMuX2luc2lkZUF1eCkgdGhpcy5fcHJpbnRBdXhBZnRlckNvbW1lbnQoKTtcbiAgfVxuICBfcHJpbnRBdXhCZWZvcmVDb21tZW50KCkge1xuICAgIGlmICh0aGlzLl9wcmludEF1eEFmdGVyT25OZXh0VXNlck5vZGUpIHJldHVybjtcbiAgICB0aGlzLl9wcmludEF1eEFmdGVyT25OZXh0VXNlck5vZGUgPSB0cnVlO1xuICAgIGNvbnN0IGNvbW1lbnQgPSB0aGlzLmZvcm1hdC5hdXhpbGlhcnlDb21tZW50QmVmb3JlO1xuICAgIGlmIChjb21tZW50KSB7XG4gICAgICB0aGlzLl9wcmludENvbW1lbnQoe1xuICAgICAgICB0eXBlOiBcIkNvbW1lbnRCbG9ja1wiLFxuICAgICAgICB2YWx1ZTogY29tbWVudFxuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG4gIF9wcmludEF1eEFmdGVyQ29tbWVudCgpIHtcbiAgICBpZiAoIXRoaXMuX3ByaW50QXV4QWZ0ZXJPbk5leHRVc2VyTm9kZSkgcmV0dXJuO1xuICAgIHRoaXMuX3ByaW50QXV4QWZ0ZXJPbk5leHRVc2VyTm9kZSA9IGZhbHNlO1xuICAgIGNvbnN0IGNvbW1lbnQgPSB0aGlzLmZvcm1hdC5hdXhpbGlhcnlDb21tZW50QWZ0ZXI7XG4gICAgaWYgKGNvbW1lbnQpIHtcbiAgICAgIHRoaXMuX3ByaW50Q29tbWVudCh7XG4gICAgICAgIHR5cGU6IFwiQ29tbWVudEJsb2NrXCIsXG4gICAgICAgIHZhbHVlOiBjb21tZW50XG4gICAgICB9LCAwKTtcbiAgICB9XG4gIH1cbiAgZ2V0UG9zc2libGVSYXcobm9kZSkge1xuICAgIGNvbnN0IGV4dHJhID0gbm9kZS5leHRyYTtcbiAgICBpZiAoKGV4dHJhID09IG51bGwgPyB2b2lkIDAgOiBleHRyYS5yYXcpICE9IG51bGwgJiYgZXh0cmEucmF3VmFsdWUgIT0gbnVsbCAmJiBub2RlLnZhbHVlID09PSBleHRyYS5yYXdWYWx1ZSkge1xuICAgICAgcmV0dXJuIGV4dHJhLnJhdztcbiAgICB9XG4gIH1cbiAgcHJpbnRKb2luKG5vZGVzLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIShub2RlcyAhPSBudWxsICYmIG5vZGVzLmxlbmd0aCkpIHJldHVybjtcbiAgICBsZXQge1xuICAgICAgaW5kZW50XG4gICAgfSA9IG9wdHM7XG4gICAgaWYgKGluZGVudCA9PSBudWxsICYmIHRoaXMuZm9ybWF0LnJldGFpbkxpbmVzKSB7XG4gICAgICB2YXIgX25vZGVzJDAkbG9jO1xuICAgICAgY29uc3Qgc3RhcnRMaW5lID0gKF9ub2RlcyQwJGxvYyA9IG5vZGVzWzBdLmxvYykgPT0gbnVsbCA/IHZvaWQgMCA6IF9ub2RlcyQwJGxvYy5zdGFydC5saW5lO1xuICAgICAgaWYgKHN0YXJ0TGluZSAhPSBudWxsICYmIHN0YXJ0TGluZSAhPT0gdGhpcy5fYnVmLmdldEN1cnJlbnRMaW5lKCkpIHtcbiAgICAgICAgaW5kZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluZGVudCkgdGhpcy5pbmRlbnQoKTtcbiAgICBjb25zdCBuZXdsaW5lT3B0cyA9IHtcbiAgICAgIGFkZE5ld2xpbmVzOiBvcHRzLmFkZE5ld2xpbmVzLFxuICAgICAgbmV4dE5vZGVTdGFydExpbmU6IDBcbiAgICB9O1xuICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yID8gb3B0cy5zZXBhcmF0b3IuYmluZCh0aGlzKSA6IG51bGw7XG4gICAgY29uc3QgbGVuID0gbm9kZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGlmICghbm9kZSkgY29udGludWU7XG4gICAgICBpZiAob3B0cy5zdGF0ZW1lbnQpIHRoaXMuX3ByaW50TmV3bGluZShpID09PSAwLCBuZXdsaW5lT3B0cyk7XG4gICAgICB0aGlzLnByaW50KG5vZGUsIHVuZGVmaW5lZCwgb3B0cy50cmFpbGluZ0NvbW1lbnRzTGluZU9mZnNldCB8fCAwKTtcbiAgICAgIG9wdHMuaXRlcmF0b3IgPT0gbnVsbCB8fCBvcHRzLml0ZXJhdG9yKG5vZGUsIGkpO1xuICAgICAgaWYgKHNlcGFyYXRvciAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpIDwgbGVuIC0gMSkgc2VwYXJhdG9yKGksIGZhbHNlKTtlbHNlIGlmIChvcHRzLnByaW50VHJhaWxpbmdTZXBhcmF0b3IpIHNlcGFyYXRvcihpLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRzLnN0YXRlbWVudCkge1xuICAgICAgICB2YXIgX25vZGUkdHJhaWxpbmdDb21tZW50MjtcbiAgICAgICAgaWYgKCEoKF9ub2RlJHRyYWlsaW5nQ29tbWVudDIgPSBub2RlLnRyYWlsaW5nQ29tbWVudHMpICE9IG51bGwgJiYgX25vZGUkdHJhaWxpbmdDb21tZW50Mi5sZW5ndGgpKSB7XG4gICAgICAgICAgdGhpcy5fbGFzdENvbW1lbnRMaW5lID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSArIDEgPT09IGxlbikge1xuICAgICAgICAgIHRoaXMubmV3bGluZSgxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgX25leHROb2RlJGxvYztcbiAgICAgICAgICBjb25zdCBuZXh0Tm9kZSA9IG5vZGVzW2kgKyAxXTtcbiAgICAgICAgICBuZXdsaW5lT3B0cy5uZXh0Tm9kZVN0YXJ0TGluZSA9ICgoX25leHROb2RlJGxvYyA9IG5leHROb2RlLmxvYykgPT0gbnVsbCA/IHZvaWQgMCA6IF9uZXh0Tm9kZSRsb2Muc3RhcnQubGluZSkgfHwgMDtcbiAgICAgICAgICB0aGlzLl9wcmludE5ld2xpbmUodHJ1ZSwgbmV3bGluZU9wdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmRlbnQpIHRoaXMuZGVkZW50KCk7XG4gIH1cbiAgcHJpbnRBbmRJbmRlbnRPbkNvbW1lbnRzKG5vZGUpIHtcbiAgICBjb25zdCBpbmRlbnQgPSBub2RlLmxlYWRpbmdDb21tZW50cyAmJiBub2RlLmxlYWRpbmdDb21tZW50cy5sZW5ndGggPiAwO1xuICAgIGlmIChpbmRlbnQpIHRoaXMuaW5kZW50KCk7XG4gICAgdGhpcy5wcmludChub2RlKTtcbiAgICBpZiAoaW5kZW50KSB0aGlzLmRlZGVudCgpO1xuICB9XG4gIHByaW50QmxvY2socGFyZW50KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhcmVudC5ib2R5O1xuICAgIGlmIChub2RlLnR5cGUgIT09IFwiRW1wdHlTdGF0ZW1lbnRcIikge1xuICAgICAgdGhpcy5zcGFjZSgpO1xuICAgIH1cbiAgICB0aGlzLnByaW50KG5vZGUpO1xuICB9XG4gIF9wcmludFRyYWlsaW5nQ29tbWVudHMobm9kZSwgcGFyZW50LCBsaW5lT2Zmc2V0KSB7XG4gICAgY29uc3Qge1xuICAgICAgaW5uZXJDb21tZW50cyxcbiAgICAgIHRyYWlsaW5nQ29tbWVudHNcbiAgICB9ID0gbm9kZTtcbiAgICBpZiAoaW5uZXJDb21tZW50cyAhPSBudWxsICYmIGlubmVyQ29tbWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9wcmludENvbW1lbnRzKDIsIGlubmVyQ29tbWVudHMsIG5vZGUsIHBhcmVudCwgbGluZU9mZnNldCk7XG4gICAgfVxuICAgIGlmICh0cmFpbGluZ0NvbW1lbnRzICE9IG51bGwgJiYgdHJhaWxpbmdDb21tZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3ByaW50Q29tbWVudHMoMiwgdHJhaWxpbmdDb21tZW50cywgbm9kZSwgcGFyZW50LCBsaW5lT2Zmc2V0KTtcbiAgICB9XG4gIH1cbiAgX3ByaW50TGVhZGluZ0NvbW1lbnRzKG5vZGUsIHBhcmVudCkge1xuICAgIGNvbnN0IGNvbW1lbnRzID0gbm9kZS5sZWFkaW5nQ29tbWVudHM7XG4gICAgaWYgKCEoY29tbWVudHMgIT0gbnVsbCAmJiBjb21tZW50cy5sZW5ndGgpKSByZXR1cm47XG4gICAgdGhpcy5fcHJpbnRDb21tZW50cygwLCBjb21tZW50cywgbm9kZSwgcGFyZW50KTtcbiAgfVxuICBfbWF5YmVQcmludElubmVyQ29tbWVudHMobmV4dFRva2VuU3RyLCBuZXh0VG9rZW5PY2N1cnJlbmNlQ291bnQpIHtcbiAgICBpZiAodGhpcy5fZW5kc1dpdGhJbm5lclJhdykge1xuICAgICAgdmFyIF90aGlzJHRva2VuTWFwO1xuICAgICAgdGhpcy5wcmludElubmVyQ29tbWVudHMoKF90aGlzJHRva2VuTWFwID0gdGhpcy50b2tlbk1hcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHRva2VuTWFwLmZpbmRNYXRjaGluZyh0aGlzLl9jdXJyZW50Tm9kZSwgbmV4dFRva2VuU3RyLCBuZXh0VG9rZW5PY2N1cnJlbmNlQ291bnQpKTtcbiAgICB9XG4gICAgdGhpcy5fZW5kc1dpdGhJbm5lclJhdyA9IHRydWU7XG4gICAgdGhpcy5faW5kZW50SW5uZXJDb21tZW50cyA9IHRydWU7XG4gIH1cbiAgcHJpbnRJbm5lckNvbW1lbnRzKG5leHRUb2tlbikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9jdXJyZW50Tm9kZTtcbiAgICBjb25zdCBjb21tZW50cyA9IG5vZGUuaW5uZXJDb21tZW50cztcbiAgICBpZiAoIShjb21tZW50cyAhPSBudWxsICYmIGNvbW1lbnRzLmxlbmd0aCkpIHJldHVybjtcbiAgICBjb25zdCBoYXNTcGFjZSA9IHRoaXMuZW5kc1dpdGgoMzIpO1xuICAgIGNvbnN0IGluZGVudCA9IHRoaXMuX2luZGVudElubmVyQ29tbWVudHM7XG4gICAgY29uc3QgcHJpbnRlZENvbW1lbnRzQ291bnQgPSB0aGlzLl9wcmludGVkQ29tbWVudHMuc2l6ZTtcbiAgICBpZiAoaW5kZW50KSB0aGlzLmluZGVudCgpO1xuICAgIHRoaXMuX3ByaW50Q29tbWVudHMoMSwgY29tbWVudHMsIG5vZGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuZXh0VG9rZW4pO1xuICAgIGlmIChoYXNTcGFjZSAmJiBwcmludGVkQ29tbWVudHNDb3VudCAhPT0gdGhpcy5fcHJpbnRlZENvbW1lbnRzLnNpemUpIHtcbiAgICAgIHRoaXMuc3BhY2UoKTtcbiAgICB9XG4gICAgaWYgKGluZGVudCkgdGhpcy5kZWRlbnQoKTtcbiAgfVxuICBub0luZGVudElubmVyQ29tbWVudHNIZXJlKCkge1xuICAgIHRoaXMuX2luZGVudElubmVyQ29tbWVudHMgPSBmYWxzZTtcbiAgfVxuICBwcmludFNlcXVlbmNlKG5vZGVzLCBvcHRzID0ge30pIHtcbiAgICB2YXIgX29wdHMkaW5kZW50O1xuICAgIG9wdHMuc3RhdGVtZW50ID0gdHJ1ZTtcbiAgICAoX29wdHMkaW5kZW50ID0gb3B0cy5pbmRlbnQpICE9IG51bGwgPyBfb3B0cyRpbmRlbnQgOiBvcHRzLmluZGVudCA9IGZhbHNlO1xuICAgIHRoaXMucHJpbnRKb2luKG5vZGVzLCBvcHRzKTtcbiAgfVxuICBwcmludExpc3QoaXRlbXMsIG9wdHMgPSB7fSkge1xuICAgIGlmIChvcHRzLnNlcGFyYXRvciA9PSBudWxsKSB7XG4gICAgICBvcHRzLnNlcGFyYXRvciA9IGNvbW1hU2VwYXJhdG9yO1xuICAgIH1cbiAgICB0aGlzLnByaW50Sm9pbihpdGVtcywgb3B0cyk7XG4gIH1cbiAgc2hvdWxkUHJpbnRUcmFpbGluZ0NvbW1hKGxpc3RFbmQpIHtcbiAgICBpZiAoIXRoaXMudG9rZW5NYXApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGxpc3RFbmRJbmRleCA9IHRoaXMudG9rZW5NYXAuZmluZExhc3RJbmRleCh0aGlzLl9jdXJyZW50Tm9kZSwgdG9rZW4gPT4gdGhpcy50b2tlbk1hcC5tYXRjaGVzT3JpZ2luYWwodG9rZW4sIGxpc3RFbmQpKTtcbiAgICBpZiAobGlzdEVuZEluZGV4IDw9IDApIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLnRva2VuTWFwLm1hdGNoZXNPcmlnaW5hbCh0aGlzLl90b2tlbnNbbGlzdEVuZEluZGV4IC0gMV0sIFwiLFwiKTtcbiAgfVxuICBfcHJpbnROZXdsaW5lKG5ld0xpbmUsIG9wdHMpIHtcbiAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmZvcm1hdDtcbiAgICBpZiAoZm9ybWF0LnJldGFpbkxpbmVzIHx8IGZvcm1hdC5jb21wYWN0KSByZXR1cm47XG4gICAgaWYgKGZvcm1hdC5jb25jaXNlKSB7XG4gICAgICB0aGlzLnNwYWNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbmV3TGluZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzdGFydExpbmUgPSBvcHRzLm5leHROb2RlU3RhcnRMaW5lO1xuICAgIGNvbnN0IGxhc3RDb21tZW50TGluZSA9IHRoaXMuX2xhc3RDb21tZW50TGluZTtcbiAgICBpZiAoc3RhcnRMaW5lID4gMCAmJiBsYXN0Q29tbWVudExpbmUgPiAwKSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSBzdGFydExpbmUgLSBsYXN0Q29tbWVudExpbmU7XG4gICAgICBpZiAob2Zmc2V0ID49IDApIHtcbiAgICAgICAgdGhpcy5uZXdsaW5lKG9mZnNldCB8fCAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5fYnVmLmhhc0NvbnRlbnQoKSkge1xuICAgICAgdGhpcy5uZXdsaW5lKDEpO1xuICAgIH1cbiAgfVxuICBfc2hvdWxkUHJpbnRDb21tZW50KGNvbW1lbnQsIG5leHRUb2tlbikge1xuICAgIGlmIChjb21tZW50Lmlnbm9yZSkgcmV0dXJuIDA7XG4gICAgaWYgKHRoaXMuX3ByaW50ZWRDb21tZW50cy5oYXMoY29tbWVudCkpIHJldHVybiAwO1xuICAgIGlmICh0aGlzLl9ub0xpbmVUZXJtaW5hdG9yICYmIEhBU19ORVdMSU5FX09SX0JsT0NLX0NPTU1FTlRfRU5ELnRlc3QoY29tbWVudC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICBpZiAobmV4dFRva2VuICYmIHRoaXMudG9rZW5NYXApIHtcbiAgICAgIGNvbnN0IGNvbW1lbnRUb2sgPSB0aGlzLnRva2VuTWFwLmZpbmQodGhpcy5fY3VycmVudE5vZGUsIHRva2VuID0+IHRva2VuLnZhbHVlID09PSBjb21tZW50LnZhbHVlKTtcbiAgICAgIGlmIChjb21tZW50VG9rICYmIGNvbW1lbnRUb2suc3RhcnQgPiBuZXh0VG9rZW4uc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3ByaW50ZWRDb21tZW50cy5hZGQoY29tbWVudCk7XG4gICAgaWYgKCF0aGlzLmZvcm1hdC5zaG91bGRQcmludENvbW1lbnQoY29tbWVudC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gMTtcbiAgfVxuICBfcHJpbnRDb21tZW50KGNvbW1lbnQsIHNraXBOZXdMaW5lcykge1xuICAgIGNvbnN0IG5vTGluZVRlcm1pbmF0b3IgPSB0aGlzLl9ub0xpbmVUZXJtaW5hdG9yO1xuICAgIGNvbnN0IGlzQmxvY2tDb21tZW50ID0gY29tbWVudC50eXBlID09PSBcIkNvbW1lbnRCbG9ja1wiO1xuICAgIGNvbnN0IHByaW50TmV3TGluZXMgPSBpc0Jsb2NrQ29tbWVudCAmJiBza2lwTmV3TGluZXMgIT09IDEgJiYgIXRoaXMuX25vTGluZVRlcm1pbmF0b3I7XG4gICAgaWYgKHByaW50TmV3TGluZXMgJiYgdGhpcy5fYnVmLmhhc0NvbnRlbnQoKSAmJiBza2lwTmV3TGluZXMgIT09IDIpIHtcbiAgICAgIHRoaXMubmV3bGluZSgxKTtcbiAgICB9XG4gICAgY29uc3QgbGFzdENoYXJDb2RlID0gdGhpcy5nZXRMYXN0Q2hhcigpO1xuICAgIGlmIChsYXN0Q2hhckNvZGUgIT09IDkxICYmIGxhc3RDaGFyQ29kZSAhPT0gMTIzICYmIGxhc3RDaGFyQ29kZSAhPT0gNDApIHtcbiAgICAgIHRoaXMuc3BhY2UoKTtcbiAgICB9XG4gICAgbGV0IHZhbDtcbiAgICBpZiAoaXNCbG9ja0NvbW1lbnQpIHtcbiAgICAgIHZhbCA9IGAvKiR7Y29tbWVudC52YWx1ZX0qL2A7XG4gICAgICBpZiAodGhpcy5mb3JtYXQuaW5kZW50LmFkanVzdE11bHRpbGluZUNvbW1lbnQpIHtcbiAgICAgICAgdmFyIF9jb21tZW50JGxvYztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKF9jb21tZW50JGxvYyA9IGNvbW1lbnQubG9jKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbW1lbnQkbG9jLnN0YXJ0LmNvbHVtbjtcbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIGNvbnN0IG5ld2xpbmVSZWdleCA9IG5ldyBSZWdFeHAoXCJcXFxcblxcXFxzezEsXCIgKyBvZmZzZXQgKyBcIn1cIiwgXCJnXCIpO1xuICAgICAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKG5ld2xpbmVSZWdleCwgXCJcXG5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0LmNvbmNpc2UpIHtcbiAgICAgICAgICB2YWwgPSB2YWwucmVwbGFjZSgvXFxuKD8hJCkvZywgYFxcbmApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBpbmRlbnRTaXplID0gdGhpcy5mb3JtYXQucmV0YWluTGluZXMgPyAwIDogdGhpcy5fYnVmLmdldEN1cnJlbnRDb2x1bW4oKTtcbiAgICAgICAgICBpZiAodGhpcy5fc2hvdWxkSW5kZW50KDQ3KSB8fCB0aGlzLmZvcm1hdC5yZXRhaW5MaW5lcykge1xuICAgICAgICAgICAgaW5kZW50U2l6ZSArPSB0aGlzLl9nZXRJbmRlbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsID0gdmFsLnJlcGxhY2UoL1xcbig/ISQpL2csIGBcXG4ke1wiIFwiLnJlcGVhdChpbmRlbnRTaXplKX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIW5vTGluZVRlcm1pbmF0b3IpIHtcbiAgICAgIHZhbCA9IGAvLyR7Y29tbWVudC52YWx1ZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSBgLyoke2NvbW1lbnQudmFsdWV9Ki9gO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZW5kc1dpdGhEaXYpIHRoaXMuX3NwYWNlKCk7XG4gICAgdGhpcy5zb3VyY2UoXCJzdGFydFwiLCBjb21tZW50LmxvYyk7XG4gICAgdGhpcy5fYXBwZW5kKHZhbCwgaXNCbG9ja0NvbW1lbnQpO1xuICAgIGlmICghaXNCbG9ja0NvbW1lbnQgJiYgIW5vTGluZVRlcm1pbmF0b3IpIHtcbiAgICAgIHRoaXMubmV3bGluZSgxLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHByaW50TmV3TGluZXMgJiYgc2tpcE5ld0xpbmVzICE9PSAzKSB7XG4gICAgICB0aGlzLm5ld2xpbmUoMSk7XG4gICAgfVxuICB9XG4gIF9wcmludENvbW1lbnRzKHR5cGUsIGNvbW1lbnRzLCBub2RlLCBwYXJlbnQsIGxpbmVPZmZzZXQgPSAwLCBuZXh0VG9rZW4pIHtcbiAgICBjb25zdCBub2RlTG9jID0gbm9kZS5sb2M7XG4gICAgY29uc3QgbGVuID0gY29tbWVudHMubGVuZ3RoO1xuICAgIGxldCBoYXNMb2MgPSAhIW5vZGVMb2M7XG4gICAgY29uc3Qgbm9kZVN0YXJ0TGluZSA9IGhhc0xvYyA/IG5vZGVMb2Muc3RhcnQubGluZSA6IDA7XG4gICAgY29uc3Qgbm9kZUVuZExpbmUgPSBoYXNMb2MgPyBub2RlTG9jLmVuZC5saW5lIDogMDtcbiAgICBsZXQgbGFzdExpbmUgPSAwO1xuICAgIGxldCBsZWFkaW5nQ29tbWVudE5ld2xpbmUgPSAwO1xuICAgIGNvbnN0IG1heWJlTmV3bGluZSA9IHRoaXMuX25vTGluZVRlcm1pbmF0b3IgPyBmdW5jdGlvbiAoKSB7fSA6IHRoaXMubmV3bGluZS5iaW5kKHRoaXMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvbW1lbnQgPSBjb21tZW50c1tpXTtcbiAgICAgIGNvbnN0IHNob3VsZFByaW50ID0gdGhpcy5fc2hvdWxkUHJpbnRDb21tZW50KGNvbW1lbnQsIG5leHRUb2tlbik7XG4gICAgICBpZiAoc2hvdWxkUHJpbnQgPT09IDIpIHtcbiAgICAgICAgaGFzTG9jID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGhhc0xvYyAmJiBjb21tZW50LmxvYyAmJiBzaG91bGRQcmludCA9PT0gMSkge1xuICAgICAgICBjb25zdCBjb21tZW50U3RhcnRMaW5lID0gY29tbWVudC5sb2Muc3RhcnQubGluZTtcbiAgICAgICAgY29uc3QgY29tbWVudEVuZExpbmUgPSBjb21tZW50LmxvYy5lbmQubGluZTtcbiAgICAgICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2J1Zi5oYXNDb250ZW50KCkgJiYgKGNvbW1lbnQudHlwZSA9PT0gXCJDb21tZW50TGluZVwiIHx8IGNvbW1lbnRTdGFydExpbmUgIT09IGNvbW1lbnRFbmRMaW5lKSkge1xuICAgICAgICAgICAgICBvZmZzZXQgPSBsZWFkaW5nQ29tbWVudE5ld2xpbmUgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBjb21tZW50U3RhcnRMaW5lIC0gbGFzdExpbmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RMaW5lID0gY29tbWVudEVuZExpbmU7XG4gICAgICAgICAgbWF5YmVOZXdsaW5lKG9mZnNldCk7XG4gICAgICAgICAgdGhpcy5fcHJpbnRDb21tZW50KGNvbW1lbnQsIDEpO1xuICAgICAgICAgIGlmIChpICsgMSA9PT0gbGVuKSB7XG4gICAgICAgICAgICBtYXliZU5ld2xpbmUoTWF0aC5tYXgobm9kZVN0YXJ0TGluZSAtIGxhc3RMaW5lLCBsZWFkaW5nQ29tbWVudE5ld2xpbmUpKTtcbiAgICAgICAgICAgIGxhc3RMaW5lID0gbm9kZVN0YXJ0TGluZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMSkge1xuICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGNvbW1lbnRTdGFydExpbmUgLSAoaSA9PT0gMCA/IG5vZGVTdGFydExpbmUgOiBsYXN0TGluZSk7XG4gICAgICAgICAgbGFzdExpbmUgPSBjb21tZW50RW5kTGluZTtcbiAgICAgICAgICBtYXliZU5ld2xpbmUob2Zmc2V0KTtcbiAgICAgICAgICB0aGlzLl9wcmludENvbW1lbnQoY29tbWVudCwgMSk7XG4gICAgICAgICAgaWYgKGkgKyAxID09PSBsZW4pIHtcbiAgICAgICAgICAgIG1heWJlTmV3bGluZShNYXRoLm1pbigxLCBub2RlRW5kTGluZSAtIGxhc3RMaW5lKSk7XG4gICAgICAgICAgICBsYXN0TGluZSA9IG5vZGVFbmRMaW5lO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBjb21tZW50U3RhcnRMaW5lIC0gKGkgPT09IDAgPyBub2RlRW5kTGluZSAtIGxpbmVPZmZzZXQgOiBsYXN0TGluZSk7XG4gICAgICAgICAgbGFzdExpbmUgPSBjb21tZW50RW5kTGluZTtcbiAgICAgICAgICBtYXliZU5ld2xpbmUob2Zmc2V0KTtcbiAgICAgICAgICB0aGlzLl9wcmludENvbW1lbnQoY29tbWVudCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc0xvYyA9IGZhbHNlO1xuICAgICAgICBpZiAoc2hvdWxkUHJpbnQgIT09IDEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2luZ2xlTGluZSA9IGNvbW1lbnQubG9jID8gY29tbWVudC5sb2Muc3RhcnQubGluZSA9PT0gY29tbWVudC5sb2MuZW5kLmxpbmUgOiAhSEFTX05FV0xJTkUudGVzdChjb21tZW50LnZhbHVlKTtcbiAgICAgICAgICBjb25zdCBzaG91bGRTa2lwTmV3bGluZSA9IHNpbmdsZUxpbmUgJiYgIWlzU3RhdGVtZW50KG5vZGUpICYmICFpc0NsYXNzQm9keShwYXJlbnQpICYmICFpc1RTSW50ZXJmYWNlQm9keShwYXJlbnQpICYmICFpc1RTRW51bURlY2xhcmF0aW9uKHBhcmVudCk7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaW50Q29tbWVudChjb21tZW50LCBzaG91bGRTa2lwTmV3bGluZSAmJiBub2RlLnR5cGUgIT09IFwiT2JqZWN0RXhwcmVzc2lvblwiIHx8IHNpbmdsZUxpbmUgJiYgaXNGdW5jdGlvbihwYXJlbnQsIHtcbiAgICAgICAgICAgICAgYm9keTogbm9kZVxuICAgICAgICAgICAgfSkgPyAxIDogMCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzaG91bGRTa2lwTmV3bGluZSAmJiB0eXBlID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmludENvbW1lbnQoY29tbWVudCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ByaW50Q29tbWVudChjb21tZW50LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMSAmJiAhKG5vZGUudHlwZSA9PT0gXCJPYmplY3RFeHByZXNzaW9uXCIgJiYgbm9kZS5wcm9wZXJ0aWVzLmxlbmd0aCA+IDEpICYmIG5vZGUudHlwZSAhPT0gXCJDbGFzc0JvZHlcIiAmJiBub2RlLnR5cGUgIT09IFwiVFNJbnRlcmZhY2VCb2R5XCIpIHtcbiAgICAgICAgICB0aGlzLl9wcmludENvbW1lbnQoY29tbWVudCwgaSA9PT0gMCA/IDIgOiBpID09PSBsZW4gLSAxID8gMyA6IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3ByaW50Q29tbWVudChjb21tZW50LCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gMiAmJiBoYXNMb2MgJiYgbGFzdExpbmUpIHtcbiAgICAgIHRoaXMuX2xhc3RDb21tZW50TGluZSA9IGxhc3RMaW5lO1xuICAgIH1cbiAgfVxufVxuT2JqZWN0LmFzc2lnbihQcmludGVyLnByb3RvdHlwZSwgZ2VuZXJhdG9yRnVuY3Rpb25zKTtcbntcbiAgUHJpbnRlci5wcm90b3R5cGUuTm9vcCA9IGZ1bmN0aW9uIE5vb3AoKSB7fTtcbn1cbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9IFByaW50ZXI7XG5mdW5jdGlvbiBjb21tYVNlcGFyYXRvcihvY2N1cnJlbmNlQ291bnQsIGxhc3QpIHtcbiAgdGhpcy50b2tlbihcIixcIiwgZmFsc2UsIG9jY3VycmVuY2VDb3VudCk7XG4gIGlmICghbGFzdCkgdGhpcy5zcGFjZSgpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmludGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66636\n')},44068:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _genMapping = __webpack_require__(99320);\nvar _traceMapping = __webpack_require__(92802);\nclass SourceMap {\n  constructor(opts, code) {\n    var _opts$sourceFileName;\n    this._map = void 0;\n    this._rawMappings = void 0;\n    this._sourceFileName = void 0;\n    this._lastGenLine = 0;\n    this._lastSourceLine = 0;\n    this._lastSourceColumn = 0;\n    this._inputMap = void 0;\n    const map = this._map = new _genMapping.GenMapping({\n      sourceRoot: opts.sourceRoot\n    });\n    this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\\\/g, "/");\n    this._rawMappings = undefined;\n    if (opts.inputSourceMap) {\n      this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);\n      const resolvedSources = this._inputMap.resolvedSources;\n      if (resolvedSources.length) {\n        for (let i = 0; i < resolvedSources.length; i++) {\n          var _this$_inputMap$sourc;\n          (0, _genMapping.setSourceContent)(map, resolvedSources[i], (_this$_inputMap$sourc = this._inputMap.sourcesContent) == null ? void 0 : _this$_inputMap$sourc[i]);\n        }\n      }\n    }\n    if (typeof code === "string" && !opts.inputSourceMap) {\n      (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);\n    } else if (typeof code === "object") {\n      for (const sourceFileName of Object.keys(code)) {\n        (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\\\/g, "/"), code[sourceFileName]);\n      }\n    }\n  }\n  get() {\n    return (0, _genMapping.toEncodedMap)(this._map);\n  }\n  getDecoded() {\n    return (0, _genMapping.toDecodedMap)(this._map);\n  }\n  getRawMappings() {\n    return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));\n  }\n  mark(generated, line, column, identifierName, identifierNamePos, filename) {\n    var _originalMapping;\n    this._rawMappings = undefined;\n    let originalMapping;\n    if (line != null) {\n      if (this._inputMap) {\n        originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, {\n          line,\n          column\n        });\n        if (!originalMapping.name && identifierNamePos) {\n          const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);\n          if (originalIdentifierMapping.name) {\n            identifierName = originalIdentifierMapping.name;\n          }\n        }\n      } else {\n        originalMapping = {\n          source: (filename == null ? void 0 : filename.replace(/\\\\/g, "/")) || this._sourceFileName,\n          line: line,\n          column: column\n        };\n      }\n    }\n    (0, _genMapping.maybeAddMapping)(this._map, {\n      name: identifierName,\n      generated,\n      source: (_originalMapping = originalMapping) == null ? void 0 : _originalMapping.source,\n      original: originalMapping\n    });\n  }\n}\nexports["default"] = SourceMap;\n\n//# sourceMappingURL=source-map.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQwNjguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixrQkFBa0IsbUJBQU8sQ0FBQyxLQUF5QjtBQUNuRCxvQkFBb0IsbUJBQU8sQ0FBQyxLQUEyQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDRCQUE0QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtCQUFlOztBQUVmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvZ2VuZXJhdG9yL2xpYi9zb3VyY2UtbWFwLmpzP2MyYzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2dlbk1hcHBpbmcgPSByZXF1aXJlKFwiQGpyaWRnZXdlbGwvZ2VuLW1hcHBpbmdcIik7XG52YXIgX3RyYWNlTWFwcGluZyA9IHJlcXVpcmUoXCJAanJpZGdld2VsbC90cmFjZS1tYXBwaW5nXCIpO1xuY2xhc3MgU291cmNlTWFwIHtcbiAgY29uc3RydWN0b3Iob3B0cywgY29kZSkge1xuICAgIHZhciBfb3B0cyRzb3VyY2VGaWxlTmFtZTtcbiAgICB0aGlzLl9tYXAgPSB2b2lkIDA7XG4gICAgdGhpcy5fcmF3TWFwcGluZ3MgPSB2b2lkIDA7XG4gICAgdGhpcy5fc291cmNlRmlsZU5hbWUgPSB2b2lkIDA7XG4gICAgdGhpcy5fbGFzdEdlbkxpbmUgPSAwO1xuICAgIHRoaXMuX2xhc3RTb3VyY2VMaW5lID0gMDtcbiAgICB0aGlzLl9sYXN0U291cmNlQ29sdW1uID0gMDtcbiAgICB0aGlzLl9pbnB1dE1hcCA9IHZvaWQgMDtcbiAgICBjb25zdCBtYXAgPSB0aGlzLl9tYXAgPSBuZXcgX2dlbk1hcHBpbmcuR2VuTWFwcGluZyh7XG4gICAgICBzb3VyY2VSb290OiBvcHRzLnNvdXJjZVJvb3RcbiAgICB9KTtcbiAgICB0aGlzLl9zb3VyY2VGaWxlTmFtZSA9IChfb3B0cyRzb3VyY2VGaWxlTmFtZSA9IG9wdHMuc291cmNlRmlsZU5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfb3B0cyRzb3VyY2VGaWxlTmFtZS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKTtcbiAgICB0aGlzLl9yYXdNYXBwaW5ncyA9IHVuZGVmaW5lZDtcbiAgICBpZiAob3B0cy5pbnB1dFNvdXJjZU1hcCkge1xuICAgICAgdGhpcy5faW5wdXRNYXAgPSBuZXcgX3RyYWNlTWFwcGluZy5UcmFjZU1hcChvcHRzLmlucHV0U291cmNlTWFwKTtcbiAgICAgIGNvbnN0IHJlc29sdmVkU291cmNlcyA9IHRoaXMuX2lucHV0TWFwLnJlc29sdmVkU291cmNlcztcbiAgICAgIGlmIChyZXNvbHZlZFNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzb2x2ZWRTb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIF90aGlzJF9pbnB1dE1hcCRzb3VyYztcbiAgICAgICAgICAoMCwgX2dlbk1hcHBpbmcuc2V0U291cmNlQ29udGVudCkobWFwLCByZXNvbHZlZFNvdXJjZXNbaV0sIChfdGhpcyRfaW5wdXRNYXAkc291cmMgPSB0aGlzLl9pbnB1dE1hcC5zb3VyY2VzQ29udGVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJF9pbnB1dE1hcCRzb3VyY1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2RlID09PSBcInN0cmluZ1wiICYmICFvcHRzLmlucHV0U291cmNlTWFwKSB7XG4gICAgICAoMCwgX2dlbk1hcHBpbmcuc2V0U291cmNlQ29udGVudCkobWFwLCB0aGlzLl9zb3VyY2VGaWxlTmFtZSwgY29kZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgZm9yIChjb25zdCBzb3VyY2VGaWxlTmFtZSBvZiBPYmplY3Qua2V5cyhjb2RlKSkge1xuICAgICAgICAoMCwgX2dlbk1hcHBpbmcuc2V0U291cmNlQ29udGVudCkobWFwLCBzb3VyY2VGaWxlTmFtZS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKSwgY29kZVtzb3VyY2VGaWxlTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXQoKSB7XG4gICAgcmV0dXJuICgwLCBfZ2VuTWFwcGluZy50b0VuY29kZWRNYXApKHRoaXMuX21hcCk7XG4gIH1cbiAgZ2V0RGVjb2RlZCgpIHtcbiAgICByZXR1cm4gKDAsIF9nZW5NYXBwaW5nLnRvRGVjb2RlZE1hcCkodGhpcy5fbWFwKTtcbiAgfVxuICBnZXRSYXdNYXBwaW5ncygpIHtcbiAgICByZXR1cm4gdGhpcy5fcmF3TWFwcGluZ3MgfHwgKHRoaXMuX3Jhd01hcHBpbmdzID0gKDAsIF9nZW5NYXBwaW5nLmFsbE1hcHBpbmdzKSh0aGlzLl9tYXApKTtcbiAgfVxuICBtYXJrKGdlbmVyYXRlZCwgbGluZSwgY29sdW1uLCBpZGVudGlmaWVyTmFtZSwgaWRlbnRpZmllck5hbWVQb3MsIGZpbGVuYW1lKSB7XG4gICAgdmFyIF9vcmlnaW5hbE1hcHBpbmc7XG4gICAgdGhpcy5fcmF3TWFwcGluZ3MgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG9yaWdpbmFsTWFwcGluZztcbiAgICBpZiAobGluZSAhPSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5faW5wdXRNYXApIHtcbiAgICAgICAgb3JpZ2luYWxNYXBwaW5nID0gKDAsIF90cmFjZU1hcHBpbmcub3JpZ2luYWxQb3NpdGlvbkZvcikodGhpcy5faW5wdXRNYXAsIHtcbiAgICAgICAgICBsaW5lLFxuICAgICAgICAgIGNvbHVtblxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFvcmlnaW5hbE1hcHBpbmcubmFtZSAmJiBpZGVudGlmaWVyTmFtZVBvcykge1xuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsSWRlbnRpZmllck1hcHBpbmcgPSAoMCwgX3RyYWNlTWFwcGluZy5vcmlnaW5hbFBvc2l0aW9uRm9yKSh0aGlzLl9pbnB1dE1hcCwgaWRlbnRpZmllck5hbWVQb3MpO1xuICAgICAgICAgIGlmIChvcmlnaW5hbElkZW50aWZpZXJNYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICAgIGlkZW50aWZpZXJOYW1lID0gb3JpZ2luYWxJZGVudGlmaWVyTWFwcGluZy5uYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3JpZ2luYWxNYXBwaW5nID0ge1xuICAgICAgICAgIHNvdXJjZTogKGZpbGVuYW1lID09IG51bGwgPyB2b2lkIDAgOiBmaWxlbmFtZS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKSkgfHwgdGhpcy5fc291cmNlRmlsZU5hbWUsXG4gICAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgICBjb2x1bW46IGNvbHVtblxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICAoMCwgX2dlbk1hcHBpbmcubWF5YmVBZGRNYXBwaW5nKSh0aGlzLl9tYXAsIHtcbiAgICAgIG5hbWU6IGlkZW50aWZpZXJOYW1lLFxuICAgICAgZ2VuZXJhdGVkLFxuICAgICAgc291cmNlOiAoX29yaWdpbmFsTWFwcGluZyA9IG9yaWdpbmFsTWFwcGluZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9vcmlnaW5hbE1hcHBpbmcuc291cmNlLFxuICAgICAgb3JpZ2luYWw6IG9yaWdpbmFsTWFwcGluZ1xuICAgIH0pO1xuICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTb3VyY2VNYXA7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvdXJjZS1tYXAuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44068\n')},49594:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.TokenMap = void 0;\nvar _t = __webpack_require__(2352);\nconst {\n  traverseFast,\n  VISITOR_KEYS\n} = _t;\nclass TokenMap {\n  constructor(ast, tokens, source) {\n    this._tokens = void 0;\n    this._source = void 0;\n    this._nodesToTokenIndexes = new Map();\n    this._nodesOccurrencesCountCache = new Map();\n    this._tokensCache = new Map();\n    this._tokens = tokens;\n    this._source = source;\n    traverseFast(ast, node => {\n      const indexes = this._getTokensIndexesOfNode(node);\n      if (indexes.length > 0) this._nodesToTokenIndexes.set(node, indexes);\n    });\n    this._tokensCache = null;\n  }\n  has(node) {\n    return this._nodesToTokenIndexes.has(node);\n  }\n  getIndexes(node) {\n    return this._nodesToTokenIndexes.get(node);\n  }\n  find(node, condition) {\n    const indexes = this._nodesToTokenIndexes.get(node);\n    if (indexes) {\n      for (let k = 0; k < indexes.length; k++) {\n        const index = indexes[k];\n        const tok = this._tokens[index];\n        if (condition(tok, index)) return tok;\n      }\n    }\n    return null;\n  }\n  findLastIndex(node, condition) {\n    const indexes = this._nodesToTokenIndexes.get(node);\n    if (indexes) {\n      for (let k = indexes.length - 1; k >= 0; k--) {\n        const index = indexes[k];\n        const tok = this._tokens[index];\n        if (condition(tok, index)) return index;\n      }\n    }\n    return -1;\n  }\n  findMatching(node, test, occurrenceCount = 0) {\n    const indexes = this._nodesToTokenIndexes.get(node);\n    if (indexes) {\n      let i = 0;\n      const count = occurrenceCount;\n      if (count > 1) {\n        const cache = this._nodesOccurrencesCountCache.get(node);\n        if (cache && cache.test === test && cache.count < count) {\n          i = cache.i + 1;\n          occurrenceCount -= cache.count + 1;\n        }\n      }\n      for (; i < indexes.length; i++) {\n        const tok = this._tokens[indexes[i]];\n        if (this.matchesOriginal(tok, test)) {\n          if (occurrenceCount === 0) {\n            if (count > 0) {\n              this._nodesOccurrencesCountCache.set(node, {\n                test,\n                count,\n                i\n              });\n            }\n            return tok;\n          }\n          occurrenceCount--;\n        }\n      }\n    }\n    return null;\n  }\n  matchesOriginal(token, test) {\n    if (token.end - token.start !== test.length) return false;\n    if (token.value != null) return token.value === test;\n    return this._source.startsWith(test, token.start);\n  }\n  startMatches(node, test) {\n    const indexes = this._nodesToTokenIndexes.get(node);\n    if (!indexes) return false;\n    const tok = this._tokens[indexes[0]];\n    if (tok.start !== node.start) return false;\n    return this.matchesOriginal(tok, test);\n  }\n  endMatches(node, test) {\n    const indexes = this._nodesToTokenIndexes.get(node);\n    if (!indexes) return false;\n    const tok = this._tokens[indexes[indexes.length - 1]];\n    if (tok.end !== node.end) return false;\n    return this.matchesOriginal(tok, test);\n  }\n  _getTokensIndexesOfNode(node) {\n    if (node.start == null || node.end == null) return [];\n    const {\n      first,\n      last\n    } = this._findTokensOfNode(node, 0, this._tokens.length - 1);\n    let low = first;\n    const children = childrenIterator(node);\n    if ((node.type === "ExportNamedDeclaration" || node.type === "ExportDefaultDeclaration") && node.declaration && node.declaration.type === "ClassDeclaration") {\n      children.next();\n    }\n    const indexes = [];\n    for (const child of children) {\n      if (child == null) continue;\n      if (child.start == null || child.end == null) continue;\n      const childTok = this._findTokensOfNode(child, low, last);\n      const high = childTok.first;\n      for (let k = low; k < high; k++) indexes.push(k);\n      low = childTok.last + 1;\n    }\n    for (let k = low; k <= last; k++) indexes.push(k);\n    return indexes;\n  }\n  _findTokensOfNode(node, low, high) {\n    const cached = this._tokensCache.get(node);\n    if (cached) return cached;\n    const first = this._findFirstTokenOfNode(node.start, low, high);\n    const last = this._findLastTokenOfNode(node.end, first, high);\n    this._tokensCache.set(node, {\n      first,\n      last\n    });\n    return {\n      first,\n      last\n    };\n  }\n  _findFirstTokenOfNode(start, low, high) {\n    while (low <= high) {\n      const mid = high + low >> 1;\n      if (start < this._tokens[mid].start) {\n        high = mid - 1;\n      } else if (start > this._tokens[mid].start) {\n        low = mid + 1;\n      } else {\n        return mid;\n      }\n    }\n    return low;\n  }\n  _findLastTokenOfNode(end, low, high) {\n    while (low <= high) {\n      const mid = high + low >> 1;\n      if (end < this._tokens[mid].end) {\n        high = mid - 1;\n      } else if (end > this._tokens[mid].end) {\n        low = mid + 1;\n      } else {\n        return mid;\n      }\n    }\n    return high;\n  }\n}\nexports.TokenMap = TokenMap;\nfunction* childrenIterator(node) {\n  if (node.type === "TemplateLiteral") {\n    yield node.quasis[0];\n    for (let i = 1; i < node.quasis.length; i++) {\n      yield node.expressions[i - 1];\n      yield node.quasis[i];\n    }\n    return;\n  }\n  const keys = VISITOR_KEYS[node.type];\n  for (const key of keys) {\n    const child = node[key];\n    if (!child) continue;\n    if (Array.isArray(child)) {\n      yield* child;\n    } else {\n      yield child;\n    }\n  }\n}\n\n//# sourceMappingURL=token-map.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49594\n')},53973:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.readCodePoint = readCodePoint;\nexports.readInt = readInt;\nexports.readStringContents = readStringContents;\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = "";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos,\n          lineStart,\n          curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      ({\n        pos,\n        lineStart,\n        curLine\n      } = res);\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === "template") {\n        out += input.slice(chunkStart, pos) + "\\n";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === "template") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === "double" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res("\\n");\n    case 114:\n      return res("\\r");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res("\\t");\n    case 98:\n      return res("\\b");\n    case 118:\n      return res("\\u000b");\n    case 102:\n      return res("\\f");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res("");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== "0" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== "bail") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM5NzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YscUJBQXFCO0FBQ3JCLGVBQWU7QUFDZiwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxPQUFPO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDhEQUE4RDtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL2hlbHBlci1zdHJpbmctcGFyc2VyL2xpYi9pbmRleC5qcz83NzgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZWFkQ29kZVBvaW50ID0gcmVhZENvZGVQb2ludDtcbmV4cG9ydHMucmVhZEludCA9IHJlYWRJbnQ7XG5leHBvcnRzLnJlYWRTdHJpbmdDb250ZW50cyA9IHJlYWRTdHJpbmdDb250ZW50cztcbnZhciBfaXNEaWdpdCA9IGZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xuICByZXR1cm4gY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3O1xufTtcbmNvbnN0IGZvcmJpZGRlbk51bWVyaWNTZXBhcmF0b3JTaWJsaW5ncyA9IHtcbiAgZGVjQmluT2N0OiBuZXcgU2V0KFs0NiwgNjYsIDY5LCA3OSwgOTUsIDk4LCAxMDEsIDExMV0pLFxuICBoZXg6IG5ldyBTZXQoWzQ2LCA4OCwgOTUsIDEyMF0pXG59O1xuY29uc3QgaXNBbGxvd2VkTnVtZXJpY1NlcGFyYXRvclNpYmxpbmcgPSB7XG4gIGJpbjogY2ggPT4gY2ggPT09IDQ4IHx8IGNoID09PSA0OSxcbiAgb2N0OiBjaCA9PiBjaCA+PSA0OCAmJiBjaCA8PSA1NSxcbiAgZGVjOiBjaCA9PiBjaCA+PSA0OCAmJiBjaCA8PSA1NyxcbiAgaGV4OiBjaCA9PiBjaCA+PSA0OCAmJiBjaCA8PSA1NyB8fCBjaCA+PSA2NSAmJiBjaCA8PSA3MCB8fCBjaCA+PSA5NyAmJiBjaCA8PSAxMDJcbn07XG5mdW5jdGlvbiByZWFkU3RyaW5nQ29udGVudHModHlwZSwgaW5wdXQsIHBvcywgbGluZVN0YXJ0LCBjdXJMaW5lLCBlcnJvcnMpIHtcbiAgY29uc3QgaW5pdGlhbFBvcyA9IHBvcztcbiAgY29uc3QgaW5pdGlhbExpbmVTdGFydCA9IGxpbmVTdGFydDtcbiAgY29uc3QgaW5pdGlhbEN1ckxpbmUgPSBjdXJMaW5lO1xuICBsZXQgb3V0ID0gXCJcIjtcbiAgbGV0IGZpcnN0SW52YWxpZExvYyA9IG51bGw7XG4gIGxldCBjaHVua1N0YXJ0ID0gcG9zO1xuICBjb25zdCB7XG4gICAgbGVuZ3RoXG4gIH0gPSBpbnB1dDtcbiAgZm9yICg7Oykge1xuICAgIGlmIChwb3MgPj0gbGVuZ3RoKSB7XG4gICAgICBlcnJvcnMudW50ZXJtaW5hdGVkKGluaXRpYWxQb3MsIGluaXRpYWxMaW5lU3RhcnQsIGluaXRpYWxDdXJMaW5lKTtcbiAgICAgIG91dCArPSBpbnB1dC5zbGljZShjaHVua1N0YXJ0LCBwb3MpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGNoID0gaW5wdXQuY2hhckNvZGVBdChwb3MpO1xuICAgIGlmIChpc1N0cmluZ0VuZCh0eXBlLCBjaCwgaW5wdXQsIHBvcykpIHtcbiAgICAgIG91dCArPSBpbnB1dC5zbGljZShjaHVua1N0YXJ0LCBwb3MpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChjaCA9PT0gOTIpIHtcbiAgICAgIG91dCArPSBpbnB1dC5zbGljZShjaHVua1N0YXJ0LCBwb3MpO1xuICAgICAgY29uc3QgcmVzID0gcmVhZEVzY2FwZWRDaGFyKGlucHV0LCBwb3MsIGxpbmVTdGFydCwgY3VyTGluZSwgdHlwZSA9PT0gXCJ0ZW1wbGF0ZVwiLCBlcnJvcnMpO1xuICAgICAgaWYgKHJlcy5jaCA9PT0gbnVsbCAmJiAhZmlyc3RJbnZhbGlkTG9jKSB7XG4gICAgICAgIGZpcnN0SW52YWxpZExvYyA9IHtcbiAgICAgICAgICBwb3MsXG4gICAgICAgICAgbGluZVN0YXJ0LFxuICAgICAgICAgIGN1ckxpbmVcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSByZXMuY2g7XG4gICAgICB9XG4gICAgICAoe1xuICAgICAgICBwb3MsXG4gICAgICAgIGxpbmVTdGFydCxcbiAgICAgICAgY3VyTGluZVxuICAgICAgfSA9IHJlcyk7XG4gICAgICBjaHVua1N0YXJ0ID0gcG9zO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDgyMzIgfHwgY2ggPT09IDgyMzMpIHtcbiAgICAgICsrcG9zO1xuICAgICAgKytjdXJMaW5lO1xuICAgICAgbGluZVN0YXJ0ID0gcG9zO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDEwIHx8IGNoID09PSAxMykge1xuICAgICAgaWYgKHR5cGUgPT09IFwidGVtcGxhdGVcIikge1xuICAgICAgICBvdXQgKz0gaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgcG9zKSArIFwiXFxuXCI7XG4gICAgICAgICsrcG9zO1xuICAgICAgICBpZiAoY2ggPT09IDEzICYmIGlucHV0LmNoYXJDb2RlQXQocG9zKSA9PT0gMTApIHtcbiAgICAgICAgICArK3BvcztcbiAgICAgICAgfVxuICAgICAgICArK2N1ckxpbmU7XG4gICAgICAgIGNodW5rU3RhcnQgPSBsaW5lU3RhcnQgPSBwb3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcnMudW50ZXJtaW5hdGVkKGluaXRpYWxQb3MsIGluaXRpYWxMaW5lU3RhcnQsIGluaXRpYWxDdXJMaW5lKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKytwb3M7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgcG9zLFxuICAgIHN0cjogb3V0LFxuICAgIGZpcnN0SW52YWxpZExvYyxcbiAgICBsaW5lU3RhcnQsXG4gICAgY3VyTGluZSxcbiAgICBjb250YWluc0ludmFsaWQ6ICEhZmlyc3RJbnZhbGlkTG9jXG4gIH07XG59XG5mdW5jdGlvbiBpc1N0cmluZ0VuZCh0eXBlLCBjaCwgaW5wdXQsIHBvcykge1xuICBpZiAodHlwZSA9PT0gXCJ0ZW1wbGF0ZVwiKSB7XG4gICAgcmV0dXJuIGNoID09PSA5NiB8fCBjaCA9PT0gMzYgJiYgaW5wdXQuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gMTIzO1xuICB9XG4gIHJldHVybiBjaCA9PT0gKHR5cGUgPT09IFwiZG91YmxlXCIgPyAzNCA6IDM5KTtcbn1cbmZ1bmN0aW9uIHJlYWRFc2NhcGVkQ2hhcihpbnB1dCwgcG9zLCBsaW5lU3RhcnQsIGN1ckxpbmUsIGluVGVtcGxhdGUsIGVycm9ycykge1xuICBjb25zdCB0aHJvd09uSW52YWxpZCA9ICFpblRlbXBsYXRlO1xuICBwb3MrKztcbiAgY29uc3QgcmVzID0gY2ggPT4gKHtcbiAgICBwb3MsXG4gICAgY2gsXG4gICAgbGluZVN0YXJ0LFxuICAgIGN1ckxpbmVcbiAgfSk7XG4gIGNvbnN0IGNoID0gaW5wdXQuY2hhckNvZGVBdChwb3MrKyk7XG4gIHN3aXRjaCAoY2gpIHtcbiAgICBjYXNlIDExMDpcbiAgICAgIHJldHVybiByZXMoXCJcXG5cIik7XG4gICAgY2FzZSAxMTQ6XG4gICAgICByZXR1cm4gcmVzKFwiXFxyXCIpO1xuICAgIGNhc2UgMTIwOlxuICAgICAge1xuICAgICAgICBsZXQgY29kZTtcbiAgICAgICAgKHtcbiAgICAgICAgICBjb2RlLFxuICAgICAgICAgIHBvc1xuICAgICAgICB9ID0gcmVhZEhleENoYXIoaW5wdXQsIHBvcywgbGluZVN0YXJ0LCBjdXJMaW5lLCAyLCBmYWxzZSwgdGhyb3dPbkludmFsaWQsIGVycm9ycykpO1xuICAgICAgICByZXR1cm4gcmVzKGNvZGUgPT09IG51bGwgPyBudWxsIDogU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSk7XG4gICAgICB9XG4gICAgY2FzZSAxMTc6XG4gICAgICB7XG4gICAgICAgIGxldCBjb2RlO1xuICAgICAgICAoe1xuICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgcG9zXG4gICAgICAgIH0gPSByZWFkQ29kZVBvaW50KGlucHV0LCBwb3MsIGxpbmVTdGFydCwgY3VyTGluZSwgdGhyb3dPbkludmFsaWQsIGVycm9ycykpO1xuICAgICAgICByZXR1cm4gcmVzKGNvZGUgPT09IG51bGwgPyBudWxsIDogU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZSkpO1xuICAgICAgfVxuICAgIGNhc2UgMTE2OlxuICAgICAgcmV0dXJuIHJlcyhcIlxcdFwiKTtcbiAgICBjYXNlIDk4OlxuICAgICAgcmV0dXJuIHJlcyhcIlxcYlwiKTtcbiAgICBjYXNlIDExODpcbiAgICAgIHJldHVybiByZXMoXCJcXHUwMDBiXCIpO1xuICAgIGNhc2UgMTAyOlxuICAgICAgcmV0dXJuIHJlcyhcIlxcZlwiKTtcbiAgICBjYXNlIDEzOlxuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocG9zKSA9PT0gMTApIHtcbiAgICAgICAgKytwb3M7XG4gICAgICB9XG4gICAgY2FzZSAxMDpcbiAgICAgIGxpbmVTdGFydCA9IHBvcztcbiAgICAgICsrY3VyTGluZTtcbiAgICBjYXNlIDgyMzI6XG4gICAgY2FzZSA4MjMzOlxuICAgICAgcmV0dXJuIHJlcyhcIlwiKTtcbiAgICBjYXNlIDU2OlxuICAgIGNhc2UgNTc6XG4gICAgICBpZiAoaW5UZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gcmVzKG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JzLnN0cmljdE51bWVyaWNFc2NhcGUocG9zIC0gMSwgbGluZVN0YXJ0LCBjdXJMaW5lKTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGNoID49IDQ4ICYmIGNoIDw9IDU1KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gcG9zIC0gMTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlswLTddKy8uZXhlYyhpbnB1dC5zbGljZShzdGFydFBvcywgcG9zICsgMikpO1xuICAgICAgICBsZXQgb2N0YWxTdHIgPSBtYXRjaFswXTtcbiAgICAgICAgbGV0IG9jdGFsID0gcGFyc2VJbnQob2N0YWxTdHIsIDgpO1xuICAgICAgICBpZiAob2N0YWwgPiAyNTUpIHtcbiAgICAgICAgICBvY3RhbFN0ciA9IG9jdGFsU3RyLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgICBvY3RhbCA9IHBhcnNlSW50KG9jdGFsU3RyLCA4KTtcbiAgICAgICAgfVxuICAgICAgICBwb3MgKz0gb2N0YWxTdHIubGVuZ3RoIC0gMTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGlucHV0LmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgaWYgKG9jdGFsU3RyICE9PSBcIjBcIiB8fCBuZXh0ID09PSA1NiB8fCBuZXh0ID09PSA1Nykge1xuICAgICAgICAgIGlmIChpblRlbXBsYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzKG51bGwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnJvcnMuc3RyaWN0TnVtZXJpY0VzY2FwZShzdGFydFBvcywgbGluZVN0YXJ0LCBjdXJMaW5lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcyhTdHJpbmcuZnJvbUNoYXJDb2RlKG9jdGFsKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzKFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVhZEhleENoYXIoaW5wdXQsIHBvcywgbGluZVN0YXJ0LCBjdXJMaW5lLCBsZW4sIGZvcmNlTGVuLCB0aHJvd09uSW52YWxpZCwgZXJyb3JzKSB7XG4gIGNvbnN0IGluaXRpYWxQb3MgPSBwb3M7XG4gIGxldCBuO1xuICAoe1xuICAgIG4sXG4gICAgcG9zXG4gIH0gPSByZWFkSW50KGlucHV0LCBwb3MsIGxpbmVTdGFydCwgY3VyTGluZSwgMTYsIGxlbiwgZm9yY2VMZW4sIGZhbHNlLCBlcnJvcnMsICF0aHJvd09uSW52YWxpZCkpO1xuICBpZiAobiA9PT0gbnVsbCkge1xuICAgIGlmICh0aHJvd09uSW52YWxpZCkge1xuICAgICAgZXJyb3JzLmludmFsaWRFc2NhcGVTZXF1ZW5jZShpbml0aWFsUG9zLCBsaW5lU3RhcnQsIGN1ckxpbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgPSBpbml0aWFsUG9zIC0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjb2RlOiBuLFxuICAgIHBvc1xuICB9O1xufVxuZnVuY3Rpb24gcmVhZEludChpbnB1dCwgcG9zLCBsaW5lU3RhcnQsIGN1ckxpbmUsIHJhZGl4LCBsZW4sIGZvcmNlTGVuLCBhbGxvd051bVNlcGFyYXRvciwgZXJyb3JzLCBiYWlsT25FcnJvcikge1xuICBjb25zdCBzdGFydCA9IHBvcztcbiAgY29uc3QgZm9yYmlkZGVuU2libGluZ3MgPSByYWRpeCA9PT0gMTYgPyBmb3JiaWRkZW5OdW1lcmljU2VwYXJhdG9yU2libGluZ3MuaGV4IDogZm9yYmlkZGVuTnVtZXJpY1NlcGFyYXRvclNpYmxpbmdzLmRlY0Jpbk9jdDtcbiAgY29uc3QgaXNBbGxvd2VkU2libGluZyA9IHJhZGl4ID09PSAxNiA/IGlzQWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5nLmhleCA6IHJhZGl4ID09PSAxMCA/IGlzQWxsb3dlZE51bWVyaWNTZXBhcmF0b3JTaWJsaW5nLmRlYyA6IHJhZGl4ID09PSA4ID8gaXNBbGxvd2VkTnVtZXJpY1NlcGFyYXRvclNpYmxpbmcub2N0IDogaXNBbGxvd2VkTnVtZXJpY1NlcGFyYXRvclNpYmxpbmcuYmluO1xuICBsZXQgaW52YWxpZCA9IGZhbHNlO1xuICBsZXQgdG90YWwgPSAwO1xuICBmb3IgKGxldCBpID0gMCwgZSA9IGxlbiA9PSBudWxsID8gSW5maW5pdHkgOiBsZW47IGkgPCBlOyArK2kpIHtcbiAgICBjb25zdCBjb2RlID0gaW5wdXQuY2hhckNvZGVBdChwb3MpO1xuICAgIGxldCB2YWw7XG4gICAgaWYgKGNvZGUgPT09IDk1ICYmIGFsbG93TnVtU2VwYXJhdG9yICE9PSBcImJhaWxcIikge1xuICAgICAgY29uc3QgcHJldiA9IGlucHV0LmNoYXJDb2RlQXQocG9zIC0gMSk7XG4gICAgICBjb25zdCBuZXh0ID0gaW5wdXQuY2hhckNvZGVBdChwb3MgKyAxKTtcbiAgICAgIGlmICghYWxsb3dOdW1TZXBhcmF0b3IpIHtcbiAgICAgICAgaWYgKGJhaWxPbkVycm9yKSByZXR1cm4ge1xuICAgICAgICAgIG46IG51bGwsXG4gICAgICAgICAgcG9zXG4gICAgICAgIH07XG4gICAgICAgIGVycm9ycy5udW1lcmljU2VwYXJhdG9ySW5Fc2NhcGVTZXF1ZW5jZShwb3MsIGxpbmVTdGFydCwgY3VyTGluZSk7XG4gICAgICB9IGVsc2UgaWYgKE51bWJlci5pc05hTihuZXh0KSB8fCAhaXNBbGxvd2VkU2libGluZyhuZXh0KSB8fCBmb3JiaWRkZW5TaWJsaW5ncy5oYXMocHJldikgfHwgZm9yYmlkZGVuU2libGluZ3MuaGFzKG5leHQpKSB7XG4gICAgICAgIGlmIChiYWlsT25FcnJvcikgcmV0dXJuIHtcbiAgICAgICAgICBuOiBudWxsLFxuICAgICAgICAgIHBvc1xuICAgICAgICB9O1xuICAgICAgICBlcnJvcnMudW5leHBlY3RlZE51bWVyaWNTZXBhcmF0b3IocG9zLCBsaW5lU3RhcnQsIGN1ckxpbmUpO1xuICAgICAgfVxuICAgICAgKytwb3M7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPj0gOTcpIHtcbiAgICAgIHZhbCA9IGNvZGUgLSA5NyArIDEwO1xuICAgIH0gZWxzZSBpZiAoY29kZSA+PSA2NSkge1xuICAgICAgdmFsID0gY29kZSAtIDY1ICsgMTA7XG4gICAgfSBlbHNlIGlmIChfaXNEaWdpdChjb2RlKSkge1xuICAgICAgdmFsID0gY29kZSAtIDQ4O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSBJbmZpbml0eTtcbiAgICB9XG4gICAgaWYgKHZhbCA+PSByYWRpeCkge1xuICAgICAgaWYgKHZhbCA8PSA5ICYmIGJhaWxPbkVycm9yKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbjogbnVsbCxcbiAgICAgICAgICBwb3NcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAodmFsIDw9IDkgJiYgZXJyb3JzLmludmFsaWREaWdpdChwb3MsIGxpbmVTdGFydCwgY3VyTGluZSwgcmFkaXgpKSB7XG4gICAgICAgIHZhbCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGZvcmNlTGVuKSB7XG4gICAgICAgIHZhbCA9IDA7XG4gICAgICAgIGludmFsaWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgICsrcG9zO1xuICAgIHRvdGFsID0gdG90YWwgKiByYWRpeCArIHZhbDtcbiAgfVxuICBpZiAocG9zID09PSBzdGFydCB8fCBsZW4gIT0gbnVsbCAmJiBwb3MgLSBzdGFydCAhPT0gbGVuIHx8IGludmFsaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbjogbnVsbCxcbiAgICAgIHBvc1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuOiB0b3RhbCxcbiAgICBwb3NcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlYWRDb2RlUG9pbnQoaW5wdXQsIHBvcywgbGluZVN0YXJ0LCBjdXJMaW5lLCB0aHJvd09uSW52YWxpZCwgZXJyb3JzKSB7XG4gIGNvbnN0IGNoID0gaW5wdXQuY2hhckNvZGVBdChwb3MpO1xuICBsZXQgY29kZTtcbiAgaWYgKGNoID09PSAxMjMpIHtcbiAgICArK3BvcztcbiAgICAoe1xuICAgICAgY29kZSxcbiAgICAgIHBvc1xuICAgIH0gPSByZWFkSGV4Q2hhcihpbnB1dCwgcG9zLCBsaW5lU3RhcnQsIGN1ckxpbmUsIGlucHV0LmluZGV4T2YoXCJ9XCIsIHBvcykgLSBwb3MsIHRydWUsIHRocm93T25JbnZhbGlkLCBlcnJvcnMpKTtcbiAgICArK3BvcztcbiAgICBpZiAoY29kZSAhPT0gbnVsbCAmJiBjb2RlID4gMHgxMGZmZmYpIHtcbiAgICAgIGlmICh0aHJvd09uSW52YWxpZCkge1xuICAgICAgICBlcnJvcnMuaW52YWxpZENvZGVQb2ludChwb3MsIGxpbmVTdGFydCwgY3VyTGluZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvZGU6IG51bGwsXG4gICAgICAgICAgcG9zXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgICh7XG4gICAgICBjb2RlLFxuICAgICAgcG9zXG4gICAgfSA9IHJlYWRIZXhDaGFyKGlucHV0LCBwb3MsIGxpbmVTdGFydCwgY3VyTGluZSwgNCwgZmFsc2UsIHRocm93T25JbnZhbGlkLCBlcnJvcnMpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNvZGUsXG4gICAgcG9zXG4gIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53973\n')},38721:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isIdentifierChar = isIdentifierChar;\nexports.isIdentifierName = isIdentifierName;\nexports.isIdentifierStart = isIdentifierStart;\nlet nonASCIIidentifierStartChars = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc";\nlet nonASCIIidentifierChars = "\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65";\nconst nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");\nconst nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nfunction isIdentifierName(name) {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n\n//# sourceMappingURL=identifier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38721\n')},61e3:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nObject.defineProperty(exports, "isIdentifierChar", ({\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierChar;\n  }\n}));\nObject.defineProperty(exports, "isIdentifierName", ({\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierName;\n  }\n}));\nObject.defineProperty(exports, "isIdentifierStart", ({\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierStart;\n  }\n}));\nObject.defineProperty(exports, "isKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _keyword.isKeyword;\n  }\n}));\nObject.defineProperty(exports, "isReservedWord", ({\n  enumerable: true,\n  get: function () {\n    return _keyword.isReservedWord;\n  }\n}));\nObject.defineProperty(exports, "isStrictBindOnlyReservedWord", ({\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictBindOnlyReservedWord;\n  }\n}));\nObject.defineProperty(exports, "isStrictBindReservedWord", ({\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictBindReservedWord;\n  }\n}));\nObject.defineProperty(exports, "isStrictReservedWord", ({\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictReservedWord;\n  }\n}));\nvar _identifier = __webpack_require__(38721);\nvar _keyword = __webpack_require__(43115);\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEwMDAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0RBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0RBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YscURBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsNkNBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0RBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZ0VBQStEO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsNERBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0RBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCLG1CQUFPLENBQUMsS0FBaUI7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLEtBQWM7O0FBRXJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvaGVscGVyLXZhbGlkYXRvci1pZGVudGlmaWVyL2xpYi9pbmRleC5qcz85MDIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNJZGVudGlmaWVyQ2hhclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaWRlbnRpZmllci5pc0lkZW50aWZpZXJDaGFyO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSWRlbnRpZmllck5hbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lkZW50aWZpZXIuaXNJZGVudGlmaWVyTmFtZTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0lkZW50aWZpZXJTdGFydFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaWRlbnRpZmllci5pc0lkZW50aWZpZXJTdGFydDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0tleXdvcmRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2tleXdvcmQuaXNLZXl3b3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzUmVzZXJ2ZWRXb3JkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9rZXl3b3JkLmlzUmVzZXJ2ZWRXb3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2tleXdvcmQuaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1N0cmljdEJpbmRSZXNlcnZlZFdvcmRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2tleXdvcmQuaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzU3RyaWN0UmVzZXJ2ZWRXb3JkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9rZXl3b3JkLmlzU3RyaWN0UmVzZXJ2ZWRXb3JkO1xuICB9XG59KTtcbnZhciBfaWRlbnRpZmllciA9IHJlcXVpcmUoXCIuL2lkZW50aWZpZXIuanNcIik7XG52YXIgX2tleXdvcmQgPSByZXF1aXJlKFwiLi9rZXl3b3JkLmpzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61000\n')},43115:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isKeyword = isKeyword;\nexports.isReservedWord = isReservedWord;\nexports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;\nexports.isStrictBindReservedWord = isStrictBindReservedWord;\nexports.isStrictReservedWord = isStrictReservedWord;\nconst reservedWords = {\n  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],\n  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],\n  strictBind: ["eval", "arguments"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === "await" || word === "enum";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\n//# sourceMappingURL=keyword.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMxMTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsaUJBQWlCO0FBQ2pCLHNCQUFzQjtBQUN0QixvQ0FBb0M7QUFDcEMsZ0NBQWdDO0FBQ2hDLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvaGVscGVyLXZhbGlkYXRvci1pZGVudGlmaWVyL2xpYi9rZXl3b3JkLmpzP2I5YzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzS2V5d29yZCA9IGlzS2V5d29yZDtcbmV4cG9ydHMuaXNSZXNlcnZlZFdvcmQgPSBpc1Jlc2VydmVkV29yZDtcbmV4cG9ydHMuaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCA9IGlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQ7XG5leHBvcnRzLmlzU3RyaWN0QmluZFJlc2VydmVkV29yZCA9IGlzU3RyaWN0QmluZFJlc2VydmVkV29yZDtcbmV4cG9ydHMuaXNTdHJpY3RSZXNlcnZlZFdvcmQgPSBpc1N0cmljdFJlc2VydmVkV29yZDtcbmNvbnN0IHJlc2VydmVkV29yZHMgPSB7XG4gIGtleXdvcmQ6IFtcImJyZWFrXCIsIFwiY2FzZVwiLCBcImNhdGNoXCIsIFwiY29udGludWVcIiwgXCJkZWJ1Z2dlclwiLCBcImRlZmF1bHRcIiwgXCJkb1wiLCBcImVsc2VcIiwgXCJmaW5hbGx5XCIsIFwiZm9yXCIsIFwiZnVuY3Rpb25cIiwgXCJpZlwiLCBcInJldHVyblwiLCBcInN3aXRjaFwiLCBcInRocm93XCIsIFwidHJ5XCIsIFwidmFyXCIsIFwiY29uc3RcIiwgXCJ3aGlsZVwiLCBcIndpdGhcIiwgXCJuZXdcIiwgXCJ0aGlzXCIsIFwic3VwZXJcIiwgXCJjbGFzc1wiLCBcImV4dGVuZHNcIiwgXCJleHBvcnRcIiwgXCJpbXBvcnRcIiwgXCJudWxsXCIsIFwidHJ1ZVwiLCBcImZhbHNlXCIsIFwiaW5cIiwgXCJpbnN0YW5jZW9mXCIsIFwidHlwZW9mXCIsIFwidm9pZFwiLCBcImRlbGV0ZVwiXSxcbiAgc3RyaWN0OiBbXCJpbXBsZW1lbnRzXCIsIFwiaW50ZXJmYWNlXCIsIFwibGV0XCIsIFwicGFja2FnZVwiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiwgXCJwdWJsaWNcIiwgXCJzdGF0aWNcIiwgXCJ5aWVsZFwiXSxcbiAgc3RyaWN0QmluZDogW1wiZXZhbFwiLCBcImFyZ3VtZW50c1wiXVxufTtcbmNvbnN0IGtleXdvcmRzID0gbmV3IFNldChyZXNlcnZlZFdvcmRzLmtleXdvcmQpO1xuY29uc3QgcmVzZXJ2ZWRXb3Jkc1N0cmljdFNldCA9IG5ldyBTZXQocmVzZXJ2ZWRXb3Jkcy5zdHJpY3QpO1xuY29uc3QgcmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmRTZXQgPSBuZXcgU2V0KHJlc2VydmVkV29yZHMuc3RyaWN0QmluZCk7XG5mdW5jdGlvbiBpc1Jlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkge1xuICByZXR1cm4gaW5Nb2R1bGUgJiYgd29yZCA9PT0gXCJhd2FpdFwiIHx8IHdvcmQgPT09IFwiZW51bVwiO1xufVxuZnVuY3Rpb24gaXNTdHJpY3RSZXNlcnZlZFdvcmQod29yZCwgaW5Nb2R1bGUpIHtcbiAgcmV0dXJuIGlzUmVzZXJ2ZWRXb3JkKHdvcmQsIGluTW9kdWxlKSB8fCByZXNlcnZlZFdvcmRzU3RyaWN0U2V0Lmhhcyh3b3JkKTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQod29yZCkge1xuICByZXR1cm4gcmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmRTZXQuaGFzKHdvcmQpO1xufVxuZnVuY3Rpb24gaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkKHdvcmQsIGluTW9kdWxlKSB7XG4gIHJldHVybiBpc1N0cmljdFJlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkgfHwgaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCh3b3JkKTtcbn1cbmZ1bmN0aW9uIGlzS2V5d29yZCh3b3JkKSB7XG4gIHJldHVybiBrZXl3b3Jkcy5oYXMod29yZCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXdvcmQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43115\n')},22172:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n}\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\nconst code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with \'sourceType: "module"\'`,\n    code\n  },\n  ImportOutsideModule: {\n    message: `\'import\' and \'export\' may appear only with \'sourceType: "module"\'`,\n    code\n  }\n};\nconst NodeDescriptions = {\n  ArrayPattern: "array destructuring pattern",\n  AssignmentExpression: "assignment expression",\n  AssignmentPattern: "assignment expression",\n  ArrowFunctionExpression: "arrow function expression",\n  ConditionalExpression: "conditional expression",\n  CatchClause: "catch clause",\n  ForOfStatement: "for-of statement",\n  ForInStatement: "for-in statement",\n  ForStatement: "for-loop",\n  FormalParameters: "function parameter list",\n  Identifier: "identifier",\n  ImportSpecifier: "import specifier",\n  ImportDefaultSpecifier: "import default specifier",\n  ImportNamespaceSpecifier: "import namespace specifier",\n  ObjectPattern: "object destructuring pattern",\n  ParenthesizedExpression: "parenthesized expression",\n  RestElement: "rest element",\n  UpdateExpression: {\n    true: "prefix operation",\n    false: "postfix operation"\n  },\n  VariableDeclarator: "variable declaration",\n  YieldExpression: "yield expression"\n};\nconst toNodeDescription = node => node.type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];\nvar StandardErrors = {\n  AccessorIsGenerator: ({\n    kind\n  }) => `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass: "\'arguments\' is only allowed in functions and class methods.",\n  AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",\n  AwaitBindingIdentifier: "Can not use \'await\' as identifier inside an async function.",\n  AwaitBindingIdentifierInStaticBlock: "Can not use \'await\' as identifier inside a static block.",\n  AwaitExpressionFormalParameter: "\'await\' is not allowed in async function parameters.",\n  AwaitUsingNotInAsyncContext: "\'await using\' is only allowed within async functions and at the top levels of modules.",\n  AwaitNotInAsyncContext: "\'await\' is only allowed within async functions and at the top levels of modules.",\n  AwaitNotInAsyncFunction: "\'await\' is only allowed within async functions.",\n  BadGetterArity: "A \'get\' accessor must not have any formal parameters.",\n  BadSetterArity: "A \'set\' accessor must have exactly one formal parameter.",\n  BadSetterRestParameter: "A \'set\' accessor function argument must not be a rest parameter.",\n  ConstructorClassField: "Classes may not have a field named \'constructor\'.",\n  ConstructorClassPrivateField: "Classes may not have a private field named \'#constructor\'.",\n  ConstructorIsAccessor: "Class constructor may not be an accessor.",\n  ConstructorIsAsync: "Constructor can\'t be an async function.",\n  ConstructorIsGenerator: "Constructor can\'t be a generator.",\n  DeclarationMissingInitializer: ({\n    kind\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use \'@(decorator(args))\' instead of \'@(decorator)(args)\'.",\n  DecoratorBeforeExport: "Decorators must be placed *before* the \'export\' keyword. Remove the \'decoratorsBeforeExport: true\' option to use the \'export @decorator class {}\' syntax.",\n  DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the \'export\' keyword, but not in both locations at the same time.",\n  DecoratorConstructor: "Decorators can\'t be used with a constructor. Did you mean \'@dec class { ... }\'?",\n  DecoratorExportClass: "Decorators must be placed *after* the \'export\' keyword. Remove the \'decoratorsBeforeExport: false\' option to use the \'@decorator export class {}\' syntax.",\n  DecoratorSemicolon: "Decorators must not be followed by a semicolon.",\n  DecoratorStaticBlock: "Decorators can\'t be used with a static block.",\n  DeferImportRequiresNamespace: \'Only `import defer * as x from "./module"` is valid.\',\n  DeletePrivateField: "Deleting a private field is not allowed.",\n  DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",\n  DuplicateConstructor: "Duplicate constructor in the same class.",\n  DuplicateDefaultExport: "Only one default export allowed per module.",\n  DuplicateExport: ({\n    exportName\n  }) => `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: "Redefinition of __proto__ property.",\n  DuplicateRegExpFlags: "Duplicate regular expression flag.",\n  DynamicImportPhaseRequiresImportExpressions: ({\n    phase\n  }) => `\'import.${phase}(...)\' can only be parsed when using the \'createImportExpressions\' option.`,\n  ElementAfterRest: "Rest element must be last element.",\n  EscapedCharNotAnIdentifier: "Invalid Unicode escape.",\n  ExportBindingIsString: ({\n    localName,\n    exportName\n  }) => `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { \'${localName}\' as \'${exportName}\' } from \'some-module\'\\`?`,\n  ExportDefaultFromAsIdentifier: "\'from\' is not allowed as an identifier after \'export default\'.",\n  ForInOfLoopInitializer: ({\n    type\n  }) => `\'${type === "ForInStatement" ? "for-in" : "for-of"}\' loop variable declaration may not have an initializer.`,\n  ForInUsing: "For-in loop may not start with \'using\' declaration.",\n  ForOfAsync: "The left-hand side of a for-of loop may not be \'async\'.",\n  ForOfLet: "The left-hand side of a for-of loop may not start with \'let\'.",\n  GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",\n  IllegalBreakContinue: ({\n    type\n  }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,\n  IllegalLanguageModeDirective: "Illegal \'use strict\' directive in function with non-simple parameter list.",\n  IllegalReturn: "\'return\' outside of function.",\n  ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.",\n  ImportBindingIsString: ({\n    importName\n  }) => `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { "${importName}" as foo }\\`?`,\n  ImportCallArity: `\\`import()\\` requires exactly one or two arguments.`,\n  ImportCallNotNewExpression: "Cannot use new with import(...).",\n  ImportCallSpreadArgument: "`...` is not allowed in `import()`.",\n  ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",\n  ImportReflectionHasAssertion: "`import module x` cannot have assertions.",\n  ImportReflectionNotBinding: \'Only `import module x from "./module"` is valid.\',\n  IncompatibleRegExpUVFlags: "The \'u\' and \'v\' regular expression flags cannot be enabled at the same time.",\n  InvalidBigIntLiteral: "Invalid BigIntLiteral.",\n  InvalidCodePoint: "Code point out of bounds.",\n  InvalidCoverInitializedName: "Invalid shorthand property initializer.",\n  InvalidDecimal: "Invalid decimal.",\n  InvalidDigit: ({\n    radix\n  }) => `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: "Bad character escape sequence.",\n  InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",\n  InvalidEscapedReservedWord: ({\n    reservedWord\n  }) => `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({\n    identifierName\n  }) => `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({\n    ancestor\n  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({\n    ancestor\n  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({\n    ancestor\n  }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: "Invalid number.",\n  InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the \'e\'.",\n  InvalidOrUnexpectedToken: ({\n    unexpected\n  }) => `Unexpected character \'${unexpected}\'.`,\n  InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",\n  InvalidPrivateFieldResolution: ({\n    identifierName\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: "Binding member expression.",\n  InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",\n  InvalidRestAssignmentPattern: "Invalid rest operator\'s argument.",\n  LabelRedeclaration: ({\n    labelName\n  }) => `Label \'${labelName}\' is already declared.`,\n  LetInLexicalBinding: "\'let\' is disallowed as a lexically bound name.",\n  LineTerminatorBeforeArrow: "No line break is allowed before \'=>\'.",\n  MalformedRegExpFlags: "Invalid regular expression flag.",\n  MissingClassName: "A class name is required.",\n  MissingEqInAssignment: "Only \'=\' operator can be used for specifying default value.",\n  MissingSemicolon: "Missing semicolon.",\n  MissingPlugin: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,\n  MissingOneOfPlugins: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,\n  MissingUnicodeEscape: "Expecting Unicode escape sequence \\\\uXXXX.",\n  MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",\n  ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",\n  ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",\n  ModuleAttributesWithDuplicateKeys: ({\n    key\n  }) => `Duplicate key "${key}" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode\n  }) => `An export name cannot include a lone surrogate, found \'\\\\u${surrogateCharCode.toString(16)}\'.`,\n  ModuleExportUndefined: ({\n    localName\n  }) => `Export \'${localName}\' is not defined.`,\n  MultipleDefaultsInSwitch: "Multiple default clauses.",\n  NewlineAfterThrow: "Illegal newline after throw.",\n  NoCatchOrFinally: "Missing catch or finally clause.",\n  NumberIdentifier: "Identifier directly after number.",\n  NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",\n  ObsoleteAwaitStar: "\'await*\' has been removed from the async functions proposal. Use Promise.all() instead.",\n  OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",\n  OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",\n  OverrideOnConstructor: "\'override\' modifier cannot appear on a constructor declaration.",\n  ParamDupe: "Argument name clash.",\n  PatternHasAccessor: "Object pattern can\'t contain getter or setter.",\n  PatternHasMethod: "Object pattern can\'t contain methods.",\n  PrivateInExpectedIn: ({\n    identifierName\n  }) => `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({\n    identifierName\n  }) => `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with \'|}\' are only allowed when the \'syntaxType\' option of the \'recordAndTuple\' plugin is set to \'bar\'.",\n  RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with \'{|\' are only allowed when the \'syntaxType\' option of the \'recordAndTuple\' plugin is set to \'bar\'.",\n  RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with \'#{\' are only allowed when the \'syntaxType\' option of the \'recordAndTuple\' plugin is set to \'hash\'.",\n  RecordNoProto: "\'__proto__\' is not allowed in Record expressions.",\n  RestTrailingComma: "Unexpected trailing comma after rest element.",\n  SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",\n  SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",\n  SourcePhaseImportRequiresDefault: \'Only `import source x from "./module"` is valid.\',\n  StaticPrototype: "Classes may not have static property named prototype.",\n  SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name (\'constructor\') or not extending another class?",\n  SuperPrivateField: "Private fields can\'t be accessed on super.",\n  TrailingDecorator: "Decorators must be attached to a class element.",\n  TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with \'|]\' are only allowed when the \'syntaxType\' option of the \'recordAndTuple\' plugin is set to \'bar\'.",\n  TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with \'[|\' are only allowed when the \'syntaxType\' option of the \'recordAndTuple\' plugin is set to \'bar\'.",\n  TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with \'#[\' are only allowed when the \'syntaxType\' option of the \'recordAndTuple\' plugin is set to \'hash\'.",\n  UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",\n  UnexpectedAwaitAfterPipelineBody: \'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.\',\n  UnexpectedDigitAfterHash: "Unexpected digit after hash token.",\n  UnexpectedImportExport: "\'import\' and \'export\' may only appear at the top level.",\n  UnexpectedKeyword: ({\n    keyword\n  }) => `Unexpected keyword \'${keyword}\'.`,\n  UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",\n  UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",\n  UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",\n  UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",\n  UnexpectedPrivateField: "Unexpected private name.",\n  UnexpectedReservedWord: ({\n    reservedWord\n  }) => `Unexpected reserved word \'${reservedWord}\'.`,\n  UnexpectedSuper: "\'super\' is only allowed in object methods and classes.",\n  UnexpectedToken: ({\n    expected,\n    unexpected\n  }) => `Unexpected token${unexpected ? ` \'${unexpected}\'.` : ""}${expected ? `, expected "${expected}"` : ""}`,\n  UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",\n  UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",\n  UnsupportedBind: "Binding should be performed on object property.",\n  UnsupportedDecoratorExport: "A decorated export must export a class declaration.",\n  UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",\n  UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName\n  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",\n  UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",\n  UnsupportedSuper: "\'super\' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",\n  UnterminatedComment: "Unterminated comment.",\n  UnterminatedRegExp: "Unterminated regular expression.",\n  UnterminatedString: "Unterminated string constant.",\n  UnterminatedTemplate: "Unterminated template.",\n  UsingDeclarationExport: "Using declaration cannot be exported.",\n  UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",\n  VarRedeclaration: ({\n    identifierName\n  }) => `Identifier \'${identifierName}\' has already been declared.`,\n  YieldBindingIdentifier: "Can not use \'yield\' as identifier inside a generator.",\n  YieldInParameter: "Yield expression is not allowed in formal parameters.",\n  ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."\n};\nvar StrictModeErrors = {\n  StrictDelete: "Deleting local variable in strict mode.",\n  StrictEvalArguments: ({\n    referenceName\n  }) => `Assigning to \'${referenceName}\' in strict mode.`,\n  StrictEvalArgumentsBinding: ({\n    bindingName\n  }) => `Binding \'${bindingName}\' in strict mode.`,\n  StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",\n  StrictNumericEscape: "The only valid numeric escape in strict mode is \'\\\\0\'.",\n  StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",\n  StrictWith: "\'with\' in strict mode."\n};\nconst UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);\nvar PipelineOperatorErrors = {\n  PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",\n  PipeTopicRequiresHackPipes: \'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.\',\n  PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",\n  PipeTopicUnconfiguredToken: ({\n    token\n  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,\n  PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",\n  PipeUnparenthesizedBody: ({\n    type\n  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n    type\n  })}; please wrap it in parentheses.`,\n  PipelineBodyNoArrow: \'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.\',\n  PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",\n  PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",\n  PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",\n  PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",\n  PrimaryTopicRequiresSmartPipeline: \'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.\'\n};\nconst _excluded = ["message"];\nfunction defineHidden(obj, key, value) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value\n  });\n}\nfunction toParseErrorConstructor({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin\n}) {\n  const hasMissingPlugin = reasonCode === "MissingPlugin" || reasonCode === "MissingOneOfPlugins";\n  {\n    const oldReasonCodes = {\n      AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter",\n      AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters",\n      ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference",\n      SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter",\n      SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter",\n      SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType"\n    };\n    if (oldReasonCodes[reasonCode]) {\n      reasonCode = oldReasonCodes[reasonCode];\n    }\n  }\n  return function constructor(loc, details) {\n    const error = new SyntaxError();\n    error.code = code;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = details.missingPlugin;\n    }\n    defineHidden(error, "clone", function clone(overrides = {}) {\n      var _overrides$loc;\n      const {\n        line,\n        column,\n        index\n      } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;\n      return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));\n    });\n    defineHidden(error, "details", details);\n    Object.defineProperty(error, "message", {\n      configurable: true,\n      get() {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value) {\n        Object.defineProperty(this, "message", {\n          value,\n          writable: true\n        });\n      }\n    });\n    return error;\n  };\n}\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n  const ParseErrorConstructors = {};\n  for (const reasonCode of Object.keys(argument)) {\n    const template = argument[reasonCode];\n    const _ref = typeof template === "string" ? {\n        message: () => template\n      } : typeof template === "function" ? {\n        message: template\n      } : template,\n      {\n        message\n      } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const toMessage = typeof message === "string" ? () => message : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: "BABEL_PARSER_SYNTAX_ERROR",\n      reasonCode,\n      toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, rest));\n  }\n  return ParseErrorConstructors;\n}\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\nconst toUnenumerable = (object, key) => {\n  if (object) {\n    defineProperty(object, key, {\n      enumerable: false,\n      value: object[key]\n    });\n  }\n};\nfunction toESTreeLocation(node) {\n  toUnenumerable(node.loc.start, "index");\n  toUnenumerable(node.loc.end, "index");\n  return node;\n}\nvar estree = superClass => class ESTreeParserMixin extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n    return file;\n  }\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (_) {}\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n  parseBigIntLiteral(value) {\n    let bigInt;\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, "Literal");\n  }\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  directiveToStmt(directive) {\n    const expression = directive.value;\n    delete directive.value;\n    expression.type = "Literal";\n    expression.raw = expression.extra.raw;\n    expression.value = expression.extra.expressionValue;\n    const stmt = directive;\n    stmt.type = "ExpressionStatement";\n    stmt.expression = expression;\n    stmt.directive = expression.extra.rawValue;\n    delete expression.extra;\n    return stmt;\n  }\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n    return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n    classBody.body.push(method);\n  }\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption("estree", "classFeatures")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = "PrivateIdentifier";\n    return node;\n  }\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption("estree", "classFeatures")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === "PrivateIdentifier";\n  }\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption("estree", "classFeatures")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== "BlockStatement";\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = "FunctionExpression";\n    delete funcNode.kind;\n    node.value = funcNode;\n    if (type === "ClassPrivateMethod") {\n      node.computed = false;\n    }\n    return this.finishNode(node, "MethodDefinition");\n  }\n  nameIsConstructor(key) {\n    if (key.type === "Literal") return key.value === "constructor";\n    return super.nameIsConstructor(key);\n  }\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n    {\n      if (!this.getPluginOption("estree", "classFeatures")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = "PropertyDefinition";\n    return propertyNode;\n  }\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n    {\n      if (!this.getPluginOption("estree", "classFeatures")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = "PropertyDefinition";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n    if (node) {\n      node.type = "Property";\n      if (node.kind === "method") {\n        node.kind = "init";\n      }\n      node.shorthand = false;\n    }\n    return node;\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (node) {\n      node.kind = "init";\n      node.type = "Property";\n    }\n    return node;\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n    return super.isAssignable(node, isBinding);\n  }\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n      this.toAssignable(value, isLHS);\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === "Property" && (prop.kind === "get" || prop.kind === "set")) {\n      this.raise(Errors.PatternHasAccessor, prop.key);\n    } else if (prop.type === "Property" && prop.method) {\n      this.raise(Errors.PatternHasMethod, prop.key);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n    }\n  }\n  finishCallExpression(unfinished, optional) {\n    const node = super.finishCallExpression(unfinished, optional);\n    if (node.callee.type === "Import") {\n      var _ref, _ref2;\n      node.type = "ImportExpression";\n      node.source = node.arguments[0];\n      node.options = (_ref = node.arguments[1]) != null ? _ref : null;\n      node.attributes = (_ref2 = node.arguments[1]) != null ? _ref2 : null;\n      delete node.arguments;\n      delete node.callee;\n    }\n    return node;\n  }\n  toReferencedArguments(node) {\n    if (node.type === "ImportExpression") {\n      return;\n    }\n    super.toReferencedArguments(node);\n  }\n  parseExport(unfinished, decorators) {\n    const exportStartLoc = this.state.lastTokStartLoc;\n    const node = super.parseExport(unfinished, decorators);\n    switch (node.type) {\n      case "ExportAllDeclaration":\n        node.exported = null;\n        break;\n      case "ExportNamedDeclaration":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {\n          node.type = "ExportAllDeclaration";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n      case "ExportDefaultDeclaration":\n        {\n          var _declaration$decorato;\n          const {\n            declaration\n          } = node;\n          if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {\n            this.resetStartLocation(node, exportStartLoc);\n          }\n        }\n        break;\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startLoc, noCalls, state);\n    if (state.optionalChainMember) {\n      if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {\n        node.type = node.type.substring(8);\n      }\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, "ChainExpression");\n      }\n    } else if (node.type === "MemberExpression" || node.type === "CallExpression") {\n      node.optional = false;\n    }\n    return node;\n  }\n  isOptionalMemberExpression(node) {\n    if (node.type === "ChainExpression") {\n      return node.expression.type === "MemberExpression";\n    }\n    return super.isOptionalMemberExpression(node);\n  }\n  hasPropertyAsPrivateName(node) {\n    if (node.type === "ChainExpression") {\n      node = node.expression;\n    }\n    return super.hasPropertyAsPrivateName(node);\n  }\n  isObjectProperty(node) {\n    return node.type === "Property" && node.kind === "init" && !node.method;\n  }\n  isObjectMethod(node) {\n    return node.type === "Property" && (node.method || node.kind === "get" || node.kind === "set");\n  }\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n  resetStartLocation(node, startLoc) {\n    super.resetStartLocation(node, startLoc);\n    toESTreeLocation(node);\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n};\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n}\nconst types = {\n  brace: new TokContext("{"),\n  j_oTag: new TokContext("<tag"),\n  j_cTag: new TokContext("</tag"),\n  j_expr: new TokContext("<tag>...</tag>", true)\n};\n{\n  types.template = new TokContext("`", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n}\nconst keywords$1 = new Map();\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\nfunction createKeywordLike(name, options = {}) {\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType("name", options));\n  return tokenTypeCounter;\n}\nconst tt = {\n  bracketL: createToken("[", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken("#[", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken("[|", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken("]"),\n  bracketBarR: createToken("|]"),\n  braceL: createToken("{", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken("{|", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken("#{", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken("}"),\n  braceBarR: createToken("|}"),\n  parenL: createToken("(", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(")"),\n  comma: createToken(",", {\n    beforeExpr\n  }),\n  semi: createToken(";", {\n    beforeExpr\n  }),\n  colon: createToken(":", {\n    beforeExpr\n  }),\n  doubleColon: createToken("::", {\n    beforeExpr\n  }),\n  dot: createToken("."),\n  question: createToken("?", {\n    beforeExpr\n  }),\n  questionDot: createToken("?."),\n  arrow: createToken("=>", {\n    beforeExpr\n  }),\n  template: createToken("template"),\n  ellipsis: createToken("...", {\n    beforeExpr\n  }),\n  backQuote: createToken("`", {\n    startsExpr\n  }),\n  dollarBraceL: createToken("${", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken("...`", {\n    startsExpr\n  }),\n  templateNonTail: createToken("...${", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken("@"),\n  hash: createToken("#", {\n    startsExpr\n  }),\n  interpreterDirective: createToken("#!..."),\n  eq: createToken("=", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken("_=", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken("_=", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken("_=", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken("_=", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken("++/--", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken("!", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken("~", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken("^^", {\n    startsExpr\n  }),\n  doubleAt: createToken("@@", {\n    startsExpr\n  }),\n  pipeline: createBinop("|>", 0),\n  nullishCoalescing: createBinop("??", 1),\n  logicalOR: createBinop("||", 1),\n  logicalAND: createBinop("&&", 2),\n  bitwiseOR: createBinop("|", 3),\n  bitwiseXOR: createBinop("^", 4),\n  bitwiseAND: createBinop("&", 5),\n  equality: createBinop("==/!=/===/!==", 6),\n  lt: createBinop("</>/<=/>=", 7),\n  gt: createBinop("</>/<=/>=", 7),\n  relational: createBinop("</>/<=/>=", 7),\n  bitShift: createBinop("<</>>/>>>", 8),\n  bitShiftL: createBinop("<</>>/>>>", 8),\n  bitShiftR: createBinop("<</>>/>>>", 8),\n  plusMin: createToken("+/-", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken("%", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken("*", {\n    binop: 10\n  }),\n  slash: createBinop("/", 10),\n  exponent: createToken("**", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword("in", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword("instanceof", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword("break"),\n  _case: createKeyword("case", {\n    beforeExpr\n  }),\n  _catch: createKeyword("catch"),\n  _continue: createKeyword("continue"),\n  _debugger: createKeyword("debugger"),\n  _default: createKeyword("default", {\n    beforeExpr\n  }),\n  _else: createKeyword("else", {\n    beforeExpr\n  }),\n  _finally: createKeyword("finally"),\n  _function: createKeyword("function", {\n    startsExpr\n  }),\n  _if: createKeyword("if"),\n  _return: createKeyword("return", {\n    beforeExpr\n  }),\n  _switch: createKeyword("switch"),\n  _throw: createKeyword("throw", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword("try"),\n  _var: createKeyword("var"),\n  _const: createKeyword("const"),\n  _with: createKeyword("with"),\n  _new: createKeyword("new", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword("this", {\n    startsExpr\n  }),\n  _super: createKeyword("super", {\n    startsExpr\n  }),\n  _class: createKeyword("class", {\n    startsExpr\n  }),\n  _extends: createKeyword("extends", {\n    beforeExpr\n  }),\n  _export: createKeyword("export"),\n  _import: createKeyword("import", {\n    startsExpr\n  }),\n  _null: createKeyword("null", {\n    startsExpr\n  }),\n  _true: createKeyword("true", {\n    startsExpr\n  }),\n  _false: createKeyword("false", {\n    startsExpr\n  }),\n  _typeof: createKeyword("typeof", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword("void", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword("delete", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword("do", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword("for", {\n    isLoop\n  }),\n  _while: createKeyword("while", {\n    isLoop\n  }),\n  _as: createKeywordLike("as", {\n    startsExpr\n  }),\n  _assert: createKeywordLike("assert", {\n    startsExpr\n  }),\n  _async: createKeywordLike("async", {\n    startsExpr\n  }),\n  _await: createKeywordLike("await", {\n    startsExpr\n  }),\n  _defer: createKeywordLike("defer", {\n    startsExpr\n  }),\n  _from: createKeywordLike("from", {\n    startsExpr\n  }),\n  _get: createKeywordLike("get", {\n    startsExpr\n  }),\n  _let: createKeywordLike("let", {\n    startsExpr\n  }),\n  _meta: createKeywordLike("meta", {\n    startsExpr\n  }),\n  _of: createKeywordLike("of", {\n    startsExpr\n  }),\n  _sent: createKeywordLike("sent", {\n    startsExpr\n  }),\n  _set: createKeywordLike("set", {\n    startsExpr\n  }),\n  _source: createKeywordLike("source", {\n    startsExpr\n  }),\n  _static: createKeywordLike("static", {\n    startsExpr\n  }),\n  _using: createKeywordLike("using", {\n    startsExpr\n  }),\n  _yield: createKeywordLike("yield", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike("asserts", {\n    startsExpr\n  }),\n  _checks: createKeywordLike("checks", {\n    startsExpr\n  }),\n  _exports: createKeywordLike("exports", {\n    startsExpr\n  }),\n  _global: createKeywordLike("global", {\n    startsExpr\n  }),\n  _implements: createKeywordLike("implements", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike("intrinsic", {\n    startsExpr\n  }),\n  _infer: createKeywordLike("infer", {\n    startsExpr\n  }),\n  _is: createKeywordLike("is", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike("mixins", {\n    startsExpr\n  }),\n  _proto: createKeywordLike("proto", {\n    startsExpr\n  }),\n  _require: createKeywordLike("require", {\n    startsExpr\n  }),\n  _satisfies: createKeywordLike("satisfies", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike("keyof", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike("readonly", {\n    startsExpr\n  }),\n  _unique: createKeywordLike("unique", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike("abstract", {\n    startsExpr\n  }),\n  _declare: createKeywordLike("declare", {\n    startsExpr\n  }),\n  _enum: createKeywordLike("enum", {\n    startsExpr\n  }),\n  _module: createKeywordLike("module", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike("namespace", {\n    startsExpr\n  }),\n  _interface: createKeywordLike("interface", {\n    startsExpr\n  }),\n  _type: createKeywordLike("type", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike("opaque", {\n    startsExpr\n  }),\n  name: createToken("name", {\n    startsExpr\n  }),\n  placeholder: createToken("%%", {\n    startsExpr: true\n  }),\n  string: createToken("string", {\n    startsExpr\n  }),\n  num: createToken("num", {\n    startsExpr\n  }),\n  bigint: createToken("bigint", {\n    startsExpr\n  }),\n  decimal: createToken("decimal", {\n    startsExpr\n  }),\n  regexp: createToken("regexp", {\n    startsExpr\n  }),\n  privateName: createToken("#name", {\n    startsExpr\n  }),\n  eof: createToken("eof"),\n  jsxName: createToken("jsxName"),\n  jsxText: createToken("jsxText", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken("jsxTagStart", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken("jsxTagEnd")\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 133;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 133;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 137;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 129 && token <= 131;\n}\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 121 && token <= 123;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 124 && token <= 130;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n  tokenTypes[143].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc";\nlet nonASCIIidentifierChars = "\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65";\nconst nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");\nconst nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nconst reservedWords = {\n  keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],\n  strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],\n  strictBind: ["eval", "arguments"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === "await" || word === "enum";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\nconst reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\nclass Scope {\n  constructor(flags) {\n    this.flags = 0;\n    this.names = new Map();\n    this.firstLexicalName = "";\n    this.flags = flags;\n  }\n}\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n  get inTopLevel() {\n    return (this.currentScope().flags & 1) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & 2) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & 16) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & 32) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & 64) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & 64) > 0 && (flags & 2) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & 128) {\n        return true;\n      }\n      if (flags & (387 | 64)) {\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & 2) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n  createScope(flags) {\n    return new Scope(flags);\n  }\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n  exit() {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);\n  }\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n    if (bindingType & 8 || bindingType & 16) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      let type = scope.names.get(name) || 0;\n      if (bindingType & 16) {\n        type = type | 4;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | 2;\n      }\n      scope.names.set(name, type);\n      if (bindingType & 8) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & 4) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | 1);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & 387) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & 1) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & 1) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name\n      });\n    }\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & 1)) return false;\n    if (bindingType & 8) {\n      return scope.names.has(name);\n    }\n    const type = scope.names.get(name);\n    if (bindingType & 16) {\n      return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope) && (type & 1) > 0;\n    }\n    return (type & 2) > 0 && !(scope.flags & 8 && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (type & 4) > 0;\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & 387) {\n        return flags;\n      }\n    }\n  }\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & (387 | 64) && !(flags & 4)) {\n        return flags;\n      }\n    }\n  }\n}\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n}\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n    if (bindingType & 2048) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n    if (bindingType & 2048 && !scope.declareFunctions.has(name)) {\n      const type = scope.names.get(name);\n      return (type & 4) > 0 || (type & 2) > 0;\n    }\n    return false;\n  }\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n  sourceToOffsetPos(sourcePos) {\n    return sourcePos + this.startIndex;\n  }\n  offsetToSourcePos(offsetPos) {\n    return offsetPos - this.startIndex;\n  }\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === "string") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n}\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    const {\n      commentsLen\n    } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n    const {\n      start: nodeStart\n    } = node;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        break;\n      }\n    }\n  }\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n      if (this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) === 44) {\n        switch (node.type) {\n          case "ObjectExpression":\n          case "ObjectPattern":\n          case "RecordExpression":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case "CallExpression":\n          case "OptionalCallExpression":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case "FunctionDeclaration":\n          case "FunctionExpression":\n          case "ArrowFunctionExpression":\n          case "ObjectMethod":\n          case "ClassMethod":\n          case "ClassPrivateMethod":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case "ArrayExpression":\n          case "ArrayPattern":\n          case "TupleExpression":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case "ExportNamedDeclaration":\n          case "ImportDeclaration":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n  resetPreviousIdentifierLeadingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\nconst lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, "g");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n    default:\n      return false;\n  }\n}\nfunction hasNewLine(input, start, end) {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n    default:\n      return false;\n  }\n}\nclass State {\n  constructor() {\n    this.flags = 1024;\n    this.startIndex = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.labels = [];\n    this.commentsLen = 0;\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 140;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.context = [types.brace];\n    this.firstInvalidTemplateEscapePos = null;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n  get strict() {\n    return (this.flags & 1) > 0;\n  }\n  set strict(v) {\n    if (v) this.flags |= 1;else this.flags &= -2;\n  }\n  init({\n    strictMode,\n    sourceType,\n    startIndex,\n    startLine,\n    startColumn\n  }) {\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";\n    this.startIndex = startIndex;\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);\n  }\n  get maybeInArrowParameters() {\n    return (this.flags & 2) > 0;\n  }\n  set maybeInArrowParameters(v) {\n    if (v) this.flags |= 2;else this.flags &= -3;\n  }\n  get inType() {\n    return (this.flags & 4) > 0;\n  }\n  set inType(v) {\n    if (v) this.flags |= 4;else this.flags &= -5;\n  }\n  get noAnonFunctionType() {\n    return (this.flags & 8) > 0;\n  }\n  set noAnonFunctionType(v) {\n    if (v) this.flags |= 8;else this.flags &= -9;\n  }\n  get hasFlowComment() {\n    return (this.flags & 16) > 0;\n  }\n  set hasFlowComment(v) {\n    if (v) this.flags |= 16;else this.flags &= -17;\n  }\n  get isAmbientContext() {\n    return (this.flags & 32) > 0;\n  }\n  set isAmbientContext(v) {\n    if (v) this.flags |= 32;else this.flags &= -33;\n  }\n  get inAbstractClass() {\n    return (this.flags & 64) > 0;\n  }\n  set inAbstractClass(v) {\n    if (v) this.flags |= 64;else this.flags &= -65;\n  }\n  get inDisallowConditionalTypesContext() {\n    return (this.flags & 128) > 0;\n  }\n  set inDisallowConditionalTypesContext(v) {\n    if (v) this.flags |= 128;else this.flags &= -129;\n  }\n  get soloAwait() {\n    return (this.flags & 256) > 0;\n  }\n  set soloAwait(v) {\n    if (v) this.flags |= 256;else this.flags &= -257;\n  }\n  get inFSharpPipelineDirectBody() {\n    return (this.flags & 512) > 0;\n  }\n  set inFSharpPipelineDirectBody(v) {\n    if (v) this.flags |= 512;else this.flags &= -513;\n  }\n  get canStartJSXElement() {\n    return (this.flags & 1024) > 0;\n  }\n  set canStartJSXElement(v) {\n    if (v) this.flags |= 1024;else this.flags &= -1025;\n  }\n  get containsEsc() {\n    return (this.flags & 2048) > 0;\n  }\n  set containsEsc(v) {\n    if (v) this.flags |= 2048;else this.flags &= -2049;\n  }\n  get hasTopLevelAwait() {\n    return (this.flags & 4096) > 0;\n  }\n  set hasTopLevelAwait(v) {\n    if (v) this.flags |= 4096;else this.flags &= -4097;\n  }\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);\n  }\n  clone() {\n    const state = new State();\n    state.flags = this.flags;\n    state.startIndex = this.startIndex;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n    return state;\n  }\n}\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = "";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos,\n          lineStart,\n          curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      ({\n        pos,\n        lineStart,\n        curLine\n      } = res);\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === "template") {\n        out += input.slice(chunkStart, pos) + "\\n";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === "template") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === "double" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res("\\n");\n    case 114:\n      return res("\\r");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res("\\t");\n    case 98:\n      return res("\\b");\n    case 118:\n      return res("\\u000b");\n    case 102:\n      return res("\\f");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res("");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== "0" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== "bail") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nclass Token {\n  constructor(state) {\n    const startIndex = state.startIndex || 0;\n    this.type = state.type;\n    this.value = state.value;\n    this.start = startIndex + state.start;\n    this.end = startIndex + state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n}\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.errorHandlers_readInt = {\n      invalidDigit: (pos, lineStart, curLine, radix) => {\n        if (!this.options.errorRecovery) return false;\n        this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n          radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {\n      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)\n    });\n    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: (pos, lineStart, curLine) => {\n        this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));\n      },\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));\n      }\n    });\n    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));\n      }\n    });\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n  next() {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  match(type) {\n    return this.state.type === type;\n  }\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n  nextTokenInLineStart() {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n  nextTokenInLineStartSince(pos) {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;\n  }\n  lookaheadInLineCharCode() {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (strict) {\n      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at));\n      this.state.strictErrors.clear();\n    }\n  }\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(140);\n      return;\n    }\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n  skipBlockComment(commentEnd) {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n    if (this.isLookahead) return;\n    const comment = {\n      type: "CommentBlock",\n      value: this.input.slice(start + 2, end),\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end + commentEnd.length),\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: "CommentLine",\n      value,\n      start: this.sourceToOffsetPos(start),\n      end: this.sourceToOffsetPos(end),\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment("*/");\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            default:\n              break loop;\n          }\n          break;\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace = {\n        start: this.sourceToOffsetPos(spaceStart),\n        end: this.sourceToOffsetPos(end),\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());\n    }\n    if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {\n      this.expectPlugin("recordAndTuple");\n      if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());\n      }\n      this.state.pos += 2;\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(139, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(139, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n    this.finishOp(type, width);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n      return;\n    }\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n      if (this.hasPlugin("recordAndTuple") && next === 125) {\n        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());\n        }\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n      if (this.hasPlugin("recordAndTuple") && next === 93) {\n        if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());\n        }\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin(["pipelineOperator", {\n      proposal: "hack",\n      topicToken: "^^"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === 94) {\n        this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 64 && this.hasPlugin(["pipelineOperator", {\n      proposal: "hack",\n      topicToken: "@@"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n      this.finishOp(51, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(47, 1);\n  }\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n      this.finishOp(52, size);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(48, 1);\n  }\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n      case 91:\n        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());\n          }\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n        return;\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n      case 123:\n        if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());\n          }\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n        return;\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n      case 58:\n        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n        return;\n      case 63:\n        this.readToken_question();\n        return;\n      case 96:\n        this.readTemplateToken();\n        return;\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n      case 47:\n        this.readToken_slash();\n        return;\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n      case 94:\n        this.readToken_caret();\n        return;\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n      case 60:\n        this.readToken_lt();\n        return;\n      case 62:\n        this.readToken_gt();\n        return;\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n      case 126:\n        this.finishOp(36, 1);\n        return;\n      case 64:\n        this.readToken_atSign();\n        return;\n      case 35:\n        this.readToken_numberSign();\n        return;\n      case 92:\n        this.readWord();\n        return;\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n    throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n        escaped = ch === 92;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = "";\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          if (mods.includes("u")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === 117) {\n          if (mods.includes("v")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n    this.finishToken(138, {\n      pattern: content,\n      flags: mods\n    });\n  }\n  readInt(radix, len, forceLen = false, allowNumSeparator = true) {\n    const {\n      n,\n      pos\n    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);\n    this.state.pos = pos;\n    return n;\n  }\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {\n        radix\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");\n      this.finishToken(136, str);\n      return;\n    }\n    this.finishToken(135, val);\n  }\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let hasExponent = false;\n    let isOctal = false;\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf("_");\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n    if (next === 109) {\n      this.expectPlugin("decimal", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      var isDecimal = true;\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");\n    if (isBigInt) {\n      this.finishToken(136, str);\n      return;\n    }\n    if (isDecimal) {\n      this.finishToken(137, str);\n      return;\n    }\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(135, val);\n  }\n  readCodePoint(throwOnInvalid) {\n    const {\n      code,\n      pos\n    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);\n    this.state.pos = pos;\n    return code;\n  }\n  readString(quote) {\n    const {\n      str,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(134, str);\n  }\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n  readTemplateToken() {\n    const opening = this.input[this.state.pos];\n    const {\n      str,\n      firstInvalidLoc,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos));\n    }\n    if (this.input.codePointAt(pos) === 96) {\n      this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");\n    } else {\n      this.state.pos++;\n      this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");\n    }\n  }\n  recordStrictModeErrors(toParseError, at) {\n    const index = at.index;\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = "";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(132, word);\n    }\n  }\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n  raise(toParseError, at, details = {}) {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n  raiseOverwrite(toParseError, at, details = {}) {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError(loc, details);\n      }\n      if (error.loc.index < pos) break;\n    }\n    return this.raise(toParseError, at, details);\n  }\n  updateContext(prevType) {}\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {\n      expected: type ? tokenLabelName(type) : null\n    });\n  }\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n    throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {\n      missingPlugin: [pluginName]\n    });\n  }\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames\n      });\n    }\n  }\n  errorBuilder(error) {\n    return (pos, lineStart, curLine) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n}\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n}\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name\n        });\n      }\n    }\n  }\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n    if (elementType & 3) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & 4;\n        const newStatic = elementType & 4;\n        const oldKind = accessor & 3;\n        const newKind = elementType & 3;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name\n      });\n    }\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n  usePrivateName(name, loc) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name\n      });\n    }\n  }\n}\nclass ExpressionScope {\n  constructor(type = 0) {\n    this.type = type;\n  }\n  canBeArrowParameterDeclaration() {\n    return this.type === 2 || this.type === 1;\n  }\n  isCertainlyParameterDeclaration() {\n    return this.type === 3;\n  }\n}\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n  recordDeclarationError(ParsingErrorClass, at) {\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n  enter(scope) {\n    this.stack.push(scope);\n  }\n  exit() {\n    this.stack.pop();\n  }\n  recordParameterInitializerError(toParseError, node) {\n    const origin = node.loc.start;\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n  recordArrowParameterBindingError(error, node) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n  recordAsyncArrowParametersError(at) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === 2) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(3);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(1);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(2);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n  exit() {\n    this.stacks.pop();\n  }\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n  get hasAwait() {\n    return (this.currentFlags() & 2) > 0;\n  }\n  get hasYield() {\n    return (this.currentFlags() & 1) > 0;\n  }\n  get hasReturn() {\n    return (this.currentFlags() & 4) > 0;\n  }\n  get hasIn() {\n    return (this.currentFlags() & 8) > 0;\n  }\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);\n}\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value, enumerable = true) {\n    if (!node) return;\n    let {\n      extra\n    } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n    return false;\n  }\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n  canInsertSemicolon() {\n    return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n  hasPrecedingLineBreak() {\n    return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);\n  }\n  hasFollowingLineBreak() {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n  expect(type, loc) {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n      throw error;\n    }\n  }\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n    if (!andThrow) {\n      return hasErrors;\n    }\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n  isPrivateName(node) {\n    return node.type === "PrivateName";\n  }\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n  hasPropertyAsPrivateName(node) {\n    return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);\n  }\n  isObjectProperty(node) {\n    return node.type === "ObjectProperty";\n  }\n  isObjectMethod(node) {\n    return node.type === "ObjectMethod";\n  }\n  initializeScopes(inModule = this.options.sourceType === "module") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n  enterInitialScopes() {\n    let paramFlags = 0;\n    if (this.inModule) {\n      paramFlags |= 2;\n    }\n    this.scope.enter(1);\n    this.prodParam.enter(paramFlags);\n  }\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin("destructuringPrivate", privateKeyLoc);\n    }\n  }\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n}\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = "";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n}\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {\n        newNode[key] = this[key];\n      }\n    }\n    return newNode;\n  };\n}\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === "Placeholder") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n  if (type === "Placeholder") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAt(loc) {\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.loc.start);\n  }\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n  resetStartLocation(node, startLoc) {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\nconst reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",\n  AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",\n  AssignReservedType: ({\n    reservedType\n  }) => `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement: "The `declare` modifier can only appear on class fields.",\n  DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",\n  DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName\n  }) => `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName\n  }) => `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({\n    enumName\n  }) => `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName\n  }) => `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName\n  }) => `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType\n  }) => `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName\n  }) => `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName\n  }) => `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion\n  }) => `Enum member names cannot start with lowercase \'a\' through \'z\'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName\n  }) => `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName\n  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",\n  ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",\n  ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",\n  InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",\n  InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",\n  InexactVariance: "Explicit inexact syntax cannot have variance.",\n  InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",\n  MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",\n  NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",\n  NestedFlowComment: "Cannot have a flow comment inside another flow comment.",\n  PatternIsOptional: Object.assign({\n    message: "A binding pattern parameter cannot be optional in an implementation signature."\n  }, {\n    reasonCode: "OptionalBindingPattern"\n  }),\n  SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",\n  SpreadVariance: "Spread properties cannot have variance.",\n  ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",\n  ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don\'t bind `this` like other functions.",\n  ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",\n  ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",\n  ThisParamNoDefault: "The `this` parameter may not have a default value.",\n  TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",\n  TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",\n  UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",\n  UnexpectedReservedType: ({\n    reservedType\n  }) => `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",\n  UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",\n  UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",\n  UnexpectedSubtractionOperand: \'Unexpected token, expected "number" or "bigint".\',\n  UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion\n  }) => `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",\n  UnterminatedFlowComment: "Unterminated flow-comment."\n});\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");\n}\nfunction hasTypeImportKind(node) {\n  return node.importKind === "type" || node.importKind === "typeof";\n}\nconst exportSuggestions = {\n  const: "declare export var",\n  let: "declare export var",\n  type: "export type",\n  interface: "export interface"\n};\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = superClass => class FlowParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n  shouldParseTypes() {\n    return this.getPluginOption("flow", "all") || this.flowPragma === "flow";\n  }\n  finishToken(type, val) {\n    if (type !== 134 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n    super.finishToken(type, val);\n  }\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === "flow") {\n        this.flowPragma = "flow";\n      } else if (matches[1] === "noflow") {\n        this.flowPragma = "noflow";\n      } else {\n        throw new Error("Unexpected flow pragma");\n      }\n    }\n    super.addComment(comment);\n  }\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(110);\n    if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n    }\n    if (this.eat(10)) {\n      node.value = super.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, "DeclaredPredicate");\n    } else {\n      return this.finishNode(node, "InferredPredicate");\n    }\n  }\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n    return [type, predicate];\n  }\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, "DeclareClass");\n  }\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");\n    id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, 2048, node.id.loc.start);\n    return this.finishNode(node, "DeclareFunction");\n  }\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(127)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);\n        }\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(130)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(131)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(129)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      this.unexpected();\n    }\n  }\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, 5, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, "DeclareVariable");\n  }\n  flowParseDeclareModule(node) {\n    this.scope.enter(0);\n    if (this.match(134)) {\n      node.id = super.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n      if (this.match(83)) {\n        this.next();\n        if (!this.isContextual(130) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);\n        }\n        super.parseImport(bodyNode);\n      } else {\n        this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n      body.push(bodyNode);\n    }\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, "BlockStatement");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === "CommonJS") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n        }\n        kind = "ES";\n      } else if (bodyElement.type === "DeclareModuleExports") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n        }\n        if (kind === "ES") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n        }\n        kind = "CommonJS";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || "CommonJS";\n    return this.finishNode(node, "DeclareModule");\n  }\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n      node.default = true;\n      return this.finishNode(node, "DeclareExportDeclaration");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, "DeclareExportDeclaration");\n      } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {\n        node = this.parseExport(node, null);\n        if (node.type === "ExportNamedDeclaration") {\n          node.type = "ExportDeclaration";\n          node.default = false;\n          delete node.exportKind;\n        }\n        node.type = "Declare" + node.type;\n        return node;\n      }\n    }\n    this.unexpected();\n  }\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(111);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, "DeclareModuleExports");\n  }\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    const finished = this.flowParseTypeAlias(node);\n    finished.type = "DeclareTypeAlias";\n    return finished;\n  }\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    const finished = this.flowParseOpaqueType(node, true);\n    finished.type = "DeclareOpaqueType";\n    return finished;\n  }\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, "DeclareInterface");\n  }\n  flowParseInterfaceish(node, isClass) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n    if (isClass) {\n      node.implements = [];\n      node.mixins = [];\n      if (this.eatContextual(117)) {\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n      if (this.eatContextual(113)) {\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n    return this.finishNode(node, "InterfaceExtends");\n  }\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, "InterfaceDeclaration");\n  }\n  checkNotUnderscore(word) {\n    if (word === "_") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);\n    }\n  }\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {\n      reservedType: word\n    });\n  }\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, "TypeAlias");\n  }\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(130);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, 8201, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.supertype = null;\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n    node.impltype = null;\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n    this.semicolon();\n    return this.finishNode(node, "OpaqueType");\n  }\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n      }\n    }\n    return this.finishNode(node, "TypeParameter");\n  }\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n    if (this.match(47) || this.match(143)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    let defaultRequired = false;\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, "TypeParameterDeclaration");\n  }\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, "TypeParameterInstantiation");\n  }\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, "TypeParameterInstantiation");\n  }\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(129);\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, "InterfaceTypeAnnotation");\n  }\n  flowParseObjectPropertyKey() {\n    return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);\n  }\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, "ObjectTypeIndexer");\n  }\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n    } else {\n      node.method = false;\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n      node.value = this.flowParseTypeInitialiser();\n    }\n    return this.finishNode(node, "ObjectTypeInternalSlot");\n  }\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    this.expect(10);\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, "FunctionTypeAnnotation");\n  }\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, "ObjectTypeCallProperty");\n  }\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n    nodeStart.exact = exact;\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n      if (allowProto && this.isContextual(118)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n      if (allowStatic && this.isContextual(106)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n      const variance = this.flowParseVariance();\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = "init";\n        if (this.isContextual(99) || this.isContextual(104)) {\n          const lookahead = this.lookahead();\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n      this.flowObjectTypeSemicolon();\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);\n      }\n    }\n    this.expect(endDelim);\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n    const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");\n    this.state.inType = oldInType;\n    return out;\n  }\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, variance);\n        }\n        return null;\n      }\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);\n      }\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, variance);\n      }\n      node.argument = this.flowParseType();\n      return this.finishNode(node, "ObjectTypeSpreadProperty");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n        if (kind === "get" || kind === "set") {\n          this.flowCheckGetterSetterParams(node);\n        }\n        if (!allowSpread && node.key.name === "constructor" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this);\n        }\n      } else {\n        if (kind !== "init") this.unexpected();\n        node.method = false;\n        if (this.eat(17)) {\n          optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n      node.optional = optional;\n      return this.finishNode(node, "ObjectTypeProperty");\n    }\n  }\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === "get" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n    if (property.value.this) {\n      this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);\n    }\n    if (length !== paramCount) {\n      this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property);\n    }\n    if (property.kind === "set" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, property);\n    }\n  }\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n  flowParseQualifiedTypeIdentifier(startLoc, id) {\n    var _startLoc;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, "QualifiedTypeIdentifier");\n    }\n    return node;\n  }\n  flowParseGenericType(startLoc, id) {\n    const node = this.startNodeAt(startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    return this.finishNode(node, "GenericTypeAnnotation");\n  }\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, "TypeofTypeAnnotation");\n  }\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n    this.expect(3);\n    return this.finishNode(node, "TupleTypeAnnotation");\n  }\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, node);\n      }\n      name = this.parseIdentifier(isThis);\n      if (this.eat(17)) {\n        optional = true;\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n        }\n      }\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, "FunctionTypeParam");\n  }\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, "FunctionTypeParam");\n  }\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n  flowIdentToTypeAnnotation(startLoc, node, id) {\n    switch (id.name) {\n      case "any":\n        return this.finishNode(node, "AnyTypeAnnotation");\n      case "bool":\n      case "boolean":\n        return this.finishNode(node, "BooleanTypeAnnotation");\n      case "mixed":\n        return this.finishNode(node, "MixedTypeAnnotation");\n      case "empty":\n        return this.finishNode(node, "EmptyTypeAnnotation");\n      case "number":\n        return this.finishNode(node, "NumberTypeAnnotation");\n      case "string":\n        return this.finishNode(node, "StringTypeAnnotation");\n      case "symbol":\n        return this.finishNode(node, "SymbolTypeAnnotation");\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startLoc, id);\n    }\n  }\n  flowParsePrimaryType() {\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n      case 47:\n        {\n          const node = this.startNode();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(10);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(11);\n          this.expect(19);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, "FunctionTypeAnnotation");\n        }\n      case 10:\n        {\n          const node = this.startNode();\n          this.next();\n          if (!this.match(11) && !this.match(21)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== 17 && token !== 14;\n            } else {\n              isGroupedType = true;\n            }\n          }\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n              this.expect(11);\n              return type;\n            } else {\n              this.eat(12);\n            }\n          }\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(11);\n          this.expect(19);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, "FunctionTypeAnnotation");\n        }\n      case 134:\n        return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, "BooleanLiteralTypeAnnotation");\n      case 53:\n        if (this.state.value === "-") {\n          this.next();\n          if (this.match(135)) {\n            return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);\n          }\n          if (this.match(136)) {\n            return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);\n          }\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);\n        }\n        this.unexpected();\n        return;\n      case 135:\n        return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");\n      case 136:\n        return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");\n      case 88:\n        this.next();\n        return this.finishNode(node, "VoidTypeAnnotation");\n      case 84:\n        this.next();\n        return this.finishNode(node, "NullLiteralTypeAnnotation");\n      case 78:\n        this.next();\n        return this.finishNode(node, "ThisTypeAnnotation");\n      case 55:\n        this.next();\n        return this.finishNode(node, "ExistsTypeAnnotation");\n      case 87:\n        return this.flowParseTypeofType();\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(129)) {\n            return this.flowParseInterfaceType();\n          }\n          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());\n        }\n    }\n    this.unexpected();\n  }\n  flowParsePostfixType() {\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, "ArrayTypeAnnotation");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, "OptionalIndexedAccessType");\n        } else {\n          type = this.finishNode(node, "IndexedAccessType");\n        }\n      }\n    }\n    return type;\n  }\n  flowParsePrefixType() {\n    const node = this.startNode();\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, "NullableTypeAnnotation");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, "FunctionTypeAnnotation");\n    }\n    return param;\n  }\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");\n  }\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");\n  }\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 132 && this.state.value === "_") {\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, "TypeAnnotation");\n  }\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n    return ident;\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  flowParseVariance() {\n    let variance = null;\n    if (this.match(53)) {\n      variance = this.startNode();\n      if (this.state.value === "+") {\n        variance.kind = "plus";\n      } else {\n        variance.kind = "minus";\n      }\n      this.next();\n      return this.finishNode(variance, "Variance");\n    }\n    return variance;\n  }\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      return;\n    }\n    super.parseFunctionBody(node, false, isMethod);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;\n    }\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  parseStatementLike(flags) {\n    if (this.state.strict && this.isContextual(129)) {\n      const lookahead = this.lookahead();\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.isContextual(126)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    const stmt = super.parseStatementLike(flags);\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n    return stmt;\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    if (expr.type === "Identifier") {\n      if (expr.name === "declare") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === "interface") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === "type") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === "opaque") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n    return super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n      return !this.state.containsEsc;\n    }\n    return super.shouldParseExportDeclaration();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type)) {\n      return this.state.containsEsc;\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  parseExportDefaultExpression() {\n    if (this.isContextual(126)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n      }\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, "ConditionalExpression");\n  }\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n    while (stack.length !== 0) {\n      const node = stack.pop();\n      if (node.type === "ArrowFunctionExpression" && node.body.type !== "BlockStatement") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n        stack.push(node.body);\n      } else if (node.type === "ConditionalExpression") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n  finishArrowValidation(node) {\n    var _node$extra;\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(2 | 4);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n    if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n    return result;\n  }\n  parseParenItem(node, startLoc) {\n    const newNode = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      newNode.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = newNode;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, "TypeCastExpression");\n    }\n    return newNode;\n  }\n  assertModuleNodeAllowed(node) {\n    if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {\n      return;\n    }\n    super.assertModuleNodeAllowed(node);\n  }\n  parseExportDeclaration(node) {\n    if (this.isContextual(130)) {\n      node.exportKind = "type";\n      const declarationNode = this.startNode();\n      this.next();\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        super.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(131)) {\n      node.exportKind = "type";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(129)) {\n      node.exportKind = "type";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.isContextual(126)) {\n      node.exportKind = "value";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n  eatExportStar(node) {\n    if (super.eatExportStar(node)) return true;\n    if (this.isContextual(130) && this.lookahead().type === 55) {\n      node.exportKind = "type";\n      this.next();\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n    if (hasNamespace && node.exportKind === "type") {\n      this.unexpected(startLoc);\n    }\n    return hasNamespace;\n  }\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n    if (this.isContextual(125)) {\n      if (super.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      member.declare = true;\n    }\n    super.parseClassMember(classBody, member, state);\n    if (member.declare) {\n      if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {\n        this.raise(FlowErrors.DeclareClassElement, startLoc);\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n      }\n    }\n  }\n  isIterator(word) {\n    return word === "iterator" || word === "asyncIterator";\n  }\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = "@@" + word;\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n        identifierName: fullWord\n      });\n    }\n    this.finishToken(132, fullWord);\n  }\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 123 && next === 124) {\n      this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        this.finishOp(18, 2);\n      } else {\n        this.finishOp(17, 1);\n      }\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      this.readIterator();\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  isAssignable(node, isBinding) {\n    if (node.type === "TypeCastExpression") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {\n      node.left = this.typeCastToParameter(node.left);\n    }\n    super.toAssignable(node, isLHS);\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n      const expr = exprList[i];\n      if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n      }\n    }\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n    return node;\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassPrivateProperty(node);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    if (method.params && isConstructor) {\n      const params = method.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n      }\n    } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {\n      const params = method.value.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n      }\n    }\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    if (this.isContextual(113)) {\n      this.next();\n      const implemented = node.implements = [];\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n        implemented.push(this.finishNode(node, "ClassImplements"));\n      } while (this.eat(12));\n    }\n  }\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length > 0) {\n      const param = params[0];\n      if (this.isThisParam(param) && method.kind === "get") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n      }\n    }\n  }\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n    delete prop.variance;\n    let typeParameters;\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    if (typeParameters) {\n      (result.value || result).typeParameters = typeParameters;\n    }\n    return result;\n  }\n  parseFunctionParamType(param) {\n    if (this.eat(17)) {\n      if (param.type !== "Identifier") {\n        this.raise(FlowErrors.PatternIsOptional, param);\n      }\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n      }\n      param.optional = true;\n    }\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n    }\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, param);\n    }\n    this.resetEndLocation(param);\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n    }\n    return node;\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== "value") {\n      this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);\n    }\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(130)) {\n      if (!isExport) return true;\n      const ch = this.lookaheadCharCode();\n      return ch === 123 || ch === 42;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      if (!phase && this.match(65)) {\n        return;\n      }\n      node.exportKind = phase === "type" ? phase : "value";\n    } else {\n      if (phase === "type" && this.match(55)) this.unexpected();\n      node.importKind = phase === "type" || phase === "typeof" ? phase : "value";\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n    if (firstIdent.type === "Identifier") {\n      if (firstIdent.name === "type") {\n        specifierTypeKind = "type";\n      } else if (firstIdent.name === "typeof") {\n        specifierTypeKind = "typeof";\n      }\n    }\n    let isBinding = false;\n    if (this.isContextual(93) && !this.isLookaheadContextual("as")) {\n      const as_ident = this.parseIdentifier(true);\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, specifier, {\n            importName: firstIdent.value\n          });\n        }\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n    }\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n    return this.finishImportSpecifier(specifier, "ImportSpecifier");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n  parseFunctionParams(node, isConstructor) {\n    const kind = node.kind;\n    if (kind !== "get" && kind !== "set" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n    let state = null;\n    let jsx;\n    if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== "ArrowFunctionExpression") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);\n          }\n          return arrow.node;\n        }\n        arrowExpression = arrow.node;\n      }\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);\n    }\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;\n    }\n    return super.parseArrow(node);\n  }\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {\n      return;\n    }\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n      }\n    }\n    super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.includes(startLoc.index)) {\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.arguments = super.parseCallExpressionArguments(11);\n      base = this.finishNode(node, "CallExpression");\n    } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n      throw arrow.error || result.error;\n    }\n    return super.parseSubscripts(base, startLoc, noCalls);\n  }\n  parseSubscript(base, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = super.parseCallExpressionArguments(11);\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n        }\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, subscriptState);\n  }\n  parseNewCallee(node) {\n    super.parseNewCallee(node);\n    let targs = null;\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n    node.typeArguments = targs;\n  }\n  parseAsyncArrowWithTypeParameters(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.parseFunctionParams(node, false);\n    if (!this.parseArrow(node)) return;\n    return super.parseArrowExpression(node, undefined, true);\n  }\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n    super.readToken_mult_modulo(code);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n    super.readToken_pipe_amp(code);\n  }\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());\n    }\n    return fileNode;\n  }\n  skipBlockComment() {\n    if (this.hasPlugin("flowComments") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n      }\n      this.hasFlowCommentCompletion();\n      const commentSkip = this.skipFlowComment();\n      if (commentSkip) {\n        this.state.pos += commentSkip;\n        this.state.hasFlowComment = true;\n      }\n      return;\n    }\n    return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");\n  }\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n    return false;\n  }\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf("*/", this.state.pos);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n  }\n  flowEnumErrorBooleanMemberNotInitialized(loc, {\n    enumName,\n    memberName\n  }) {\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n      memberName,\n      enumName\n    });\n  }\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);\n  }\n  flowEnumErrorNumberMemberNotInitialized(loc, details) {\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n  }\n  flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);\n  }\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n    const endOfInit = () => this.match(12) || this.match(8);\n    switch (this.state.type) {\n      case 135:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: "number",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: "invalid",\n            loc: startLoc\n          };\n        }\n      case 134:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: "string",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: "invalid",\n            loc: startLoc\n          };\n        }\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n          if (endOfInit()) {\n            return {\n              type: "boolean",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: "invalid",\n            loc: startLoc\n          };\n        }\n      default:\n        return {\n          type: "invalid",\n          loc: startLoc\n        };\n    }\n  }\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: "none",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n    if (explicitType === null) {\n      return;\n    }\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n      if (memberName === "") {\n        continue;\n      }\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, id, {\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n          memberName,\n          enumName\n        });\n      }\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n      switch (init.type) {\n        case "boolean":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));\n            break;\n          }\n        case "number":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));\n            break;\n          }\n        case "string":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));\n            break;\n          }\n        case "invalid":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n        case "none":\n          {\n            switch (explicitType) {\n              case "boolean":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n              case "number":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));\n            }\n          }\n      }\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n          enumName\n        });\n      }\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n          enumName\n        });\n      }\n      return initializedMembers;\n    }\n  }\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (!this.eatContextual(102)) return null;\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {\n        enumName\n      });\n    }\n    const {\n      value\n    } = this.state;\n    this.next();\n    if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n        enumName,\n        invalidEnumType: value\n      });\n    }\n    return value;\n  }\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n    switch (explicitType) {\n      case "boolean":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, "EnumBooleanBody");\n      case "number":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, "EnumNumberBody");\n      case "string":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, "EnumStringBody");\n      case "symbol":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, "EnumSymbolBody");\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, "EnumStringBody");\n          };\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, "EnumStringBody");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, "EnumBooleanBody");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, "EnumNumberBody");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, "EnumDeclaration");\n  }\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n    return false;\n  }\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === "TypeCastExpression" ? node.expression : node;\n  }\n};\nconst entities = {\n  __proto__: null,\n  quot: "\\u0022",\n  amp: "&",\n  apos: "\\u0027",\n  lt: "<",\n  gt: ">",\n  nbsp: "\\u00A0",\n  iexcl: "\\u00A1",\n  cent: "\\u00A2",\n  pound: "\\u00A3",\n  curren: "\\u00A4",\n  yen: "\\u00A5",\n  brvbar: "\\u00A6",\n  sect: "\\u00A7",\n  uml: "\\u00A8",\n  copy: "\\u00A9",\n  ordf: "\\u00AA",\n  laquo: "\\u00AB",\n  not: "\\u00AC",\n  shy: "\\u00AD",\n  reg: "\\u00AE",\n  macr: "\\u00AF",\n  deg: "\\u00B0",\n  plusmn: "\\u00B1",\n  sup2: "\\u00B2",\n  sup3: "\\u00B3",\n  acute: "\\u00B4",\n  micro: "\\u00B5",\n  para: "\\u00B6",\n  middot: "\\u00B7",\n  cedil: "\\u00B8",\n  sup1: "\\u00B9",\n  ordm: "\\u00BA",\n  raquo: "\\u00BB",\n  frac14: "\\u00BC",\n  frac12: "\\u00BD",\n  frac34: "\\u00BE",\n  iquest: "\\u00BF",\n  Agrave: "\\u00C0",\n  Aacute: "\\u00C1",\n  Acirc: "\\u00C2",\n  Atilde: "\\u00C3",\n  Auml: "\\u00C4",\n  Aring: "\\u00C5",\n  AElig: "\\u00C6",\n  Ccedil: "\\u00C7",\n  Egrave: "\\u00C8",\n  Eacute: "\\u00C9",\n  Ecirc: "\\u00CA",\n  Euml: "\\u00CB",\n  Igrave: "\\u00CC",\n  Iacute: "\\u00CD",\n  Icirc: "\\u00CE",\n  Iuml: "\\u00CF",\n  ETH: "\\u00D0",\n  Ntilde: "\\u00D1",\n  Ograve: "\\u00D2",\n  Oacute: "\\u00D3",\n  Ocirc: "\\u00D4",\n  Otilde: "\\u00D5",\n  Ouml: "\\u00D6",\n  times: "\\u00D7",\n  Oslash: "\\u00D8",\n  Ugrave: "\\u00D9",\n  Uacute: "\\u00DA",\n  Ucirc: "\\u00DB",\n  Uuml: "\\u00DC",\n  Yacute: "\\u00DD",\n  THORN: "\\u00DE",\n  szlig: "\\u00DF",\n  agrave: "\\u00E0",\n  aacute: "\\u00E1",\n  acirc: "\\u00E2",\n  atilde: "\\u00E3",\n  auml: "\\u00E4",\n  aring: "\\u00E5",\n  aelig: "\\u00E6",\n  ccedil: "\\u00E7",\n  egrave: "\\u00E8",\n  eacute: "\\u00E9",\n  ecirc: "\\u00EA",\n  euml: "\\u00EB",\n  igrave: "\\u00EC",\n  iacute: "\\u00ED",\n  icirc: "\\u00EE",\n  iuml: "\\u00EF",\n  eth: "\\u00F0",\n  ntilde: "\\u00F1",\n  ograve: "\\u00F2",\n  oacute: "\\u00F3",\n  ocirc: "\\u00F4",\n  otilde: "\\u00F5",\n  ouml: "\\u00F6",\n  divide: "\\u00F7",\n  oslash: "\\u00F8",\n  ugrave: "\\u00F9",\n  uacute: "\\u00FA",\n  ucirc: "\\u00FB",\n  uuml: "\\u00FC",\n  yacute: "\\u00FD",\n  thorn: "\\u00FE",\n  yuml: "\\u00FF",\n  OElig: "\\u0152",\n  oelig: "\\u0153",\n  Scaron: "\\u0160",\n  scaron: "\\u0161",\n  Yuml: "\\u0178",\n  fnof: "\\u0192",\n  circ: "\\u02C6",\n  tilde: "\\u02DC",\n  Alpha: "\\u0391",\n  Beta: "\\u0392",\n  Gamma: "\\u0393",\n  Delta: "\\u0394",\n  Epsilon: "\\u0395",\n  Zeta: "\\u0396",\n  Eta: "\\u0397",\n  Theta: "\\u0398",\n  Iota: "\\u0399",\n  Kappa: "\\u039A",\n  Lambda: "\\u039B",\n  Mu: "\\u039C",\n  Nu: "\\u039D",\n  Xi: "\\u039E",\n  Omicron: "\\u039F",\n  Pi: "\\u03A0",\n  Rho: "\\u03A1",\n  Sigma: "\\u03A3",\n  Tau: "\\u03A4",\n  Upsilon: "\\u03A5",\n  Phi: "\\u03A6",\n  Chi: "\\u03A7",\n  Psi: "\\u03A8",\n  Omega: "\\u03A9",\n  alpha: "\\u03B1",\n  beta: "\\u03B2",\n  gamma: "\\u03B3",\n  delta: "\\u03B4",\n  epsilon: "\\u03B5",\n  zeta: "\\u03B6",\n  eta: "\\u03B7",\n  theta: "\\u03B8",\n  iota: "\\u03B9",\n  kappa: "\\u03BA",\n  lambda: "\\u03BB",\n  mu: "\\u03BC",\n  nu: "\\u03BD",\n  xi: "\\u03BE",\n  omicron: "\\u03BF",\n  pi: "\\u03C0",\n  rho: "\\u03C1",\n  sigmaf: "\\u03C2",\n  sigma: "\\u03C3",\n  tau: "\\u03C4",\n  upsilon: "\\u03C5",\n  phi: "\\u03C6",\n  chi: "\\u03C7",\n  psi: "\\u03C8",\n  omega: "\\u03C9",\n  thetasym: "\\u03D1",\n  upsih: "\\u03D2",\n  piv: "\\u03D6",\n  ensp: "\\u2002",\n  emsp: "\\u2003",\n  thinsp: "\\u2009",\n  zwnj: "\\u200C",\n  zwj: "\\u200D",\n  lrm: "\\u200E",\n  rlm: "\\u200F",\n  ndash: "\\u2013",\n  mdash: "\\u2014",\n  lsquo: "\\u2018",\n  rsquo: "\\u2019",\n  sbquo: "\\u201A",\n  ldquo: "\\u201C",\n  rdquo: "\\u201D",\n  bdquo: "\\u201E",\n  dagger: "\\u2020",\n  Dagger: "\\u2021",\n  bull: "\\u2022",\n  hellip: "\\u2026",\n  permil: "\\u2030",\n  prime: "\\u2032",\n  Prime: "\\u2033",\n  lsaquo: "\\u2039",\n  rsaquo: "\\u203A",\n  oline: "\\u203E",\n  frasl: "\\u2044",\n  euro: "\\u20AC",\n  image: "\\u2111",\n  weierp: "\\u2118",\n  real: "\\u211C",\n  trade: "\\u2122",\n  alefsym: "\\u2135",\n  larr: "\\u2190",\n  uarr: "\\u2191",\n  rarr: "\\u2192",\n  darr: "\\u2193",\n  harr: "\\u2194",\n  crarr: "\\u21B5",\n  lArr: "\\u21D0",\n  uArr: "\\u21D1",\n  rArr: "\\u21D2",\n  dArr: "\\u21D3",\n  hArr: "\\u21D4",\n  forall: "\\u2200",\n  part: "\\u2202",\n  exist: "\\u2203",\n  empty: "\\u2205",\n  nabla: "\\u2207",\n  isin: "\\u2208",\n  notin: "\\u2209",\n  ni: "\\u220B",\n  prod: "\\u220F",\n  sum: "\\u2211",\n  minus: "\\u2212",\n  lowast: "\\u2217",\n  radic: "\\u221A",\n  prop: "\\u221D",\n  infin: "\\u221E",\n  ang: "\\u2220",\n  and: "\\u2227",\n  or: "\\u2228",\n  cap: "\\u2229",\n  cup: "\\u222A",\n  int: "\\u222B",\n  there4: "\\u2234",\n  sim: "\\u223C",\n  cong: "\\u2245",\n  asymp: "\\u2248",\n  ne: "\\u2260",\n  equiv: "\\u2261",\n  le: "\\u2264",\n  ge: "\\u2265",\n  sub: "\\u2282",\n  sup: "\\u2283",\n  nsub: "\\u2284",\n  sube: "\\u2286",\n  supe: "\\u2287",\n  oplus: "\\u2295",\n  otimes: "\\u2297",\n  perp: "\\u22A5",\n  sdot: "\\u22C5",\n  lceil: "\\u2308",\n  rceil: "\\u2309",\n  lfloor: "\\u230A",\n  rfloor: "\\u230B",\n  lang: "\\u2329",\n  rang: "\\u232A",\n  loz: "\\u25CA",\n  spades: "\\u2660",\n  clubs: "\\u2663",\n  hearts: "\\u2665",\n  diams: "\\u2666"\n};\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",\n  MissingClosingTagElement: ({\n    openingTagName\n  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",\n  UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity\n  }) => `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{\'${unexpected}\'}\\`?`,\n  UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",\n  UnterminatedJsxContent: "Unterminated JSX contents.",\n  UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"\n});\nfunction isFragment(object) {\n  return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;\n}\nfunction getQualifiedJSXName(object) {\n  if (object.type === "JSXIdentifier") {\n    return object.name;\n  }\n  if (object.type === "JSXNamespacedName") {\n    return object.namespace.name + ":" + object.name.name;\n  }\n  if (object.type === "JSXMemberExpression") {\n    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);\n  }\n  throw new Error("Node had unexpected type: " + object.type);\n}\nvar jsx = superClass => class JSXParserMixin extends superClass {\n  jsxReadToken() {\n    let out = "";\n    let chunkStart = this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              this.finishToken(143);\n            } else {\n              super.getTokenFromCode(ch);\n            }\n            return;\n          }\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(142, out);\n          return;\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n      }\n    }\n  }\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? "\\n" : "\\r\\n";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n  jsxReadString(quote) {\n    let out = "";\n    let chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(134, out);\n  }\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n      const codePoint = this.readInt(radix, undefined, false, "bail");\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) === 59)) {\n        ++this.state.pos;\n      }\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n    this.state.pos = startPos;\n    return "&";\n  }\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n    this.finishToken(141, this.input.slice(start, this.state.pos));\n  }\n  jsxParseIdentifier() {\n    const node = this.startNode();\n    if (this.match(141)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    return this.finishNode(node, "JSXIdentifier");\n  }\n  jsxParseNamespacedName() {\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, "JSXNamespacedName");\n  }\n  jsxParseElementName() {\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n    if (node.type === "JSXNamespacedName") {\n      return node;\n    }\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, "JSXMemberExpression");\n    }\n    return node;\n  }\n  jsxParseAttributeValue() {\n    let node;\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n        if (node.expression.type === "JSXEmptyExpression") {\n          this.raise(JsxErrors.AttributeIsEmpty, node);\n        }\n        return node;\n      case 143:\n      case 134:\n        return this.parseExprAtom();\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n    }\n  }\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);\n  }\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_expr);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, "JSXSpreadChild");\n  }\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n    this.setContext(previousContext);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, "JSXExpressionContainer");\n  }\n  jsxParseAttribute() {\n    const node = this.startNode();\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(8);\n      return this.finishNode(node, "JSXSpreadAttribute");\n    }\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, "JSXAttribute");\n  }\n  jsxParseOpeningElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(144)) {\n      return this.finishNode(node, "JSXOpeningFragment");\n    }\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n    while (!this.match(56) && !this.match(144)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(144);\n    return this.finishNode(node, "JSXOpeningElement");\n  }\n  jsxParseClosingElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(144)) {\n      return this.finishNode(node, "JSXClosingFragment");\n    }\n    node.name = this.jsxParseElementName();\n    this.expect(144);\n    return this.finishNode(node, "JSXClosingElement");\n  }\n  jsxParseElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startLoc);\n    let closingElement = null;\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 143:\n            startLoc = this.state.startLoc;\n            this.next();\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startLoc);\n              break contents;\n            }\n            children.push(this.jsxParseElementAt(startLoc));\n            break;\n          case 142:\n            children.push(this.parseLiteral(this.state.value, "JSXText"));\n            break;\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n    node.children = children;\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);\n    }\n    return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");\n  }\n  jsxParseElement() {\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startLoc);\n  }\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(143)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(143);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n  getTokenFromCode(code) {\n    const context = this.curContext();\n    if (context === types.j_expr) {\n      this.jsxReadToken();\n      return;\n    }\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        this.jsxReadWord();\n        return;\n      }\n      if (code === 62) {\n        ++this.state.pos;\n        this.finishToken(144);\n        return;\n      }\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        this.jsxReadString(code);\n        return;\n      }\n    }\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      this.finishToken(143);\n      return;\n    }\n    super.getTokenFromCode(code);\n  }\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n    if (type === 56 && prevType === 143) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 143) {\n      context.push(types.j_oTag);\n    } else if (type === 144) {\n      const out = context[context.length - 1];\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n};\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.tsNames = new Map();\n  }\n}\nclass TypeScriptScopeHandler extends ScopeHandler {\n  constructor(...args) {\n    super(...args);\n    this.importsStack = [];\n  }\n  createScope(flags) {\n    this.importsStack.push(new Set());\n    return new TypeScriptScope(flags);\n  }\n  enter(flags) {\n    if (flags === 256) {\n      this.importsStack.push(new Set());\n    }\n    super.enter(flags);\n  }\n  exit() {\n    const flags = super.exit();\n    if (flags === 256) {\n      this.importsStack.pop();\n    }\n    return flags;\n  }\n  hasImport(name, allowShadow) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n  declareName(name, bindingType, loc) {\n    if (bindingType & 4096) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n    if (bindingType & 1024) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | 16);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n    if (bindingType & 2) {\n      if (!(bindingType & 1)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | 1;\n    }\n    if (bindingType & 256) {\n      type = type | 2;\n    }\n    if (bindingType & 512) {\n      type = type | 4;\n    }\n    if (bindingType & 128) {\n      type = type | 8;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    const type = scope.tsNames.get(name);\n    if ((type & 2) > 0) {\n      if (bindingType & 256) {\n        const isConst = !!(bindingType & 512);\n        const wasConst = (type & 4) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & 128 && (type & 8) > 0) {\n      if (scope.names.get(name) & 2) {\n        return !!(bindingType & 1);\n      } else {\n        return false;\n      }\n    }\n    if (bindingType & 2 && (type & 1) > 0) {\n      return true;\n    }\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    if (this.hasImport(name)) return;\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if ((type & 1) > 0 || (type & 16) > 0) {\n        return;\n      }\n    }\n    super.checkLocalExport(id);\n  }\n}\nconst unwrapParenthesizedExpression = node => {\n  return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;\n};\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n    let parenthesized = undefined;\n    if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        if (parenthesized.type === "Identifier") {\n          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node);\n        } else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n    switch (node.type) {\n      case "Identifier":\n      case "ObjectPattern":\n      case "ArrayPattern":\n      case "AssignmentPattern":\n      case "RestElement":\n        break;\n      case "ObjectExpression":\n        node.type = "ObjectPattern";\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n          if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n      case "ObjectProperty":\n        {\n          const {\n            key,\n            value\n          } = node;\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n          this.toAssignable(value, isLHS);\n          break;\n        }\n      case "SpreadElement":\n        {\n          throw new Error("Internal @babel/parser error (this is a bug, please report it)." + " SpreadElement should be converted by .toAssignable\'s caller.");\n        }\n      case "ArrayExpression":\n        node.type = "ArrayPattern";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n      case "AssignmentExpression":\n        if (node.operator !== "=") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n        node.type = "AssignmentPattern";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n      case "ParenthesizedExpression":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === "ObjectMethod") {\n      this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);\n    } else if (prop.type === "SpreadElement") {\n      prop.type = "RestElement";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, false);\n      this.toAssignable(arg, isLHS);\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    const end = exprList.length - 1;\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n      if (elt.type === "SpreadElement") {\n        elt.type = "RestElement";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n      if (elt.type === "RestElement") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case "Identifier":\n      case "ObjectPattern":\n      case "ArrayPattern":\n      case "AssignmentPattern":\n      case "RestElement":\n        return true;\n      case "ObjectExpression":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);\n          });\n        }\n      case "ObjectProperty":\n        return this.isAssignable(node.value);\n      case "SpreadElement":\n        return this.isAssignable(node.argument);\n      case "ArrayExpression":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n      case "AssignmentExpression":\n        return node.operator === "=";\n      case "ParenthesizedExpression":\n        return this.isAssignable(node.expression);\n      case "MemberExpression":\n      case "OptionalMemberExpression":\n        return !isBinding;\n      default:\n        return false;\n    }\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n  parseSpread(refExpressionErrors) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n    return this.finishNode(node, "SpreadElement");\n  }\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, "RestElement");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, 1);\n          return this.finishNode(node, "ArrayPattern");\n        }\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n    return this.parseIdentifier();\n  }\n  parseBindingList(close, closeCharCode, flags) {\n    const allowEmpty = flags & 1;\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        let rest = this.parseRestBinding();\n        if (this.hasPlugin("flow") || flags & 2) {\n          rest = this.parseFunctionParamType(rest);\n        }\n        elts.push(rest);\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(26) && this.hasPlugin("decorators")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, "RestElement");\n  }\n  parseBindingProperty() {\n    const {\n      type,\n      startLoc\n    } = this.state;\n    if (type === 21) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n    const prop = this.startNode();\n    if (type === 139) {\n      this.expectPlugin("destructuringPrivate", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(prop, startLoc, false, false, true, false);\n  }\n  parseAssignableListItem(flags, decorators) {\n    const left = this.parseMaybeDefault();\n    if (this.hasPlugin("flow") || flags & 2) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  parseFunctionParamType(param) {\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    var _startLoc, _left;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, "AssignmentPattern");\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    switch (type) {\n      case "AssignmentPattern":\n        return "left";\n      case "RestElement":\n        return "argument";\n      case "ObjectProperty":\n        return "value";\n      case "ParenthesizedExpression":\n        return "expression";\n      case "ArrayPattern":\n        return "elements";\n      case "ObjectPattern":\n        return "properties";\n    }\n    return false;\n  }\n  isOptionalMemberExpression(expression) {\n    return expression.type === "OptionalMemberExpression";\n  }\n  checkLVal(expression, ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {\n    var _expression$extra;\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n    const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);\n    if (isOptionalMemberExpression || type === "MemberExpression") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin("optionalChainingAssign", expression.loc.start);\n        if (ancestor.type !== "AssignmentExpression") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor\n          });\n        }\n      }\n      if (binding !== 64) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n    if (type === "Identifier") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n      const {\n        name\n      } = expression;\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n      return;\n    }\n    const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, expression, {\n        ancestor\n      });\n      return;\n    }\n    let key, isParenthesizedExpression;\n    if (typeof validity === "string") {\n      key = validity;\n      isParenthesizedExpression = type === "ParenthesizedExpression";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n    const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {\n      type\n    } : ancestor;\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(child, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);\n        }\n      }\n    } else if (val) {\n      this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);\n    }\n  }\n  checkIdentifier(at, bindingType, strictModeChanged = false) {\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === 64) {\n        this.raise(Errors.StrictEvalArguments, at, {\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name\n        });\n      }\n    }\n    if (bindingType & 8192 && at.name === "let") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n    if (!(bindingType & 64)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case "ParenthesizedExpression":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case "Identifier":\n      case "MemberExpression":\n        break;\n      case "ArrayExpression":\n      case "ObjectExpression":\n        if (allowPattern) break;\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);\n    return true;\n  }\n}\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\nfunction assert(x) {\n  if (!x) {\n    throw new Error("Assert fail");\n  }\n}\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({\n    methodName\n  }) => `Method \'${methodName}\' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName\n  }) => `Property \'${propertyName}\' cannot have an initializer because it is marked abstract.`,\n  AccessorCannotBeOptional: "An \'accessor\' property cannot be declared optional.",\n  AccessorCannotDeclareThisParameter: "\'get\' and \'set\' accessors cannot declare \'this\' parameters.",\n  AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.",\n  ClassMethodHasDeclare: "Class methods cannot have the \'declare\' modifier.",\n  ClassMethodHasReadonly: "Class methods cannot have the \'readonly\' modifier.",\n  ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A \'const\' initializer in an ambient context must be a string or numeric literal or literal enum reference.",\n  ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",\n  DeclareAccessor: ({\n    kind\n  }) => `\'declare\' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",\n  DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",\n  DuplicateAccessibilityModifier: ({\n    modifier\n  }) => `Accessibility modifier already seen.`,\n  DuplicateModifier: ({\n    modifier\n  }) => `Duplicate modifier: \'${modifier}\'.`,\n  EmptyHeritageClauseType: ({\n    token\n  }) => `\'${token}\' list cannot be empty.`,\n  EmptyTypeArguments: "Type argument list cannot be empty.",\n  EmptyTypeParameters: "Type parameter list cannot be empty.",\n  ExpectedAmbientAfterExportDeclare: "\'export declare\' must be followed by an ambient declaration.",\n  ImportAliasHasImportType: "An import alias can not use \'import type\'.",\n  ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",\n  IncompatibleModifiers: ({\n    modifiers\n  }) => `\'${modifiers[0]}\' modifier cannot be used with \'${modifiers[1]}\' modifier.`,\n  IndexSignatureHasAbstract: "Index signatures cannot have the \'abstract\' modifier.",\n  IndexSignatureHasAccessibility: ({\n    modifier\n  }) => `Index signatures cannot have an accessibility modifier (\'${modifier}\').`,\n  IndexSignatureHasDeclare: "Index signatures cannot have the \'declare\' modifier.",\n  IndexSignatureHasOverride: "\'override\' modifier cannot appear on an index signature.",\n  IndexSignatureHasStatic: "Index signatures cannot have the \'static\' modifier.",\n  InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",\n  InvalidModifierOnTypeMember: ({\n    modifier\n  }) => `\'${modifier}\' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({\n    modifier\n  }) => `\'${modifier}\' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier\n  }) => `\'${modifier}\' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers\n  }) => `\'${orderedModifiers[0]}\' modifier must precede \'${orderedModifiers[1]}\' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. " + "You can either wrap the instantiation expression in parentheses, or delete the type arguments.",\n  InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",\n  MissingInterfaceName: "\'interface\' declarations must be followed by an identifier.",\n  NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",\n  NonClassMethodPropertyHasAbstractModifer: "\'abstract\' modifier can only appear on a class, method, or property declaration.",\n  OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",\n  OverrideNotInSubClass: "This member cannot have an \'override\' modifier because its containing class does not extend another class.",\n  PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",\n  PrivateElementHasAbstract: "Private elements cannot have the \'abstract\' modifier.",\n  PrivateElementHasAccessibility: ({\n    modifier\n  }) => `Private elements cannot have an accessibility modifier (\'${modifier}\').`,\n  ReadonlyForMethodSignature: "\'readonly\' modifier can only appear on a property declaration or index signature.",\n  ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",\n  ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",\n  SetAccessorCannotHaveOptionalParameter: "A \'set\' accessor cannot have an optional parameter.",\n  SetAccessorCannotHaveRestParameter: "A \'set\' accessor cannot have rest parameter.",\n  SetAccessorCannotHaveReturnType: "A \'set\' accessor cannot have a return type annotation.",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName\n  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",\n  TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",\n  TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",\n  TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",\n  TypeModifierIsUsedInTypeExports: "The \'type\' modifier cannot be used on a named export when \'export type\' is used on its export statement.",\n  TypeModifierIsUsedInTypeImports: "The \'type\' modifier cannot be used on a named import when \'import type\' is used on its import statement.",\n  UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",\n  UnexpectedReadonly: "\'readonly\' type modifier is only permitted on array and tuple literal types.",\n  UnexpectedTypeAnnotation: "Did not expect a type annotation here.",\n  UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",\n  UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",\n  UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",\n  UnsupportedSignatureParameterKind: ({\n    type\n  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`\n});\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case "any":\n      return "TSAnyKeyword";\n    case "boolean":\n      return "TSBooleanKeyword";\n    case "bigint":\n      return "TSBigIntKeyword";\n    case "never":\n      return "TSNeverKeyword";\n    case "number":\n      return "TSNumberKeyword";\n    case "object":\n      return "TSObjectKeyword";\n    case "string":\n      return "TSStringKeyword";\n    case "symbol":\n      return "TSSymbolKeyword";\n    case "undefined":\n      return "TSUndefinedKeyword";\n    case "unknown":\n      return "TSUnknownKeyword";\n    default:\n      return undefined;\n  }\n}\nfunction tsIsAccessModifier(modifier) {\n  return modifier === "private" || modifier === "public" || modifier === "protected";\n}\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === "in" || modifier === "out";\n}\nvar typescript = superClass => class TypeScriptParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: ["in", "out"],\n      disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n    this.tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: ["const"],\n      disallowedModifiers: ["in", "out"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n    this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: ["in", "out", "const"],\n      disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n  }\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n  tsTokenCanFollowModifier() {\n    return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();\n  }\n  tsNextTokenOnSameLineAndCanFollowModifier() {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      return false;\n    }\n    return this.tsTokenCanFollowModifier();\n  }\n  tsNextTokenCanFollowModifier() {\n    if (this.match(106)) {\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n    return this.tsNextTokenOnSameLineAndCanFollowModifier();\n  }\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {\n      return undefined;\n    }\n    const modifier = this.state.value;\n    if (allowedModifiers.includes(modifier)) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n    return undefined;\n  }\n  tsParseModifiers({\n    allowedModifiers,\n    disallowedModifiers,\n    stopOnStartOfClassStaticBlock,\n    errorTemplate = TSErrors.InvalidModifierOnTypeMember\n  }, modified) {\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, loc, {\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, loc, {\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, "override");\n          enforceOrder(startLoc, modifier, modifier, "static");\n          enforceOrder(startLoc, modifier, modifier, "readonly");\n          modified.accessibility = modifier;\n        }\n      } else if (tsIsVarianceAnnotations(modifier)) {\n        if (modified[modifier]) {\n          this.raise(TSErrors.DuplicateModifier, startLoc, {\n            modifier\n          });\n        }\n        modified[modifier] = true;\n        enforceOrder(startLoc, modifier, "in", "out");\n      } else {\n        if (hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, startLoc, {\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, "static", "readonly");\n          enforceOrder(startLoc, modifier, "static", "override");\n          enforceOrder(startLoc, modifier, "override", "readonly");\n          enforceOrder(startLoc, modifier, "abstract", "override");\n          incompatible(startLoc, modifier, "declare", "override");\n          incompatible(startLoc, modifier, "static", "abstract");\n        }\n        modified[modifier] = true;\n      }\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, startLoc, {\n          modifier\n        });\n      }\n    }\n  }\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case "EnumMembers":\n      case "TypeMembers":\n        return this.match(8);\n      case "HeritageClauseElement":\n        return this.match(5);\n      case "TupleElementTypes":\n        return this.match(3);\n      case "TypeParametersOrArguments":\n        return this.match(48);\n    }\n  }\n  tsParseList(kind, parseElement) {\n    const result = [];\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n    return result;\n  }\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      trailingCommaPos = -1;\n      const element = parseElement();\n      if (element == null) {\n        return undefined;\n      }\n      result.push(element);\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStartLoc.index;\n        continue;\n      }\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      if (expectSuccess) {\n        this.expect(12);\n      }\n      return undefined;\n    }\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n    return result;\n  }\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n    return result;\n  }\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n    if (!this.match(134)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n    }\n    node.argument = super.parseExprAtom();\n    if (this.eat(12) && !this.match(11)) {\n      node.options = super.parseMaybeAssignAllowIn();\n      this.eat(12);\n    } else {\n      node.options = null;\n    }\n    this.expect(11);\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, "TSImportType");\n  }\n  tsParseEntityName(allowReservedWords = true) {\n    let entity = this.parseIdentifier(allowReservedWords);\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, "TSQualifiedName");\n    }\n    return entity;\n  }\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, "TSTypeReference");\n  }\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, "TSTypePredicate");\n  }\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, "TSThisType");\n  }\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, "TSTypeQuery");\n  }\n  tsParseTypeParameter(parseModifiers) {\n    const node = this.startNode();\n    parseModifiers(node);\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, "TSTypeParameter");\n  }\n  tsTryParseTypeParameters(parseModifiers) {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters(parseModifiers);\n    }\n  }\n  tsParseTypeParameters(parseModifiers) {\n    const node = this.startNode();\n    if (this.match(47) || this.match(143)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, node);\n    }\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, "trailingComma", refTrailingCommaPos.value);\n    }\n    return this.finishNode(node, "TSTypeParameterDeclaration");\n  }\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = "parameters";\n    const returnTypeKey = "typeAnnotation";\n    signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n  tsParseBindingListForSignature() {\n    const list = super.parseBindingList(11, 41, 2);\n    for (const pattern of list) {\n      const {\n        type\n      } = pattern;\n      if (type === "AssignmentPattern" || type === "TSParameterProperty") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n          type\n        });\n      }\n    }\n    return list;\n  }\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n    return false;\n  }\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return;\n    }\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, "TSIndexSignature");\n  }\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, node);\n      }\n      const method = nodeAny;\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition());\n      }\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = "parameters";\n      const returnTypeKey = "typeAnnotation";\n      if (method.kind === "get") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, this.state.curPosition());\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());\n          }\n        }\n      } else if (method.kind === "set") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, this.state.curPosition());\n        } else {\n          const firstParameter = method[paramsKey][0];\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition());\n          }\n          if (firstParameter.type === "Identifier" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition());\n          }\n          if (firstParameter.type === "RestElement") {\n            this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());\n          }\n        }\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);\n        }\n      } else {\n        method.kind = "method";\n      }\n      return this.finishNode(method, "TSMethodSignature");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, "TSPropertySignature");\n    }\n  }\n  tsParseTypeMember() {\n    const node = this.startNode();\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);\n    }\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);\n      } else {\n        node.key = this.createIdentifier(id, "new");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n    this.tsParseModifiers({\n      allowedModifiers: ["readonly"],\n      disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]\n    }, node);\n    const idx = this.tsTryParseIndexSignature(node);\n    if (idx) {\n      return idx;\n    }\n    super.parsePropertyName(node);\n    if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      super.parsePropertyName(node);\n    }\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, "TSTypeLiteral");\n  }\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n  tsIsStartOfMappedType() {\n    this.next();\n    if (this.eat(53)) {\n      return this.isContextual(122);\n    }\n    if (this.isContextual(122)) {\n      this.next();\n    }\n    if (!this.match(0)) {\n      return false;\n    }\n    this.next();\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n    this.next();\n    return this.match(58);\n  }\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(122);\n    } else if (this.eatContextual(122)) {\n      node.readonly = true;\n    }\n    this.expect(0);\n    {\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsExpectThenParseType(58);\n      node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");\n    }\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, "TSMappedType");\n  }\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      const {\n        type\n      } = elementNode;\n      if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n      }\n      seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");\n    });\n    return this.finishNode(node, "TSTupleType");\n  }\n  tsParseTupleElementType() {\n    const {\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let labeled;\n    let label;\n    let optional;\n    let type;\n    const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n    const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n    if (chAfterWord === 58) {\n      labeled = true;\n      optional = false;\n      label = this.parseIdentifier(true);\n      this.expect(14);\n      type = this.tsParseType();\n    } else if (chAfterWord === 63) {\n      optional = true;\n      const startLoc = this.state.startLoc;\n      const wordName = this.state.value;\n      const typeOrLabel = this.tsParseNonArrayType();\n      if (this.lookaheadCharCode() === 58) {\n        labeled = true;\n        label = this.createIdentifier(this.startNodeAt(startLoc), wordName);\n        this.expect(17);\n        this.expect(14);\n        type = this.tsParseType();\n      } else {\n        labeled = false;\n        type = typeOrLabel;\n        this.expect(17);\n      }\n    } else {\n      type = this.tsParseType();\n      optional = this.eat(17);\n      labeled = this.eat(14);\n    }\n    if (labeled) {\n      let labeledNode;\n      if (label) {\n        labeledNode = this.startNodeAtNode(label);\n        labeledNode.optional = optional;\n        labeledNode.label = label;\n        labeledNode.elementType = type;\n        if (this.eat(17)) {\n          labeledNode.optional = true;\n          this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);\n        }\n      } else {\n        labeledNode = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n        this.raise(TSErrors.InvalidTupleMemberLabel, type);\n        labeledNode.label = type;\n        labeledNode.elementType = this.tsParseType();\n      }\n      type = this.finishNode(labeledNode, "TSNamedTupleMember");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, "TSOptionalType");\n    }\n    if (rest) {\n      const restNode = this.startNodeAt(startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, "TSRestType");\n    }\n    return type;\n  }\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, "TSParenthesizedType");\n  }\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n    if (type === "TSConstructorType") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));\n    return this.finishNode(node, type);\n  }\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n    switch (this.state.type) {\n      case 135:\n      case 136:\n      case 134:\n      case 85:\n      case 86:\n        node.literal = super.parseExprAtom();\n        break;\n      default:\n        this.unexpected();\n    }\n    return this.finishNode(node, "TSLiteralType");\n  }\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = super.parseTemplate(false);\n    return this.finishNode(node, "TSLiteralType");\n  }\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 134:\n      case 135:\n      case 136:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n      case 53:\n        if (this.state.value === "-") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n          if (nextToken.type !== 135 && nextToken.type !== 136) {\n            this.unexpected();\n          }\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, "TSLiteralType");\n        }\n        break;\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n      case 87:\n        return this.tsParseTypeQuery();\n      case 83:\n        return this.tsParseImportType();\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n      case 0:\n        return this.tsParseTupleType();\n      case 10:\n        return this.tsParseParenthesizedType();\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n      default:\n        {\n          const {\n            type\n          } = this.state;\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n    this.unexpected();\n  }\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, "TSArrayType");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, "TSIndexedAccessType");\n      }\n    }\n    return type;\n  }\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n    if (operator === "readonly") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n    return this.finishNode(node, "TSTypeOperator");\n  }\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case "TSTupleType":\n      case "TSArrayType":\n        return;\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, node);\n    }\n  }\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(115);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());\n    node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");\n    return this.finishNode(node, "TSInferType");\n  }\n  tsParseConstraintForInferType() {\n    if (this.eat(81)) {\n      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());\n      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n        return constraint;\n      }\n    }\n  }\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());\n  }\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        super.parseBindingList(3, 93, 1);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n    return false;\n  }\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n      if (this.match(11)) {\n        this.next();\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n        if (thisTypePredicate.type === "TSThisType") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, "TSTypePredicate");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, "TSTypeAnnotation");\n      }\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, "TSTypePredicate");\n        return this.finishNode(t, "TSTypeAnnotation");\n      }\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, "TSTypePredicate");\n      return this.finishNode(t, "TSTypeAnnotation");\n    });\n  }\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n  }\n  tsTryParseTypeAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeAnnotation();\n    }\n  }\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n    if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 109) {\n      return false;\n    }\n    const containsEsc = this.state.containsEsc;\n    this.next();\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {\n        reservedWord: "asserts"\n      });\n    }\n    return true;\n  }\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, "TSTypeAnnotation");\n  }\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());\n    this.expect(17);\n    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    this.expect(14);\n    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    return this.finishNode(node, "TSConditionalType");\n  }\n  isAbstractConstructorSignature() {\n    return this.isContextual(124) && this.lookahead().type === 77;\n  }\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType("TSFunctionType");\n    }\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType("TSConstructorType");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType("TSConstructorType", true);\n    }\n    return this.tsParseUnionTypeOrHigher();\n  }\n  tsParseTypeAssertion() {\n    if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {\n      this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n    }\n    const node = this.startNode();\n    node.typeAnnotation = this.tsInType(() => {\n      this.next();\n      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();\n    });\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, "TSTypeAssertion");\n  }\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {\n      const node = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(47)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, "TSExpressionWithTypeArguments");\n    });\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n        token\n      });\n    }\n    return delimitedList;\n  }\n  tsParseInterfaceDeclaration(node, properties = {}) {\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(129);\n    if (properties.declare) node.declare = true;\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, 130);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n    }\n    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause("extends");\n    }\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, "TSInterfaceBody");\n    return this.finishNode(node, "TSInterfaceDeclaration");\n  }\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, 2);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);\n      this.expect(29);\n      if (this.isContextual(114) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, "TSIntrinsicKeyword");\n      }\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, "TSTypeAliasDeclaration");\n  }\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n  tsInDisallowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsInAllowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = false;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsEatThenParseType(token) {\n    if (this.match(token)) {\n      return this.tsNextThenParseType();\n    }\n  }\n  tsExpectThenParseType(token) {\n    return this.tsInType(() => {\n      this.expect(token);\n      return this.tsParseType();\n    });\n  }\n  tsNextThenParseType() {\n    return this.tsInType(() => {\n      this.next();\n      return this.tsParseType();\n    });\n  }\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);\n    if (this.eat(29)) {\n      node.initializer = super.parseMaybeAssignAllowIn();\n    }\n    return this.finishNode(node, "TSEnumMember");\n  }\n  tsParseEnumDeclaration(node, properties = {}) {\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(126);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? 8971 : 8459);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, "TSEnumDeclaration");\n  }\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(0);\n    this.expect(5);\n    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, "TSModuleBlock");\n  }\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n    if (!nested) {\n      this.checkIdentifier(node.id, 1024);\n    }\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(256);\n      this.prodParam.enter(0);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n    return this.finishNode(node, "TSModuleDeclaration");\n  }\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(112)) {\n      node.kind = "global";\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(134)) {\n      node.kind = "module";\n      node.id = super.parseStringLiteral(this.state.value);\n    } else {\n      this.unexpected();\n    }\n    if (this.match(5)) {\n      this.scope.enter(256);\n      this.prodParam.enter(0);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n    return this.finishNode(node, "TSModuleDeclaration");\n  }\n  tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {\n    node.isExport = isExport || false;\n    node.id = maybeDefaultIdentifier || this.parseIdentifier();\n    this.checkIdentifier(node.id, 4096);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n    if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {\n      this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n    }\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, "TSImportEqualsDeclaration");\n  }\n  tsIsExternalModuleReference() {\n    return this.isContextual(119) && this.lookaheadCharCode() === 40;\n  }\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(119);\n    this.expect(10);\n    if (!this.match(134)) {\n      this.unexpected();\n    }\n    node.expression = super.parseExprAtom();\n    this.expect(11);\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, "TSExternalModuleReference");\n  }\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n    if (result !== undefined && result !== false) {\n      return result;\n    }\n    this.state = state;\n  }\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n    let startType = this.state.type;\n    let kind;\n    if (this.isContextual(100)) {\n      startType = 74;\n      kind = "let";\n    }\n    return this.tsInAmbientContext(() => {\n      switch (startType) {\n        case 68:\n          nany.declare = true;\n          return super.parseFunctionStatement(nany, false, false);\n        case 80:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n        case 126:\n          return this.tsParseEnumDeclaration(nany, {\n            declare: true\n          });\n        case 112:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        case 75:\n        case 74:\n          if (!this.match(75) || !this.isLookaheadContextual("enum")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n          this.expect(75);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true\n          });\n        case 129:\n          {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true\n            });\n            if (result) return result;\n          }\n        default:\n          if (tokenIsIdentifier(startType)) {\n            return this.tsParseDeclaration(nany, this.state.value, true, null);\n          }\n      }\n    });\n  }\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);\n  }\n  tsParseExpressionStatement(node, expr, decorators) {\n    switch (expr.name) {\n      case "declare":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n      case "global":\n        if (this.match(5)) {\n          this.scope.enter(256);\n          this.prodParam.enter(0);\n          const mod = node;\n          mod.kind = "global";\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, "TSModuleDeclaration");\n        }\n        break;\n      default:\n        return this.tsParseDeclaration(node, expr.name, false, decorators);\n    }\n  }\n  tsParseDeclaration(node, value, next, decorators) {\n    switch (value) {\n      case "abstract":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node, decorators);\n        }\n        break;\n      case "module":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(134)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            node.kind = "module";\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n        break;\n      case "namespace":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          node.kind = "namespace";\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n        break;\n      case "type":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n        break;\n    }\n  }\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n    return !this.isLineTerminator();\n  }\n  tsTryParseGenericAsyncArrowFunction(startLoc) {\n    if (!this.match(47)) return;\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startLoc);\n      node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    if (!res) return;\n    return super.parseArrowExpression(res, null, true);\n  }\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) return;\n    return this.tsParseTypeArguments();\n  }\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));\n    }));\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, node);\n    } else if (!this.state.inType && this.curContext() === types.brace) {\n      this.reScan_lt_gt();\n    }\n    this.expect(48);\n    return this.finishNode(node, "TSTypeParameterInstantiation");\n  }\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n  parseAssignableListItem(flags, decorators) {\n    const startLoc = this.state.startLoc;\n    const modified = {};\n    this.tsParseModifiers({\n      allowedModifiers: ["public", "private", "protected", "override", "readonly"]\n    }, modified);\n    const accessibility = modified.accessibility;\n    const override = modified.override;\n    const readonly = modified.readonly;\n    if (!(flags & 4) && (accessibility || readonly || override)) {\n      this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n    }\n    const left = this.parseMaybeDefault();\n    if (flags & 2) {\n      this.parseFunctionParamType(left);\n    }\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startLoc);\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n      if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n      }\n      pp.parameter = elt;\n      return this.finishNode(pp, "TSParameterProperty");\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  isSimpleParameter(node) {\n    return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n  tsDisallowOptionalPattern(node) {\n    for (const param of node.params) {\n      if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {\n        this.raise(TSErrors.PatternIsOptional, param);\n      }\n    }\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    this.tsDisallowOptionalPattern(node);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n    const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : undefined;\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      return this.finishNode(node, bodilessType);\n    }\n    if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n      if (node.declare) {\n        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n      }\n    }\n    this.tsDisallowOptionalPattern(node);\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, 1024);\n    } else {\n      super.registerFunctionStatementId(node);\n    }\n  }\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n      }\n    });\n  }\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (node.type === "ArrayExpression") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, "TSNonNullExpression");\n    }\n    let isOptionalCall = false;\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n        if (!typeArguments) return;\n        if (isOptionalCall && !this.match(10)) {\n          missingParenErrorLoc = this.state.curPosition();\n          return;\n        }\n        if (tokenIsTemplate(this.state.type)) {\n          const result = super.parseTaggedTemplateExpression(base, startLoc, state);\n          result.typeParameters = typeArguments;\n          return result;\n        }\n        if (!noCalls && this.eat(10)) {\n          const node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11);\n          this.tsCheckForInvalidTypeCasts(node.arguments);\n          node.typeParameters = typeArguments;\n          if (state.optionalChainMember) {\n            node.optional = isOptionalCall;\n          }\n          return this.finishCallExpression(node, state.optionalChainMember);\n        }\n        const tokenType = this.state.type;\n        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {\n          return;\n        }\n        const node = this.startNodeAt(startLoc);\n        node.expression = base;\n        node.typeParameters = typeArguments;\n        return this.finishNode(node, "TSInstantiationExpression");\n      });\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n      if (result) {\n        if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);\n        }\n        return result;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, state);\n  }\n  parseNewCallee(node) {\n    var _callee$extra;\n    super.parseNewCallee(node);\n    const {\n      callee\n    } = node;\n    if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n      node.typeParameters = callee.typeParameters;\n      node.callee = callee.expression;\n    }\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    let isSatisfies;\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {\n      const node = this.startNodeAt(leftStartLoc);\n      node.expression = left;\n      node.typeAnnotation = this.tsInType(() => {\n        this.next();\n        if (this.match(75)) {\n          if (isSatisfies) {\n            this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n              keyword: "const"\n            });\n          }\n          return this.tsParseTypeReference();\n        }\n        return this.tsParseType();\n      });\n      this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartLoc, minPrec);\n    }\n    return super.parseExprOp(left, leftStartLoc, minPrec);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== "value") {\n      this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);\n    }\n  }\n  checkDuplicateExports() {}\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(130)) {\n      const ch = this.lookaheadCharCode();\n      return isExport ? ch === 123 || ch === 42 : ch !== 61;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      node.exportKind = phase === "type" ? "type" : "value";\n    } else {\n      node.importKind = phase === "type" || phase === "typeof" ? phase : "value";\n    }\n  }\n  parseImport(node) {\n    if (this.match(134)) {\n      node.importKind = "value";\n      return super.parseImport(node);\n    }\n    let importNode;\n    if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {\n      node.importKind = "value";\n      return this.tsParseImportEqualsDeclaration(node);\n    } else if (this.isContextual(130)) {\n      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      if (this.lookaheadCharCode() === 61) {\n        return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);\n      } else {\n        importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);\n      }\n    } else {\n      importNode = super.parseImport(node);\n    }\n    if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n    }\n    return importNode;\n  }\n  parseExport(node, decorators) {\n    if (this.match(83)) {\n      this.next();\n      const nodeImportEquals = node;\n      let maybeDefaultIdentifier = null;\n      if (this.isContextual(130) && this.isPotentialImportPhase(false)) {\n        maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false);\n      } else {\n        nodeImportEquals.importKind = "value";\n      }\n      return this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = super.parseExpression();\n      this.semicolon();\n      this.sawUnambiguousESM = true;\n      return this.finishNode(assign, "TSExportAssignment");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(128);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, "TSNamespaceExportDeclaration");\n    } else {\n      return super.parseExport(node, decorators);\n    }\n  }\n  isAbstractClass() {\n    return this.isContextual(124) && this.lookahead().type === 80;\n  }\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      return this.parseClass(cls, true, true);\n    }\n    if (this.match(129)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n      if (kind !== "const" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {\n        this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);\n      }\n    }\n    return declaration;\n  }\n  parseStatementContent(flags, decorators) {\n    if (this.match(75) && this.isLookaheadContextual("enum")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n    if (this.isContextual(126)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n    if (this.isContextual(129)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseStatementContent(flags, decorators);\n  }\n  parseAccessModifier() {\n    return this.tsParseModifier(["public", "protected", "private"]);\n  }\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n      return !!member[modifier];\n    });\n  }\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(106) && this.lookaheadCharCode() === 123;\n  }\n  parseClassMember(classBody, member, state) {\n    const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];\n    this.tsParseModifiers({\n      allowedModifiers: modifiers,\n      disallowedModifiers: ["in", "out"],\n      stopOnStartOfClassStaticBlock: true,\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    }, member);\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());\n        }\n        super.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n    if (idx) {\n      classBody.body.push(idx);\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, member);\n      }\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n          modifier: member.accessibility\n        });\n      }\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, member);\n      }\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, member);\n      }\n      return;\n    }\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n    }\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, member);\n      }\n    }\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n    }\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n    }\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;\n    return decl || super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n    const result = this.tryParse(() => super.parseConditional(expr, startLoc));\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n      return expr;\n    }\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  parseParenItem(node, startLoc) {\n    const newNode = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      newNode.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, "TSTypeCastExpression");\n    }\n    return node;\n  }\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(125)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(125);\n    if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);\n    }\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n    if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {\n      node.exportKind = "type";\n    }\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startLoc);\n      declaration.declare = true;\n    }\n    return declaration;\n  }\n  parseClassId(node, isStatement, optionalId, bindingType) {\n    if ((!isStatement || optionalId) && this.isContextual(113)) {\n      return;\n    }\n    super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional) {\n      if (this.eat(35)) {\n        node.definite = true;\n      } else if (this.eat(17)) {\n        node.optional = true;\n      }\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);\n    }\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {\n        propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`\n      });\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, node);\n    }\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n        modifier: node.accessibility\n      });\n    }\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n  parseClassAccessorProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (node.optional) {\n      this.raise(TSErrors.AccessorCannotBeOptional, node);\n    }\n    return super.parseClassAccessorProperty(node);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n    }\n    const {\n      declare = false,\n      kind\n    } = method;\n    if (declare && (kind === "get" || kind === "set")) {\n      this.raise(TSErrors.DeclareAccessor, method, {\n        kind\n      });\n    }\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === "TSDeclareMethod") return;\n    if (node.type === "MethodDefinition" && !hasOwnProperty.call(node.value, "body")) {\n      return;\n    }\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n    if (this.eatContextual(113)) {\n      node.implements = this.tsParseHeritageClause("implements");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) prop.typeParameters = typeParameters;\n    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n  }\n  parseFunctionParams(node, isConstructor) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;\n    let state;\n    let jsx;\n    let typeCast;\n    if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n    if (!state || state === this.state) state = this.state.clone();\n    let typeParameters;\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n      typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if (!jsx) {\n      assert(!this.hasPlugin("jsx"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n    throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);\n  }\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n    if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, node);\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    if (!this.hasPlugin("jsx") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    }\n    return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n    return super.parseArrow(node);\n  }\n  parseFunctionParamType(param) {\n    if (this.eat(17)) {\n      param.optional = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case "TSTypeCastExpression":\n        return this.isAssignable(node.expression, isBinding);\n      case "TSParameterProperty":\n        return true;\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case "ParenthesizedExpression":\n        this.toAssignableParenthesizedExpression(node, isLHS);\n        break;\n      case "TSAsExpression":\n      case "TSSatisfiesExpression":\n      case "TSNonNullExpression":\n      case "TSTypeAssertion":\n        if (isLHS) {\n          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node);\n        } else {\n          this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n        }\n        this.toAssignable(node.expression, isLHS);\n        break;\n      case "AssignmentExpression":\n        if (!isLHS && node.left.type === "TSTypeCastExpression") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case "TSAsExpression":\n      case "TSSatisfiesExpression":\n      case "TSNonNullExpression":\n      case "TSTypeAssertion":\n      case "ParenthesizedExpression":\n        this.toAssignable(node.expression, isLHS);\n        break;\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case "TSAsExpression":\n      case "TSSatisfiesExpression":\n      case "TSTypeAssertion":\n      case "TSNonNullExpression":\n        this.checkToRestConversion(node.expression, false);\n        break;\n      default:\n        super.checkToRestConversion(node, allowPattern);\n    }\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    switch (type) {\n      case "TSTypeCastExpression":\n        return true;\n      case "TSParameterProperty":\n        return "parameter";\n      case "TSNonNullExpression":\n      case "TSInstantiationExpression":\n        return "expression";\n      case "TSAsExpression":\n      case "TSSatisfiesExpression":\n      case "TSTypeAssertion":\n        return (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true];\n      default:\n        return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n  }\n  parseBindingAtom() {\n    if (this.state.type === 78) {\n      return this.parseIdentifier(true);\n    }\n    return super.parseBindingAtom();\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n      this.unexpected(null, 10);\n    }\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    }\n    return super.checkCommaAfterRest(close);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n    }\n    return node;\n  }\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        this.finishOp(48, 1);\n        return;\n      }\n      if (code === 60) {\n        this.finishOp(47, 1);\n        return;\n      }\n    }\n    super.getTokenFromCode(code);\n  }\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n    return type;\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n    return super.shouldParseArrow(params);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n    return param;\n  }\n  tsInAmbientContext(cb) {\n    const {\n      isAmbientContext: oldIsAmbientContext,\n      strict: oldStrict\n    } = this.state;\n    this.state.isAmbientContext = true;\n    this.state.strict = false;\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n      this.state.strict = oldStrict;\n    }\n  }\n  parseClass(node, isStatement, optionalId) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n    try {\n      return super.parseClass(node, isStatement, optionalId);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n  tsParseAbstractDeclaration(node, decorators) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));\n    } else if (this.isContextual(129)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    if (method.abstract) {\n      const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n          methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]`\n        });\n      }\n    }\n    return method;\n  }\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption("typescript", "dts");\n  }\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.parse();\n  }\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.getExpression();\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, "ExportSpecifier");\n    }\n    node.exportKind = "value";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, "ImportSpecifier");\n    }\n    specifier.importKind = "value";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);\n  }\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? "imported" : "local";\n    const rightOfAsKey = isImport ? "local" : "exported";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      if (isImport) {\n        leftOfAs = this.parseIdentifier(true);\n        if (!this.isContextual(93)) {\n          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n        }\n      } else {\n        leftOfAs = this.parseModuleExportName();\n      }\n    }\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);\n    }\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? "importKind" : "exportKind";\n    node[kindKey] = hasTypeSpecifier ? "type" : "value";\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);\n    }\n  }\n};\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== "MemberExpression") return false;\n  const {\n    computed,\n    property\n  } = expression;\n  if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nfunction isValidAmbientConstInitializer(expression, estree) {\n  var _expression$extra;\n  const {\n    type\n  } = expression;\n  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === "Literal") {\n      const {\n        value\n      } = expression;\n      if (typeof value === "string" || typeof value === "boolean") {\n        return true;\n      }\n    }\n  } else {\n    if (type === "StringLiteral" || type === "BooleanLiteral") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === "TemplateLiteral" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\nfunction isNumber(expression, estree) {\n  if (estree) {\n    return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);\n  }\n  return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";\n}\nfunction isNegativeNumber(expression, estree) {\n  if (expression.type === "UnaryExpression") {\n    const {\n      operator,\n      argument\n    } = expression;\n    if (operator === "-" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === "Identifier") return true;\n  if (expression.type !== "MemberExpression" || expression.computed) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: "A class name is required.",\n  UnexpectedSpace: "Unexpected space in placeholder."\n});\nvar placeholders = superClass => class PlaceholdersParserMixin extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(133)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(133);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n  finishPlaceholder(node, expectedNode) {\n    let placeholder = node;\n    if (!placeholder.expectedNode || !placeholder.type) {\n      placeholder = this.finishNode(placeholder, "Placeholder");\n    }\n    placeholder.expectedNode = expectedNode;\n    return placeholder;\n  }\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      this.finishOp(133, 2);\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);\n  }\n  parseIdentifier(liberal) {\n    return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word !== undefined) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  parseBindingAtom() {\n    return this.parsePlaceholder("Pattern") || super.parseBindingAtom();\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  toAssignable(node, isLHS) {\n    if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {\n      node.expectedNode = "Pattern";\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (super.chStartsBindingIdentifier(ch, pos)) {\n      return true;\n    }\n    const nextToken = this.lookahead();\n    if (nextToken.type === 133) {\n      return true;\n    }\n    return false;\n  }\n  verifyBreakContinue(node, isBreak) {\n    if (node.label && node.label.type === "Placeholder") return;\n    super.verifyBreakContinue(node, isBreak);\n  }\n  parseExpressionStatement(node, expr) {\n    var _expr$extra;\n    if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n      return super.parseExpressionStatement(node, expr);\n    }\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, "Identifier");\n      this.next();\n      stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n      return this.finishNode(stmt, "LabeledStatement");\n    }\n    this.semicolon();\n    const stmtPlaceholder = node;\n    stmtPlaceholder.name = expr.name;\n    return this.finishPlaceholder(stmtPlaceholder, "Statement");\n  }\n  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n    return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);\n  }\n  parseFunctionId(requireId) {\n    return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);\n  }\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? "ClassDeclaration" : "ClassExpression";\n    this.next();\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder("Identifier");\n    if (placeholder) {\n      if (this.match(81) || this.match(133) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, "ClassBody");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n    super.parseClassSuper(node);\n    node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n  parseExport(node, decorators) {\n    const placeholder = this.parsePlaceholder("Identifier");\n    if (!placeholder) return super.parseExport(node, decorators);\n    const node2 = node;\n    if (!this.isContextual(98) && !this.match(12)) {\n      node2.specifiers = [];\n      node2.source = null;\n      node2.declaration = this.finishPlaceholder(placeholder, "Declaration");\n      return this.finishNode(node2, "ExportNamedDeclaration");\n    }\n    this.expectPlugin("exportDefaultFrom");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];\n    return super.parseExport(node2, decorators);\n  }\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n      if (this.isUnparsedContextual(next, "from")) {\n        if (this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    var _specifiers;\n    if ((_specifiers = node.specifiers) != null && _specifiers.length) {\n      return true;\n    }\n    return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n  }\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");\n    }\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder("Identifier");\n    if (!placeholder) return super.parseImport(node);\n    node.specifiers = [];\n    if (!this.isContextual(98) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, "StringLiteral");\n      this.semicolon();\n      return this.finishNode(node, "ImportDeclaration");\n    }\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n    this.expectContextual(98);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, "ImportDeclaration");\n  }\n  parseImportSource() {\n    return this.parsePlaceholder("StringLiteral") || super.parseImportSource();\n  }\n  assertNoSpace() {\n    if (this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index)) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n    }\n  }\n};\nvar v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName();\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = "V8IntrinsicIdentifier";\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);\n  }\n};\nconst PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];\nconst TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];\nfunction validatePlugins(pluginsMap) {\n  if (pluginsMap.has("decorators")) {\n    if (pluginsMap.has("decorators-legacy")) {\n      throw new Error("Cannot use the decorators and decorators-legacy plugin together");\n    }\n    const decoratorsBeforeExport = pluginsMap.get("decorators").decoratorsBeforeExport;\n    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {\n      throw new Error("\'decoratorsBeforeExport\' must be a boolean, if specified.");\n    }\n    const allowCallParenthesized = pluginsMap.get("decorators").allowCallParenthesized;\n    if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {\n      throw new Error("\'allowCallParenthesized\' must be a boolean.");\n    }\n  }\n  if (pluginsMap.has("flow") && pluginsMap.has("typescript")) {\n    throw new Error("Cannot combine flow and typescript plugins.");\n  }\n  if (pluginsMap.has("placeholders") && pluginsMap.has("v8intrinsic")) {\n    throw new Error("Cannot combine placeholders and v8intrinsic plugins.");\n  }\n  if (pluginsMap.has("pipelineOperator")) {\n    var _pluginsMap$get;\n    const proposal = pluginsMap.get("pipelineOperator").proposal;\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");\n      throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);\n    }\n    const tupleSyntaxIsHash = ((_pluginsMap$get = pluginsMap.get("recordAndTuple")) == null ? void 0 : _pluginsMap$get.syntaxType) === "hash";\n    if (proposal === "hack") {\n      if (pluginsMap.has("placeholders")) {\n        throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");\n      }\n      if (pluginsMap.has("v8intrinsic")) {\n        throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");\n      }\n      const topicToken = pluginsMap.get("pipelineOperator").topicToken;\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `"${t}"`).join(", ");\n        throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);\n      }\n      if (topicToken === "#" && tupleSyntaxIsHash) {\n        throw new Error(`Plugin conflict between \\`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\\` and \\`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\\`.`);\n      }\n    } else if (proposal === "smart" && tupleSyntaxIsHash) {\n      throw new Error(`Plugin conflict between \\`["pipelineOperator", { proposal: "smart" }]\\` and \\`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\\`.`);\n    }\n  }\n  if (pluginsMap.has("moduleAttributes")) {\n    {\n      if (pluginsMap.has("deprecatedImportAssert") || pluginsMap.has("importAssertions")) {\n        throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");\n      }\n      const moduleAttributesVersionPluginOption = pluginsMap.get("moduleAttributes").version;\n      if (moduleAttributesVersionPluginOption !== "may-2020") {\n        throw new Error("The \'moduleAttributes\' plugin requires a \'version\' option," + " representing the last proposal update. Currently, the" + " only supported value is \'may-2020\'.");\n      }\n    }\n  }\n  if (pluginsMap.has("importAssertions")) {\n    if (pluginsMap.has("deprecatedImportAssert")) {\n      throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");\n    }\n  }\n  if (!pluginsMap.has("deprecatedImportAssert") && pluginsMap.has("importAttributes") && pluginsMap.get("importAttributes").deprecatedAssertSyntax) {\n    {\n      pluginsMap.set("deprecatedImportAssert", {});\n    }\n  }\n  if (pluginsMap.has("recordAndTuple")) {\n    const syntaxType = pluginsMap.get("recordAndTuple").syntaxType;\n    if (syntaxType != null) {\n      {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error("The \'syntaxType\' option of the \'recordAndTuple\' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `\'${p}\'`).join(", "));\n        }\n      }\n    }\n  }\n  if (pluginsMap.has("asyncDoExpressions") && !pluginsMap.has("doExpressions")) {\n    const error = new Error("\'asyncDoExpressions\' requires \'doExpressions\', please add \'doExpressions\' to parser plugins.");\n    error.missingPlugins = "doExpressions";\n    throw error;\n  }\n  if (pluginsMap.has("optionalChainingAssign") && pluginsMap.get("optionalChainingAssign").version !== "2023-07") {\n    throw new Error("The \'optionalChainingAssign\' plugin requires a \'version\' option," + " representing the last proposal update. Currently, the" + " only supported value is \'2023-07\'.");\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nfunction createDefaultOptions() {\n  return {\n    sourceType: "script",\n    sourceFilename: undefined,\n    startIndex: 0,\n    startColumn: 0,\n    startLine: 1,\n    allowAwaitOutsideFunction: false,\n    allowReturnOutsideFunction: false,\n    allowNewTargetOutsideFunction: false,\n    allowImportExportEverywhere: false,\n    allowSuperOutsideMethod: false,\n    allowUndeclaredExports: false,\n    plugins: [],\n    strictMode: null,\n    ranges: false,\n    tokens: false,\n    createImportExpressions: false,\n    createParenthesizedExpressions: false,\n    errorRecovery: false,\n    attachComment: true,\n    annexB: true\n  };\n}\nfunction getOptions(opts) {\n  const options = createDefaultOptions();\n  if (opts == null) {\n    return options;\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error("The `annexB` option can only be set to `false`.");\n  }\n  for (const key of Object.keys(options)) {\n    if (opts[key] != null) options[key] = opts[key];\n  }\n  if (options.startLine === 1) {\n    if (opts.startIndex == null && options.startColumn > 0) {\n      options.startIndex = options.startColumn;\n    } else if (opts.startColumn == null && options.startIndex > 0) {\n      options.startColumn = options.startIndex;\n    }\n  } else if (opts.startColumn == null || opts.startIndex == null) {\n    if (opts.startIndex != null) {\n      throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");\n    }\n  }\n  return options;\n}\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n    const key = prop.key;\n    const name = key.type === "Identifier" ? key.name : key.value;\n    if (name === "__proto__") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n      protoRef.used = true;\n    }\n  }\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === "ArrowFunctionExpression" && this.offsetToSourcePos(expr.start) === potentialArrowAt;\n  }\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(140)) {\n      this.unexpected();\n    }\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n  parseExpressionBase(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(12)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, "SequenceExpression");\n    }\n    return expr;\n  }\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(108)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const {\n      type\n    } = this.state;\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      if (this.match(29)) {\n        this.toAssignable(left, true);\n        node.left = left;\n        const startIndex = startLoc.index;\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, "AssignmentExpression"));\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    return left;\n  }\n  parseMaybeConditional(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, "ConditionalExpression");\n    }\n    return expr;\n  }\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n  parseExprOps(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value\n        });\n      }\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin("pipelineOperator");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n        this.next();\n        if (op === 39 && this.hasPlugin(["pipelineOperator", {\n          proposal: "minimal"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);\n          }\n        }\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");\n        const nextOp = this.state.type;\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);\n        }\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n  parseExprOpRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption("pipelineOperator", "proposal")) {\n          case "hack":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n          case "smart":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(108)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);\n            });\n          case "fsharp":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n  parseExprOpBaseRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n  parseHackPipeBody() {\n    var _body$extra;\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n    return body;\n  }\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(34);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n      if (this.match(72)) {\n        this.expectPlugin("throwExpressions");\n      }\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n        if (arg.type === "Identifier") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node);\n        }\n        return this.finishNode(node, "UnaryExpression");\n      }\n    }\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n    return expr;\n  }\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      const updateExpressionNode = node;\n      this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression"));\n      return node;\n    }\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, expr = this.finishNode(node, "UpdateExpression"));\n    }\n    return expr;\n  }\n  parseExprSubscripts(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseSubscripts(expr, startLoc);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n    let optional = false;\n    if (type === 18) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n  parseMember(base, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(139)) {\n      if (base.type === "Super") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, "OptionalMemberExpression");\n    } else {\n      return this.finishNode(node, "MemberExpression");\n    }\n  }\n  parseBind(base, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);\n  }\n  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    const node = this.startNodeAt(startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type !== "Super", node, refExpressionErrors);\n    }\n    let finishedNode = this.finishCallExpression(node, optionalChainMember);\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return finishedNode;\n  }\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n  parseTaggedTemplateExpression(base, startLoc, state) {\n    const node = this.startNodeAt(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, "TaggedTemplateExpression");\n  }\n  atPossibleAsyncArrow(base) {\n    return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.offsetToSourcePos(base.start) === this.state.potentialArrowAt;\n  }\n  finishCallExpression(node, optional) {\n    if (node.callee.type === "Import") {\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node);\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === "SpreadElement") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");\n  }\n  parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n  parseNoCallExpr() {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    let decorators = null;\n    const {\n      type\n    } = this.state;\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n      case 83:\n        node = this.startNode();\n        this.next();\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n        if (this.match(10)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node);\n          } else {\n            return this.finishNode(node, "Import");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, "Import");\n        }\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, "ThisExpression");\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n      case 135:\n        return this.parseNumericLiteral(this.state.value);\n      case 136:\n        return this.parseBigIntLiteral(this.state.value);\n      case 134:\n        return this.parseStringLiteral(this.state.value);\n      case 84:\n        return this.parseNullLiteral();\n      case 85:\n        return this.parseBooleanLiteral(true);\n      case 86:\n        return this.parseBooleanLiteral(false);\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n      case 26:\n        decorators = this.parseDecorators();\n      case 80:\n        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);\n      case 77:\n        return this.parseNewOrNewTarget();\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n          if (callee.type === "MemberExpression") {\n            return this.finishNode(node, "BindExpression");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, callee);\n          }\n        }\n      case 139:\n        {\n          this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, "%");\n        }\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, "^");\n        }\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference("hack");\n        }\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          }\n          this.unexpected();\n          break;\n        }\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin(["jsx", "flow", "typescript"]);\n          } else {\n            this.unexpected();\n          }\n          break;\n        }\n      default:\n        if (type === 137) {\n          return this.parseDecimalLiteral(this.state.value);\n        }\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n          if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc);\n      }\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case "hack":\n        {\n          return this.hasPlugin(["pipelineOperator", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n      case "smart":\n        return tokenType === 27;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(19);\n    return this.parseArrowExpression(node, params, true);\n  }\n  parseDo(node, isAsync) {\n    this.expectPlugin("doExpressions");\n    if (isAsync) {\n      this.expectPlugin("asyncDoExpressions");\n    }\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      this.prodParam.enter(2);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n    this.state.labels = oldLabels;\n    return this.finishNode(node, "DoExpression");\n  }\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n    return this.finishNode(node, "Super");\n  }\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, "PrivateName");\n  }\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), "function");\n      this.next();\n      if (this.match(103)) {\n        this.expectPlugin("functionSent");\n      } else if (!this.hasPlugin("functionSent")) {\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, "sent");\n    }\n    return this.parseFunction(node);\n  }\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n    return this.finishNode(node, "MetaProperty");\n  }\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), "import");\n    this.next();\n    if (this.isContextual(101)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(105) || this.isContextual(97)) {\n      const isSource = this.isContextual(105);\n      if (!isSource) this.unexpected();\n      this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");\n      if (!this.options.createImportExpressions) {\n        throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {\n          phase: this.state.value\n        });\n      }\n      this.next();\n      node.phase = isSource ? "source" : "defer";\n      return this.parseImportCall(node);\n    }\n    return this.parseMetaProperty(node, id, "meta");\n  }\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, "rawValue", value);\n    this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, "StringLiteral");\n  }\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, "NumericLiteral");\n  }\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, "BigIntLiteral");\n  }\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, "DecimalLiteral");\n  }\n  parseRegExpLiteral(value) {\n    const node = this.startNode();\n    this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end));\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, "RegExpLiteral");\n  }\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, "BooleanLiteral");\n  }\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, "NullLiteral");\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n      if (this.match(21)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startLoc);\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, "SequenceExpression");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n    return this.wrapParenthesis(startLoc, val);\n  }\n  wrapParenthesis(startLoc, expression) {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, "parenthesized", true);\n      this.addExtra(expression, "parenStart", startLoc.index);\n      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n    const parenExpression = this.startNodeAt(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, "ParenthesizedExpression");\n  }\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n  parseParenItem(node, startLoc) {\n    return node;\n  }\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), "new");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, "target");\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n      return metaProp;\n    }\n    return this.parseNew(node);\n  }\n  parseNew(node) {\n    this.parseNewCallee(node);\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, "NewExpression");\n  }\n  parseNewCallee(node) {\n    const isImport = this.match(83);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));\n      }\n    }\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, "\\n"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, "TemplateElement");\n    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return finishedNode;\n  }\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n    node.expressions = substitutions;\n    node.quasis = quasis;\n    return this.finishNode(node, "TemplateLiteral");\n  }\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin("recordAndTuple");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n      {\n        if (prop.shorthand) {\n          this.addExtra(prop, "shorthand", true);\n        }\n      }\n      node.properties.push(prop);\n    }\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = "ObjectExpression";\n    if (isPattern) {\n      type = "ObjectPattern";\n    } else if (isRecord) {\n      type = "RecordExpression";\n    }\n    return this.finishNode(node, type);\n  }\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index);\n    this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);\n  }\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n    if (this.match(26)) {\n      if (this.hasPlugin("decorators")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n    prop.method = false;\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const {\n        key\n      } = prop;\n      const keyName = key.name;\n      if (keyName === "async" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n      if (keyName === "get" || keyName === "set") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === "get" ? 0 : 1;\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n  checkGetterSetterParams(method) {\n    var _params;\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length !== paramCount) {\n      this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method);\n    }\n    if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = "method";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");\n    }\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, "ObjectProperty");\n    }\n    if (!prop.computed && prop.key.type === "Identifier") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n      return this.finishNode(prop, "ObjectProperty");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 135:\n            key = this.parseNumericLiteral(value);\n            break;\n          case 134:\n            key = this.parseStringLiteral(value);\n            break;\n          case 136:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case 139:\n            {\n              const privateKeyLoc = this.state.startLoc;\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n              }\n              key = this.parsePrivateName();\n              break;\n            }\n          default:\n            if (type === 137) {\n              key = this.parseDecimalLiteral(value);\n              break;\n            }\n            this.unexpected();\n        }\n      }\n      prop.key = key;\n      if (type !== 139) {\n        prop.computed = false;\n      }\n    }\n  }\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return finishedNode;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin("recordAndTuple");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");\n  }\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(2 | 4);\n    let flags = functionFlags(isAsync, false);\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= 8;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, "ArrowFunctionExpression");\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | 4);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node);\n        }\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, 65, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n  isSimpleParameter(node) {\n    return node.type === "Identifier";\n  }\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: "FormalParameters"\n    };\n    for (const param of node.params) {\n      this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);\n    }\n  }\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: ","\n        });\n      }\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin("partialApplication");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, "ArgumentPlaceholder");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n    return elt;\n  }\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(liberal);\n    return this.createIdentifier(node, name);\n  }\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, "Identifier");\n  }\n  parseIdentifierName(liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(132);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n    this.next();\n    return name;\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word\n      });\n      return;\n    }\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word\n      });\n      return;\n    } else if (word === "yield") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === "await") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === "arguments") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n  recordAwaitIfAllowed() {\n    const isAwaitAllowed = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n    return isAwaitAllowed;\n  }\n  parseAwait(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node);\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n    return this.finishNode(node, "AwaitExpression");\n  }\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 138 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;\n  }\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node);\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n      switch (this.state.type) {\n        case 13:\n        case 140:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, "YieldExpression");\n  }\n  parseImportCall(node) {\n    this.next();\n    node.source = this.parseMaybeAssignAllowIn();\n    node.options = null;\n    if (this.eat(12)) {\n      if (!this.match(11)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        if (this.eat(12) && !this.match(11)) {\n          do {\n            this.parseMaybeAssignAllowIn();\n          } while (this.eat(12) && !this.match(11));\n          this.raise(Errors.ImportCallArity, node);\n        }\n      }\n    }\n    this.expect(11);\n    return this.finishNode(node, "ImportExpression");\n  }\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin(["pipelineOperator", {\n      proposal: "smart"\n    }])) {\n      if (left.type === "SequenceExpression") {\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n  parseSmartPipelineBodyInStyle(childExpr, startLoc) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, "PipelineBareFunction");\n    } else {\n      const bodyNode = this.startNodeAt(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, "PipelineTopicExpression");\n    }\n  }\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case "MemberExpression":\n        return !expression.computed && this.isSimpleReference(expression.object);\n      case "Identifier":\n        return true;\n      default:\n        return false;\n    }\n  }\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin(["pipelineOperator", {\n      proposal: "smart"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = 8 & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | 8);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = 8 & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~8);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n  parseFSharpPipelineBody(prec) {\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n  parseModuleExpression() {\n    this.expectPlugin("moduleBlocks");\n    const node = this.startNode();\n    this.next();\n    if (!this.match(5)) {\n      this.unexpected(null, 5);\n    }\n    const program = this.startNodeAt(this.state.endLoc);\n    this.next();\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    try {\n      node.body = this.parseProgram(program, 8, "module");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode(node, "ModuleExpression");\n  }\n  parsePropertyNamePrefixOperator(prop) {}\n}\nconst loopLabel = {\n    kind: 1\n  },\n  switchLabel = {\n    kind: 2\n  };\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\nfunction babel7CompatTokens(tokens, input, startIndex) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n    if (typeof type === "number") {\n      {\n        if (type === 139) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: "#",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(132),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start - startIndex) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: "`",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: "}",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: "`",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: "${",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input, this.startIndex);\n    }\n    return this.finishNode(file, "File");\n  }\n  parseProgram(program, end = 140, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, {\n            localName\n          });\n        }\n      }\n      this.addExtra(program, "topLevelAwait", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram;\n    if (end === 140) {\n      finishedProgram = this.finishNode(program, "Program");\n    } else {\n      finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));\n    }\n    return finishedProgram;\n  }\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = "Directive";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(this.offsetToSourcePos(directiveLiteral.start), this.offsetToSourcePos(directiveLiteral.end));\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, "raw", raw);\n    this.addExtra(directiveLiteral, "rawValue", val);\n    this.addExtra(directiveLiteral, "expressionValue", expressionValue);\n    directiveLiteral.type = "DirectiveLiteral";\n    return directive;\n  }\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, "InterpreterDirective");\n  }\n  isLet() {\n    if (!this.isContextual(100)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === 92) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  chStartsBindingPattern(ch) {\n    return ch === 91 || ch === 123;\n  }\n  hasFollowingBindingAtom() {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  hasInLineFollowingBindingIdentifierOrBrace() {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return nextCh === 123 || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  startsUsingForOf() {\n    const {\n      type,\n      containsEsc\n    } = this.lookahead();\n    if (type === 102 && !containsEsc) {\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin("explicitResourceManagement");\n      return true;\n    }\n  }\n  startsAwaitUsing() {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, "using")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin("explicitResourceManagement");\n        return true;\n      }\n    }\n    return false;\n  }\n  parseModuleItem() {\n    return this.parseStatementLike(1 | 2 | 4 | 8);\n  }\n  parseStatementListItem() {\n    return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));\n  }\n  parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {\n    let flags = 0;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= 4;\n      if (allowLabeledFunction) {\n        flags |= 8;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n  parseStatement() {\n    return this.parseStatementLike(0);\n  }\n  parseStatementLike(flags) {\n    let decorators = null;\n    if (this.match(26)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n  parseStatementContent(flags, decorators) {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & 2);\n    const allowFunctionDeclaration = !!(flags & 4);\n    const topLevel = flags & 1;\n    switch (startType) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n      case 64:\n        return this.parseDebuggerStatement(node);\n      case 90:\n        return this.parseDoWhileStatement(node);\n      case 91:\n        return this.parseForStatement(node);\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);\n        }\n        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);\n      case 80:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);\n      case 69:\n        return this.parseIfStatement(node);\n      case 70:\n        return this.parseReturnStatement(node);\n      case 71:\n        return this.parseSwitchStatement(node);\n      case 72:\n        return this.parseThrowStatement(node);\n      case 73:\n        return this.parseTryStatement(node);\n      case 96:\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next();\n          return this.parseVarStatement(node, "await using");\n        }\n        break;\n      case 107:\n        if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) {\n          break;\n        }\n        this.expectPlugin("explicitResourceManagement");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(node, "using");\n      case 100:\n        {\n          if (this.state.containsEsc) {\n            break;\n          }\n          const next = this.nextTokenStart();\n          const nextCh = this.codePointAtPos(next);\n          if (nextCh !== 91) {\n            if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {\n              break;\n            }\n          }\n        }\n      case 75:\n        {\n          if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n          }\n        }\n      case 74:\n        {\n          const kind = this.state.value;\n          return this.parseVarStatement(node, kind);\n        }\n      case 92:\n        return this.parseWhileStatement(node);\n      case 76:\n        return this.parseWithStatement(node);\n      case 5:\n        return this.parseBlock();\n      case 13:\n        return this.parseEmptyStatement(node);\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n          }\n          this.next();\n          let result;\n          if (startType === 83) {\n            result = this.parseImport(node);\n            if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node, decorators);\n            if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n          this.assertModuleNodeAllowed(result);\n          return result;\n        }\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (!allowDeclaration) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);\n            }\n            this.next();\n            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);\n          }\n        }\n    }\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n    if (tokenIsIdentifier(startType) && expr.type === "Identifier" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, flags);\n    } else {\n      return this.parseExpressionStatement(node, expr, decorators);\n    }\n  }\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n  decoratorsEnabledBeforeExport() {\n    if (this.hasPlugin("decorators-legacy")) return true;\n    return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;\n  }\n  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {\n          this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n  parseDecorators(allowExport) {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(26));\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n    return decorators;\n  }\n  parseDecorator() {\n    this.expectOnePlugin(["decorators", "decorators-legacy"]);\n    const node = this.startNode();\n    this.next();\n    if (this.hasPlugin("decorators")) {\n      const startLoc = this.state.startLoc;\n      let expr;\n      if (this.match(10)) {\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startLoc, expr);\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(139)) {\n            this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, "MemberExpression");\n        }\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, "Decorator");\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, "CallExpression");\n    }\n    return expr;\n  }\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");\n  }\n  verifyBreakContinue(node, isBreak) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === 1)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? "BreakStatement" : "ContinueStatement";\n      this.raise(Errors.IllegalBreakContinue, node, {\n        type\n      });\n    }\n  }\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, "DebuggerStatement");\n  }\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n  parseDoWhileStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, "DoWhileStatement");\n  }\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n    if (this.isContextual(96) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(0);\n    this.expect(10);\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n    const startsWithLet = this.isContextual(100);\n    {\n      const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();\n      const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;\n      if (this.match(74) || this.match(75) || isLetOrUsing) {\n        const initNode = this.startNode();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = "await using";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next();\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, "VariableDeclaration");\n        const isForIn = this.match(58);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if ((isForIn || this.isContextual(102)) && init.declarations.length === 1) {\n          return this.parseForIn(node, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, init);\n      }\n    }\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(102);\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n      if (awaitAt === null && startsWithAsync && init.type === "Identifier") {\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? "ForOfStatement" : "ForInStatement";\n      this.checkLVal(init, {\n        type\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n  parseFunctionStatement(node, isAsync, isHangingDeclaration) {\n    this.next();\n    return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));\n  }\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;\n    return this.finishNode(node, "IfStatement");\n  }\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n    this.next();\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n    return this.finishNode(node, "ReturnStatement");\n  }\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(0);\n    let cur;\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, "SwitchCase");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, "SwitchCase");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, "SwitchStatement");\n  }\n  parseThrowStatement(node) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, "ThrowStatement");\n  }\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);\n    this.checkLVal(param, {\n      type: "CatchClause"\n    }, 9);\n    return param;\n  }\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(0);\n      }\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, "CatchClause");\n    }\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n    return this.finishNode(node, "TryStatement");\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, "VariableDeclaration");\n  }\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    return this.finishNode(node, "WhileStatement");\n  }\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    return this.finishNode(node, "WithStatement");\n  }\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, "EmptyStatement");\n  }\n  parseLabeledStatement(node, maybeName, expr, flags) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName\n        });\n      }\n    }\n    const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.sourceToOffsetPos(this.state.start);\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.sourceToOffsetPos(this.state.start)\n    });\n    node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, "LabeledStatement");\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, "ExpressionStatement");\n  }\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(5);\n    if (createNewLexicalScope) {\n      this.scope.enter(0);\n    }\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, "BlockStatement");\n  }\n  isValidDirective(stmt) {\n    return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n    while (!this.match(end)) {\n      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n          if (!hasStrictModeDirective && directive.value.value === "use strict") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n          continue;\n        }\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n    afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n    this.next();\n  }\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, "ForStatement");\n  }\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? "ForInStatement" : "ForOfStatement"\n      });\n    }\n    if (init.type === "AssignmentPattern") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: {\n          type: "ForStatement"\n        }\n      });\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");\n  }\n  parseVar(node, isFor, kind, allowMissingInitializer = false) {\n    const declarations = node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {\n          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {\n            kind: "destructuring"\n          });\n        } else if ((kind === "const" || kind === "using" || kind === "await using") && !(this.match(58) || this.isContextual(102))) {\n          this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {\n            kind\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, "VariableDeclarator"));\n      if (!this.eat(12)) break;\n    }\n    return node;\n  }\n  parseVarId(decl, kind) {\n    const id = this.parseBindingAtom();\n    if (kind === "using" || kind === "await using") {\n      if (id.type === "ArrayPattern" || id.type === "ObjectPattern") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(id, {\n      type: "VariableDeclarator"\n    }, kind === "var" ? 5 : 8201);\n    decl.id = id;\n  }\n  parseAsyncFunctionExpression(node) {\n    return this.parseFunction(node, 8);\n  }\n  parseFunction(node, flags = 0) {\n    const hangingDeclaration = flags & 2;\n    const isDeclaration = !!(flags & 1);\n    const requireId = isDeclaration && !(flags & 4);\n    const isAsync = !!(flags & 8);\n    this.initFunction(node, isAsync);\n    if (this.match(55)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);\n      }\n      this.next();\n      node.generator = true;\n    }\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(2);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n    if (isDeclaration && !hangingDeclaration) {\n      this.registerFunctionStatementId(node);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n  parseFunctionParams(node, isConstructor) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));\n    this.expressionScope.exit();\n  }\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);\n  }\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");\n  }\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n  isClassMethod() {\n    return this.match(10);\n  }\n  nameIsConstructor(key) {\n    return key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor";\n  }\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && this.nameIsConstructor(method.key);\n  }\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);\n          }\n          continue;\n        }\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n        const member = this.startNode();\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n        this.parseClassMember(classBody, member, state);\n        if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n    this.classScope.exit();\n    return this.finishNode(classBody, "ClassBody");\n  }\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = "method";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(106);\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n    if (this.eat(55)) {\n      method.kind = "method";\n      const isPrivateName = this.match(139);\n      this.parseClassElementName(method);\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n    const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? key.name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n    if (this.isClassMethod()) {\n      method.kind = "method";\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = "constructor";\n        if (state.hadConstructor && !this.hasPlugin("typescript")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin("typescript") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === "async" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n      method.kind = "method";\n      const isPrivate = this.match(139);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if ((maybeContextualKw === "get" || maybeContextualKw === "set") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      const isPrivate = this.match(139);\n      this.parseClassElementName(publicMethod);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === "accessor" && !this.isLineTerminator()) {\n      this.expectPlugin("decoratorAutoAccessors");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(139);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n    if ((type === 132 || type === 134) && member.static && value === "prototype") {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n    if (type === 139) {\n      if (value === "constructor") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n    this.parsePropertyName(member);\n    return member.key;\n  }\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n    this.scope.enter(64 | 128 | 16);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(0);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, "StaticBlock"));\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);\n  }\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);\n    }\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);\n    classBody.body.push(node);\n    const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {}\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, "ClassPrivateProperty");\n  }\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, "ClassProperty");\n  }\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, "ClassAccessorProperty");\n  }\n  parseInitializer(node) {\n    this.scope.enter(64 | 16);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(0);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n  parseClassId(node, isStatement, optionalId, bindingType = 8331) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n  parseExport(node, decorators) {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, "ExportAllDeclaration");\n    }\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, 5);\n    }\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, 98);\n    }\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      var _node2$declaration;\n      const node2 = node;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, "ExportNamedDeclaration");\n    }\n    if (this.eat(65)) {\n      const node2 = node;\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n      if (decl.type === "ClassDeclaration") {\n        this.maybeTakeDecorators(decorators, decl, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.checkExport(node2, true, true);\n      return this.finishNode(node2, "ExportDefaultDeclaration");\n    }\n    this.unexpected(null, 5);\n  }\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode(id);\n      specifier.exported = id;\n      node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      var _ref, _ref$specifiers;\n      (_ref$specifiers = (_ref = node).specifiers) != null ? _ref$specifiers : _ref.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      const node2 = node;\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === "type";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node2.source = null;\n      node2.declaration = null;\n      if (this.hasPlugin("importAssertions")) {\n        node2.assertions = [];\n      }\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin("importAssertions")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, "function");\n  }\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    if (this.match(68)) {\n      this.next();\n      return this.parseFunction(expr, 1 | 4);\n    } else if (this.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(expr, 1 | 4 | 8);\n    }\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n    if (this.match(26)) {\n      if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);\n    }\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n  parseExportDeclaration(node) {\n    if (this.match(80)) {\n      const node = this.parseClass(this.startNode(), true, false);\n      return node;\n    }\n    return this.parseStatementListItem();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 100) {\n        return false;\n      }\n      if ((type === 130 || type === 129) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n        if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {\n          this.expectOnePlugin(["flow", "typescript"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, "from");\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n    return false;\n  }\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(98)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n    this.semicolon();\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 26) {\n      this.expectOnePlugin(["decorators", "decorators-legacy"]);\n      if (this.hasPlugin("decorators")) {\n        if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n        return true;\n      }\n    }\n    if (this.isContextual(107)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n    if (this.isContextual(96) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      var _node$specifiers;\n      if (isDefault) {\n        this.checkDuplicateExports(node, "default");\n        if (this.hasPlugin("exportDefaultFrom")) {\n          var _declaration$extra;\n          const declaration = node.declaration;\n          if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n      } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === "Identifier" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n            if (local.type !== "Identifier") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        const decl = node.declaration;\n        if (decl.type === "FunctionDeclaration" || decl.type === "ClassDeclaration") {\n          const {\n            id\n          } = decl;\n          if (!id) throw new Error("Assertion failure");\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === "VariableDeclaration") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n  checkDeclaration(node) {\n    if (node.type === "Identifier") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === "ObjectPattern") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === "ArrayPattern") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === "ObjectProperty") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === "RestElement") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === "AssignmentPattern") {\n      this.checkDeclaration(node.left);\n    }\n  }\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === "default") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, {\n          exportName\n        });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(130);\n      const isString = this.match(134);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n    return nodes;\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode(node, "ExportSpecifier");\n  }\n  parseModuleExportName() {\n    if (this.match(134)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n  isJSONModuleImport(node) {\n    if (node.assertions != null) {\n      return node.assertions.some(({\n        key,\n        value\n      }) => {\n        return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");\n      });\n    }\n    return false;\n  }\n  checkImportReflection(node) {\n    const {\n      specifiers\n    } = node;\n    const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;\n    if (node.phase === "source") {\n      if (singleBindingType !== "ImportDefaultSpecifier") {\n        this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);\n      }\n    } else if (node.phase === "defer") {\n      if (singleBindingType !== "ImportNamespaceSpecifier") {\n        this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);\n      }\n    } else if (node.module) {\n      var _node$assertions;\n      if (singleBindingType !== "ImportDefaultSpecifier") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);\n      }\n    }\n  }\n  checkJSONModuleImport(node) {\n    if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {\n      const {\n        specifiers\n      } = node;\n      if (specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === "ExportSpecifier") {\n            imported = specifier.local;\n          } else if (specifier.type === "ImportSpecifier") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);\n        }\n      }\n    }\n  }\n  isPotentialImportPhase(isExport) {\n    if (isExport) return false;\n    return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    if (isExport) {\n      return;\n    }\n    if (phase === "module") {\n      this.expectPlugin("importReflection", loc);\n      node.module = true;\n    } else if (this.hasPlugin("importReflection")) {\n      node.module = false;\n    }\n    if (phase === "source") {\n      this.expectPlugin("sourcePhaseImports", loc);\n      node.phase = "source";\n    } else if (phase === "defer") {\n      this.expectPlugin("deferredImportEvaluation", loc);\n      node.phase = "defer";\n    } else if (this.hasPlugin("sourcePhaseImports")) {\n      node.phase = null;\n    }\n  }\n  parseMaybeImportPhase(node, isExport) {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(node, isExport, null);\n      return null;\n    }\n    const phaseIdentifier = this.parseIdentifier(true);\n    const {\n      type\n    } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);\n      return null;\n    } else {\n      this.applyImportPhase(node, isExport, null);\n      return phaseIdentifier;\n    }\n  }\n  isPrecedingIdImportPhase(phase) {\n    const {\n      type\n    } = this.state;\n    return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;\n  }\n  parseImport(node) {\n    if (this.match(134)) {\n      return this.parseImportSourceAndAttributes(node);\n    }\n    return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));\n  }\n  parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {\n    node.specifiers = [];\n    const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);\n    const parseNext = !hasDefault || this.eat(12);\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(98);\n    return this.parseImportSourceAndAttributes(node);\n  }\n  parseImportSourceAndAttributes(node) {\n    var _node$specifiers2;\n    (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n    this.semicolon();\n    return this.finishNode(node, "ImportDeclaration");\n  }\n  parseImportSource() {\n    if (!this.match(134)) this.unexpected();\n    return this.parseExprAtom();\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  finishImportSpecifier(specifier, type, bindingType = 8201) {\n    this.checkLVal(specifier.local, {\n      type\n    }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n  parseImportAttributes() {\n    this.expect(5);\n    const attrs = [];\n    const attrNames = new Set();\n    do {\n      if (this.match(8)) {\n        break;\n      }\n      const node = this.startNode();\n      const keyName = this.state.value;\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {\n          key: keyName\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(134)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(14);\n      if (!this.match(134)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, "ImportAttribute"));\n    } while (this.eat(12));\n    this.expect(8);\n    return attrs;\n  }\n  parseModuleAttributes() {\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n      if (node.key.name !== "type") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(14);\n      if (!this.match(134)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, "ImportAttribute"));\n    } while (this.eat(12));\n    return attrs;\n  }\n  maybeParseImportAttributes(node) {\n    let attributes;\n    {\n      var useWith = false;\n    }\n    if (this.match(76)) {\n      if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {\n        return;\n      }\n      this.next();\n      if (this.hasPlugin("moduleAttributes")) {\n        attributes = this.parseModuleAttributes();\n      } else {\n        attributes = this.parseImportAttributes();\n      }\n      {\n        useWith = true;\n      }\n    } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      if (!this.hasPlugin("deprecatedImportAssert") && !this.hasPlugin("importAssertions")) {\n        this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n      }\n      if (!this.hasPlugin("importAssertions")) {\n        this.addExtra(node, "deprecatedAssertSyntax", true);\n      }\n      this.next();\n      attributes = this.parseImportAttributes();\n    } else {\n      attributes = [];\n    }\n    if (!useWith && this.hasPlugin("importAssertions")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n  maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode(maybeDefaultIdentifier);\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));\n      return true;\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");\n      return true;\n    }\n    return false;\n  }\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");\n      return true;\n    }\n    return false;\n  }\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const specifier = this.startNode();\n      const importedIsString = this.match(134);\n      const isMaybeTypeOnly = this.isContextual(130);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, undefined);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: imported.value\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);\n  }\n  isThisParam(param) {\n    return param.type === "Identifier" && param.name === "this";\n  }\n}\nclass Parser extends StatementParser {\n  constructor(options, input, pluginsMap) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n    this.startIndex = options.startIndex;\n  }\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file;\n  }\n}\nfunction parse(input, options) {\n  var _options;\n  if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {\n    options = Object.assign({}, options);\n    try {\n      options.sourceType = "module";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = "script";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = "script";\n      }\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = "script";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\nconst tokTypes = generateExportedTokenTypes(tt);\nfunction getParser(options, input) {\n  let cls = Parser;\n  const pluginsMap = new Map();\n  if (options != null && options.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === "string") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n  return new cls(options, input, pluginsMap);\n}\nconst parserClassCache = new Map();\nfunction getParserClass(pluginsMap) {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join("|");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22172\n')},74466:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = createTemplateBuilder;\nvar _options = __webpack_require__(19815);\nvar _string = __webpack_require__(95252);\nvar _literal = __webpack_require__(53438);\nconst NO_PLACEHOLDER = (0, _options.validate)({\n  placeholderPattern: false\n});\nfunction createTemplateBuilder(formatter, defaultOpts) {\n  const templateFnCache = new WeakMap();\n  const templateAstCache = new WeakMap();\n  const cachedOpts = defaultOpts || (0, _options.validate)(null);\n  return Object.assign((tpl, ...args) => {\n    if (typeof tpl === "string") {\n      if (args.length > 1) throw new Error("Unexpected extra params.");\n      return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));\n    } else if (Array.isArray(tpl)) {\n      let builder = templateFnCache.get(tpl);\n      if (!builder) {\n        builder = (0, _literal.default)(formatter, tpl, cachedOpts);\n        templateFnCache.set(tpl, builder);\n      }\n      return extendedTrace(builder(args));\n    } else if (typeof tpl === "object" && tpl) {\n      if (args.length > 0) throw new Error("Unexpected extra params.");\n      return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));\n    }\n    throw new Error(`Unexpected template param ${typeof tpl}`);\n  }, {\n    ast: (tpl, ...args) => {\n      if (typeof tpl === "string") {\n        if (args.length > 1) throw new Error("Unexpected extra params.");\n        return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();\n      } else if (Array.isArray(tpl)) {\n        let builder = templateAstCache.get(tpl);\n        if (!builder) {\n          builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));\n          templateAstCache.set(tpl, builder);\n        }\n        return builder(args)();\n      }\n      throw new Error(`Unexpected template param ${typeof tpl}`);\n    }\n  });\n}\nfunction extendedTrace(fn) {\n  let rootStack = "";\n  try {\n    throw new Error();\n  } catch (error) {\n    if (error.stack) {\n      rootStack = error.stack.split("\\n").slice(3).join("\\n");\n    }\n  }\n  return arg => {\n    try {\n      return fn(arg);\n    } catch (err) {\n      err.stack += `\\n    =============\\n${rootStack}`;\n      throw err;\n    }\n  };\n}\n\n//# sourceMappingURL=builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ0NjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxXQUFXO0FBQzVELEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxXQUFXO0FBQzlEO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90ZW1wbGF0ZS9saWIvYnVpbGRlci5qcz9kYmIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVGVtcGxhdGVCdWlsZGVyO1xudmFyIF9vcHRpb25zID0gcmVxdWlyZShcIi4vb3B0aW9ucy5qc1wiKTtcbnZhciBfc3RyaW5nID0gcmVxdWlyZShcIi4vc3RyaW5nLmpzXCIpO1xudmFyIF9saXRlcmFsID0gcmVxdWlyZShcIi4vbGl0ZXJhbC5qc1wiKTtcbmNvbnN0IE5PX1BMQUNFSE9MREVSID0gKDAsIF9vcHRpb25zLnZhbGlkYXRlKSh7XG4gIHBsYWNlaG9sZGVyUGF0dGVybjogZmFsc2Vcbn0pO1xuZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGVCdWlsZGVyKGZvcm1hdHRlciwgZGVmYXVsdE9wdHMpIHtcbiAgY29uc3QgdGVtcGxhdGVGbkNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgdGVtcGxhdGVBc3RDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IGNhY2hlZE9wdHMgPSBkZWZhdWx0T3B0cyB8fCAoMCwgX29wdGlvbnMudmFsaWRhdGUpKG51bGwpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbigodHBsLCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0cGwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDEpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgZXh0cmEgcGFyYW1zLlwiKTtcbiAgICAgIHJldHVybiBleHRlbmRlZFRyYWNlKCgwLCBfc3RyaW5nLmRlZmF1bHQpKGZvcm1hdHRlciwgdHBsLCAoMCwgX29wdGlvbnMubWVyZ2UpKGNhY2hlZE9wdHMsICgwLCBfb3B0aW9ucy52YWxpZGF0ZSkoYXJnc1swXSkpKSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRwbCkpIHtcbiAgICAgIGxldCBidWlsZGVyID0gdGVtcGxhdGVGbkNhY2hlLmdldCh0cGwpO1xuICAgICAgaWYgKCFidWlsZGVyKSB7XG4gICAgICAgIGJ1aWxkZXIgPSAoMCwgX2xpdGVyYWwuZGVmYXVsdCkoZm9ybWF0dGVyLCB0cGwsIGNhY2hlZE9wdHMpO1xuICAgICAgICB0ZW1wbGF0ZUZuQ2FjaGUuc2V0KHRwbCwgYnVpbGRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXh0ZW5kZWRUcmFjZShidWlsZGVyKGFyZ3MpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0cGwgPT09IFwib2JqZWN0XCIgJiYgdHBsKSB7XG4gICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGV4dHJhIHBhcmFtcy5cIik7XG4gICAgICByZXR1cm4gY3JlYXRlVGVtcGxhdGVCdWlsZGVyKGZvcm1hdHRlciwgKDAsIF9vcHRpb25zLm1lcmdlKShjYWNoZWRPcHRzLCAoMCwgX29wdGlvbnMudmFsaWRhdGUpKHRwbCkpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHRlbXBsYXRlIHBhcmFtICR7dHlwZW9mIHRwbH1gKTtcbiAgfSwge1xuICAgIGFzdDogKHRwbCwgLi4uYXJncykgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0cGwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBleHRyYSBwYXJhbXMuXCIpO1xuICAgICAgICByZXR1cm4gKDAsIF9zdHJpbmcuZGVmYXVsdCkoZm9ybWF0dGVyLCB0cGwsICgwLCBfb3B0aW9ucy5tZXJnZSkoKDAsIF9vcHRpb25zLm1lcmdlKShjYWNoZWRPcHRzLCAoMCwgX29wdGlvbnMudmFsaWRhdGUpKGFyZ3NbMF0pKSwgTk9fUExBQ0VIT0xERVIpKSgpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRwbCkpIHtcbiAgICAgICAgbGV0IGJ1aWxkZXIgPSB0ZW1wbGF0ZUFzdENhY2hlLmdldCh0cGwpO1xuICAgICAgICBpZiAoIWJ1aWxkZXIpIHtcbiAgICAgICAgICBidWlsZGVyID0gKDAsIF9saXRlcmFsLmRlZmF1bHQpKGZvcm1hdHRlciwgdHBsLCAoMCwgX29wdGlvbnMubWVyZ2UpKGNhY2hlZE9wdHMsIE5PX1BMQUNFSE9MREVSKSk7XG4gICAgICAgICAgdGVtcGxhdGVBc3RDYWNoZS5zZXQodHBsLCBidWlsZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVpbGRlcihhcmdzKSgpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHRlbXBsYXRlIHBhcmFtICR7dHlwZW9mIHRwbH1gKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZXh0ZW5kZWRUcmFjZShmbikge1xuICBsZXQgcm9vdFN0YWNrID0gXCJcIjtcbiAgdHJ5IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgIHJvb3RTdGFjayA9IGVycm9yLnN0YWNrLnNwbGl0KFwiXFxuXCIpLnNsaWNlKDMpLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcmcgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oYXJnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGVyci5zdGFjayArPSBgXFxuICAgID09PT09PT09PT09PT1cXG4ke3Jvb3RTdGFja31gO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVpbGRlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///74466\n')},60826:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.statements = exports.statement = exports.smart = exports.program = exports.expression = void 0;\nvar _t = __webpack_require__(2352);\nconst {\n  assertExpressionStatement\n} = _t;\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\nconst smart = exports.smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nconst statements = exports.statements = makeStatementFormatter(body => body);\nconst statement = exports.statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error("Found nothing to return.");\n  }\n  if (body.length > 1) {\n    throw new Error("Found multiple statements but wanted one");\n  }\n  return body[0];\n});\nconst expression = exports.expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error("Found multiple statements but wanted one");\n    }\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error("Parse result included parens.");\n    }\n  },\n  unwrap: ({\n    program\n  }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nconst program = exports.program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\n\n//# sourceMappingURL=formatters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA4MjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCLEdBQUcsaUJBQWlCLEdBQUcsYUFBYSxHQUFHLGVBQWUsR0FBRyxrQkFBa0I7QUFDN0YsU0FBUyxtQkFBTyxDQUFDLElBQWM7QUFDL0I7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0Esd0NBQXdDLElBQUksSUFBSTtBQUNoRCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUJBQW1CLGtCQUFrQjtBQUNyQyxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQixrQkFBa0I7QUFDckMscUJBQXFCLElBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RlbXBsYXRlL2xpYi9mb3JtYXR0ZXJzLmpzPzc5NjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN0YXRlbWVudHMgPSBleHBvcnRzLnN0YXRlbWVudCA9IGV4cG9ydHMuc21hcnQgPSBleHBvcnRzLnByb2dyYW0gPSBleHBvcnRzLmV4cHJlc3Npb24gPSB2b2lkIDA7XG52YXIgX3QgPSByZXF1aXJlKFwiQGJhYmVsL3R5cGVzXCIpO1xuY29uc3Qge1xuICBhc3NlcnRFeHByZXNzaW9uU3RhdGVtZW50XG59ID0gX3Q7XG5mdW5jdGlvbiBtYWtlU3RhdGVtZW50Rm9ybWF0dGVyKGZuKSB7XG4gIHJldHVybiB7XG4gICAgY29kZTogc3RyID0+IGAvKiBAYmFiZWwvdGVtcGxhdGUgKi87XFxuJHtzdHJ9YCxcbiAgICB2YWxpZGF0ZTogKCkgPT4ge30sXG4gICAgdW53cmFwOiBhc3QgPT4ge1xuICAgICAgcmV0dXJuIGZuKGFzdC5wcm9ncmFtLmJvZHkuc2xpY2UoMSkpO1xuICAgIH1cbiAgfTtcbn1cbmNvbnN0IHNtYXJ0ID0gZXhwb3J0cy5zbWFydCA9IG1ha2VTdGF0ZW1lbnRGb3JtYXR0ZXIoYm9keSA9PiB7XG4gIGlmIChib2R5Lmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYm9keTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYm9keVswXTtcbiAgfVxufSk7XG5jb25zdCBzdGF0ZW1lbnRzID0gZXhwb3J0cy5zdGF0ZW1lbnRzID0gbWFrZVN0YXRlbWVudEZvcm1hdHRlcihib2R5ID0+IGJvZHkpO1xuY29uc3Qgc3RhdGVtZW50ID0gZXhwb3J0cy5zdGF0ZW1lbnQgPSBtYWtlU3RhdGVtZW50Rm9ybWF0dGVyKGJvZHkgPT4ge1xuICBpZiAoYm9keS5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb3VuZCBub3RoaW5nIHRvIHJldHVybi5cIik7XG4gIH1cbiAgaWYgKGJvZHkubGVuZ3RoID4gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZvdW5kIG11bHRpcGxlIHN0YXRlbWVudHMgYnV0IHdhbnRlZCBvbmVcIik7XG4gIH1cbiAgcmV0dXJuIGJvZHlbMF07XG59KTtcbmNvbnN0IGV4cHJlc3Npb24gPSBleHBvcnRzLmV4cHJlc3Npb24gPSB7XG4gIGNvZGU6IHN0ciA9PiBgKFxcbiR7c3RyfVxcbilgLFxuICB2YWxpZGF0ZTogYXN0ID0+IHtcbiAgICBpZiAoYXN0LnByb2dyYW0uYm9keS5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb3VuZCBtdWx0aXBsZSBzdGF0ZW1lbnRzIGJ1dCB3YW50ZWQgb25lXCIpO1xuICAgIH1cbiAgICBpZiAoZXhwcmVzc2lvbi51bndyYXAoYXN0KS5zdGFydCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFyc2UgcmVzdWx0IGluY2x1ZGVkIHBhcmVucy5cIik7XG4gICAgfVxuICB9LFxuICB1bndyYXA6ICh7XG4gICAgcHJvZ3JhbVxuICB9KSA9PiB7XG4gICAgY29uc3QgW3N0bXRdID0gcHJvZ3JhbS5ib2R5O1xuICAgIGFzc2VydEV4cHJlc3Npb25TdGF0ZW1lbnQoc3RtdCk7XG4gICAgcmV0dXJuIHN0bXQuZXhwcmVzc2lvbjtcbiAgfVxufTtcbmNvbnN0IHByb2dyYW0gPSBleHBvcnRzLnByb2dyYW0gPSB7XG4gIGNvZGU6IHN0ciA9PiBzdHIsXG4gIHZhbGlkYXRlOiAoKSA9PiB7fSxcbiAgdW53cmFwOiBhc3QgPT4gYXN0LnByb2dyYW1cbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdHRlcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60826\n')},32485:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.statements = exports.statement = exports.smart = exports.program = exports.expression = exports["default"] = void 0;\nvar formatters = __webpack_require__(60826);\nvar _builder = __webpack_require__(74466);\nconst smart = exports.smart = (0, _builder.default)(formatters.smart);\nconst statement = exports.statement = (0, _builder.default)(formatters.statement);\nconst statements = exports.statements = (0, _builder.default)(formatters.statements);\nconst expression = exports.expression = (0, _builder.default)(formatters.expression);\nconst program = exports.program = (0, _builder.default)(formatters.program);\nvar _default = exports["default"] = Object.assign(smart.bind(undefined), {\n  smart,\n  statement,\n  statements,\n  expression,\n  program,\n  ast: smart.ast\n});\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI0ODUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCLEdBQUcsaUJBQWlCLEdBQUcsYUFBYSxHQUFHLGVBQWUsR0FBRyxrQkFBa0IsR0FBRyxrQkFBZTtBQUMvRyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFpQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxjQUFjLGFBQWE7QUFDM0Isa0JBQWtCLGlCQUFpQjtBQUNuQyxtQkFBbUIsa0JBQWtCO0FBQ3JDLG1CQUFtQixrQkFBa0I7QUFDckMsZ0JBQWdCLGVBQWU7QUFDL0IsZUFBZSxrQkFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdGVtcGxhdGUvbGliL2luZGV4LmpzPzY1NWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN0YXRlbWVudHMgPSBleHBvcnRzLnN0YXRlbWVudCA9IGV4cG9ydHMuc21hcnQgPSBleHBvcnRzLnByb2dyYW0gPSBleHBvcnRzLmV4cHJlc3Npb24gPSBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgZm9ybWF0dGVycyA9IHJlcXVpcmUoXCIuL2Zvcm1hdHRlcnMuanNcIik7XG52YXIgX2J1aWxkZXIgPSByZXF1aXJlKFwiLi9idWlsZGVyLmpzXCIpO1xuY29uc3Qgc21hcnQgPSBleHBvcnRzLnNtYXJ0ID0gKDAsIF9idWlsZGVyLmRlZmF1bHQpKGZvcm1hdHRlcnMuc21hcnQpO1xuY29uc3Qgc3RhdGVtZW50ID0gZXhwb3J0cy5zdGF0ZW1lbnQgPSAoMCwgX2J1aWxkZXIuZGVmYXVsdCkoZm9ybWF0dGVycy5zdGF0ZW1lbnQpO1xuY29uc3Qgc3RhdGVtZW50cyA9IGV4cG9ydHMuc3RhdGVtZW50cyA9ICgwLCBfYnVpbGRlci5kZWZhdWx0KShmb3JtYXR0ZXJzLnN0YXRlbWVudHMpO1xuY29uc3QgZXhwcmVzc2lvbiA9IGV4cG9ydHMuZXhwcmVzc2lvbiA9ICgwLCBfYnVpbGRlci5kZWZhdWx0KShmb3JtYXR0ZXJzLmV4cHJlc3Npb24pO1xuY29uc3QgcHJvZ3JhbSA9IGV4cG9ydHMucHJvZ3JhbSA9ICgwLCBfYnVpbGRlci5kZWZhdWx0KShmb3JtYXR0ZXJzLnByb2dyYW0pO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gT2JqZWN0LmFzc2lnbihzbWFydC5iaW5kKHVuZGVmaW5lZCksIHtcbiAgc21hcnQsXG4gIHN0YXRlbWVudCxcbiAgc3RhdGVtZW50cyxcbiAgZXhwcmVzc2lvbixcbiAgcHJvZ3JhbSxcbiAgYXN0OiBzbWFydC5hc3Rcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32485\n')},53438:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = literalTemplate;\nvar _options = __webpack_require__(19815);\nvar _parse = __webpack_require__(24858);\nvar _populate = __webpack_require__(97427);\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error("Unexpected replacement overlap.");\n          }\n        });\n      }\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\nfunction buildLiteralData(formatter, tpl, opts) {\n  let prefix = "BABEL_TPL$";\n  const raw = tpl.join("");\n  do {\n    prefix = "$$" + prefix;\n  } while (raw.includes(prefix));\n  const {\n    names,\n    code\n  } = buildTemplateCode(tpl, prefix);\n  const metadata = (0, _parse.default)(formatter, formatter.code(code), {\n    parser: opts.parser,\n    placeholderWhitelist: new Set(names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n    placeholderPattern: opts.placeholderPattern,\n    preserveComments: opts.preserveComments,\n    syntacticPlaceholders: opts.syntacticPlaceholders\n  });\n  return {\n    metadata,\n    names\n  };\n}\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n  return {\n    names,\n    code\n  };\n}\n\n//# sourceMappingURL=literal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM0MzguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxhQUFhLG1CQUFPLENBQUMsS0FBWTtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEMscUJBQXFCLE9BQU8sRUFBRSxNQUFNO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90ZW1wbGF0ZS9saWIvbGl0ZXJhbC5qcz9jMzAwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbGl0ZXJhbFRlbXBsYXRlO1xudmFyIF9vcHRpb25zID0gcmVxdWlyZShcIi4vb3B0aW9ucy5qc1wiKTtcbnZhciBfcGFyc2UgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbnZhciBfcG9wdWxhdGUgPSByZXF1aXJlKFwiLi9wb3B1bGF0ZS5qc1wiKTtcbmZ1bmN0aW9uIGxpdGVyYWxUZW1wbGF0ZShmb3JtYXR0ZXIsIHRwbCwgb3B0cykge1xuICBjb25zdCB7XG4gICAgbWV0YWRhdGEsXG4gICAgbmFtZXNcbiAgfSA9IGJ1aWxkTGl0ZXJhbERhdGEoZm9ybWF0dGVyLCB0cGwsIG9wdHMpO1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBjb25zdCBkZWZhdWx0UmVwbGFjZW1lbnRzID0ge307XG4gICAgYXJnLmZvckVhY2goKHJlcGxhY2VtZW50LCBpKSA9PiB7XG4gICAgICBkZWZhdWx0UmVwbGFjZW1lbnRzW25hbWVzW2ldXSA9IHJlcGxhY2VtZW50O1xuICAgIH0pO1xuICAgIHJldHVybiBhcmcgPT4ge1xuICAgICAgY29uc3QgcmVwbGFjZW1lbnRzID0gKDAsIF9vcHRpb25zLm5vcm1hbGl6ZVJlcGxhY2VtZW50cykoYXJnKTtcbiAgICAgIGlmIChyZXBsYWNlbWVudHMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMocmVwbGFjZW1lbnRzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZGVmYXVsdFJlcGxhY2VtZW50cywga2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZXBsYWNlbWVudCBvdmVybGFwLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHRlci51bndyYXAoKDAsIF9wb3B1bGF0ZS5kZWZhdWx0KShtZXRhZGF0YSwgcmVwbGFjZW1lbnRzID8gT2JqZWN0LmFzc2lnbihyZXBsYWNlbWVudHMsIGRlZmF1bHRSZXBsYWNlbWVudHMpIDogZGVmYXVsdFJlcGxhY2VtZW50cykpO1xuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBidWlsZExpdGVyYWxEYXRhKGZvcm1hdHRlciwgdHBsLCBvcHRzKSB7XG4gIGxldCBwcmVmaXggPSBcIkJBQkVMX1RQTCRcIjtcbiAgY29uc3QgcmF3ID0gdHBsLmpvaW4oXCJcIik7XG4gIGRvIHtcbiAgICBwcmVmaXggPSBcIiQkXCIgKyBwcmVmaXg7XG4gIH0gd2hpbGUgKHJhdy5pbmNsdWRlcyhwcmVmaXgpKTtcbiAgY29uc3Qge1xuICAgIG5hbWVzLFxuICAgIGNvZGVcbiAgfSA9IGJ1aWxkVGVtcGxhdGVDb2RlKHRwbCwgcHJlZml4KTtcbiAgY29uc3QgbWV0YWRhdGEgPSAoMCwgX3BhcnNlLmRlZmF1bHQpKGZvcm1hdHRlciwgZm9ybWF0dGVyLmNvZGUoY29kZSksIHtcbiAgICBwYXJzZXI6IG9wdHMucGFyc2VyLFxuICAgIHBsYWNlaG9sZGVyV2hpdGVsaXN0OiBuZXcgU2V0KG5hbWVzLmNvbmNhdChvcHRzLnBsYWNlaG9sZGVyV2hpdGVsaXN0ID8gQXJyYXkuZnJvbShvcHRzLnBsYWNlaG9sZGVyV2hpdGVsaXN0KSA6IFtdKSksXG4gICAgcGxhY2Vob2xkZXJQYXR0ZXJuOiBvcHRzLnBsYWNlaG9sZGVyUGF0dGVybixcbiAgICBwcmVzZXJ2ZUNvbW1lbnRzOiBvcHRzLnByZXNlcnZlQ29tbWVudHMsXG4gICAgc3ludGFjdGljUGxhY2Vob2xkZXJzOiBvcHRzLnN5bnRhY3RpY1BsYWNlaG9sZGVyc1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBtZXRhZGF0YSxcbiAgICBuYW1lc1xuICB9O1xufVxuZnVuY3Rpb24gYnVpbGRUZW1wbGF0ZUNvZGUodHBsLCBwcmVmaXgpIHtcbiAgY29uc3QgbmFtZXMgPSBbXTtcbiAgbGV0IGNvZGUgPSB0cGxbMF07XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgdHBsLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBgJHtwcmVmaXh9JHtpIC0gMX1gO1xuICAgIG5hbWVzLnB1c2godmFsdWUpO1xuICAgIGNvZGUgKz0gdmFsdWUgKyB0cGxbaV07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lcyxcbiAgICBjb2RlXG4gIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdGVyYWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53438\n')},19815:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.merge = merge;\nexports.normalizeReplacements = normalizeReplacements;\nexports.validate = validate;\nconst _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\nfunction merge(a, b) {\n  const {\n    placeholderWhitelist = a.placeholderWhitelist,\n    placeholderPattern = a.placeholderPattern,\n    preserveComments = a.preserveComments,\n    syntacticPlaceholders = a.syntacticPlaceholders\n  } = b;\n  return {\n    parser: Object.assign({}, a.parser, b.parser),\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders\n  };\n}\nfunction validate(opts) {\n  if (opts != null && typeof opts !== "object") {\n    throw new Error("Unknown template options.");\n  }\n  const _ref = opts || {},\n    {\n      placeholderWhitelist,\n      placeholderPattern,\n      preserveComments,\n      syntacticPlaceholders\n    } = _ref,\n    parser = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {\n    throw new Error("\'.placeholderWhitelist\' must be a Set, null, or undefined");\n  }\n  if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {\n    throw new Error("\'.placeholderPattern\' must be a RegExp, false, null, or undefined");\n  }\n  if (preserveComments != null && typeof preserveComments !== "boolean") {\n    throw new Error("\'.preserveComments\' must be a boolean, null, or undefined");\n  }\n  if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") {\n    throw new Error("\'.syntacticPlaceholders\' must be a boolean, null, or undefined");\n  }\n  if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {\n    throw new Error("\'.placeholderWhitelist\' and \'.placeholderPattern\' aren\'t compatible" + " with \'.syntacticPlaceholders: true\'");\n  }\n  return {\n    parser,\n    placeholderWhitelist: placeholderWhitelist || undefined,\n    placeholderPattern: placeholderPattern == null ? undefined : placeholderPattern,\n    preserveComments: preserveComments == null ? undefined : preserveComments,\n    syntacticPlaceholders: syntacticPlaceholders == null ? undefined : syntacticPlaceholders\n  };\n}\nfunction normalizeReplacements(replacements) {\n  if (Array.isArray(replacements)) {\n    return replacements.reduce((acc, replacement, i) => {\n      acc["$" + i] = replacement;\n      return acc;\n    }, {});\n  } else if (typeof replacements === "object" || replacements == null) {\n    return replacements || undefined;\n  }\n  throw new Error("Template replacements must be an array, object, null, or undefined");\n}\n\n//# sourceMappingURL=options.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk4MTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsYUFBYTtBQUNiLDZCQUE2QjtBQUM3QixnQkFBZ0I7QUFDaEI7QUFDQSwrQ0FBK0MsMEJBQTBCLFlBQVksdUJBQXVCLDhCQUE4Qiw2QkFBNkIsZUFBZTtBQUN0TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxJQUFJO0FBQ1QsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdGVtcGxhdGUvbGliL29wdGlvbnMuanM/ZDk1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbmV4cG9ydHMubm9ybWFsaXplUmVwbGFjZW1lbnRzID0gbm9ybWFsaXplUmVwbGFjZW1lbnRzO1xuZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wicGxhY2Vob2xkZXJXaGl0ZWxpc3RcIiwgXCJwbGFjZWhvbGRlclBhdHRlcm5cIiwgXCJwcmVzZXJ2ZUNvbW1lbnRzXCIsIFwic3ludGFjdGljUGxhY2Vob2xkZXJzXCJdO1xuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UociwgZSkgeyBpZiAobnVsbCA9PSByKSByZXR1cm4ge307IHZhciB0ID0ge307IGZvciAodmFyIG4gaW4gcikgaWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwociwgbikpIHsgaWYgKGUuaW5jbHVkZXMobikpIGNvbnRpbnVlOyB0W25dID0gcltuXTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gbWVyZ2UoYSwgYikge1xuICBjb25zdCB7XG4gICAgcGxhY2Vob2xkZXJXaGl0ZWxpc3QgPSBhLnBsYWNlaG9sZGVyV2hpdGVsaXN0LFxuICAgIHBsYWNlaG9sZGVyUGF0dGVybiA9IGEucGxhY2Vob2xkZXJQYXR0ZXJuLFxuICAgIHByZXNlcnZlQ29tbWVudHMgPSBhLnByZXNlcnZlQ29tbWVudHMsXG4gICAgc3ludGFjdGljUGxhY2Vob2xkZXJzID0gYS5zeW50YWN0aWNQbGFjZWhvbGRlcnNcbiAgfSA9IGI7XG4gIHJldHVybiB7XG4gICAgcGFyc2VyOiBPYmplY3QuYXNzaWduKHt9LCBhLnBhcnNlciwgYi5wYXJzZXIpLFxuICAgIHBsYWNlaG9sZGVyV2hpdGVsaXN0LFxuICAgIHBsYWNlaG9sZGVyUGF0dGVybixcbiAgICBwcmVzZXJ2ZUNvbW1lbnRzLFxuICAgIHN5bnRhY3RpY1BsYWNlaG9sZGVyc1xuICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGUob3B0cykge1xuICBpZiAob3B0cyAhPSBudWxsICYmIHR5cGVvZiBvcHRzICE9PSBcIm9iamVjdFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0ZW1wbGF0ZSBvcHRpb25zLlwiKTtcbiAgfVxuICBjb25zdCBfcmVmID0gb3B0cyB8fCB7fSxcbiAgICB7XG4gICAgICBwbGFjZWhvbGRlcldoaXRlbGlzdCxcbiAgICAgIHBsYWNlaG9sZGVyUGF0dGVybixcbiAgICAgIHByZXNlcnZlQ29tbWVudHMsXG4gICAgICBzeW50YWN0aWNQbGFjZWhvbGRlcnNcbiAgICB9ID0gX3JlZixcbiAgICBwYXJzZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBpZiAocGxhY2Vob2xkZXJXaGl0ZWxpc3QgIT0gbnVsbCAmJiAhKHBsYWNlaG9sZGVyV2hpdGVsaXN0IGluc3RhbmNlb2YgU2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIicucGxhY2Vob2xkZXJXaGl0ZWxpc3QnIG11c3QgYmUgYSBTZXQsIG51bGwsIG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuICBpZiAocGxhY2Vob2xkZXJQYXR0ZXJuICE9IG51bGwgJiYgIShwbGFjZWhvbGRlclBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApICYmIHBsYWNlaG9sZGVyUGF0dGVybiAhPT0gZmFsc2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCInLnBsYWNlaG9sZGVyUGF0dGVybicgbXVzdCBiZSBhIFJlZ0V4cCwgZmFsc2UsIG51bGwsIG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuICBpZiAocHJlc2VydmVDb21tZW50cyAhPSBudWxsICYmIHR5cGVvZiBwcmVzZXJ2ZUNvbW1lbnRzICE9PSBcImJvb2xlYW5cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIicucHJlc2VydmVDb21tZW50cycgbXVzdCBiZSBhIGJvb2xlYW4sIG51bGwsIG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuICBpZiAoc3ludGFjdGljUGxhY2Vob2xkZXJzICE9IG51bGwgJiYgdHlwZW9mIHN5bnRhY3RpY1BsYWNlaG9sZGVycyAhPT0gXCJib29sZWFuXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCInLnN5bnRhY3RpY1BsYWNlaG9sZGVycycgbXVzdCBiZSBhIGJvb2xlYW4sIG51bGwsIG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuICBpZiAoc3ludGFjdGljUGxhY2Vob2xkZXJzID09PSB0cnVlICYmIChwbGFjZWhvbGRlcldoaXRlbGlzdCAhPSBudWxsIHx8IHBsYWNlaG9sZGVyUGF0dGVybiAhPSBudWxsKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIicucGxhY2Vob2xkZXJXaGl0ZWxpc3QnIGFuZCAnLnBsYWNlaG9sZGVyUGF0dGVybicgYXJlbid0IGNvbXBhdGlibGVcIiArIFwiIHdpdGggJy5zeW50YWN0aWNQbGFjZWhvbGRlcnM6IHRydWUnXCIpO1xuICB9XG4gIHJldHVybiB7XG4gICAgcGFyc2VyLFxuICAgIHBsYWNlaG9sZGVyV2hpdGVsaXN0OiBwbGFjZWhvbGRlcldoaXRlbGlzdCB8fCB1bmRlZmluZWQsXG4gICAgcGxhY2Vob2xkZXJQYXR0ZXJuOiBwbGFjZWhvbGRlclBhdHRlcm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHBsYWNlaG9sZGVyUGF0dGVybixcbiAgICBwcmVzZXJ2ZUNvbW1lbnRzOiBwcmVzZXJ2ZUNvbW1lbnRzID09IG51bGwgPyB1bmRlZmluZWQgOiBwcmVzZXJ2ZUNvbW1lbnRzLFxuICAgIHN5bnRhY3RpY1BsYWNlaG9sZGVyczogc3ludGFjdGljUGxhY2Vob2xkZXJzID09IG51bGwgPyB1bmRlZmluZWQgOiBzeW50YWN0aWNQbGFjZWhvbGRlcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlcGxhY2VtZW50cyhyZXBsYWNlbWVudHMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocmVwbGFjZW1lbnRzKSkge1xuICAgIHJldHVybiByZXBsYWNlbWVudHMucmVkdWNlKChhY2MsIHJlcGxhY2VtZW50LCBpKSA9PiB7XG4gICAgICBhY2NbXCIkXCIgKyBpXSA9IHJlcGxhY2VtZW50O1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlcGxhY2VtZW50cyA9PT0gXCJvYmplY3RcIiB8fCByZXBsYWNlbWVudHMgPT0gbnVsbCkge1xuICAgIHJldHVybiByZXBsYWNlbWVudHMgfHwgdW5kZWZpbmVkO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIlRlbXBsYXRlIHJlcGxhY2VtZW50cyBtdXN0IGJlIGFuIGFycmF5LCBvYmplY3QsIG51bGwsIG9yIHVuZGVmaW5lZFwiKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3B0aW9ucy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19815\n')},24858:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = parseAndBuildMetadata;\nvar _t = __webpack_require__(2352);\nvar _parser = __webpack_require__(22172);\nvar _codeFrame = __webpack_require__(62882);\nconst {\n  isCallExpression,\n  isExpressionStatement,\n  isFunction,\n  isIdentifier,\n  isJSXIdentifier,\n  isNewExpression,\n  isPlaceholder,\n  isStatement,\n  isStringLiteral,\n  removePropertiesDeep,\n  traverse\n} = _t;\nconst PATTERN = /^[_$A-Z0-9]+$/;\nfunction parseAndBuildMetadata(formatter, code, opts) {\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders\n  } = opts;\n  const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);\n  removePropertiesDeep(ast, {\n    preserveComments\n  });\n  formatter.validate(ast);\n  const state = {\n    syntactic: {\n      placeholders: [],\n      placeholderNames: new Set()\n    },\n    legacy: {\n      placeholders: [],\n      placeholderNames: new Set()\n    },\n    placeholderWhitelist,\n    placeholderPattern,\n    syntacticPlaceholders\n  };\n  traverse(ast, placeholderVisitorHandler, state);\n  return Object.assign({\n    ast\n  }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);\n}\nfunction placeholderVisitorHandler(node, ancestors, state) {\n  var _state$placeholderWhi;\n  let name;\n  let hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;\n  if (isPlaceholder(node)) {\n    if (state.syntacticPlaceholders === false) {\n      throw new Error("%%foo%%-style placeholders can\'t be used when " + "\'.syntacticPlaceholders\' is false.");\n    }\n    name = node.name.name;\n    hasSyntacticPlaceholders = true;\n  } else if (hasSyntacticPlaceholders || state.syntacticPlaceholders) {\n    return;\n  } else if (isIdentifier(node) || isJSXIdentifier(node)) {\n    name = node.name;\n  } else if (isStringLiteral(node)) {\n    name = node.value;\n  } else {\n    return;\n  }\n  if (hasSyntacticPlaceholders && (state.placeholderPattern != null || state.placeholderWhitelist != null)) {\n    throw new Error("\'.placeholderWhitelist\' and \'.placeholderPattern\' aren\'t compatible" + " with \'.syntacticPlaceholders: true\'");\n  }\n  if (!hasSyntacticPlaceholders && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {\n    return;\n  }\n  ancestors = ancestors.slice();\n  const {\n    node: parent,\n    key\n  } = ancestors[ancestors.length - 1];\n  let type;\n  if (isStringLiteral(node) || isPlaceholder(node, {\n    expectedNode: "StringLiteral"\n  })) {\n    type = "string";\n  } else if (isNewExpression(parent) && key === "arguments" || isCallExpression(parent) && key === "arguments" || isFunction(parent) && key === "params") {\n    type = "param";\n  } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {\n    type = "statement";\n    ancestors = ancestors.slice(0, -1);\n  } else if (isStatement(node) && isPlaceholder(node)) {\n    type = "statement";\n  } else {\n    type = "other";\n  }\n  const {\n    placeholders,\n    placeholderNames\n  } = !hasSyntacticPlaceholders ? state.legacy : state.syntactic;\n  placeholders.push({\n    name,\n    type,\n    resolve: ast => resolveAncestors(ast, ancestors),\n    isDuplicate: placeholderNames.has(name)\n  });\n  placeholderNames.add(name);\n}\nfunction resolveAncestors(ast, ancestors) {\n  let parent = ast;\n  for (let i = 0; i < ancestors.length - 1; i++) {\n    const {\n      key,\n      index\n    } = ancestors[i];\n    if (index === undefined) {\n      parent = parent[key];\n    } else {\n      parent = parent[key][index];\n    }\n  }\n  const {\n    key,\n    index\n  } = ancestors[ancestors.length - 1];\n  return {\n    parent,\n    key,\n    index\n  };\n}\nfunction parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {\n  const plugins = (parserOpts.plugins || []).slice();\n  if (syntacticPlaceholders !== false) {\n    plugins.push("placeholders");\n  }\n  parserOpts = Object.assign({\n    allowReturnOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    sourceType: "module"\n  }, parserOpts, {\n    plugins\n  });\n  try {\n    return (0, _parser.parse)(code, parserOpts);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message += "\\n" + (0, _codeFrame.codeFrameColumns)(code, {\n        start: loc\n      });\n      err.code = "BABEL_TEMPLATE_PARSE_ERROR";\n    }\n    throw err;\n  }\n}\n\n//# sourceMappingURL=parse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ4NTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixTQUFTLG1CQUFPLENBQUMsSUFBYztBQUMvQixjQUFjLG1CQUFPLENBQUMsS0FBZTtBQUNyQyxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90ZW1wbGF0ZS9saWIvcGFyc2UuanM/NGE5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBhcnNlQW5kQnVpbGRNZXRhZGF0YTtcbnZhciBfdCA9IHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIik7XG52YXIgX3BhcnNlciA9IHJlcXVpcmUoXCJAYmFiZWwvcGFyc2VyXCIpO1xudmFyIF9jb2RlRnJhbWUgPSByZXF1aXJlKFwiQGJhYmVsL2NvZGUtZnJhbWVcIik7XG5jb25zdCB7XG4gIGlzQ2FsbEV4cHJlc3Npb24sXG4gIGlzRXhwcmVzc2lvblN0YXRlbWVudCxcbiAgaXNGdW5jdGlvbixcbiAgaXNJZGVudGlmaWVyLFxuICBpc0pTWElkZW50aWZpZXIsXG4gIGlzTmV3RXhwcmVzc2lvbixcbiAgaXNQbGFjZWhvbGRlcixcbiAgaXNTdGF0ZW1lbnQsXG4gIGlzU3RyaW5nTGl0ZXJhbCxcbiAgcmVtb3ZlUHJvcGVydGllc0RlZXAsXG4gIHRyYXZlcnNlXG59ID0gX3Q7XG5jb25zdCBQQVRURVJOID0gL15bXyRBLVowLTldKyQvO1xuZnVuY3Rpb24gcGFyc2VBbmRCdWlsZE1ldGFkYXRhKGZvcm1hdHRlciwgY29kZSwgb3B0cykge1xuICBjb25zdCB7XG4gICAgcGxhY2Vob2xkZXJXaGl0ZWxpc3QsXG4gICAgcGxhY2Vob2xkZXJQYXR0ZXJuLFxuICAgIHByZXNlcnZlQ29tbWVudHMsXG4gICAgc3ludGFjdGljUGxhY2Vob2xkZXJzXG4gIH0gPSBvcHRzO1xuICBjb25zdCBhc3QgPSBwYXJzZVdpdGhDb2RlRnJhbWUoY29kZSwgb3B0cy5wYXJzZXIsIHN5bnRhY3RpY1BsYWNlaG9sZGVycyk7XG4gIHJlbW92ZVByb3BlcnRpZXNEZWVwKGFzdCwge1xuICAgIHByZXNlcnZlQ29tbWVudHNcbiAgfSk7XG4gIGZvcm1hdHRlci52YWxpZGF0ZShhc3QpO1xuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBzeW50YWN0aWM6IHtcbiAgICAgIHBsYWNlaG9sZGVyczogW10sXG4gICAgICBwbGFjZWhvbGRlck5hbWVzOiBuZXcgU2V0KClcbiAgICB9LFxuICAgIGxlZ2FjeToge1xuICAgICAgcGxhY2Vob2xkZXJzOiBbXSxcbiAgICAgIHBsYWNlaG9sZGVyTmFtZXM6IG5ldyBTZXQoKVxuICAgIH0sXG4gICAgcGxhY2Vob2xkZXJXaGl0ZWxpc3QsXG4gICAgcGxhY2Vob2xkZXJQYXR0ZXJuLFxuICAgIHN5bnRhY3RpY1BsYWNlaG9sZGVyc1xuICB9O1xuICB0cmF2ZXJzZShhc3QsIHBsYWNlaG9sZGVyVmlzaXRvckhhbmRsZXIsIHN0YXRlKTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgIGFzdFxuICB9LCBzdGF0ZS5zeW50YWN0aWMucGxhY2Vob2xkZXJzLmxlbmd0aCA/IHN0YXRlLnN5bnRhY3RpYyA6IHN0YXRlLmxlZ2FjeSk7XG59XG5mdW5jdGlvbiBwbGFjZWhvbGRlclZpc2l0b3JIYW5kbGVyKG5vZGUsIGFuY2VzdG9ycywgc3RhdGUpIHtcbiAgdmFyIF9zdGF0ZSRwbGFjZWhvbGRlcldoaTtcbiAgbGV0IG5hbWU7XG4gIGxldCBoYXNTeW50YWN0aWNQbGFjZWhvbGRlcnMgPSBzdGF0ZS5zeW50YWN0aWMucGxhY2Vob2xkZXJzLmxlbmd0aCA+IDA7XG4gIGlmIChpc1BsYWNlaG9sZGVyKG5vZGUpKSB7XG4gICAgaWYgKHN0YXRlLnN5bnRhY3RpY1BsYWNlaG9sZGVycyA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIiUlZm9vJSUtc3R5bGUgcGxhY2Vob2xkZXJzIGNhbid0IGJlIHVzZWQgd2hlbiBcIiArIFwiJy5zeW50YWN0aWNQbGFjZWhvbGRlcnMnIGlzIGZhbHNlLlwiKTtcbiAgICB9XG4gICAgbmFtZSA9IG5vZGUubmFtZS5uYW1lO1xuICAgIGhhc1N5bnRhY3RpY1BsYWNlaG9sZGVycyA9IHRydWU7XG4gIH0gZWxzZSBpZiAoaGFzU3ludGFjdGljUGxhY2Vob2xkZXJzIHx8IHN0YXRlLnN5bnRhY3RpY1BsYWNlaG9sZGVycykge1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChpc0lkZW50aWZpZXIobm9kZSkgfHwgaXNKU1hJZGVudGlmaWVyKG5vZGUpKSB7XG4gICAgbmFtZSA9IG5vZGUubmFtZTtcbiAgfSBlbHNlIGlmIChpc1N0cmluZ0xpdGVyYWwobm9kZSkpIHtcbiAgICBuYW1lID0gbm9kZS52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGhhc1N5bnRhY3RpY1BsYWNlaG9sZGVycyAmJiAoc3RhdGUucGxhY2Vob2xkZXJQYXR0ZXJuICE9IG51bGwgfHwgc3RhdGUucGxhY2Vob2xkZXJXaGl0ZWxpc3QgIT0gbnVsbCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCInLnBsYWNlaG9sZGVyV2hpdGVsaXN0JyBhbmQgJy5wbGFjZWhvbGRlclBhdHRlcm4nIGFyZW4ndCBjb21wYXRpYmxlXCIgKyBcIiB3aXRoICcuc3ludGFjdGljUGxhY2Vob2xkZXJzOiB0cnVlJ1wiKTtcbiAgfVxuICBpZiAoIWhhc1N5bnRhY3RpY1BsYWNlaG9sZGVycyAmJiAoc3RhdGUucGxhY2Vob2xkZXJQYXR0ZXJuID09PSBmYWxzZSB8fCAhKHN0YXRlLnBsYWNlaG9sZGVyUGF0dGVybiB8fCBQQVRURVJOKS50ZXN0KG5hbWUpKSAmJiAhKChfc3RhdGUkcGxhY2Vob2xkZXJXaGkgPSBzdGF0ZS5wbGFjZWhvbGRlcldoaXRlbGlzdCkgIT0gbnVsbCAmJiBfc3RhdGUkcGxhY2Vob2xkZXJXaGkuaGFzKG5hbWUpKSkge1xuICAgIHJldHVybjtcbiAgfVxuICBhbmNlc3RvcnMgPSBhbmNlc3RvcnMuc2xpY2UoKTtcbiAgY29uc3Qge1xuICAgIG5vZGU6IHBhcmVudCxcbiAgICBrZXlcbiAgfSA9IGFuY2VzdG9yc1thbmNlc3RvcnMubGVuZ3RoIC0gMV07XG4gIGxldCB0eXBlO1xuICBpZiAoaXNTdHJpbmdMaXRlcmFsKG5vZGUpIHx8IGlzUGxhY2Vob2xkZXIobm9kZSwge1xuICAgIGV4cGVjdGVkTm9kZTogXCJTdHJpbmdMaXRlcmFsXCJcbiAgfSkpIHtcbiAgICB0eXBlID0gXCJzdHJpbmdcIjtcbiAgfSBlbHNlIGlmIChpc05ld0V4cHJlc3Npb24ocGFyZW50KSAmJiBrZXkgPT09IFwiYXJndW1lbnRzXCIgfHwgaXNDYWxsRXhwcmVzc2lvbihwYXJlbnQpICYmIGtleSA9PT0gXCJhcmd1bWVudHNcIiB8fCBpc0Z1bmN0aW9uKHBhcmVudCkgJiYga2V5ID09PSBcInBhcmFtc1wiKSB7XG4gICAgdHlwZSA9IFwicGFyYW1cIjtcbiAgfSBlbHNlIGlmIChpc0V4cHJlc3Npb25TdGF0ZW1lbnQocGFyZW50KSAmJiAhaXNQbGFjZWhvbGRlcihub2RlKSkge1xuICAgIHR5cGUgPSBcInN0YXRlbWVudFwiO1xuICAgIGFuY2VzdG9ycyA9IGFuY2VzdG9ycy5zbGljZSgwLCAtMSk7XG4gIH0gZWxzZSBpZiAoaXNTdGF0ZW1lbnQobm9kZSkgJiYgaXNQbGFjZWhvbGRlcihub2RlKSkge1xuICAgIHR5cGUgPSBcInN0YXRlbWVudFwiO1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSBcIm90aGVyXCI7XG4gIH1cbiAgY29uc3Qge1xuICAgIHBsYWNlaG9sZGVycyxcbiAgICBwbGFjZWhvbGRlck5hbWVzXG4gIH0gPSAhaGFzU3ludGFjdGljUGxhY2Vob2xkZXJzID8gc3RhdGUubGVnYWN5IDogc3RhdGUuc3ludGFjdGljO1xuICBwbGFjZWhvbGRlcnMucHVzaCh7XG4gICAgbmFtZSxcbiAgICB0eXBlLFxuICAgIHJlc29sdmU6IGFzdCA9PiByZXNvbHZlQW5jZXN0b3JzKGFzdCwgYW5jZXN0b3JzKSxcbiAgICBpc0R1cGxpY2F0ZTogcGxhY2Vob2xkZXJOYW1lcy5oYXMobmFtZSlcbiAgfSk7XG4gIHBsYWNlaG9sZGVyTmFtZXMuYWRkKG5hbWUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUFuY2VzdG9ycyhhc3QsIGFuY2VzdG9ycykge1xuICBsZXQgcGFyZW50ID0gYXN0O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFuY2VzdG9ycy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCB7XG4gICAgICBrZXksXG4gICAgICBpbmRleFxuICAgIH0gPSBhbmNlc3RvcnNbaV07XG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudFtrZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnRba2V5XVtpbmRleF07XG4gICAgfVxuICB9XG4gIGNvbnN0IHtcbiAgICBrZXksXG4gICAgaW5kZXhcbiAgfSA9IGFuY2VzdG9yc1thbmNlc3RvcnMubGVuZ3RoIC0gMV07XG4gIHJldHVybiB7XG4gICAgcGFyZW50LFxuICAgIGtleSxcbiAgICBpbmRleFxuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VXaXRoQ29kZUZyYW1lKGNvZGUsIHBhcnNlck9wdHMsIHN5bnRhY3RpY1BsYWNlaG9sZGVycykge1xuICBjb25zdCBwbHVnaW5zID0gKHBhcnNlck9wdHMucGx1Z2lucyB8fCBbXSkuc2xpY2UoKTtcbiAgaWYgKHN5bnRhY3RpY1BsYWNlaG9sZGVycyAhPT0gZmFsc2UpIHtcbiAgICBwbHVnaW5zLnB1c2goXCJwbGFjZWhvbGRlcnNcIik7XG4gIH1cbiAgcGFyc2VyT3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uOiB0cnVlLFxuICAgIGFsbG93U3VwZXJPdXRzaWRlTWV0aG9kOiB0cnVlLFxuICAgIHNvdXJjZVR5cGU6IFwibW9kdWxlXCJcbiAgfSwgcGFyc2VyT3B0cywge1xuICAgIHBsdWdpbnNcbiAgfSk7XG4gIHRyeSB7XG4gICAgcmV0dXJuICgwLCBfcGFyc2VyLnBhcnNlKShjb2RlLCBwYXJzZXJPcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc3QgbG9jID0gZXJyLmxvYztcbiAgICBpZiAobG9jKSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblwiICsgKDAsIF9jb2RlRnJhbWUuY29kZUZyYW1lQ29sdW1ucykoY29kZSwge1xuICAgICAgICBzdGFydDogbG9jXG4gICAgICB9KTtcbiAgICAgIGVyci5jb2RlID0gXCJCQUJFTF9URU1QTEFURV9QQVJTRV9FUlJPUlwiO1xuICAgIH1cbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24858\n')},97427:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = populatePlaceholders;\nvar _t = __webpack_require__(2352);\nconst {\n  blockStatement,\n  cloneNode,\n  emptyStatement,\n  expressionStatement,\n  identifier,\n  isStatement,\n  isStringLiteral,\n  stringLiteral,\n  validate\n} = _t;\nfunction populatePlaceholders(metadata, replacements) {\n  const ast = cloneNode(metadata.ast);\n  if (replacements) {\n    metadata.placeholders.forEach(placeholder => {\n      if (!hasOwnProperty.call(replacements, placeholder.name)) {\n        const placeholderName = placeholder.name;\n        throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set([\'${placeholderName}\'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`);\n      }\n    });\n    Object.keys(replacements).forEach(key => {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(`Unknown substitution "${key}" given`);\n      }\n    });\n  }\n  metadata.placeholders.slice().reverse().forEach(placeholder => {\n    try {\n      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);\n    } catch (e) {\n      e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`;\n      throw e;\n    }\n  });\n  return ast;\n}\nfunction applyReplacement(placeholder, ast, replacement) {\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(node => cloneNode(node));\n    } else if (typeof replacement === "object") {\n      replacement = cloneNode(replacement);\n    }\n  }\n  const {\n    parent,\n    key,\n    index\n  } = placeholder.resolve(ast);\n  if (placeholder.type === "string") {\n    if (typeof replacement === "string") {\n      replacement = stringLiteral(replacement);\n    }\n    if (!replacement || !isStringLiteral(replacement)) {\n      throw new Error("Expected string substitution");\n    }\n  } else if (placeholder.type === "statement") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = blockStatement(replacement);\n      } else if (typeof replacement === "string") {\n        replacement = expressionStatement(identifier(replacement));\n      } else if (!isStatement(replacement)) {\n        replacement = expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === "string") {\n          replacement = identifier(replacement);\n        }\n        if (!isStatement(replacement)) {\n          replacement = expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === "param") {\n    if (typeof replacement === "string") {\n      replacement = identifier(replacement);\n    }\n    if (index === undefined) throw new Error("Assertion failure.");\n  } else {\n    if (typeof replacement === "string") {\n      replacement = identifier(replacement);\n    }\n    if (Array.isArray(replacement)) {\n      throw new Error("Cannot replace single expression with an array.");\n    }\n  }\n  function set(parent, key, value) {\n    const node = parent[key];\n    parent[key] = value;\n    if (node.type === "Identifier" || node.type === "Placeholder") {\n      if (node.typeAnnotation) {\n        value.typeAnnotation = node.typeAnnotation;\n      }\n      if (node.optional) {\n        value.optional = node.optional;\n      }\n      if (node.decorators) {\n        value.decorators = node.decorators;\n      }\n    }\n  }\n  if (index === undefined) {\n    validate(parent, key, replacement);\n    set(parent, key, replacement);\n  } else {\n    const items = parent[key].slice();\n    if (placeholder.type === "statement" || placeholder.type === "param") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice(index, 1, ...replacement);\n      } else {\n        set(items, index, replacement);\n      }\n    } else {\n      set(items, index, replacement);\n    }\n    validate(parent, key, items);\n    parent[key] = items;\n  }\n}\n\n//# sourceMappingURL=populate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc0MjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixTQUFTLG1CQUFPLENBQUMsSUFBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsZ0JBQWdCO0FBQzdFO0FBQ0EsZ0JBQWdCLDZEQUE2RCxnQkFBZ0I7QUFDN0YsZ0JBQWdCLHdCQUF3QixnQkFBZ0IsSUFBSTtBQUM1RDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaURBQWlELElBQUk7QUFDckQ7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sa0RBQWtELGlCQUFpQixLQUFLLFVBQVU7QUFDbEY7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdGVtcGxhdGUvbGliL3BvcHVsYXRlLmpzPzYzZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwb3B1bGF0ZVBsYWNlaG9sZGVycztcbnZhciBfdCA9IHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIik7XG5jb25zdCB7XG4gIGJsb2NrU3RhdGVtZW50LFxuICBjbG9uZU5vZGUsXG4gIGVtcHR5U3RhdGVtZW50LFxuICBleHByZXNzaW9uU3RhdGVtZW50LFxuICBpZGVudGlmaWVyLFxuICBpc1N0YXRlbWVudCxcbiAgaXNTdHJpbmdMaXRlcmFsLFxuICBzdHJpbmdMaXRlcmFsLFxuICB2YWxpZGF0ZVxufSA9IF90O1xuZnVuY3Rpb24gcG9wdWxhdGVQbGFjZWhvbGRlcnMobWV0YWRhdGEsIHJlcGxhY2VtZW50cykge1xuICBjb25zdCBhc3QgPSBjbG9uZU5vZGUobWV0YWRhdGEuYXN0KTtcbiAgaWYgKHJlcGxhY2VtZW50cykge1xuICAgIG1ldGFkYXRhLnBsYWNlaG9sZGVycy5mb3JFYWNoKHBsYWNlaG9sZGVyID0+IHtcbiAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZXBsYWNlbWVudHMsIHBsYWNlaG9sZGVyLm5hbWUpKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyTmFtZSA9IHBsYWNlaG9sZGVyLm5hbWU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3I6IE5vIHN1YnN0aXR1dGlvbiBnaXZlbiBmb3IgXCIke3BsYWNlaG9sZGVyTmFtZX1cIi4gSWYgdGhpcyBpcyBub3QgbWVhbnQgdG8gYmUgYVxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgeW91IG1heSB3YW50IHRvIGNvbnNpZGVyIHBhc3Npbmcgb25lIG9mIHRoZSBmb2xsb3dpbmcgb3B0aW9ucyB0byBAYmFiZWwvdGVtcGxhdGU6XG4gICAgICAgICAgICAtIHsgcGxhY2Vob2xkZXJQYXR0ZXJuOiBmYWxzZSwgcGxhY2Vob2xkZXJXaGl0ZWxpc3Q6IG5ldyBTZXQoWycke3BsYWNlaG9sZGVyTmFtZX0nXSl9XG4gICAgICAgICAgICAtIHsgcGxhY2Vob2xkZXJQYXR0ZXJuOiAvXiR7cGxhY2Vob2xkZXJOYW1lfSQvIH1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhyZXBsYWNlbWVudHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghbWV0YWRhdGEucGxhY2Vob2xkZXJOYW1lcy5oYXMoa2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc3Vic3RpdHV0aW9uIFwiJHtrZXl9XCIgZ2l2ZW5gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBtZXRhZGF0YS5wbGFjZWhvbGRlcnMuc2xpY2UoKS5yZXZlcnNlKCkuZm9yRWFjaChwbGFjZWhvbGRlciA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGFwcGx5UmVwbGFjZW1lbnQocGxhY2Vob2xkZXIsIGFzdCwgcmVwbGFjZW1lbnRzICYmIHJlcGxhY2VtZW50c1twbGFjZWhvbGRlci5uYW1lXSB8fCBudWxsKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLm1lc3NhZ2UgPSBgQGJhYmVsL3RlbXBsYXRlIHBsYWNlaG9sZGVyIFwiJHtwbGFjZWhvbGRlci5uYW1lfVwiOiAke2UubWVzc2FnZX1gO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYXN0O1xufVxuZnVuY3Rpb24gYXBwbHlSZXBsYWNlbWVudChwbGFjZWhvbGRlciwgYXN0LCByZXBsYWNlbWVudCkge1xuICBpZiAocGxhY2Vob2xkZXIuaXNEdXBsaWNhdGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlbWVudCkpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnQubWFwKG5vZGUgPT4gY2xvbmVOb2RlKG5vZGUpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXBsYWNlbWVudCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmVwbGFjZW1lbnQgPSBjbG9uZU5vZGUocmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgfVxuICBjb25zdCB7XG4gICAgcGFyZW50LFxuICAgIGtleSxcbiAgICBpbmRleFxuICB9ID0gcGxhY2Vob2xkZXIucmVzb2x2ZShhc3QpO1xuICBpZiAocGxhY2Vob2xkZXIudHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmICh0eXBlb2YgcmVwbGFjZW1lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gc3RyaW5nTGl0ZXJhbChyZXBsYWNlbWVudCk7XG4gICAgfVxuICAgIGlmICghcmVwbGFjZW1lbnQgfHwgIWlzU3RyaW5nTGl0ZXJhbChyZXBsYWNlbWVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIHN0cmluZyBzdWJzdGl0dXRpb25cIik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBsYWNlaG9sZGVyLnR5cGUgPT09IFwic3RhdGVtZW50XCIpIHtcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFyZXBsYWNlbWVudCkge1xuICAgICAgICByZXBsYWNlbWVudCA9IGVtcHR5U3RhdGVtZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVwbGFjZW1lbnQpKSB7XG4gICAgICAgIHJlcGxhY2VtZW50ID0gYmxvY2tTdGF0ZW1lbnQocmVwbGFjZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVwbGFjZW1lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmVwbGFjZW1lbnQgPSBleHByZXNzaW9uU3RhdGVtZW50KGlkZW50aWZpZXIocmVwbGFjZW1lbnQpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzU3RhdGVtZW50KHJlcGxhY2VtZW50KSkge1xuICAgICAgICByZXBsYWNlbWVudCA9IGV4cHJlc3Npb25TdGF0ZW1lbnQocmVwbGFjZW1lbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocmVwbGFjZW1lbnQgJiYgIUFycmF5LmlzQXJyYXkocmVwbGFjZW1lbnQpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZW1lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGlkZW50aWZpZXIocmVwbGFjZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNTdGF0ZW1lbnQocmVwbGFjZW1lbnQpKSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBleHByZXNzaW9uU3RhdGVtZW50KHJlcGxhY2VtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChwbGFjZWhvbGRlci50eXBlID09PSBcInBhcmFtXCIpIHtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXBsYWNlbWVudCA9IGlkZW50aWZpZXIocmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKFwiQXNzZXJ0aW9uIGZhaWx1cmUuXCIpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgcmVwbGFjZW1lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gaWRlbnRpZmllcihyZXBsYWNlbWVudCk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VtZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlcGxhY2Ugc2luZ2xlIGV4cHJlc3Npb24gd2l0aCBhbiBhcnJheS5cIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldChwYXJlbnQsIGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBub2RlID0gcGFyZW50W2tleV07XG4gICAgcGFyZW50W2tleV0gPSB2YWx1ZTtcbiAgICBpZiAobm9kZS50eXBlID09PSBcIklkZW50aWZpZXJcIiB8fCBub2RlLnR5cGUgPT09IFwiUGxhY2Vob2xkZXJcIikge1xuICAgICAgaWYgKG5vZGUudHlwZUFubm90YXRpb24pIHtcbiAgICAgICAgdmFsdWUudHlwZUFubm90YXRpb24gPSBub2RlLnR5cGVBbm5vdGF0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUub3B0aW9uYWwpIHtcbiAgICAgICAgdmFsdWUub3B0aW9uYWwgPSBub2RlLm9wdGlvbmFsO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZGVjb3JhdG9ycykge1xuICAgICAgICB2YWx1ZS5kZWNvcmF0b3JzID0gbm9kZS5kZWNvcmF0b3JzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRlKHBhcmVudCwga2V5LCByZXBsYWNlbWVudCk7XG4gICAgc2V0KHBhcmVudCwga2V5LCByZXBsYWNlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXRlbXMgPSBwYXJlbnRba2V5XS5zbGljZSgpO1xuICAgIGlmIChwbGFjZWhvbGRlci50eXBlID09PSBcInN0YXRlbWVudFwiIHx8IHBsYWNlaG9sZGVyLnR5cGUgPT09IFwicGFyYW1cIikge1xuICAgICAgaWYgKHJlcGxhY2VtZW50ID09IG51bGwpIHtcbiAgICAgICAgaXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlbWVudCkpIHtcbiAgICAgICAgaXRlbXMuc3BsaWNlKGluZGV4LCAxLCAuLi5yZXBsYWNlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXQoaXRlbXMsIGluZGV4LCByZXBsYWNlbWVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldChpdGVtcywgaW5kZXgsIHJlcGxhY2VtZW50KTtcbiAgICB9XG4gICAgdmFsaWRhdGUocGFyZW50LCBrZXksIGl0ZW1zKTtcbiAgICBwYXJlbnRba2V5XSA9IGl0ZW1zO1xuICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHVsYXRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///97427\n')},95252:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = stringTemplate;\nvar _options = __webpack_require__(19815);\nvar _parse = __webpack_require__(24858);\nvar _populate = __webpack_require__(97427);\nfunction stringTemplate(formatter, code, opts) {\n  code = formatter.code(code);\n  let metadata;\n  return arg => {\n    const replacements = (0, _options.normalizeReplacements)(arg);\n    if (!metadata) metadata = (0, _parse.default)(formatter, code, opts);\n    return formatter.unwrap((0, _populate.default)(metadata, replacements));\n  };\n}\n\n//# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUyNTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQyxhQUFhLG1CQUFPLENBQUMsS0FBWTtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyxLQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RlbXBsYXRlL2xpYi9zdHJpbmcuanM/MTAxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0cmluZ1RlbXBsYXRlO1xudmFyIF9vcHRpb25zID0gcmVxdWlyZShcIi4vb3B0aW9ucy5qc1wiKTtcbnZhciBfcGFyc2UgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbnZhciBfcG9wdWxhdGUgPSByZXF1aXJlKFwiLi9wb3B1bGF0ZS5qc1wiKTtcbmZ1bmN0aW9uIHN0cmluZ1RlbXBsYXRlKGZvcm1hdHRlciwgY29kZSwgb3B0cykge1xuICBjb2RlID0gZm9ybWF0dGVyLmNvZGUoY29kZSk7XG4gIGxldCBtZXRhZGF0YTtcbiAgcmV0dXJuIGFyZyA9PiB7XG4gICAgY29uc3QgcmVwbGFjZW1lbnRzID0gKDAsIF9vcHRpb25zLm5vcm1hbGl6ZVJlcGxhY2VtZW50cykoYXJnKTtcbiAgICBpZiAoIW1ldGFkYXRhKSBtZXRhZGF0YSA9ICgwLCBfcGFyc2UuZGVmYXVsdCkoZm9ybWF0dGVyLCBjb2RlLCBvcHRzKTtcbiAgICByZXR1cm4gZm9ybWF0dGVyLnVud3JhcCgoMCwgX3BvcHVsYXRlLmRlZmF1bHQpKG1ldGFkYXRhLCByZXBsYWNlbWVudHMpKTtcbiAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95252\n')},37411:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.clear = clear;\nexports.clearPath = clearPath;\nexports.clearScope = clearScope;\nexports.getCachedPaths = getCachedPaths;\nexports.getOrCreateCachedPaths = getOrCreateCachedPaths;\nexports.scope = exports.path = void 0;\nlet pathsCache = exports.path = new WeakMap();\nlet scope = exports.scope = new WeakMap();\nfunction clear() {\n  clearPath();\n  clearScope();\n}\nfunction clearPath() {\n  exports.path = pathsCache = new WeakMap();\n}\nfunction clearScope() {\n  exports.scope = scope = new WeakMap();\n}\nconst nullHub = Object.freeze({});\nfunction getCachedPaths(hub, parent) {\n  var _pathsCache$get, _hub;\n  {\n    hub = null;\n  }\n  return (_pathsCache$get = pathsCache.get((_hub = hub) != null ? _hub : nullHub)) == null ? void 0 : _pathsCache$get.get(parent);\n}\nfunction getOrCreateCachedPaths(hub, parent) {\n  var _hub2, _hub3;\n  {\n    hub = null;\n  }\n  let parents = pathsCache.get((_hub2 = hub) != null ? _hub2 : nullHub);\n  if (!parents) pathsCache.set((_hub3 = hub) != null ? _hub3 : nullHub, parents = new WeakMap());\n  let paths = parents.get(parent);\n  if (!paths) parents.set(parent, paths = new Map());\n  return paths;\n}\n\n//# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0MTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsYUFBYTtBQUNiLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsc0JBQXNCO0FBQ3RCLDhCQUE4QjtBQUM5QixhQUFhLEdBQUcsWUFBWTtBQUM1QixpQkFBaUIsWUFBWTtBQUM3QixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsWUFBWTtBQUNkO0FBQ0E7QUFDQSxFQUFFLGFBQWE7QUFDZjtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90cmF2ZXJzZS9saWIvY2FjaGUuanM/ZTc1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2xlYXIgPSBjbGVhcjtcbmV4cG9ydHMuY2xlYXJQYXRoID0gY2xlYXJQYXRoO1xuZXhwb3J0cy5jbGVhclNjb3BlID0gY2xlYXJTY29wZTtcbmV4cG9ydHMuZ2V0Q2FjaGVkUGF0aHMgPSBnZXRDYWNoZWRQYXRocztcbmV4cG9ydHMuZ2V0T3JDcmVhdGVDYWNoZWRQYXRocyA9IGdldE9yQ3JlYXRlQ2FjaGVkUGF0aHM7XG5leHBvcnRzLnNjb3BlID0gZXhwb3J0cy5wYXRoID0gdm9pZCAwO1xubGV0IHBhdGhzQ2FjaGUgPSBleHBvcnRzLnBhdGggPSBuZXcgV2Vha01hcCgpO1xubGV0IHNjb3BlID0gZXhwb3J0cy5zY29wZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgY2xlYXJQYXRoKCk7XG4gIGNsZWFyU2NvcGUoKTtcbn1cbmZ1bmN0aW9uIGNsZWFyUGF0aCgpIHtcbiAgZXhwb3J0cy5wYXRoID0gcGF0aHNDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG59XG5mdW5jdGlvbiBjbGVhclNjb3BlKCkge1xuICBleHBvcnRzLnNjb3BlID0gc2NvcGUgPSBuZXcgV2Vha01hcCgpO1xufVxuY29uc3QgbnVsbEh1YiA9IE9iamVjdC5mcmVlemUoe30pO1xuZnVuY3Rpb24gZ2V0Q2FjaGVkUGF0aHMoaHViLCBwYXJlbnQpIHtcbiAgdmFyIF9wYXRoc0NhY2hlJGdldCwgX2h1YjtcbiAge1xuICAgIGh1YiA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIChfcGF0aHNDYWNoZSRnZXQgPSBwYXRoc0NhY2hlLmdldCgoX2h1YiA9IGh1YikgIT0gbnVsbCA/IF9odWIgOiBudWxsSHViKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXRoc0NhY2hlJGdldC5nZXQocGFyZW50KTtcbn1cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlQ2FjaGVkUGF0aHMoaHViLCBwYXJlbnQpIHtcbiAgdmFyIF9odWIyLCBfaHViMztcbiAge1xuICAgIGh1YiA9IG51bGw7XG4gIH1cbiAgbGV0IHBhcmVudHMgPSBwYXRoc0NhY2hlLmdldCgoX2h1YjIgPSBodWIpICE9IG51bGwgPyBfaHViMiA6IG51bGxIdWIpO1xuICBpZiAoIXBhcmVudHMpIHBhdGhzQ2FjaGUuc2V0KChfaHViMyA9IGh1YikgIT0gbnVsbCA/IF9odWIzIDogbnVsbEh1YiwgcGFyZW50cyA9IG5ldyBXZWFrTWFwKCkpO1xuICBsZXQgcGF0aHMgPSBwYXJlbnRzLmdldChwYXJlbnQpO1xuICBpZiAoIXBhdGhzKSBwYXJlbnRzLnNldChwYXJlbnQsIHBhdGhzID0gbmV3IE1hcCgpKTtcbiAgcmV0dXJuIHBhdGhzO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37411\n')},1602:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _index = __webpack_require__(29709);\nvar _t = __webpack_require__(2352);\nvar _context = __webpack_require__(79578);\nconst {\n  VISITOR_KEYS\n} = _t;\nclass TraversalContext {\n  constructor(scope, opts, state, parentPath) {\n    this.queue = null;\n    this.priorityQueue = null;\n    this.parentPath = parentPath;\n    this.scope = scope;\n    this.state = state;\n    this.opts = opts;\n  }\n  shouldVisit(node) {\n    const opts = this.opts;\n    if (opts.enter || opts.exit) return true;\n    if (opts[node.type]) return true;\n    const keys = VISITOR_KEYS[node.type];\n    if (!(keys != null && keys.length)) return false;\n    for (const key of keys) {\n      if (node[key]) {\n        return true;\n      }\n    }\n    return false;\n  }\n  create(node, container, key, listKey) {\n    return _index.default.get({\n      parentPath: this.parentPath,\n      parent: node,\n      container,\n      key: key,\n      listKey\n    });\n  }\n  maybeQueue(path, notPriority) {\n    if (this.queue) {\n      if (notPriority) {\n        this.queue.push(path);\n      } else {\n        this.priorityQueue.push(path);\n      }\n    }\n  }\n  visitMultiple(container, parent, listKey) {\n    if (container.length === 0) return false;\n    const queue = [];\n    for (let key = 0; key < container.length; key++) {\n      const node = container[key];\n      if (node && this.shouldVisit(node)) {\n        queue.push(this.create(parent, container, key, listKey));\n      }\n    }\n    return this.visitQueue(queue);\n  }\n  visitSingle(node, key) {\n    if (this.shouldVisit(node[key])) {\n      return this.visitQueue([this.create(node, node, key)]);\n    } else {\n      return false;\n    }\n  }\n  visitQueue(queue) {\n    this.queue = queue;\n    this.priorityQueue = [];\n    const visited = new WeakSet();\n    let stop = false;\n    let visitIndex = 0;\n    for (; visitIndex < queue.length;) {\n      const path = queue[visitIndex];\n      visitIndex++;\n      _context.resync.call(path);\n      if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {\n        _context.pushContext.call(path, this);\n      }\n      if (path.key === null) continue;\n      const {\n        node\n      } = path;\n      if (visited.has(node)) continue;\n      if (node) visited.add(node);\n      if (path.visit()) {\n        stop = true;\n        break;\n      }\n      if (this.priorityQueue.length) {\n        stop = this.visitQueue(this.priorityQueue);\n        this.priorityQueue = [];\n        this.queue = queue;\n        if (stop) break;\n      }\n    }\n    for (let i = 0; i < visitIndex; i++) {\n      _context.popContext.call(queue[i]);\n    }\n    this.queue = null;\n    return stop;\n  }\n  visit(node, key) {\n    const nodes = node[key];\n    if (!nodes) return false;\n    if (Array.isArray(nodes)) {\n      return this.visitMultiple(nodes, node, key);\n    } else {\n      return this.visitSingle(node, key);\n    }\n  }\n}\nexports["default"] = TraversalContext;\n\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLGFBQWEsbUJBQU8sQ0FBQyxLQUFpQjtBQUN0QyxTQUFTLG1CQUFPLENBQUMsSUFBYztBQUMvQixlQUFlLG1CQUFPLENBQUMsS0FBbUI7QUFDMUM7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTs7QUFFZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RyYXZlcnNlL2xpYi9jb250ZXh0LmpzPzU3MWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4vcGF0aC9pbmRleC5qc1wiKTtcbnZhciBfdCA9IHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIik7XG52YXIgX2NvbnRleHQgPSByZXF1aXJlKFwiLi9wYXRoL2NvbnRleHQuanNcIik7XG5jb25zdCB7XG4gIFZJU0lUT1JfS0VZU1xufSA9IF90O1xuY2xhc3MgVHJhdmVyc2FsQ29udGV4dCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlLCBvcHRzLCBzdGF0ZSwgcGFyZW50UGF0aCkge1xuICAgIHRoaXMucXVldWUgPSBudWxsO1xuICAgIHRoaXMucHJpb3JpdHlRdWV1ZSA9IG51bGw7XG4gICAgdGhpcy5wYXJlbnRQYXRoID0gcGFyZW50UGF0aDtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gIH1cbiAgc2hvdWxkVmlzaXQobm9kZSkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdHM7XG4gICAgaWYgKG9wdHMuZW50ZXIgfHwgb3B0cy5leGl0KSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAob3B0c1tub2RlLnR5cGVdKSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zdCBrZXlzID0gVklTSVRPUl9LRVlTW25vZGUudHlwZV07XG4gICAgaWYgKCEoa2V5cyAhPSBudWxsICYmIGtleXMubGVuZ3RoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgIGlmIChub2RlW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjcmVhdGUobm9kZSwgY29udGFpbmVyLCBrZXksIGxpc3RLZXkpIHtcbiAgICByZXR1cm4gX2luZGV4LmRlZmF1bHQuZ2V0KHtcbiAgICAgIHBhcmVudFBhdGg6IHRoaXMucGFyZW50UGF0aCxcbiAgICAgIHBhcmVudDogbm9kZSxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGtleToga2V5LFxuICAgICAgbGlzdEtleVxuICAgIH0pO1xuICB9XG4gIG1heWJlUXVldWUocGF0aCwgbm90UHJpb3JpdHkpIHtcbiAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgaWYgKG5vdFByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMucXVldWUucHVzaChwYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJpb3JpdHlRdWV1ZS5wdXNoKHBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2aXNpdE11bHRpcGxlKGNvbnRhaW5lciwgcGFyZW50LCBsaXN0S2V5KSB7XG4gICAgaWYgKGNvbnRhaW5lci5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBxdWV1ZSA9IFtdO1xuICAgIGZvciAobGV0IGtleSA9IDA7IGtleSA8IGNvbnRhaW5lci5sZW5ndGg7IGtleSsrKSB7XG4gICAgICBjb25zdCBub2RlID0gY29udGFpbmVyW2tleV07XG4gICAgICBpZiAobm9kZSAmJiB0aGlzLnNob3VsZFZpc2l0KG5vZGUpKSB7XG4gICAgICAgIHF1ZXVlLnB1c2godGhpcy5jcmVhdGUocGFyZW50LCBjb250YWluZXIsIGtleSwgbGlzdEtleSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy52aXNpdFF1ZXVlKHF1ZXVlKTtcbiAgfVxuICB2aXNpdFNpbmdsZShub2RlLCBrZXkpIHtcbiAgICBpZiAodGhpcy5zaG91bGRWaXNpdChub2RlW2tleV0pKSB7XG4gICAgICByZXR1cm4gdGhpcy52aXNpdFF1ZXVlKFt0aGlzLmNyZWF0ZShub2RlLCBub2RlLCBrZXkpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgdmlzaXRRdWV1ZShxdWV1ZSkge1xuICAgIHRoaXMucXVldWUgPSBxdWV1ZTtcbiAgICB0aGlzLnByaW9yaXR5UXVldWUgPSBbXTtcbiAgICBjb25zdCB2aXNpdGVkID0gbmV3IFdlYWtTZXQoKTtcbiAgICBsZXQgc3RvcCA9IGZhbHNlO1xuICAgIGxldCB2aXNpdEluZGV4ID0gMDtcbiAgICBmb3IgKDsgdmlzaXRJbmRleCA8IHF1ZXVlLmxlbmd0aDspIHtcbiAgICAgIGNvbnN0IHBhdGggPSBxdWV1ZVt2aXNpdEluZGV4XTtcbiAgICAgIHZpc2l0SW5kZXgrKztcbiAgICAgIF9jb250ZXh0LnJlc3luYy5jYWxsKHBhdGgpO1xuICAgICAgaWYgKHBhdGguY29udGV4dHMubGVuZ3RoID09PSAwIHx8IHBhdGguY29udGV4dHNbcGF0aC5jb250ZXh0cy5sZW5ndGggLSAxXSAhPT0gdGhpcykge1xuICAgICAgICBfY29udGV4dC5wdXNoQ29udGV4dC5jYWxsKHBhdGgsIHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKHBhdGgua2V5ID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbm9kZVxuICAgICAgfSA9IHBhdGg7XG4gICAgICBpZiAodmlzaXRlZC5oYXMobm9kZSkpIGNvbnRpbnVlO1xuICAgICAgaWYgKG5vZGUpIHZpc2l0ZWQuYWRkKG5vZGUpO1xuICAgICAgaWYgKHBhdGgudmlzaXQoKSkge1xuICAgICAgICBzdG9wID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcmlvcml0eVF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBzdG9wID0gdGhpcy52aXNpdFF1ZXVlKHRoaXMucHJpb3JpdHlRdWV1ZSk7XG4gICAgICAgIHRoaXMucHJpb3JpdHlRdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLnF1ZXVlID0gcXVldWU7XG4gICAgICAgIGlmIChzdG9wKSBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2aXNpdEluZGV4OyBpKyspIHtcbiAgICAgIF9jb250ZXh0LnBvcENvbnRleHQuY2FsbChxdWV1ZVtpXSk7XG4gICAgfVxuICAgIHRoaXMucXVldWUgPSBudWxsO1xuICAgIHJldHVybiBzdG9wO1xuICB9XG4gIHZpc2l0KG5vZGUsIGtleSkge1xuICAgIGNvbnN0IG5vZGVzID0gbm9kZVtrZXldO1xuICAgIGlmICghbm9kZXMpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlcykpIHtcbiAgICAgIHJldHVybiB0aGlzLnZpc2l0TXVsdGlwbGUobm9kZXMsIG5vZGUsIGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnZpc2l0U2luZ2xlKG5vZGUsIGtleSk7XG4gICAgfVxuICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBUcmF2ZXJzYWxDb250ZXh0O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1602\n')},17878:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nclass Hub {\n  getCode() {}\n  getScope() {}\n  addHelper() {\n    throw new Error("Helpers are not supported by the default hub.");\n  }\n  buildError(node, msg, Error = TypeError) {\n    return new Error(msg);\n  }\n}\nexports["default"] = Hub;\n\n//# sourceMappingURL=hub.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc4NzguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlOztBQUVmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHJhdmVyc2UvbGliL2h1Yi5qcz8zYTUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuY2xhc3MgSHViIHtcbiAgZ2V0Q29kZSgpIHt9XG4gIGdldFNjb3BlKCkge31cbiAgYWRkSGVscGVyKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkhlbHBlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGRlZmF1bHQgaHViLlwiKTtcbiAgfVxuICBidWlsZEVycm9yKG5vZGUsIG1zZywgRXJyb3IgPSBUeXBlRXJyb3IpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKG1zZyk7XG4gIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEh1YjtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHViLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17878\n')},25781:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nObject.defineProperty(exports, "Hub", ({\n  enumerable: true,\n  get: function () {\n    return _hub.default;\n  }\n}));\nObject.defineProperty(exports, "NodePath", ({\n  enumerable: true,\n  get: function () {\n    return _index.default;\n  }\n}));\nObject.defineProperty(exports, "Scope", ({\n  enumerable: true,\n  get: function () {\n    return _index2.default;\n  }\n}));\nexports.visitors = exports["default"] = void 0;\n__webpack_require__(79578);\nvar visitors = __webpack_require__(34950);\nexports.visitors = visitors;\nvar _t = __webpack_require__(2352);\nvar cache = __webpack_require__(37411);\nvar _traverseNode = __webpack_require__(22264);\nvar _index = __webpack_require__(29709);\nvar _index2 = __webpack_require__(86814);\nvar _hub = __webpack_require__(17878);\nconst {\n  VISITOR_KEYS,\n  removeProperties,\n  traverseFast\n} = _t;\nfunction traverse(parent, opts = {}, scope, state, parentPath, visitSelf) {\n  if (!parent) return;\n  if (!opts.noScope && !scope) {\n    if (parent.type !== "Program" && parent.type !== "File") {\n      throw new Error("You must pass a scope and parentPath unless traversing a Program/File. " + `Instead of that you tried to traverse a ${parent.type} node without ` + "passing scope and parentPath.");\n    }\n  }\n  if (!parentPath && visitSelf) {\n    throw new Error("visitSelf can only be used when providing a NodePath.");\n  }\n  if (!VISITOR_KEYS[parent.type]) {\n    return;\n  }\n  visitors.explode(opts);\n  (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf);\n}\nvar _default = exports["default"] = traverse;\ntraverse.visitors = visitors;\ntraverse.verify = visitors.verify;\ntraverse.explode = visitors.explode;\ntraverse.cheap = function (node, enter) {\n  traverseFast(node, enter);\n  return;\n};\ntraverse.node = function (node, opts, scope, state, path, skipKeys) {\n  (0, _traverseNode.traverseNode)(node, opts, scope, state, path, skipKeys);\n};\ntraverse.clearNode = function (node, opts) {\n  removeProperties(node, opts);\n};\ntraverse.removeProperties = function (tree, opts) {\n  traverseFast(tree, traverse.clearNode, opts);\n  return tree;\n};\nfunction hasDenylistedType(path, state) {\n  if (path.node.type === state.type) {\n    state.has = true;\n    path.stop();\n  }\n}\ntraverse.hasType = function (tree, type, denylistTypes) {\n  if (denylistTypes != null && denylistTypes.includes(tree.type)) return false;\n  if (tree.type === type) return true;\n  const state = {\n    has: false,\n    type: type\n  };\n  traverse(tree, {\n    noScope: true,\n    denylist: denylistTypes,\n    enter: hasDenylistedType\n  }, null, state);\n  return state.has;\n};\ntraverse.cache = cache;\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU3ODEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsdUNBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsNENBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YseUNBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZ0JBQWdCLEdBQUcsa0JBQWU7QUFDbEMsbUJBQU8sQ0FBQyxLQUFtQjtBQUMzQixlQUFlLG1CQUFPLENBQUMsS0FBZTtBQUN0QyxnQkFBZ0I7QUFDaEIsU0FBUyxtQkFBTyxDQUFDLElBQWM7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLEtBQVk7QUFDaEMsb0JBQW9CLG1CQUFPLENBQUMsS0FBb0I7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLEtBQWlCO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxLQUFrQjtBQUN4QyxXQUFXLG1CQUFPLENBQUMsS0FBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsNklBQTZJLGFBQWE7QUFDMUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHJhdmVyc2UvbGliL2luZGV4LmpzPzVhYWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJIdWJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2h1Yi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vZGVQYXRoXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNjb3BlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmRleDIuZGVmYXVsdDtcbiAgfVxufSk7XG5leHBvcnRzLnZpc2l0b3JzID0gZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xucmVxdWlyZShcIi4vcGF0aC9jb250ZXh0LmpzXCIpO1xudmFyIHZpc2l0b3JzID0gcmVxdWlyZShcIi4vdmlzaXRvcnMuanNcIik7XG5leHBvcnRzLnZpc2l0b3JzID0gdmlzaXRvcnM7XG52YXIgX3QgPSByZXF1aXJlKFwiQGJhYmVsL3R5cGVzXCIpO1xudmFyIGNhY2hlID0gcmVxdWlyZShcIi4vY2FjaGUuanNcIik7XG52YXIgX3RyYXZlcnNlTm9kZSA9IHJlcXVpcmUoXCIuL3RyYXZlcnNlLW5vZGUuanNcIik7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4vcGF0aC9pbmRleC5qc1wiKTtcbnZhciBfaW5kZXgyID0gcmVxdWlyZShcIi4vc2NvcGUvaW5kZXguanNcIik7XG52YXIgX2h1YiA9IHJlcXVpcmUoXCIuL2h1Yi5qc1wiKTtcbmNvbnN0IHtcbiAgVklTSVRPUl9LRVlTLFxuICByZW1vdmVQcm9wZXJ0aWVzLFxuICB0cmF2ZXJzZUZhc3Rcbn0gPSBfdDtcbmZ1bmN0aW9uIHRyYXZlcnNlKHBhcmVudCwgb3B0cyA9IHt9LCBzY29wZSwgc3RhdGUsIHBhcmVudFBhdGgsIHZpc2l0U2VsZikge1xuICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICBpZiAoIW9wdHMubm9TY29wZSAmJiAhc2NvcGUpIHtcbiAgICBpZiAocGFyZW50LnR5cGUgIT09IFwiUHJvZ3JhbVwiICYmIHBhcmVudC50eXBlICE9PSBcIkZpbGVcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNjb3BlIGFuZCBwYXJlbnRQYXRoIHVubGVzcyB0cmF2ZXJzaW5nIGEgUHJvZ3JhbS9GaWxlLiBcIiArIGBJbnN0ZWFkIG9mIHRoYXQgeW91IHRyaWVkIHRvIHRyYXZlcnNlIGEgJHtwYXJlbnQudHlwZX0gbm9kZSB3aXRob3V0IGAgKyBcInBhc3Npbmcgc2NvcGUgYW5kIHBhcmVudFBhdGguXCIpO1xuICAgIH1cbiAgfVxuICBpZiAoIXBhcmVudFBhdGggJiYgdmlzaXRTZWxmKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidmlzaXRTZWxmIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiBwcm92aWRpbmcgYSBOb2RlUGF0aC5cIik7XG4gIH1cbiAgaWYgKCFWSVNJVE9SX0tFWVNbcGFyZW50LnR5cGVdKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZpc2l0b3JzLmV4cGxvZGUob3B0cyk7XG4gICgwLCBfdHJhdmVyc2VOb2RlLnRyYXZlcnNlTm9kZSkocGFyZW50LCBvcHRzLCBzY29wZSwgc3RhdGUsIHBhcmVudFBhdGgsIG51bGwsIHZpc2l0U2VsZik7XG59XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSB0cmF2ZXJzZTtcbnRyYXZlcnNlLnZpc2l0b3JzID0gdmlzaXRvcnM7XG50cmF2ZXJzZS52ZXJpZnkgPSB2aXNpdG9ycy52ZXJpZnk7XG50cmF2ZXJzZS5leHBsb2RlID0gdmlzaXRvcnMuZXhwbG9kZTtcbnRyYXZlcnNlLmNoZWFwID0gZnVuY3Rpb24gKG5vZGUsIGVudGVyKSB7XG4gIHRyYXZlcnNlRmFzdChub2RlLCBlbnRlcik7XG4gIHJldHVybjtcbn07XG50cmF2ZXJzZS5ub2RlID0gZnVuY3Rpb24gKG5vZGUsIG9wdHMsIHNjb3BlLCBzdGF0ZSwgcGF0aCwgc2tpcEtleXMpIHtcbiAgKDAsIF90cmF2ZXJzZU5vZGUudHJhdmVyc2VOb2RlKShub2RlLCBvcHRzLCBzY29wZSwgc3RhdGUsIHBhdGgsIHNraXBLZXlzKTtcbn07XG50cmF2ZXJzZS5jbGVhck5vZGUgPSBmdW5jdGlvbiAobm9kZSwgb3B0cykge1xuICByZW1vdmVQcm9wZXJ0aWVzKG5vZGUsIG9wdHMpO1xufTtcbnRyYXZlcnNlLnJlbW92ZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAodHJlZSwgb3B0cykge1xuICB0cmF2ZXJzZUZhc3QodHJlZSwgdHJhdmVyc2UuY2xlYXJOb2RlLCBvcHRzKTtcbiAgcmV0dXJuIHRyZWU7XG59O1xuZnVuY3Rpb24gaGFzRGVueWxpc3RlZFR5cGUocGF0aCwgc3RhdGUpIHtcbiAgaWYgKHBhdGgubm9kZS50eXBlID09PSBzdGF0ZS50eXBlKSB7XG4gICAgc3RhdGUuaGFzID0gdHJ1ZTtcbiAgICBwYXRoLnN0b3AoKTtcbiAgfVxufVxudHJhdmVyc2UuaGFzVHlwZSA9IGZ1bmN0aW9uICh0cmVlLCB0eXBlLCBkZW55bGlzdFR5cGVzKSB7XG4gIGlmIChkZW55bGlzdFR5cGVzICE9IG51bGwgJiYgZGVueWxpc3RUeXBlcy5pbmNsdWRlcyh0cmVlLnR5cGUpKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0cmVlLnR5cGUgPT09IHR5cGUpIHJldHVybiB0cnVlO1xuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBoYXM6IGZhbHNlLFxuICAgIHR5cGU6IHR5cGVcbiAgfTtcbiAgdHJhdmVyc2UodHJlZSwge1xuICAgIG5vU2NvcGU6IHRydWUsXG4gICAgZGVueWxpc3Q6IGRlbnlsaXN0VHlwZXMsXG4gICAgZW50ZXI6IGhhc0RlbnlsaXN0ZWRUeXBlXG4gIH0sIG51bGwsIHN0YXRlKTtcbiAgcmV0dXJuIHN0YXRlLmhhcztcbn07XG50cmF2ZXJzZS5jYWNoZSA9IGNhY2hlO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25781\n')},60940:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.find = find;\nexports.findParent = findParent;\nexports.getAncestry = getAncestry;\nexports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;\nexports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;\nexports.getFunctionParent = getFunctionParent;\nexports.getStatementParent = getStatementParent;\nexports.inType = inType;\nexports.isAncestor = isAncestor;\nexports.isDescendant = isDescendant;\nvar _t = __webpack_require__(2352);\nconst {\n  VISITOR_KEYS\n} = _t;\nfunction findParent(callback) {\n  let path = this;\n  while (path = path.parentPath) {\n    if (callback(path)) return path;\n  }\n  return null;\n}\nfunction find(callback) {\n  let path = this;\n  do {\n    if (callback(path)) return path;\n  } while (path = path.parentPath);\n  return null;\n}\nfunction getFunctionParent() {\n  return this.findParent(p => p.isFunction());\n}\nfunction getStatementParent() {\n  let path = this;\n  do {\n    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {\n      break;\n    } else {\n      path = path.parentPath;\n    }\n  } while (path);\n  if (path && (path.isProgram() || path.isFile())) {\n    throw new Error("File/Program node, we can\'t possibly find a statement parent to this");\n  }\n  return path;\n}\nfunction getEarliestCommonAncestorFrom(paths) {\n  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {\n    let earliest;\n    const keys = VISITOR_KEYS[deepest.type];\n    for (const ancestry of ancestries) {\n      const path = ancestry[i + 1];\n      if (!earliest) {\n        earliest = path;\n        continue;\n      }\n      if (path.listKey && earliest.listKey === path.listKey) {\n        if (path.key < earliest.key) {\n          earliest = path;\n          continue;\n        }\n      }\n      const earliestKeyIndex = keys.indexOf(earliest.parentKey);\n      const currentKeyIndex = keys.indexOf(path.parentKey);\n      if (earliestKeyIndex > currentKeyIndex) {\n        earliest = path;\n      }\n    }\n    return earliest;\n  });\n}\nfunction getDeepestCommonAncestorFrom(paths, filter) {\n  if (!paths.length) {\n    return this;\n  }\n  if (paths.length === 1) {\n    return paths[0];\n  }\n  let minDepth = Infinity;\n  let lastCommonIndex, lastCommon;\n  const ancestries = paths.map(path => {\n    const ancestry = [];\n    do {\n      ancestry.unshift(path);\n    } while ((path = path.parentPath) && path !== this);\n    if (ancestry.length < minDepth) {\n      minDepth = ancestry.length;\n    }\n    return ancestry;\n  });\n  const first = ancestries[0];\n  depthLoop: for (let i = 0; i < minDepth; i++) {\n    const shouldMatch = first[i];\n    for (const ancestry of ancestries) {\n      if (ancestry[i] !== shouldMatch) {\n        break depthLoop;\n      }\n    }\n    lastCommonIndex = i;\n    lastCommon = shouldMatch;\n  }\n  if (lastCommon) {\n    if (filter) {\n      return filter(lastCommon, lastCommonIndex, ancestries);\n    } else {\n      return lastCommon;\n    }\n  } else {\n    throw new Error("Couldn\'t find intersection");\n  }\n}\nfunction getAncestry() {\n  let path = this;\n  const paths = [];\n  do {\n    paths.push(path);\n  } while (path = path.parentPath);\n  return paths;\n}\nfunction isAncestor(maybeDescendant) {\n  return maybeDescendant.isDescendant(this);\n}\nfunction isDescendant(maybeAncestor) {\n  return !!this.findParent(parent => parent === maybeAncestor);\n}\nfunction inType(...candidateTypes) {\n  let path = this;\n  while (path) {\n    for (const type of candidateTypes) {\n      if (path.node.type === type) return true;\n    }\n    path = path.parentPath;\n  }\n  return false;\n}\n\n//# sourceMappingURL=ancestry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA5NDAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsWUFBWTtBQUNaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIsb0NBQW9DO0FBQ3BDLHFDQUFxQztBQUNyQyx5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLGNBQWM7QUFDZCxrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCLFNBQVMsbUJBQU8sQ0FBQyxJQUFjO0FBQy9CO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSw2QkFBNkIsY0FBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RyYXZlcnNlL2xpYi9wYXRoL2FuY2VzdHJ5LmpzP2FhOGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZXhwb3J0cy5maW5kUGFyZW50ID0gZmluZFBhcmVudDtcbmV4cG9ydHMuZ2V0QW5jZXN0cnkgPSBnZXRBbmNlc3RyeTtcbmV4cG9ydHMuZ2V0RGVlcGVzdENvbW1vbkFuY2VzdG9yRnJvbSA9IGdldERlZXBlc3RDb21tb25BbmNlc3RvckZyb207XG5leHBvcnRzLmdldEVhcmxpZXN0Q29tbW9uQW5jZXN0b3JGcm9tID0gZ2V0RWFybGllc3RDb21tb25BbmNlc3RvckZyb207XG5leHBvcnRzLmdldEZ1bmN0aW9uUGFyZW50ID0gZ2V0RnVuY3Rpb25QYXJlbnQ7XG5leHBvcnRzLmdldFN0YXRlbWVudFBhcmVudCA9IGdldFN0YXRlbWVudFBhcmVudDtcbmV4cG9ydHMuaW5UeXBlID0gaW5UeXBlO1xuZXhwb3J0cy5pc0FuY2VzdG9yID0gaXNBbmNlc3RvcjtcbmV4cG9ydHMuaXNEZXNjZW5kYW50ID0gaXNEZXNjZW5kYW50O1xudmFyIF90ID0gcmVxdWlyZShcIkBiYWJlbC90eXBlc1wiKTtcbmNvbnN0IHtcbiAgVklTSVRPUl9LRVlTXG59ID0gX3Q7XG5mdW5jdGlvbiBmaW5kUGFyZW50KGNhbGxiYWNrKSB7XG4gIGxldCBwYXRoID0gdGhpcztcbiAgd2hpbGUgKHBhdGggPSBwYXRoLnBhcmVudFBhdGgpIHtcbiAgICBpZiAoY2FsbGJhY2socGF0aCkpIHJldHVybiBwYXRoO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZmluZChjYWxsYmFjaykge1xuICBsZXQgcGF0aCA9IHRoaXM7XG4gIGRvIHtcbiAgICBpZiAoY2FsbGJhY2socGF0aCkpIHJldHVybiBwYXRoO1xuICB9IHdoaWxlIChwYXRoID0gcGF0aC5wYXJlbnRQYXRoKTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXRGdW5jdGlvblBhcmVudCgpIHtcbiAgcmV0dXJuIHRoaXMuZmluZFBhcmVudChwID0+IHAuaXNGdW5jdGlvbigpKTtcbn1cbmZ1bmN0aW9uIGdldFN0YXRlbWVudFBhcmVudCgpIHtcbiAgbGV0IHBhdGggPSB0aGlzO1xuICBkbyB7XG4gICAgaWYgKCFwYXRoLnBhcmVudFBhdGggfHwgQXJyYXkuaXNBcnJheShwYXRoLmNvbnRhaW5lcikgJiYgcGF0aC5pc1N0YXRlbWVudCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IHBhdGgucGFyZW50UGF0aDtcbiAgICB9XG4gIH0gd2hpbGUgKHBhdGgpO1xuICBpZiAocGF0aCAmJiAocGF0aC5pc1Byb2dyYW0oKSB8fCBwYXRoLmlzRmlsZSgpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZpbGUvUHJvZ3JhbSBub2RlLCB3ZSBjYW4ndCBwb3NzaWJseSBmaW5kIGEgc3RhdGVtZW50IHBhcmVudCB0byB0aGlzXCIpO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuZnVuY3Rpb24gZ2V0RWFybGllc3RDb21tb25BbmNlc3RvckZyb20ocGF0aHMpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0RGVlcGVzdENvbW1vbkFuY2VzdG9yRnJvbShwYXRocywgZnVuY3Rpb24gKGRlZXBlc3QsIGksIGFuY2VzdHJpZXMpIHtcbiAgICBsZXQgZWFybGllc3Q7XG4gICAgY29uc3Qga2V5cyA9IFZJU0lUT1JfS0VZU1tkZWVwZXN0LnR5cGVdO1xuICAgIGZvciAoY29uc3QgYW5jZXN0cnkgb2YgYW5jZXN0cmllcykge1xuICAgICAgY29uc3QgcGF0aCA9IGFuY2VzdHJ5W2kgKyAxXTtcbiAgICAgIGlmICghZWFybGllc3QpIHtcbiAgICAgICAgZWFybGllc3QgPSBwYXRoO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXRoLmxpc3RLZXkgJiYgZWFybGllc3QubGlzdEtleSA9PT0gcGF0aC5saXN0S2V5KSB7XG4gICAgICAgIGlmIChwYXRoLmtleSA8IGVhcmxpZXN0LmtleSkge1xuICAgICAgICAgIGVhcmxpZXN0ID0gcGF0aDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZWFybGllc3RLZXlJbmRleCA9IGtleXMuaW5kZXhPZihlYXJsaWVzdC5wYXJlbnRLZXkpO1xuICAgICAgY29uc3QgY3VycmVudEtleUluZGV4ID0ga2V5cy5pbmRleE9mKHBhdGgucGFyZW50S2V5KTtcbiAgICAgIGlmIChlYXJsaWVzdEtleUluZGV4ID4gY3VycmVudEtleUluZGV4KSB7XG4gICAgICAgIGVhcmxpZXN0ID0gcGF0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVhcmxpZXN0O1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldERlZXBlc3RDb21tb25BbmNlc3RvckZyb20ocGF0aHMsIGZpbHRlcikge1xuICBpZiAoIXBhdGhzLmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGlmIChwYXRocy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gcGF0aHNbMF07XG4gIH1cbiAgbGV0IG1pbkRlcHRoID0gSW5maW5pdHk7XG4gIGxldCBsYXN0Q29tbW9uSW5kZXgsIGxhc3RDb21tb247XG4gIGNvbnN0IGFuY2VzdHJpZXMgPSBwYXRocy5tYXAocGF0aCA9PiB7XG4gICAgY29uc3QgYW5jZXN0cnkgPSBbXTtcbiAgICBkbyB7XG4gICAgICBhbmNlc3RyeS51bnNoaWZ0KHBhdGgpO1xuICAgIH0gd2hpbGUgKChwYXRoID0gcGF0aC5wYXJlbnRQYXRoKSAmJiBwYXRoICE9PSB0aGlzKTtcbiAgICBpZiAoYW5jZXN0cnkubGVuZ3RoIDwgbWluRGVwdGgpIHtcbiAgICAgIG1pbkRlcHRoID0gYW5jZXN0cnkubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gYW5jZXN0cnk7XG4gIH0pO1xuICBjb25zdCBmaXJzdCA9IGFuY2VzdHJpZXNbMF07XG4gIGRlcHRoTG9vcDogZm9yIChsZXQgaSA9IDA7IGkgPCBtaW5EZXB0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2hvdWxkTWF0Y2ggPSBmaXJzdFtpXTtcbiAgICBmb3IgKGNvbnN0IGFuY2VzdHJ5IG9mIGFuY2VzdHJpZXMpIHtcbiAgICAgIGlmIChhbmNlc3RyeVtpXSAhPT0gc2hvdWxkTWF0Y2gpIHtcbiAgICAgICAgYnJlYWsgZGVwdGhMb29wO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0Q29tbW9uSW5kZXggPSBpO1xuICAgIGxhc3RDb21tb24gPSBzaG91bGRNYXRjaDtcbiAgfVxuICBpZiAobGFzdENvbW1vbikge1xuICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgIHJldHVybiBmaWx0ZXIobGFzdENvbW1vbiwgbGFzdENvbW1vbkluZGV4LCBhbmNlc3RyaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxhc3RDb21tb247XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgaW50ZXJzZWN0aW9uXCIpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRBbmNlc3RyeSgpIHtcbiAgbGV0IHBhdGggPSB0aGlzO1xuICBjb25zdCBwYXRocyA9IFtdO1xuICBkbyB7XG4gICAgcGF0aHMucHVzaChwYXRoKTtcbiAgfSB3aGlsZSAocGF0aCA9IHBhdGgucGFyZW50UGF0aCk7XG4gIHJldHVybiBwYXRocztcbn1cbmZ1bmN0aW9uIGlzQW5jZXN0b3IobWF5YmVEZXNjZW5kYW50KSB7XG4gIHJldHVybiBtYXliZURlc2NlbmRhbnQuaXNEZXNjZW5kYW50KHRoaXMpO1xufVxuZnVuY3Rpb24gaXNEZXNjZW5kYW50KG1heWJlQW5jZXN0b3IpIHtcbiAgcmV0dXJuICEhdGhpcy5maW5kUGFyZW50KHBhcmVudCA9PiBwYXJlbnQgPT09IG1heWJlQW5jZXN0b3IpO1xufVxuZnVuY3Rpb24gaW5UeXBlKC4uLmNhbmRpZGF0ZVR5cGVzKSB7XG4gIGxldCBwYXRoID0gdGhpcztcbiAgd2hpbGUgKHBhdGgpIHtcbiAgICBmb3IgKGNvbnN0IHR5cGUgb2YgY2FuZGlkYXRlVHlwZXMpIHtcbiAgICAgIGlmIChwYXRoLm5vZGUudHlwZSA9PT0gdHlwZSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHBhdGggPSBwYXRoLnBhcmVudFBhdGg7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmNlc3RyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///60940\n')},83383:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.addComment = addComment;\nexports.addComments = addComments;\nexports.shareCommentsWithSiblings = shareCommentsWithSiblings;\nvar _t = __webpack_require__(2352);\nconst {\n  addComment: _addComment,\n  addComments: _addComments\n} = _t;\nfunction shareCommentsWithSiblings() {\n  if (typeof this.key === "string") return;\n  const node = this.node;\n  if (!node) return;\n  const trailing = node.trailingComments;\n  const leading = node.leadingComments;\n  if (!trailing && !leading) return;\n  const prev = this.getSibling(this.key - 1);\n  const next = this.getSibling(this.key + 1);\n  const hasPrev = Boolean(prev.node);\n  const hasNext = Boolean(next.node);\n  if (hasPrev) {\n    if (leading) {\n      prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments));\n    }\n    if (trailing && !hasNext) prev.addComments("trailing", trailing);\n  }\n  if (hasNext) {\n    if (trailing) {\n      next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments));\n    }\n    if (leading && !hasPrev) next.addComments("leading", leading);\n  }\n}\nfunction removeIfExisting(list, toRemove) {\n  if (!(toRemove != null && toRemove.length)) return list;\n  const set = new Set(toRemove);\n  return list.filter(el => {\n    return !set.has(el);\n  });\n}\nfunction addComment(type, content, line) {\n  _addComment(this.node, type, content, line);\n}\nfunction addComments(type, comments) {\n  _addComments(this.node, type, comments);\n}\n\n//# sourceMappingURL=comments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMzODMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWtCO0FBQ2xCLG1CQUFtQjtBQUNuQixpQ0FBaUM7QUFDakMsU0FBUyxtQkFBTyxDQUFDLElBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90cmF2ZXJzZS9saWIvcGF0aC9jb21tZW50cy5qcz85MzJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hZGRDb21tZW50ID0gYWRkQ29tbWVudDtcbmV4cG9ydHMuYWRkQ29tbWVudHMgPSBhZGRDb21tZW50cztcbmV4cG9ydHMuc2hhcmVDb21tZW50c1dpdGhTaWJsaW5ncyA9IHNoYXJlQ29tbWVudHNXaXRoU2libGluZ3M7XG52YXIgX3QgPSByZXF1aXJlKFwiQGJhYmVsL3R5cGVzXCIpO1xuY29uc3Qge1xuICBhZGRDb21tZW50OiBfYWRkQ29tbWVudCxcbiAgYWRkQ29tbWVudHM6IF9hZGRDb21tZW50c1xufSA9IF90O1xuZnVuY3Rpb24gc2hhcmVDb21tZW50c1dpdGhTaWJsaW5ncygpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLmtleSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuO1xuICBjb25zdCBub2RlID0gdGhpcy5ub2RlO1xuICBpZiAoIW5vZGUpIHJldHVybjtcbiAgY29uc3QgdHJhaWxpbmcgPSBub2RlLnRyYWlsaW5nQ29tbWVudHM7XG4gIGNvbnN0IGxlYWRpbmcgPSBub2RlLmxlYWRpbmdDb21tZW50cztcbiAgaWYgKCF0cmFpbGluZyAmJiAhbGVhZGluZykgcmV0dXJuO1xuICBjb25zdCBwcmV2ID0gdGhpcy5nZXRTaWJsaW5nKHRoaXMua2V5IC0gMSk7XG4gIGNvbnN0IG5leHQgPSB0aGlzLmdldFNpYmxpbmcodGhpcy5rZXkgKyAxKTtcbiAgY29uc3QgaGFzUHJldiA9IEJvb2xlYW4ocHJldi5ub2RlKTtcbiAgY29uc3QgaGFzTmV4dCA9IEJvb2xlYW4obmV4dC5ub2RlKTtcbiAgaWYgKGhhc1ByZXYpIHtcbiAgICBpZiAobGVhZGluZykge1xuICAgICAgcHJldi5hZGRDb21tZW50cyhcInRyYWlsaW5nXCIsIHJlbW92ZUlmRXhpc3RpbmcobGVhZGluZywgcHJldi5ub2RlLnRyYWlsaW5nQ29tbWVudHMpKTtcbiAgICB9XG4gICAgaWYgKHRyYWlsaW5nICYmICFoYXNOZXh0KSBwcmV2LmFkZENvbW1lbnRzKFwidHJhaWxpbmdcIiwgdHJhaWxpbmcpO1xuICB9XG4gIGlmIChoYXNOZXh0KSB7XG4gICAgaWYgKHRyYWlsaW5nKSB7XG4gICAgICBuZXh0LmFkZENvbW1lbnRzKFwibGVhZGluZ1wiLCByZW1vdmVJZkV4aXN0aW5nKHRyYWlsaW5nLCBuZXh0Lm5vZGUubGVhZGluZ0NvbW1lbnRzKSk7XG4gICAgfVxuICAgIGlmIChsZWFkaW5nICYmICFoYXNQcmV2KSBuZXh0LmFkZENvbW1lbnRzKFwibGVhZGluZ1wiLCBsZWFkaW5nKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlSWZFeGlzdGluZyhsaXN0LCB0b1JlbW92ZSkge1xuICBpZiAoISh0b1JlbW92ZSAhPSBudWxsICYmIHRvUmVtb3ZlLmxlbmd0aCkpIHJldHVybiBsaXN0O1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KHRvUmVtb3ZlKTtcbiAgcmV0dXJuIGxpc3QuZmlsdGVyKGVsID0+IHtcbiAgICByZXR1cm4gIXNldC5oYXMoZWwpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGFkZENvbW1lbnQodHlwZSwgY29udGVudCwgbGluZSkge1xuICBfYWRkQ29tbWVudCh0aGlzLm5vZGUsIHR5cGUsIGNvbnRlbnQsIGxpbmUpO1xufVxuZnVuY3Rpb24gYWRkQ29tbWVudHModHlwZSwgY29tbWVudHMpIHtcbiAgX2FkZENvbW1lbnRzKHRoaXMubm9kZSwgdHlwZSwgY29tbWVudHMpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tZW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///83383\n')},79578:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports._call = _call;\nexports._getQueueContexts = _getQueueContexts;\nexports._resyncKey = _resyncKey;\nexports._resyncList = _resyncList;\nexports._resyncParent = _resyncParent;\nexports._resyncRemoved = _resyncRemoved;\nexports.call = call;\nexports.isDenylisted = isDenylisted;\nexports.popContext = popContext;\nexports.pushContext = pushContext;\nexports.requeue = requeue;\nexports.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;\nexports.resync = resync;\nexports.setContext = setContext;\nexports.setKey = setKey;\nexports.setScope = setScope;\nexports.setup = setup;\nexports.skip = skip;\nexports.skipKey = skipKey;\nexports.stop = stop;\nexports.visit = visit;\nvar _traverseNode = __webpack_require__(22264);\nvar _index = __webpack_require__(29709);\nvar _removal = __webpack_require__(53097);\nvar t = __webpack_require__(2352);\nfunction call(key) {\n  const opts = this.opts;\n  this.debug(key);\n  if (this.node) {\n    if (_call.call(this, opts[key])) return true;\n  }\n  if (this.node) {\n    var _opts$this$node$type;\n    return _call.call(this, (_opts$this$node$type = opts[this.node.type]) == null ? void 0 : _opts$this$node$type[key]);\n  }\n  return false;\n}\nfunction _call(fns) {\n  if (!fns) return false;\n  for (const fn of fns) {\n    if (!fn) continue;\n    const node = this.node;\n    if (!node) return true;\n    const ret = fn.call(this.state, this, this.state);\n    if (ret && typeof ret === "object" && typeof ret.then === "function") {\n      throw new Error(`You appear to be using a plugin with an async traversal visitor, ` + `which your current version of Babel does not support. ` + `If you\'re using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n    }\n    if (ret) {\n      throw new Error(`Unexpected return value from visitor method ${fn}`);\n    }\n    if (this.node !== node) return true;\n    if (this._traverseFlags > 0) return true;\n  }\n  return false;\n}\nfunction isDenylisted() {\n  var _this$opts$denylist;\n  const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;\n  return denylist == null ? void 0 : denylist.includes(this.node.type);\n}\n{\n  exports.isBlacklisted = isDenylisted;\n}\nfunction restoreContext(path, context) {\n  if (path.context !== context) {\n    path.context = context;\n    path.state = context.state;\n    path.opts = context.opts;\n  }\n}\nfunction visit() {\n  var _this$opts$shouldSkip, _this$opts;\n  if (!this.node) {\n    return false;\n  }\n  if (this.isDenylisted()) {\n    return false;\n  }\n  if ((_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) != null && _this$opts$shouldSkip.call(_this$opts, this)) {\n    return false;\n  }\n  const currentContext = this.context;\n  if (this.shouldSkip || call.call(this, "enter")) {\n    this.debug("Skip...");\n    return this.shouldStop;\n  }\n  restoreContext(this, currentContext);\n  this.debug("Recursing into...");\n  this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);\n  restoreContext(this, currentContext);\n  call.call(this, "exit");\n  return this.shouldStop;\n}\nfunction skip() {\n  this.shouldSkip = true;\n}\nfunction skipKey(key) {\n  if (this.skipKeys == null) {\n    this.skipKeys = {};\n  }\n  this.skipKeys[key] = true;\n}\nfunction stop() {\n  this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;\n}\nfunction setScope() {\n  var _this$opts2, _this$scope;\n  if ((_this$opts2 = this.opts) != null && _this$opts2.noScope) return;\n  let path = this.parentPath;\n  if ((this.key === "key" || this.listKey === "decorators") && path.isMethod() || this.key === "discriminant" && path.isSwitchStatement()) {\n    path = path.parentPath;\n  }\n  let target;\n  while (path && !target) {\n    var _path$opts;\n    if ((_path$opts = path.opts) != null && _path$opts.noScope) return;\n    target = path.scope;\n    path = path.parentPath;\n  }\n  this.scope = this.getScope(target);\n  (_this$scope = this.scope) == null || _this$scope.init();\n}\nfunction setContext(context) {\n  if (this.skipKeys != null) {\n    this.skipKeys = {};\n  }\n  this._traverseFlags = 0;\n  if (context) {\n    this.context = context;\n    this.state = context.state;\n    this.opts = context.opts;\n  }\n  setScope.call(this);\n  return this;\n}\nfunction resync() {\n  if (this.removed) return;\n  _resyncParent.call(this);\n  _resyncList.call(this);\n  _resyncKey.call(this);\n}\nfunction _resyncParent() {\n  if (this.parentPath) {\n    this.parent = this.parentPath.node;\n  }\n}\nfunction _resyncKey() {\n  if (!this.container) return;\n  if (this.node === this.container[this.key]) {\n    return;\n  }\n  if (Array.isArray(this.container)) {\n    for (let i = 0; i < this.container.length; i++) {\n      if (this.container[i] === this.node) {\n        setKey.call(this, i);\n        return;\n      }\n    }\n  } else {\n    for (const key of Object.keys(this.container)) {\n      if (this.container[key] === this.node) {\n        setKey.call(this, key);\n        return;\n      }\n    }\n  }\n  this.key = null;\n}\nfunction _resyncList() {\n  if (!this.parent || !this.inList) return;\n  const newContainer = this.parent[this.listKey];\n  if (this.container === newContainer) return;\n  this.container = newContainer || null;\n}\nfunction _resyncRemoved() {\n  if (this.key == null || !this.container || this.container[this.key] !== this.node) {\n    _removal._markRemoved.call(this);\n  }\n}\nfunction popContext() {\n  this.contexts.pop();\n  if (this.contexts.length > 0) {\n    this.setContext(this.contexts[this.contexts.length - 1]);\n  } else {\n    this.setContext(undefined);\n  }\n}\nfunction pushContext(context) {\n  this.contexts.push(context);\n  this.setContext(context);\n}\nfunction setup(parentPath, container, listKey, key) {\n  this.listKey = listKey;\n  this.container = container;\n  this.parentPath = parentPath || this.parentPath;\n  setKey.call(this, key);\n}\nfunction setKey(key) {\n  var _this$node;\n  this.key = key;\n  this.node = this.container[this.key];\n  this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;\n}\nfunction requeue(pathToQueue = this) {\n  if (pathToQueue.removed) return;\n  ;\n  const contexts = this.contexts;\n  for (const context of contexts) {\n    context.maybeQueue(pathToQueue);\n  }\n}\nfunction requeueComputedKeyAndDecorators() {\n  const {\n    context,\n    node\n  } = this;\n  if (!t.isPrivate(node) && node.computed) {\n    context.maybeQueue(this.get("key"));\n  }\n  if (node.decorators) {\n    for (const decorator of this.get("decorators")) {\n      context.maybeQueue(decorator);\n    }\n  }\n}\nfunction _getQueueContexts() {\n  let path = this;\n  let contexts = this.contexts;\n  while (!contexts.length) {\n    path = path.parentPath;\n    if (!path) break;\n    contexts = path.contexts;\n  }\n  return contexts;\n}\n\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///79578\n')},92257:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\nexports.ensureBlock = ensureBlock;\nexports.ensureFunctionName = ensureFunctionName;\nexports.splitExportDeclaration = splitExportDeclaration;\nexports.toComputedKey = toComputedKey;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\nvar _t = __webpack_require__(2352);\nvar _template = __webpack_require__(32485);\nvar _visitors = __webpack_require__(34950);\nvar _context = __webpack_require__(79578);\nconst {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  logicalExpression,\n  LOGICAL_OPERATORS,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super: _super,\n  thisExpression,\n  toExpression,\n  unaryExpression,\n  toBindingIdentifierName,\n  isFunction,\n  isAssignmentPattern,\n  isRestElement,\n  getFunctionName,\n  cloneNode,\n  variableDeclaration,\n  variableDeclarator,\n  exportNamedDeclaration,\n  exportSpecifier,\n  inherits\n} = _t;\nfunction toComputedKey() {\n  let key;\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError("todo");\n  }\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n  return key;\n}\nfunction ensureBlock() {\n  const body = this.get("body");\n  const bodyNode = body.node;\n  if (Array.isArray(body)) {\n    throw new Error("Can\'t convert array path to a block statement");\n  }\n  if (!bodyNode) {\n    throw new Error("Can\'t convert node without a body");\n  }\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n  const statements = [];\n  let stringPath = "body";\n  let key;\n  let listKey;\n  if (body.isStatement()) {\n    listKey = "body";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += ".body.0";\n    if (this.isFunction()) {\n      key = "argument";\n      statements.push(returnStatement(body.node));\n    } else {\n      key = "expression";\n      statements.push(expressionStatement(body.node));\n    }\n  }\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  _context.setup.call(body, parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n{\n  exports.arrowFunctionToShadowed = function () {\n    if (!this.isArrowFunctionExpression()) return;\n    this.arrowFunctionToExpression();\n  };\n}\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError("Can only unwrap the environment of a function.");\n  }\n  hoistFunctionEnvironment(this);\n}\nfunction setType(path, type) {\n  path.node.type = type;\n}\nfunction arrowFunctionToExpression({\n  allowInsertArrow = true,\n  allowInsertArrowWithRest = allowInsertArrow,\n  noNewArrows = !(_arguments$ => (_arguments$ = arguments[0]) == null ? void 0 : _arguments$.specCompliant)()\n} = {}) {\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");\n  }\n  let self = this;\n  if (!noNewArrows) {\n    var _self$ensureFunctionN;\n    self = (_self$ensureFunctionN = self.ensureFunctionName(false)) != null ? _self$ensureFunctionN : self;\n  }\n  const {\n    thisBinding,\n    fnPath: fn\n  } = hoistFunctionEnvironment(self, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);\n  fn.ensureBlock();\n  setType(fn, "FunctionExpression");\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");\n    if (checkBinding) {\n      fn.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([])\n      });\n    }\n    fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));\n    fn.replaceWith(callExpression(memberExpression(fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));\n    return fn.get("callee.object");\n  }\n  return fn;\n}\nconst getSuperCallsVisitor = (0, _visitors.environmentVisitor)({\n  CallExpression(child, {\n    allSuperCalls\n  }) {\n    if (!child.get("callee").isSuper()) return;\n    allSuperCalls.push(child);\n  }\n});\nfunction hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {\n  let arrowParent;\n  let thisEnvFn = fnPath.findParent(p => {\n    if (p.isArrowFunctionExpression()) {\n      var _arrowParent;\n      (_arrowParent = arrowParent) != null ? _arrowParent : arrowParent = p;\n      return false;\n    }\n    return p.isFunction() || p.isProgram() || p.isClassProperty({\n      static: false\n    }) || p.isClassPrivateProperty({\n      static: false\n    });\n  });\n  const inConstructor = thisEnvFn.isClassMethod({\n    kind: "constructor"\n  });\n  if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {\n    if (arrowParent) {\n      thisEnvFn = arrowParent;\n    } else if (allowInsertArrow) {\n      fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), []));\n      thisEnvFn = fnPath.get("callee");\n      fnPath = thisEnvFn.get("body");\n    } else {\n      throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");\n    }\n  }\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError("When using \'@babel/plugin-transform-arrow-functions\', " + "it\'s not possible to compile `super()` in an arrow function without compiling classes.\\n" + "Please add \'@babel/plugin-transform-classes\' to your Babel configuration.");\n    }\n    if (!allowInsertArrowWithRest) {\n      throw superCalls[0].buildCodeFrameError("When using \'@babel/plugin-transform-parameters\', " + "it\'s not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\\n" + "Please add \'@babel/plugin-transform-classes\' to your Babel configuration.");\n    }\n    const allSuperCalls = [];\n    thisEnvFn.traverse(getSuperCallsVisitor, {\n      allSuperCalls\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get("callee").replaceWith(callee);\n    });\n  }\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {\n      const args = () => identifier("arguments");\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args());\n      } else {\n        return args();\n      }\n    });\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError("When using \'@babel/plugin-transform-arrow-functions\', " + "it\'s not possible to compile `super.prop` in an arrow function without compiling classes.\\n" + "Please add \'@babel/plugin-transform-classes\' to your Babel configuration.");\n    }\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? "" : superProp.get("property").node.name;\n      const superParentPath = superProp.parentPath;\n      const isAssignment = superParentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superParentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({\n        tag: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n      if (superProp.node.computed) {\n        args.push(superProp.get("property").node);\n      }\n      if (isAssignment) {\n        const value = superParentPath.node.right;\n        args.push(value);\n      }\n      const call = callExpression(identifier(superBinding), args);\n      if (isCall) {\n        superParentPath.unshiftContainer("arguments", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier("call")));\n        thisPaths.push(superParentPath.get("arguments.0"));\n      } else if (isAssignment) {\n        superParentPath.replaceWith(call);\n      } else if (isTaggedTemplate) {\n        superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()]));\n        thisPaths.push(superProp.get("arguments.0"));\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n  let thisBinding;\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n  return {\n    thisBinding,\n    fnPath\n  };\n}\nfunction isLogicalOp(op) {\n  return LOGICAL_OPERATORS.includes(op);\n}\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== "=") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    const isLogicalAssignment = isLogicalOp(op);\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");\n      const object = superProp.node.object;\n      const property = superProp.node.property;\n      assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true));\n      assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value));\n    } else {\n      const object = superProp.node.object;\n      const property = superProp.node.property;\n      assignmentPath.get("left").replaceWith(memberExpression(object, property));\n      assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value));\n    }\n    if (isLogicalAssignment) {\n      assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right));\n    } else {\n      assignmentPath.node.operator = "=";\n    }\n    return [assignmentPath.get("left"), assignmentPath.get("right").get("left")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier("prop") : null;\n    const parts = [assignmentExpression("=", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression("=", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression("=", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(superProp.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n    updateExpr.replaceWith(sequenceExpression(parts));\n    const left = updateExpr.get("expressions.0.right");\n    const right = updateExpr.get("expressions.1.left");\n    return [left, right];\n  }\n  return [superProp];\n  function rightExpression(op, left, right) {\n    if (op === "=") {\n      return assignmentExpression("=", left, right);\n    } else {\n      return binaryExpression(op, left, right);\n    }\n  }\n}\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\nconst assignSuperThisVisitor = (0, _visitors.environmentVisitor)({\n  CallExpression(child, {\n    supers,\n    thisBinding\n  }) {\n    if (!child.get("callee").isSuper()) return;\n    if (supers.has(child.node)) return;\n    supers.add(child.node);\n    child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))]);\n  }\n});\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, "this", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n    thisEnvFn.traverse(assignSuperThisVisitor, {\n      supers: new WeakSet(),\n      thisBinding\n    });\n  });\n}\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, "supercall", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");\n    return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));\n  });\n}\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? "set" : "get";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || ""}`, () => {\n    const argsList = [];\n    let fnBody;\n    if (propName) {\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier("prop");\n      argsList.unshift(method);\n      fnBody = memberExpression(_super(), identifier(method.name), true);\n    }\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier("value");\n      argsList.push(valueIdent);\n      fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));\n    }\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = "binding:" + key;\n  let data = thisEnvFn.getData(cacheKey);\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n  return data;\n}\nconst getScopeInformationVisitor = (0, _visitors.environmentVisitor)({\n  ThisExpression(child, {\n    thisPaths\n  }) {\n    thisPaths.push(child);\n  },\n  JSXIdentifier(child, {\n    thisPaths\n  }) {\n    if (child.node.name !== "this") return;\n    if (!child.parentPath.isJSXMemberExpression({\n      object: child.node\n    }) && !child.parentPath.isJSXOpeningElement({\n      name: child.node\n    })) {\n      return;\n    }\n    thisPaths.push(child);\n  },\n  CallExpression(child, {\n    superCalls\n  }) {\n    if (child.get("callee").isSuper()) superCalls.push(child);\n  },\n  MemberExpression(child, {\n    superProps\n  }) {\n    if (child.get("object").isSuper()) superProps.push(child);\n  },\n  Identifier(child, {\n    argumentsPaths\n  }) {\n    if (!child.isReferencedIdentifier({\n      name: "arguments"\n    })) return;\n    let curr = child.scope;\n    do {\n      if (curr.hasOwnBinding("arguments")) {\n        curr.rename("arguments");\n        return;\n      }\n      if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n        break;\n      }\n    } while (curr = curr.parent);\n    argumentsPaths.push(child);\n  },\n  MetaProperty(child, {\n    newTargetPaths\n  }) {\n    if (!child.get("meta").isIdentifier({\n      name: "new"\n    })) return;\n    if (!child.get("property").isIdentifier({\n      name: "target"\n    })) return;\n    newTargetPaths.push(child);\n  }\n});\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse(getScopeInformationVisitor, {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}\nfunction splitExportDeclaration() {\n  if (!this.isExportDeclaration() || this.isExportAllDeclaration()) {\n    throw new Error("Only default and named export declarations can be split.");\n  }\n  if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0) {\n    throw new Error("It doesn\'t make sense to split exported specifiers.");\n  }\n  const declaration = this.get("declaration");\n  if (this.isExportDefaultDeclaration()) {\n    const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration();\n    const exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression();\n    const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;\n    let id = declaration.node.id;\n    let needBindingRegistration = false;\n    if (!id) {\n      needBindingRegistration = true;\n      id = scope.generateUidIdentifier("default");\n      if (standaloneDeclaration || exportExpr) {\n        declaration.node.id = cloneNode(id);\n      }\n    } else if (exportExpr && scope.hasBinding(id.name)) {\n      needBindingRegistration = true;\n      id = scope.generateUidIdentifier(id.name);\n    }\n    const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration.node)]);\n    const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);\n    this.insertAfter(updatedExportDeclaration);\n    this.replaceWith(updatedDeclaration);\n    if (needBindingRegistration) {\n      scope.registerDeclaration(this);\n    }\n    return this;\n  } else if (this.get("specifiers").length > 0) {\n    throw new Error("It doesn\'t make sense to split exported specifiers.");\n  }\n  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();\n  const specifiers = Object.keys(bindingIdentifiers).map(name => {\n    return exportSpecifier(identifier(name), identifier(name));\n  });\n  const aliasDeclar = exportNamedDeclaration(null, specifiers);\n  this.insertAfter(aliasDeclar);\n  this.replaceWith(declaration.node);\n  return this;\n}\nconst refersOuterBindingVisitor = {\n  "ReferencedIdentifier|BindingIdentifier"(path, state) {\n    if (path.node.name !== state.name) return;\n    state.needsRename = true;\n    path.stop();\n  },\n  Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.name)) {\n      path.skip();\n    }\n  }\n};\nfunction ensureFunctionName(supportUnicodeId) {\n  if (this.node.id) return this;\n  const res = getFunctionName(this.node, this.parent);\n  if (res == null) return this;\n  let {\n    name\n  } = res;\n  if (!supportUnicodeId && /[\\uD800-\\uDFFF]/.test(name)) {\n    return null;\n  }\n  if (name.startsWith("get ") || name.startsWith("set ")) {\n    return null;\n  }\n  name = toBindingIdentifierName(name.replace(/[/ ]/g, "_"));\n  const id = identifier(name);\n  inherits(id, res.originalNode);\n  const state = {\n    needsRename: false,\n    name\n  };\n  const {\n    scope\n  } = this;\n  const binding = scope.getOwnBinding(name);\n  if (binding) {\n    if (binding.kind === "param") {\n      state.needsRename = true;\n    } else {}\n  } else if (scope.parent.hasBinding(name) || scope.hasGlobal(name)) {\n    this.traverse(refersOuterBindingVisitor, state);\n  }\n  if (!state.needsRename) {\n    this.node.id = id;\n    scope.getProgramParent().references[id.name] = true;\n    return this;\n  }\n  if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {\n    scope.rename(id.name);\n    this.node.id = id;\n    scope.getProgramParent().references[id.name] = true;\n    return this;\n  }\n  if (!isFunction(this.node)) return null;\n  const key = scope.generateUidIdentifier(id.name);\n  const params = [];\n  for (let i = 0, len = getFunctionArity(this.node); i < len; i++) {\n    params.push(scope.generateUidIdentifier("x"));\n  }\n  const call = _template.default.expression.ast`\n    (function (${key}) {\n      function ${id}(${params}) {\n        return ${cloneNode(key)}.apply(this, arguments);\n      }\n\n      ${cloneNode(id)}.toString = function () {\n        return ${cloneNode(key)}.toString();\n      }\n\n      return ${cloneNode(id)};\n    })(${toExpression(this.node)})\n  `;\n  return this.replaceWith(call)[0].get("arguments.0");\n}\nfunction getFunctionArity(node) {\n  const count = node.params.findIndex(param => isAssignmentPattern(param) || isRestElement(param));\n  return count === -1 ? node.params.length : count;\n}\n\n//# sourceMappingURL=conversion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92257\n')},10299:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.evaluate = evaluate;\nexports.evaluateTruthy = evaluateTruthy;\nconst VALID_OBJECT_CALLEES = ["Number", "String", "Math"];\nconst VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null];\nconst INVALID_METHODS = ["random"];\nfunction isValidObjectCallee(val) {\n  return VALID_OBJECT_CALLEES.includes(val);\n}\nfunction isValidIdentifierCallee(val) {\n  return VALID_IDENTIFIER_CALLEES.includes(val);\n}\nfunction isInvalidMethod(val) {\n  return INVALID_METHODS.includes(val);\n}\nfunction evaluateTruthy() {\n  const res = this.evaluate();\n  if (res.confident) return !!res.value;\n}\nfunction deopt(path, state) {\n  if (!state.confident) return;\n  state.deoptPath = path;\n  state.confident = false;\n}\nconst Globals = new Map([["undefined", undefined], ["Infinity", Infinity], ["NaN", NaN]]);\nfunction evaluateCached(path, state) {\n  const {\n    node\n  } = path;\n  const {\n    seen\n  } = state;\n  if (seen.has(node)) {\n    const existing = seen.get(node);\n    if (existing.resolved) {\n      return existing.value;\n    } else {\n      deopt(path, state);\n      return;\n    }\n  } else {\n    const item = {\n      resolved: false\n    };\n    seen.set(node, item);\n    const val = _evaluate(path, state);\n    if (state.confident) {\n      item.resolved = true;\n      item.value = val;\n    }\n    return val;\n  }\n}\nfunction _evaluate(path, state) {\n  if (!state.confident) return;\n  if (path.isSequenceExpression()) {\n    const exprs = path.get("expressions");\n    return evaluateCached(exprs[exprs.length - 1], state);\n  }\n  if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {\n    return path.node.value;\n  }\n  if (path.isNullLiteral()) {\n    return null;\n  }\n  if (path.isTemplateLiteral()) {\n    return evaluateQuasis(path, path.node.quasis, state);\n  }\n  if (path.isTaggedTemplateExpression() && path.get("tag").isMemberExpression()) {\n    const object = path.get("tag.object");\n    const {\n      node: {\n        name\n      }\n    } = object;\n    const property = path.get("tag.property");\n    if (object.isIdentifier() && name === "String" && !path.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw") {\n      return evaluateQuasis(path, path.node.quasi.quasis, state, true);\n    }\n  }\n  if (path.isConditionalExpression()) {\n    const testResult = evaluateCached(path.get("test"), state);\n    if (!state.confident) return;\n    if (testResult) {\n      return evaluateCached(path.get("consequent"), state);\n    } else {\n      return evaluateCached(path.get("alternate"), state);\n    }\n  }\n  if (path.isExpressionWrapper()) {\n    return evaluateCached(path.get("expression"), state);\n  }\n  if (path.isMemberExpression() && !path.parentPath.isCallExpression({\n    callee: path.node\n  })) {\n    const property = path.get("property");\n    const object = path.get("object");\n    if (object.isLiteral()) {\n      const value = object.node.value;\n      const type = typeof value;\n      let key = null;\n      if (path.node.computed) {\n        key = evaluateCached(property, state);\n        if (!state.confident) return;\n      } else if (property.isIdentifier()) {\n        key = property.node.name;\n      }\n      if ((type === "number" || type === "string") && key != null && (typeof key === "number" || typeof key === "string")) {\n        return value[key];\n      }\n    }\n  }\n  if (path.isReferencedIdentifier()) {\n    const binding = path.scope.getBinding(path.node.name);\n    if (binding) {\n      if (binding.constantViolations.length > 0 || path.node.start < binding.path.node.end) {\n        deopt(binding.path, state);\n        return;\n      }\n      if (binding.hasValue) {\n        return binding.value;\n      }\n    }\n    const name = path.node.name;\n    if (Globals.has(name)) {\n      if (!binding) {\n        return Globals.get(name);\n      }\n      deopt(binding.path, state);\n      return;\n    }\n    const resolved = path.resolve();\n    if (resolved === path) {\n      deopt(path, state);\n      return;\n    } else {\n      return evaluateCached(resolved, state);\n    }\n  }\n  if (path.isUnaryExpression({\n    prefix: true\n  })) {\n    if (path.node.operator === "void") {\n      return undefined;\n    }\n    const argument = path.get("argument");\n    if (path.node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {\n      return "function";\n    }\n    const arg = evaluateCached(argument, state);\n    if (!state.confident) return;\n    switch (path.node.operator) {\n      case "!":\n        return !arg;\n      case "+":\n        return +arg;\n      case "-":\n        return -arg;\n      case "~":\n        return ~arg;\n      case "typeof":\n        return typeof arg;\n    }\n  }\n  if (path.isArrayExpression()) {\n    const arr = [];\n    const elems = path.get("elements");\n    for (const elem of elems) {\n      const elemValue = elem.evaluate();\n      if (elemValue.confident) {\n        arr.push(elemValue.value);\n      } else {\n        deopt(elemValue.deopt, state);\n        return;\n      }\n    }\n    return arr;\n  }\n  if (path.isObjectExpression()) {\n    const obj = {};\n    const props = path.get("properties");\n    for (const prop of props) {\n      if (prop.isObjectMethod() || prop.isSpreadElement()) {\n        deopt(prop, state);\n        return;\n      }\n      const keyPath = prop.get("key");\n      let key;\n      if (prop.node.computed) {\n        key = keyPath.evaluate();\n        if (!key.confident) {\n          deopt(key.deopt, state);\n          return;\n        }\n        key = key.value;\n      } else if (keyPath.isIdentifier()) {\n        key = keyPath.node.name;\n      } else {\n        key = keyPath.node.value;\n      }\n      const valuePath = prop.get("value");\n      let value = valuePath.evaluate();\n      if (!value.confident) {\n        deopt(value.deopt, state);\n        return;\n      }\n      value = value.value;\n      obj[key] = value;\n    }\n    return obj;\n  }\n  if (path.isLogicalExpression()) {\n    const wasConfident = state.confident;\n    const left = evaluateCached(path.get("left"), state);\n    const leftConfident = state.confident;\n    state.confident = wasConfident;\n    const right = evaluateCached(path.get("right"), state);\n    const rightConfident = state.confident;\n    switch (path.node.operator) {\n      case "||":\n        state.confident = leftConfident && (!!left || rightConfident);\n        if (!state.confident) return;\n        return left || right;\n      case "&&":\n        state.confident = leftConfident && (!left || rightConfident);\n        if (!state.confident) return;\n        return left && right;\n      case "??":\n        state.confident = leftConfident && (left != null || rightConfident);\n        if (!state.confident) return;\n        return left != null ? left : right;\n    }\n  }\n  if (path.isBinaryExpression()) {\n    const left = evaluateCached(path.get("left"), state);\n    if (!state.confident) return;\n    const right = evaluateCached(path.get("right"), state);\n    if (!state.confident) return;\n    switch (path.node.operator) {\n      case "-":\n        return left - right;\n      case "+":\n        return left + right;\n      case "/":\n        return left / right;\n      case "*":\n        return left * right;\n      case "%":\n        return left % right;\n      case "**":\n        return Math.pow(left, right);\n      case "<":\n        return left < right;\n      case ">":\n        return left > right;\n      case "<=":\n        return left <= right;\n      case ">=":\n        return left >= right;\n      case "==":\n        return left == right;\n      case "!=":\n        return left != right;\n      case "===":\n        return left === right;\n      case "!==":\n        return left !== right;\n      case "|":\n        return left | right;\n      case "&":\n        return left & right;\n      case "^":\n        return left ^ right;\n      case "<<":\n        return left << right;\n      case ">>":\n        return left >> right;\n      case ">>>":\n        return left >>> right;\n    }\n  }\n  if (path.isCallExpression()) {\n    const callee = path.get("callee");\n    let context;\n    let func;\n    if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || isValidIdentifierCallee(callee.node.name))) {\n      func = __webpack_require__.g[callee.node.name];\n    }\n    if (callee.isMemberExpression()) {\n      const object = callee.get("object");\n      const property = callee.get("property");\n      if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !isInvalidMethod(property.node.name)) {\n        context = __webpack_require__.g[object.node.name];\n        const key = property.node.name;\n        if (hasOwnProperty.call(context, key)) {\n          func = context[key];\n        }\n      }\n      if (object.isLiteral() && property.isIdentifier()) {\n        const type = typeof object.node.value;\n        if (type === "string" || type === "number") {\n          context = object.node.value;\n          func = context[property.node.name];\n        }\n      }\n    }\n    if (func) {\n      const args = path.get("arguments").map(arg => evaluateCached(arg, state));\n      if (!state.confident) return;\n      return func.apply(context, args);\n    }\n  }\n  deopt(path, state);\n}\nfunction evaluateQuasis(path, quasis, state, raw = false) {\n  let str = "";\n  let i = 0;\n  const exprs = path.isTemplateLiteral() ? path.get("expressions") : path.get("quasi.expressions");\n  for (const elem of quasis) {\n    if (!state.confident) break;\n    str += raw ? elem.value.raw : elem.value.cooked;\n    const expr = exprs[i++];\n    if (expr) str += String(evaluateCached(expr, state));\n  }\n  if (!state.confident) return;\n  return str;\n}\nfunction evaluate() {\n  const state = {\n    confident: true,\n    deoptPath: null,\n    seen: new Map()\n  };\n  let value = evaluateCached(this, state);\n  if (!state.confident) value = undefined;\n  return {\n    confident: state.confident,\n    deopt: state.deoptPath,\n    value: value\n  };\n}\n\n//# sourceMappingURL=evaluation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10299\n')},16109:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports._getKey = _getKey;\nexports._getPattern = _getPattern;\nexports.get = get;\nexports.getAllNextSiblings = getAllNextSiblings;\nexports.getAllPrevSiblings = getAllPrevSiblings;\nexports.getAssignmentIdentifiers = getAssignmentIdentifiers;\nexports.getBindingIdentifierPaths = getBindingIdentifierPaths;\nexports.getBindingIdentifiers = getBindingIdentifiers;\nexports.getCompletionRecords = getCompletionRecords;\nexports.getNextSibling = getNextSibling;\nexports.getOpposite = getOpposite;\nexports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;\nexports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;\nexports.getPrevSibling = getPrevSibling;\nexports.getSibling = getSibling;\nvar _index = __webpack_require__(29709);\nvar _t = __webpack_require__(2352);\nconst {\n  getAssignmentIdentifiers: _getAssignmentIdentifiers,\n  getBindingIdentifiers: _getBindingIdentifiers,\n  getOuterBindingIdentifiers: _getOuterBindingIdentifiers,\n  numericLiteral,\n  unaryExpression\n} = _t;\nconst NORMAL_COMPLETION = 0;\nconst BREAK_COMPLETION = 1;\nfunction NormalCompletion(path) {\n  return {\n    type: NORMAL_COMPLETION,\n    path\n  };\n}\nfunction BreakCompletion(path) {\n  return {\n    type: BREAK_COMPLETION,\n    path\n  };\n}\nfunction getOpposite() {\n  if (this.key === "left") {\n    return this.getSibling("right");\n  } else if (this.key === "right") {\n    return this.getSibling("left");\n  }\n  return null;\n}\nfunction addCompletionRecords(path, records, context) {\n  if (path) {\n    records.push(..._getCompletionRecords(path, context));\n  }\n  return records;\n}\nfunction completionRecordForSwitch(cases, records, context) {\n  let lastNormalCompletions = [];\n  for (let i = 0; i < cases.length; i++) {\n    const casePath = cases[i];\n    const caseCompletions = _getCompletionRecords(casePath, context);\n    const normalCompletions = [];\n    const breakCompletions = [];\n    for (const c of caseCompletions) {\n      if (c.type === NORMAL_COMPLETION) {\n        normalCompletions.push(c);\n      }\n      if (c.type === BREAK_COMPLETION) {\n        breakCompletions.push(c);\n      }\n    }\n    if (normalCompletions.length) {\n      lastNormalCompletions = normalCompletions;\n    }\n    records.push(...breakCompletions);\n  }\n  records.push(...lastNormalCompletions);\n  return records;\n}\nfunction normalCompletionToBreak(completions) {\n  completions.forEach(c => {\n    c.type = BREAK_COMPLETION;\n  });\n}\nfunction replaceBreakStatementInBreakCompletion(completions, reachable) {\n  completions.forEach(c => {\n    if (c.path.isBreakStatement({\n      label: null\n    })) {\n      if (reachable) {\n        c.path.replaceWith(unaryExpression("void", numericLiteral(0)));\n      } else {\n        c.path.remove();\n      }\n    }\n  });\n}\nfunction getStatementListCompletion(paths, context) {\n  const completions = [];\n  if (context.canHaveBreak) {\n    let lastNormalCompletions = [];\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const newContext = Object.assign({}, context, {\n        inCaseClause: false\n      });\n      if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {\n        newContext.shouldPopulateBreak = true;\n      } else {\n        newContext.shouldPopulateBreak = false;\n      }\n      const statementCompletions = _getCompletionRecords(path, newContext);\n      if (statementCompletions.length > 0 && statementCompletions.every(c => c.type === BREAK_COMPLETION)) {\n        if (lastNormalCompletions.length > 0 && statementCompletions.every(c => c.path.isBreakStatement({\n          label: null\n        }))) {\n          normalCompletionToBreak(lastNormalCompletions);\n          completions.push(...lastNormalCompletions);\n          if (lastNormalCompletions.some(c => c.path.isDeclaration())) {\n            completions.push(...statementCompletions);\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n          replaceBreakStatementInBreakCompletion(statementCompletions, false);\n        } else {\n          completions.push(...statementCompletions);\n          if (!context.shouldPopulateBreak) {\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n        }\n        break;\n      }\n      if (i === paths.length - 1) {\n        completions.push(...statementCompletions);\n      } else {\n        lastNormalCompletions = [];\n        for (let i = 0; i < statementCompletions.length; i++) {\n          const c = statementCompletions[i];\n          if (c.type === BREAK_COMPLETION) {\n            completions.push(c);\n          }\n          if (c.type === NORMAL_COMPLETION) {\n            lastNormalCompletions.push(c);\n          }\n        }\n      }\n    }\n  } else if (paths.length) {\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const pathCompletions = _getCompletionRecords(paths[i], context);\n      if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {\n        completions.push(...pathCompletions);\n        break;\n      }\n    }\n  }\n  return completions;\n}\nfunction _getCompletionRecords(path, context) {\n  let records = [];\n  if (path.isIfStatement()) {\n    records = addCompletionRecords(path.get("consequent"), records, context);\n    records = addCompletionRecords(path.get("alternate"), records, context);\n  } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {\n    return addCompletionRecords(path.get("body"), records, context);\n  } else if (path.isProgram() || path.isBlockStatement()) {\n    return getStatementListCompletion(path.get("body"), context);\n  } else if (path.isFunction()) {\n    return _getCompletionRecords(path.get("body"), context);\n  } else if (path.isTryStatement()) {\n    records = addCompletionRecords(path.get("block"), records, context);\n    records = addCompletionRecords(path.get("handler"), records, context);\n  } else if (path.isCatchClause()) {\n    return addCompletionRecords(path.get("body"), records, context);\n  } else if (path.isSwitchStatement()) {\n    return completionRecordForSwitch(path.get("cases"), records, context);\n  } else if (path.isSwitchCase()) {\n    return getStatementListCompletion(path.get("consequent"), {\n      canHaveBreak: true,\n      shouldPopulateBreak: false,\n      inCaseClause: true\n    });\n  } else if (path.isBreakStatement()) {\n    records.push(BreakCompletion(path));\n  } else {\n    records.push(NormalCompletion(path));\n  }\n  return records;\n}\nfunction getCompletionRecords() {\n  const records = _getCompletionRecords(this, {\n    canHaveBreak: false,\n    shouldPopulateBreak: false,\n    inCaseClause: false\n  });\n  return records.map(r => r.path);\n}\nfunction getSibling(key) {\n  return _index.default.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key\n  }).setContext(this.context);\n}\nfunction getPrevSibling() {\n  return this.getSibling(this.key - 1);\n}\nfunction getNextSibling() {\n  return this.getSibling(this.key + 1);\n}\nfunction getAllNextSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n  return siblings;\n}\nfunction getAllPrevSiblings() {\n  let _key = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n  return siblings;\n}\nfunction get(key, context = true) {\n  if (context === true) context = this.context;\n  const parts = key.split(".");\n  if (parts.length === 1) {\n    return _getKey.call(this, key, context);\n  } else {\n    return _getPattern.call(this, parts, context);\n  }\n}\nfunction _getKey(key, context) {\n  const node = this.node;\n  const container = node[key];\n  if (Array.isArray(container)) {\n    return container.map((_, i) => {\n      return _index.default.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i\n      }).setContext(context);\n    });\n  } else {\n    return _index.default.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key\n    }).setContext(context);\n  }\n}\nfunction _getPattern(parts, context) {\n  let path = this;\n  for (const part of parts) {\n    if (part === ".") {\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n  return path;\n}\nfunction getAssignmentIdentifiers() {\n  return _getAssignmentIdentifiers(this.node);\n}\nfunction getBindingIdentifiers(duplicates) {\n  return _getBindingIdentifiers(this.node, duplicates);\n}\nfunction getOuterBindingIdentifiers(duplicates) {\n  return _getOuterBindingIdentifiers(this.node, duplicates);\n}\nfunction getBindingIdentifierPaths(duplicates = false, outerOnly = false) {\n  const path = this;\n  const search = [path];\n  const ids = Object.create(null);\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n    const keys = _getBindingIdentifiers.keys[id.node.type];\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = ids[id.node.name] = ids[id.node.name] || [];\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n      continue;\n    }\n    if (id.isExportDeclaration()) {\n      const declaration = id.get("declaration");\n      if (declaration.isDeclaration()) {\n        search.push(declaration);\n      }\n      continue;\n    }\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get("id"));\n        continue;\n      }\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n        if (Array.isArray(child)) {\n          search.push(...child);\n        } else if (child.node) {\n          search.push(child);\n        }\n      }\n    }\n  }\n  return ids;\n}\nfunction getOuterBindingIdentifierPaths(duplicates = false) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}\n\n//# sourceMappingURL=family.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16109\n')},29709:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = exports.SHOULD_STOP = exports.SHOULD_SKIP = exports.REMOVED = void 0;\nvar virtualTypes = __webpack_require__(75562);\nvar _debug = __webpack_require__(17833);\nvar _index = __webpack_require__(25781);\nvar _index2 = __webpack_require__(86814);\nvar _t = __webpack_require__(2352);\nvar t = _t;\nvar cache = __webpack_require__(37411);\nvar _generator = __webpack_require__(78992);\nvar NodePath_ancestry = __webpack_require__(60940);\nvar NodePath_inference = __webpack_require__(47317);\nvar NodePath_replacement = __webpack_require__(22037);\nvar NodePath_evaluation = __webpack_require__(10299);\nvar NodePath_conversion = __webpack_require__(92257);\nvar NodePath_introspection = __webpack_require__(40854);\nvar _context = __webpack_require__(79578);\nvar NodePath_context = _context;\nvar NodePath_removal = __webpack_require__(53097);\nvar NodePath_modification = __webpack_require__(58345);\nvar NodePath_family = __webpack_require__(16109);\nvar NodePath_comments = __webpack_require__(83383);\nvar NodePath_virtual_types_validator = __webpack_require__(57973);\nconst {\n  validate\n} = _t;\nconst debug = _debug("babel");\nconst REMOVED = exports.REMOVED = 1 << 0;\nconst SHOULD_STOP = exports.SHOULD_STOP = 1 << 1;\nconst SHOULD_SKIP = exports.SHOULD_SKIP = 1 << 2;\nconst NodePath_Final = exports["default"] = class NodePath {\n  constructor(hub, parent) {\n    this.contexts = [];\n    this.state = null;\n    this.opts = null;\n    this._traverseFlags = 0;\n    this.skipKeys = null;\n    this.parentPath = null;\n    this.container = null;\n    this.listKey = null;\n    this.key = null;\n    this.node = null;\n    this.type = null;\n    this.parent = parent;\n    this.hub = hub;\n    this.data = null;\n    this.context = null;\n    this.scope = null;\n  }\n  get removed() {\n    return (this._traverseFlags & 1) > 0;\n  }\n  set removed(v) {\n    if (v) this._traverseFlags |= 1;else this._traverseFlags &= -2;\n  }\n  get shouldStop() {\n    return (this._traverseFlags & 2) > 0;\n  }\n  set shouldStop(v) {\n    if (v) this._traverseFlags |= 2;else this._traverseFlags &= -3;\n  }\n  get shouldSkip() {\n    return (this._traverseFlags & 4) > 0;\n  }\n  set shouldSkip(v) {\n    if (v) this._traverseFlags |= 4;else this._traverseFlags &= -5;\n  }\n  static get({\n    hub,\n    parentPath,\n    parent,\n    container,\n    listKey,\n    key\n  }) {\n    if (!hub && parentPath) {\n      hub = parentPath.hub;\n    }\n    if (!parent) {\n      throw new Error("To get a node path the parent needs to exist");\n    }\n    const targetNode = container[key];\n    const paths = cache.getOrCreateCachedPaths(hub, parent);\n    let path = paths.get(targetNode);\n    if (!path) {\n      path = new NodePath(hub, parent);\n      if (targetNode) paths.set(targetNode, path);\n    }\n    _context.setup.call(path, parentPath, container, listKey, key);\n    return path;\n  }\n  getScope(scope) {\n    return this.isScope() ? new _index2.default(this) : scope;\n  }\n  setData(key, val) {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    return this.data[key] = val;\n  }\n  getData(key, def) {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    let val = this.data[key];\n    if (val === undefined && def !== undefined) val = this.data[key] = def;\n    return val;\n  }\n  hasNode() {\n    return this.node != null;\n  }\n  buildCodeFrameError(msg, Error = SyntaxError) {\n    return this.hub.buildError(this.node, msg, Error);\n  }\n  traverse(visitor, state) {\n    (0, _index.default)(this.node, visitor, this.scope, state, this);\n  }\n  set(key, node) {\n    validate(this.node, key, node);\n    this.node[key] = node;\n  }\n  getPathLocation() {\n    const parts = [];\n    let path = this;\n    do {\n      let key = path.key;\n      if (path.inList) key = `${path.listKey}[${key}]`;\n      parts.unshift(key);\n    } while (path = path.parentPath);\n    return parts.join(".");\n  }\n  debug(message) {\n    if (!debug.enabled) return;\n    debug(`${this.getPathLocation()} ${this.type}: ${message}`);\n  }\n  toString() {\n    return (0, _generator.default)(this.node).code;\n  }\n  get inList() {\n    return !!this.listKey;\n  }\n  set inList(inList) {\n    if (!inList) {\n      this.listKey = null;\n    }\n  }\n  get parentKey() {\n    return this.listKey || this.key;\n  }\n};\nconst methods = {\n  findParent: NodePath_ancestry.findParent,\n  find: NodePath_ancestry.find,\n  getFunctionParent: NodePath_ancestry.getFunctionParent,\n  getStatementParent: NodePath_ancestry.getStatementParent,\n  getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom,\n  getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom,\n  getAncestry: NodePath_ancestry.getAncestry,\n  isAncestor: NodePath_ancestry.isAncestor,\n  isDescendant: NodePath_ancestry.isDescendant,\n  inType: NodePath_ancestry.inType,\n  getTypeAnnotation: NodePath_inference.getTypeAnnotation,\n  isBaseType: NodePath_inference.isBaseType,\n  couldBeBaseType: NodePath_inference.couldBeBaseType,\n  baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches,\n  isGenericType: NodePath_inference.isGenericType,\n  replaceWithMultiple: NodePath_replacement.replaceWithMultiple,\n  replaceWithSourceString: NodePath_replacement.replaceWithSourceString,\n  replaceWith: NodePath_replacement.replaceWith,\n  replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements,\n  replaceInline: NodePath_replacement.replaceInline,\n  evaluateTruthy: NodePath_evaluation.evaluateTruthy,\n  evaluate: NodePath_evaluation.evaluate,\n  toComputedKey: NodePath_conversion.toComputedKey,\n  ensureBlock: NodePath_conversion.ensureBlock,\n  unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment,\n  arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression,\n  splitExportDeclaration: NodePath_conversion.splitExportDeclaration,\n  ensureFunctionName: NodePath_conversion.ensureFunctionName,\n  matchesPattern: NodePath_introspection.matchesPattern,\n  isStatic: NodePath_introspection.isStatic,\n  isNodeType: NodePath_introspection.isNodeType,\n  canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression,\n  canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement,\n  isCompletionRecord: NodePath_introspection.isCompletionRecord,\n  isStatementOrBlock: NodePath_introspection.isStatementOrBlock,\n  referencesImport: NodePath_introspection.referencesImport,\n  getSource: NodePath_introspection.getSource,\n  willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore,\n  _guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo,\n  resolve: NodePath_introspection.resolve,\n  isConstantExpression: NodePath_introspection.isConstantExpression,\n  isInStrictMode: NodePath_introspection.isInStrictMode,\n  isDenylisted: NodePath_context.isDenylisted,\n  visit: NodePath_context.visit,\n  skip: NodePath_context.skip,\n  skipKey: NodePath_context.skipKey,\n  stop: NodePath_context.stop,\n  setContext: NodePath_context.setContext,\n  requeue: NodePath_context.requeue,\n  requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators,\n  remove: NodePath_removal.remove,\n  insertBefore: NodePath_modification.insertBefore,\n  insertAfter: NodePath_modification.insertAfter,\n  unshiftContainer: NodePath_modification.unshiftContainer,\n  pushContainer: NodePath_modification.pushContainer,\n  getOpposite: NodePath_family.getOpposite,\n  getCompletionRecords: NodePath_family.getCompletionRecords,\n  getSibling: NodePath_family.getSibling,\n  getPrevSibling: NodePath_family.getPrevSibling,\n  getNextSibling: NodePath_family.getNextSibling,\n  getAllNextSiblings: NodePath_family.getAllNextSiblings,\n  getAllPrevSiblings: NodePath_family.getAllPrevSiblings,\n  get: NodePath_family.get,\n  getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers,\n  getBindingIdentifiers: NodePath_family.getBindingIdentifiers,\n  getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers,\n  getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths,\n  getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths,\n  shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings,\n  addComment: NodePath_comments.addComment,\n  addComments: NodePath_comments.addComments\n};\nObject.assign(NodePath_Final.prototype, methods);\n{\n  NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")];\n  Object.assign(NodePath_Final.prototype, {\n    has: NodePath_introspection[String("has")],\n    is: NodePath_introspection[String("is")],\n    isnt: NodePath_introspection[String("isnt")],\n    equals: NodePath_introspection[String("equals")],\n    hoist: NodePath_modification[String("hoist")],\n    updateSiblingKeys: NodePath_modification.updateSiblingKeys,\n    call: NodePath_context.call,\n    isBlacklisted: NodePath_context[String("isBlacklisted")],\n    setScope: NodePath_context.setScope,\n    resync: NodePath_context.resync,\n    popContext: NodePath_context.popContext,\n    pushContext: NodePath_context.pushContext,\n    setup: NodePath_context.setup,\n    setKey: NodePath_context.setKey\n  });\n}\n{\n  NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;\n  NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;\n  Object.assign(NodePath_Final.prototype, {\n    _getTypeAnnotation: NodePath_inference._getTypeAnnotation,\n    _replaceWith: NodePath_replacement._replaceWith,\n    _resolve: NodePath_introspection._resolve,\n    _call: NodePath_context._call,\n    _resyncParent: NodePath_context._resyncParent,\n    _resyncKey: NodePath_context._resyncKey,\n    _resyncList: NodePath_context._resyncList,\n    _resyncRemoved: NodePath_context._resyncRemoved,\n    _getQueueContexts: NodePath_context._getQueueContexts,\n    _removeFromScope: NodePath_removal._removeFromScope,\n    _callRemovalHooks: NodePath_removal._callRemovalHooks,\n    _remove: NodePath_removal._remove,\n    _markRemoved: NodePath_removal._markRemoved,\n    _assertUnremoved: NodePath_removal._assertUnremoved,\n    _containerInsert: NodePath_modification._containerInsert,\n    _containerInsertBefore: NodePath_modification._containerInsertBefore,\n    _containerInsertAfter: NodePath_modification._containerInsertAfter,\n    _verifyNodeList: NodePath_modification._verifyNodeList,\n    _getKey: NodePath_family._getKey,\n    _getPattern: NodePath_family._getPattern\n  });\n}\nfor (const type of t.TYPES) {\n  const typeKey = `is${type}`;\n  const fn = t[typeKey];\n  NodePath_Final.prototype[typeKey] = function (opts) {\n    return fn(this.node, opts);\n  };\n  NodePath_Final.prototype[`assert${type}`] = function (opts) {\n    if (!fn(this.node, opts)) {\n      throw new TypeError(`Expected node path of type ${type}`);\n    }\n  };\n}\nObject.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);\nfor (const type of Object.keys(virtualTypes)) {\n  if (type[0] === "_") continue;\n  if (!t.TYPES.includes(type)) t.TYPES.push(type);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29709\n')},47317:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\nvar inferers = __webpack_require__(39937);\nvar _t = __webpack_require__(2352);\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\nfunction getTypeAnnotation() {\n  let type = this.getData("typeAnnotation");\n  if (type != null) {\n    return type;\n  }\n  type = _getTypeAnnotation.call(this) || anyTypeAnnotation();\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n  this.setData("typeAnnotation", type);\n  return type;\n}\nconst typeAnnotationInferringNodes = new WeakSet();\nfunction _getTypeAnnotation() {\n  const node = this.node;\n  if (!node) {\n    if (this.key === "init" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n      if (declar.key === "left" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n      if (declar.key === "left" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n  typeAnnotationInferringNodes.add(node);\n  try {\n    var _inferer;\n    let inferer = inferers[node.type];\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n    inferer = inferers[this.parentPath.type];\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === "string") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === "number") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === "boolean") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === "any") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === "mixed") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === "empty") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === "void") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n  return false;\n}\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  if (genericName === "Array") {\n    if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {\n      return true;\n    }\n  }\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  }) || isTSTypeReference(type) && isIdentifier(type.typeName, {\n    name: genericName\n  });\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDczMTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMEJBQTBCO0FBQzFCLCtCQUErQjtBQUMvQix1QkFBdUI7QUFDdkIseUJBQXlCO0FBQ3pCLGtCQUFrQjtBQUNsQixxQkFBcUI7QUFDckIsZUFBZSxtQkFBTyxDQUFDLEtBQWU7QUFDdEMsU0FBUyxtQkFBTyxDQUFDLElBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLE1BQU07QUFDTiwyQ0FBMkMsU0FBUztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHJhdmVyc2UvbGliL3BhdGgvaW5mZXJlbmNlL2luZGV4LmpzPzRmMjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLl9nZXRUeXBlQW5ub3RhdGlvbiA9IF9nZXRUeXBlQW5ub3RhdGlvbjtcbmV4cG9ydHMuYmFzZVR5cGVTdHJpY3RseU1hdGNoZXMgPSBiYXNlVHlwZVN0cmljdGx5TWF0Y2hlcztcbmV4cG9ydHMuY291bGRCZUJhc2VUeXBlID0gY291bGRCZUJhc2VUeXBlO1xuZXhwb3J0cy5nZXRUeXBlQW5ub3RhdGlvbiA9IGdldFR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5pc0Jhc2VUeXBlID0gaXNCYXNlVHlwZTtcbmV4cG9ydHMuaXNHZW5lcmljVHlwZSA9IGlzR2VuZXJpY1R5cGU7XG52YXIgaW5mZXJlcnMgPSByZXF1aXJlKFwiLi9pbmZlcmVycy5qc1wiKTtcbnZhciBfdCA9IHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIik7XG5jb25zdCB7XG4gIGFueVR5cGVBbm5vdGF0aW9uLFxuICBpc0FueVR5cGVBbm5vdGF0aW9uLFxuICBpc0FycmF5VHlwZUFubm90YXRpb24sXG4gIGlzQm9vbGVhblR5cGVBbm5vdGF0aW9uLFxuICBpc0VtcHR5VHlwZUFubm90YXRpb24sXG4gIGlzRmxvd0Jhc2VBbm5vdGF0aW9uLFxuICBpc0dlbmVyaWNUeXBlQW5ub3RhdGlvbixcbiAgaXNJZGVudGlmaWVyLFxuICBpc01peGVkVHlwZUFubm90YXRpb24sXG4gIGlzTnVtYmVyVHlwZUFubm90YXRpb24sXG4gIGlzU3RyaW5nVHlwZUFubm90YXRpb24sXG4gIGlzVFNBcnJheVR5cGUsXG4gIGlzVFNUeXBlQW5ub3RhdGlvbixcbiAgaXNUU1R5cGVSZWZlcmVuY2UsXG4gIGlzVHVwbGVUeXBlQW5ub3RhdGlvbixcbiAgaXNUeXBlQW5ub3RhdGlvbixcbiAgaXNVbmlvblR5cGVBbm5vdGF0aW9uLFxuICBpc1ZvaWRUeXBlQW5ub3RhdGlvbixcbiAgc3RyaW5nVHlwZUFubm90YXRpb24sXG4gIHZvaWRUeXBlQW5ub3RhdGlvblxufSA9IF90O1xuZnVuY3Rpb24gZ2V0VHlwZUFubm90YXRpb24oKSB7XG4gIGxldCB0eXBlID0gdGhpcy5nZXREYXRhKFwidHlwZUFubm90YXRpb25cIik7XG4gIGlmICh0eXBlICE9IG51bGwpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuICB0eXBlID0gX2dldFR5cGVBbm5vdGF0aW9uLmNhbGwodGhpcykgfHwgYW55VHlwZUFubm90YXRpb24oKTtcbiAgaWYgKGlzVHlwZUFubm90YXRpb24odHlwZSkgfHwgaXNUU1R5cGVBbm5vdGF0aW9uKHR5cGUpKSB7XG4gICAgdHlwZSA9IHR5cGUudHlwZUFubm90YXRpb247XG4gIH1cbiAgdGhpcy5zZXREYXRhKFwidHlwZUFubm90YXRpb25cIiwgdHlwZSk7XG4gIHJldHVybiB0eXBlO1xufVxuY29uc3QgdHlwZUFubm90YXRpb25JbmZlcnJpbmdOb2RlcyA9IG5ldyBXZWFrU2V0KCk7XG5mdW5jdGlvbiBfZ2V0VHlwZUFubm90YXRpb24oKSB7XG4gIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGU7XG4gIGlmICghbm9kZSkge1xuICAgIGlmICh0aGlzLmtleSA9PT0gXCJpbml0XCIgJiYgdGhpcy5wYXJlbnRQYXRoLmlzVmFyaWFibGVEZWNsYXJhdG9yKCkpIHtcbiAgICAgIGNvbnN0IGRlY2xhciA9IHRoaXMucGFyZW50UGF0aC5wYXJlbnRQYXRoO1xuICAgICAgY29uc3QgZGVjbGFyUGFyZW50ID0gZGVjbGFyLnBhcmVudFBhdGg7XG4gICAgICBpZiAoZGVjbGFyLmtleSA9PT0gXCJsZWZ0XCIgJiYgZGVjbGFyUGFyZW50LmlzRm9ySW5TdGF0ZW1lbnQoKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nVHlwZUFubm90YXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWNsYXIua2V5ID09PSBcImxlZnRcIiAmJiBkZWNsYXJQYXJlbnQuaXNGb3JPZlN0YXRlbWVudCgpKSB7XG4gICAgICAgIHJldHVybiBhbnlUeXBlQW5ub3RhdGlvbigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZvaWRUeXBlQW5ub3RhdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChub2RlLnR5cGVBbm5vdGF0aW9uKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZUFubm90YXRpb247XG4gIH1cbiAgaWYgKHR5cGVBbm5vdGF0aW9uSW5mZXJyaW5nTm9kZXMuaGFzKG5vZGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHR5cGVBbm5vdGF0aW9uSW5mZXJyaW5nTm9kZXMuYWRkKG5vZGUpO1xuICB0cnkge1xuICAgIHZhciBfaW5mZXJlcjtcbiAgICBsZXQgaW5mZXJlciA9IGluZmVyZXJzW25vZGUudHlwZV07XG4gICAgaWYgKGluZmVyZXIpIHtcbiAgICAgIHJldHVybiBpbmZlcmVyLmNhbGwodGhpcywgbm9kZSk7XG4gICAgfVxuICAgIGluZmVyZXIgPSBpbmZlcmVyc1t0aGlzLnBhcmVudFBhdGgudHlwZV07XG4gICAgaWYgKChfaW5mZXJlciA9IGluZmVyZXIpICE9IG51bGwgJiYgX2luZmVyZXIudmFsaWRQYXJlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudFBhdGguZ2V0VHlwZUFubm90YXRpb24oKTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgdHlwZUFubm90YXRpb25JbmZlcnJpbmdOb2Rlcy5kZWxldGUobm9kZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzQmFzZVR5cGUoYmFzZU5hbWUsIHNvZnQpIHtcbiAgcmV0dXJuIF9pc0Jhc2VUeXBlKGJhc2VOYW1lLCB0aGlzLmdldFR5cGVBbm5vdGF0aW9uKCksIHNvZnQpO1xufVxuZnVuY3Rpb24gX2lzQmFzZVR5cGUoYmFzZU5hbWUsIHR5cGUsIHNvZnQpIHtcbiAgaWYgKGJhc2VOYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nVHlwZUFubm90YXRpb24odHlwZSk7XG4gIH0gZWxzZSBpZiAoYmFzZU5hbWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJUeXBlQW5ub3RhdGlvbih0eXBlKTtcbiAgfSBlbHNlIGlmIChiYXNlTmFtZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gaXNCb29sZWFuVHlwZUFubm90YXRpb24odHlwZSk7XG4gIH0gZWxzZSBpZiAoYmFzZU5hbWUgPT09IFwiYW55XCIpIHtcbiAgICByZXR1cm4gaXNBbnlUeXBlQW5ub3RhdGlvbih0eXBlKTtcbiAgfSBlbHNlIGlmIChiYXNlTmFtZSA9PT0gXCJtaXhlZFwiKSB7XG4gICAgcmV0dXJuIGlzTWl4ZWRUeXBlQW5ub3RhdGlvbih0eXBlKTtcbiAgfSBlbHNlIGlmIChiYXNlTmFtZSA9PT0gXCJlbXB0eVwiKSB7XG4gICAgcmV0dXJuIGlzRW1wdHlUeXBlQW5ub3RhdGlvbih0eXBlKTtcbiAgfSBlbHNlIGlmIChiYXNlTmFtZSA9PT0gXCJ2b2lkXCIpIHtcbiAgICByZXR1cm4gaXNWb2lkVHlwZUFubm90YXRpb24odHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNvZnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGJhc2UgdHlwZSAke2Jhc2VOYW1lfWApO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY291bGRCZUJhc2VUeXBlKG5hbWUpIHtcbiAgY29uc3QgdHlwZSA9IHRoaXMuZ2V0VHlwZUFubm90YXRpb24oKTtcbiAgaWYgKGlzQW55VHlwZUFubm90YXRpb24odHlwZSkpIHJldHVybiB0cnVlO1xuICBpZiAoaXNVbmlvblR5cGVBbm5vdGF0aW9uKHR5cGUpKSB7XG4gICAgZm9yIChjb25zdCB0eXBlMiBvZiB0eXBlLnR5cGVzKSB7XG4gICAgICBpZiAoaXNBbnlUeXBlQW5ub3RhdGlvbih0eXBlMikgfHwgX2lzQmFzZVR5cGUobmFtZSwgdHlwZTIsIHRydWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIF9pc0Jhc2VUeXBlKG5hbWUsIHR5cGUsIHRydWUpO1xuICB9XG59XG5mdW5jdGlvbiBiYXNlVHlwZVN0cmljdGx5TWF0Y2hlcyhyaWdodEFyZykge1xuICBjb25zdCBsZWZ0ID0gdGhpcy5nZXRUeXBlQW5ub3RhdGlvbigpO1xuICBjb25zdCByaWdodCA9IHJpZ2h0QXJnLmdldFR5cGVBbm5vdGF0aW9uKCk7XG4gIGlmICghaXNBbnlUeXBlQW5ub3RhdGlvbihsZWZ0KSAmJiBpc0Zsb3dCYXNlQW5ub3RhdGlvbihsZWZ0KSkge1xuICAgIHJldHVybiByaWdodC50eXBlID09PSBsZWZ0LnR5cGU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNHZW5lcmljVHlwZShnZW5lcmljTmFtZSkge1xuICBjb25zdCB0eXBlID0gdGhpcy5nZXRUeXBlQW5ub3RhdGlvbigpO1xuICBpZiAoZ2VuZXJpY05hbWUgPT09IFwiQXJyYXlcIikge1xuICAgIGlmIChpc1RTQXJyYXlUeXBlKHR5cGUpIHx8IGlzQXJyYXlUeXBlQW5ub3RhdGlvbih0eXBlKSB8fCBpc1R1cGxlVHlwZUFubm90YXRpb24odHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXNHZW5lcmljVHlwZUFubm90YXRpb24odHlwZSkgJiYgaXNJZGVudGlmaWVyKHR5cGUuaWQsIHtcbiAgICBuYW1lOiBnZW5lcmljTmFtZVxuICB9KSB8fCBpc1RTVHlwZVJlZmVyZW5jZSh0eXBlKSAmJiBpc0lkZW50aWZpZXIodHlwZS50eXBlTmFtZSwge1xuICAgIG5hbWU6IGdlbmVyaWNOYW1lXG4gIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47317\n')},70354:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = _default;\nvar _t = __webpack_require__(2352);\nvar _util = __webpack_require__(3141);\nconst {\n  BOOLEAN_NUMBER_BINARY_OPERATORS,\n  createTypeAnnotationBasedOnTypeof,\n  numberTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\nfunction _default(node) {\n  if (!this.isReferenced()) return;\n  const binding = this.scope.getBinding(node.name);\n  if (binding) {\n    if (binding.identifier.typeAnnotation) {\n      return binding.identifier.typeAnnotation;\n    } else {\n      return getTypeAnnotationBindingConstantViolations(binding, this, node.name);\n    }\n  }\n  if (node.name === "undefined") {\n    return voidTypeAnnotation();\n  } else if (node.name === "NaN" || node.name === "Infinity") {\n    return numberTypeAnnotation();\n  } else if (node.name === "arguments") {}\n}\nfunction getTypeAnnotationBindingConstantViolations(binding, path, name) {\n  const types = [];\n  const functionConstantViolations = [];\n  let constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);\n  const testType = getConditionalAnnotation(binding, path, name);\n  if (testType) {\n    const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);\n    constantViolations = constantViolations.filter(path => !testConstantViolations.includes(path));\n    types.push(testType.typeAnnotation);\n  }\n  if (constantViolations.length) {\n    constantViolations.push(...functionConstantViolations);\n    for (const violation of constantViolations) {\n      types.push(violation.getTypeAnnotation());\n    }\n  }\n  if (!types.length) {\n    return;\n  }\n  return (0, _util.createUnionType)(types);\n}\nfunction getConstantViolationsBefore(binding, path, functions) {\n  const violations = binding.constantViolations.slice();\n  violations.unshift(binding.path);\n  return violations.filter(violation => {\n    violation = violation.resolve();\n    const status = violation._guessExecutionStatusRelativeTo(path);\n    if (functions && status === "unknown") functions.push(violation);\n    return status === "before";\n  });\n}\nfunction inferAnnotationFromBinaryExpression(name, path) {\n  const operator = path.node.operator;\n  const right = path.get("right").resolve();\n  const left = path.get("left").resolve();\n  let target;\n  if (left.isIdentifier({\n    name\n  })) {\n    target = right;\n  } else if (right.isIdentifier({\n    name\n  })) {\n    target = left;\n  }\n  if (target) {\n    if (operator === "===") {\n      return target.getTypeAnnotation();\n    }\n    if (BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator)) {\n      return numberTypeAnnotation();\n    }\n    return;\n  }\n  if (operator !== "===" && operator !== "==") return;\n  let typeofPath;\n  let typePath;\n  if (left.isUnaryExpression({\n    operator: "typeof"\n  })) {\n    typeofPath = left;\n    typePath = right;\n  } else if (right.isUnaryExpression({\n    operator: "typeof"\n  })) {\n    typeofPath = right;\n    typePath = left;\n  }\n  if (!typeofPath) return;\n  if (!typeofPath.get("argument").isIdentifier({\n    name\n  })) return;\n  typePath = typePath.resolve();\n  if (!typePath.isLiteral()) return;\n  const typeValue = typePath.node.value;\n  if (typeof typeValue !== "string") return;\n  return createTypeAnnotationBasedOnTypeof(typeValue);\n}\nfunction getParentConditionalPath(binding, path, name) {\n  let parentPath;\n  while (parentPath = path.parentPath) {\n    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {\n      if (path.key === "test") {\n        return;\n      }\n      return parentPath;\n    }\n    if (parentPath.isFunction()) {\n      if (parentPath.parentPath.scope.getBinding(name) !== binding) return;\n    }\n    path = parentPath;\n  }\n}\nfunction getConditionalAnnotation(binding, path, name) {\n  const ifStatement = getParentConditionalPath(binding, path, name);\n  if (!ifStatement) return;\n  const test = ifStatement.get("test");\n  const paths = [test];\n  const types = [];\n  for (let i = 0; i < paths.length; i++) {\n    const path = paths[i];\n    if (path.isLogicalExpression()) {\n      if (path.node.operator === "&&") {\n        paths.push(path.get("left"));\n        paths.push(path.get("right"));\n      }\n    } else if (path.isBinaryExpression()) {\n      const type = inferAnnotationFromBinaryExpression(name, path);\n      if (type) types.push(type);\n    }\n  }\n  if (types.length) {\n    return {\n      typeAnnotation: (0, _util.createUnionType)(types),\n      ifStatement\n    };\n  }\n  return getConditionalAnnotation(binding, ifStatement, name);\n}\n\n//# sourceMappingURL=inferer-reference.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAzNTQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixTQUFTLG1CQUFPLENBQUMsSUFBYztBQUMvQixZQUFZLG1CQUFPLENBQUMsSUFBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RyYXZlcnNlL2xpYi9wYXRoL2luZmVyZW5jZS9pbmZlcmVyLXJlZmVyZW5jZS5qcz8xZDU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG52YXIgX3QgPSByZXF1aXJlKFwiQGJhYmVsL3R5cGVzXCIpO1xudmFyIF91dGlsID0gcmVxdWlyZShcIi4vdXRpbC5qc1wiKTtcbmNvbnN0IHtcbiAgQk9PTEVBTl9OVU1CRVJfQklOQVJZX09QRVJBVE9SUyxcbiAgY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mLFxuICBudW1iZXJUeXBlQW5ub3RhdGlvbixcbiAgdm9pZFR5cGVBbm5vdGF0aW9uXG59ID0gX3Q7XG5mdW5jdGlvbiBfZGVmYXVsdChub2RlKSB7XG4gIGlmICghdGhpcy5pc1JlZmVyZW5jZWQoKSkgcmV0dXJuO1xuICBjb25zdCBiaW5kaW5nID0gdGhpcy5zY29wZS5nZXRCaW5kaW5nKG5vZGUubmFtZSk7XG4gIGlmIChiaW5kaW5nKSB7XG4gICAgaWYgKGJpbmRpbmcuaWRlbnRpZmllci50eXBlQW5ub3RhdGlvbikge1xuICAgICAgcmV0dXJuIGJpbmRpbmcuaWRlbnRpZmllci50eXBlQW5ub3RhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldFR5cGVBbm5vdGF0aW9uQmluZGluZ0NvbnN0YW50VmlvbGF0aW9ucyhiaW5kaW5nLCB0aGlzLCBub2RlLm5hbWUpO1xuICAgIH1cbiAgfVxuICBpZiAobm9kZS5uYW1lID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHZvaWRUeXBlQW5ub3RhdGlvbigpO1xuICB9IGVsc2UgaWYgKG5vZGUubmFtZSA9PT0gXCJOYU5cIiB8fCBub2RlLm5hbWUgPT09IFwiSW5maW5pdHlcIikge1xuICAgIHJldHVybiBudW1iZXJUeXBlQW5ub3RhdGlvbigpO1xuICB9IGVsc2UgaWYgKG5vZGUubmFtZSA9PT0gXCJhcmd1bWVudHNcIikge31cbn1cbmZ1bmN0aW9uIGdldFR5cGVBbm5vdGF0aW9uQmluZGluZ0NvbnN0YW50VmlvbGF0aW9ucyhiaW5kaW5nLCBwYXRoLCBuYW1lKSB7XG4gIGNvbnN0IHR5cGVzID0gW107XG4gIGNvbnN0IGZ1bmN0aW9uQ29uc3RhbnRWaW9sYXRpb25zID0gW107XG4gIGxldCBjb25zdGFudFZpb2xhdGlvbnMgPSBnZXRDb25zdGFudFZpb2xhdGlvbnNCZWZvcmUoYmluZGluZywgcGF0aCwgZnVuY3Rpb25Db25zdGFudFZpb2xhdGlvbnMpO1xuICBjb25zdCB0ZXN0VHlwZSA9IGdldENvbmRpdGlvbmFsQW5ub3RhdGlvbihiaW5kaW5nLCBwYXRoLCBuYW1lKTtcbiAgaWYgKHRlc3RUeXBlKSB7XG4gICAgY29uc3QgdGVzdENvbnN0YW50VmlvbGF0aW9ucyA9IGdldENvbnN0YW50VmlvbGF0aW9uc0JlZm9yZShiaW5kaW5nLCB0ZXN0VHlwZS5pZlN0YXRlbWVudCk7XG4gICAgY29uc3RhbnRWaW9sYXRpb25zID0gY29uc3RhbnRWaW9sYXRpb25zLmZpbHRlcihwYXRoID0+ICF0ZXN0Q29uc3RhbnRWaW9sYXRpb25zLmluY2x1ZGVzKHBhdGgpKTtcbiAgICB0eXBlcy5wdXNoKHRlc3RUeXBlLnR5cGVBbm5vdGF0aW9uKTtcbiAgfVxuICBpZiAoY29uc3RhbnRWaW9sYXRpb25zLmxlbmd0aCkge1xuICAgIGNvbnN0YW50VmlvbGF0aW9ucy5wdXNoKC4uLmZ1bmN0aW9uQ29uc3RhbnRWaW9sYXRpb25zKTtcbiAgICBmb3IgKGNvbnN0IHZpb2xhdGlvbiBvZiBjb25zdGFudFZpb2xhdGlvbnMpIHtcbiAgICAgIHR5cGVzLnB1c2godmlvbGF0aW9uLmdldFR5cGVBbm5vdGF0aW9uKCkpO1xuICAgIH1cbiAgfVxuICBpZiAoIXR5cGVzLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gKDAsIF91dGlsLmNyZWF0ZVVuaW9uVHlwZSkodHlwZXMpO1xufVxuZnVuY3Rpb24gZ2V0Q29uc3RhbnRWaW9sYXRpb25zQmVmb3JlKGJpbmRpbmcsIHBhdGgsIGZ1bmN0aW9ucykge1xuICBjb25zdCB2aW9sYXRpb25zID0gYmluZGluZy5jb25zdGFudFZpb2xhdGlvbnMuc2xpY2UoKTtcbiAgdmlvbGF0aW9ucy51bnNoaWZ0KGJpbmRpbmcucGF0aCk7XG4gIHJldHVybiB2aW9sYXRpb25zLmZpbHRlcih2aW9sYXRpb24gPT4ge1xuICAgIHZpb2xhdGlvbiA9IHZpb2xhdGlvbi5yZXNvbHZlKCk7XG4gICAgY29uc3Qgc3RhdHVzID0gdmlvbGF0aW9uLl9ndWVzc0V4ZWN1dGlvblN0YXR1c1JlbGF0aXZlVG8ocGF0aCk7XG4gICAgaWYgKGZ1bmN0aW9ucyAmJiBzdGF0dXMgPT09IFwidW5rbm93blwiKSBmdW5jdGlvbnMucHVzaCh2aW9sYXRpb24pO1xuICAgIHJldHVybiBzdGF0dXMgPT09IFwiYmVmb3JlXCI7XG4gIH0pO1xufVxuZnVuY3Rpb24gaW5mZXJBbm5vdGF0aW9uRnJvbUJpbmFyeUV4cHJlc3Npb24obmFtZSwgcGF0aCkge1xuICBjb25zdCBvcGVyYXRvciA9IHBhdGgubm9kZS5vcGVyYXRvcjtcbiAgY29uc3QgcmlnaHQgPSBwYXRoLmdldChcInJpZ2h0XCIpLnJlc29sdmUoKTtcbiAgY29uc3QgbGVmdCA9IHBhdGguZ2V0KFwibGVmdFwiKS5yZXNvbHZlKCk7XG4gIGxldCB0YXJnZXQ7XG4gIGlmIChsZWZ0LmlzSWRlbnRpZmllcih7XG4gICAgbmFtZVxuICB9KSkge1xuICAgIHRhcmdldCA9IHJpZ2h0O1xuICB9IGVsc2UgaWYgKHJpZ2h0LmlzSWRlbnRpZmllcih7XG4gICAgbmFtZVxuICB9KSkge1xuICAgIHRhcmdldCA9IGxlZnQ7XG4gIH1cbiAgaWYgKHRhcmdldCkge1xuICAgIGlmIChvcGVyYXRvciA9PT0gXCI9PT1cIikge1xuICAgICAgcmV0dXJuIHRhcmdldC5nZXRUeXBlQW5ub3RhdGlvbigpO1xuICAgIH1cbiAgICBpZiAoQk9PTEVBTl9OVU1CRVJfQklOQVJZX09QRVJBVE9SUy5pbmNsdWRlcyhvcGVyYXRvcikpIHtcbiAgICAgIHJldHVybiBudW1iZXJUeXBlQW5ub3RhdGlvbigpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG9wZXJhdG9yICE9PSBcIj09PVwiICYmIG9wZXJhdG9yICE9PSBcIj09XCIpIHJldHVybjtcbiAgbGV0IHR5cGVvZlBhdGg7XG4gIGxldCB0eXBlUGF0aDtcbiAgaWYgKGxlZnQuaXNVbmFyeUV4cHJlc3Npb24oe1xuICAgIG9wZXJhdG9yOiBcInR5cGVvZlwiXG4gIH0pKSB7XG4gICAgdHlwZW9mUGF0aCA9IGxlZnQ7XG4gICAgdHlwZVBhdGggPSByaWdodDtcbiAgfSBlbHNlIGlmIChyaWdodC5pc1VuYXJ5RXhwcmVzc2lvbih7XG4gICAgb3BlcmF0b3I6IFwidHlwZW9mXCJcbiAgfSkpIHtcbiAgICB0eXBlb2ZQYXRoID0gcmlnaHQ7XG4gICAgdHlwZVBhdGggPSBsZWZ0O1xuICB9XG4gIGlmICghdHlwZW9mUGF0aCkgcmV0dXJuO1xuICBpZiAoIXR5cGVvZlBhdGguZ2V0KFwiYXJndW1lbnRcIikuaXNJZGVudGlmaWVyKHtcbiAgICBuYW1lXG4gIH0pKSByZXR1cm47XG4gIHR5cGVQYXRoID0gdHlwZVBhdGgucmVzb2x2ZSgpO1xuICBpZiAoIXR5cGVQYXRoLmlzTGl0ZXJhbCgpKSByZXR1cm47XG4gIGNvbnN0IHR5cGVWYWx1ZSA9IHR5cGVQYXRoLm5vZGUudmFsdWU7XG4gIGlmICh0eXBlb2YgdHlwZVZhbHVlICE9PSBcInN0cmluZ1wiKSByZXR1cm47XG4gIHJldHVybiBjcmVhdGVUeXBlQW5ub3RhdGlvbkJhc2VkT25UeXBlb2YodHlwZVZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudENvbmRpdGlvbmFsUGF0aChiaW5kaW5nLCBwYXRoLCBuYW1lKSB7XG4gIGxldCBwYXJlbnRQYXRoO1xuICB3aGlsZSAocGFyZW50UGF0aCA9IHBhdGgucGFyZW50UGF0aCkge1xuICAgIGlmIChwYXJlbnRQYXRoLmlzSWZTdGF0ZW1lbnQoKSB8fCBwYXJlbnRQYXRoLmlzQ29uZGl0aW9uYWxFeHByZXNzaW9uKCkpIHtcbiAgICAgIGlmIChwYXRoLmtleSA9PT0gXCJ0ZXN0XCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmVudFBhdGg7XG4gICAgfVxuICAgIGlmIChwYXJlbnRQYXRoLmlzRnVuY3Rpb24oKSkge1xuICAgICAgaWYgKHBhcmVudFBhdGgucGFyZW50UGF0aC5zY29wZS5nZXRCaW5kaW5nKG5hbWUpICE9PSBiaW5kaW5nKSByZXR1cm47XG4gICAgfVxuICAgIHBhdGggPSBwYXJlbnRQYXRoO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDb25kaXRpb25hbEFubm90YXRpb24oYmluZGluZywgcGF0aCwgbmFtZSkge1xuICBjb25zdCBpZlN0YXRlbWVudCA9IGdldFBhcmVudENvbmRpdGlvbmFsUGF0aChiaW5kaW5nLCBwYXRoLCBuYW1lKTtcbiAgaWYgKCFpZlN0YXRlbWVudCkgcmV0dXJuO1xuICBjb25zdCB0ZXN0ID0gaWZTdGF0ZW1lbnQuZ2V0KFwidGVzdFwiKTtcbiAgY29uc3QgcGF0aHMgPSBbdGVzdF07XG4gIGNvbnN0IHR5cGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwYXRoID0gcGF0aHNbaV07XG4gICAgaWYgKHBhdGguaXNMb2dpY2FsRXhwcmVzc2lvbigpKSB7XG4gICAgICBpZiAocGF0aC5ub2RlLm9wZXJhdG9yID09PSBcIiYmXCIpIHtcbiAgICAgICAgcGF0aHMucHVzaChwYXRoLmdldChcImxlZnRcIikpO1xuICAgICAgICBwYXRocy5wdXNoKHBhdGguZ2V0KFwicmlnaHRcIikpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGF0aC5pc0JpbmFyeUV4cHJlc3Npb24oKSkge1xuICAgICAgY29uc3QgdHlwZSA9IGluZmVyQW5ub3RhdGlvbkZyb21CaW5hcnlFeHByZXNzaW9uKG5hbWUsIHBhdGgpO1xuICAgICAgaWYgKHR5cGUpIHR5cGVzLnB1c2godHlwZSk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbC5jcmVhdGVVbmlvblR5cGUpKHR5cGVzKSxcbiAgICAgIGlmU3RhdGVtZW50XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZ2V0Q29uZGl0aW9uYWxBbm5vdGF0aW9uKGJpbmRpbmcsIGlmU3RhdGVtZW50LCBuYW1lKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5mZXJlci1yZWZlcmVuY2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70354\n')},39937:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.ArrayExpression = ArrayExpression;\nexports.AssignmentExpression = AssignmentExpression;\nexports.BinaryExpression = BinaryExpression;\nexports.BooleanLiteral = BooleanLiteral;\nexports.CallExpression = CallExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;\nObject.defineProperty(exports, "Identifier", ({\n  enumerable: true,\n  get: function () {\n    return _infererReference.default;\n  }\n}));\nexports.LogicalExpression = LogicalExpression;\nexports.NewExpression = NewExpression;\nexports.NullLiteral = NullLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.ObjectExpression = ObjectExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.RegExpLiteral = RegExpLiteral;\nexports.RestElement = RestElement;\nexports.SequenceExpression = SequenceExpression;\nexports.StringLiteral = StringLiteral;\nexports.TSAsExpression = TSAsExpression;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nexports.TemplateLiteral = TemplateLiteral;\nexports.TypeCastExpression = TypeCastExpression;\nexports.UnaryExpression = UnaryExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.VariableDeclarator = VariableDeclarator;\nvar _t = __webpack_require__(2352);\nvar _infererReference = __webpack_require__(70354);\nvar _util = __webpack_require__(3141);\nconst {\n  BOOLEAN_BINARY_OPERATORS,\n  BOOLEAN_UNARY_OPERATORS,\n  NUMBER_BINARY_OPERATORS,\n  NUMBER_UNARY_OPERATORS,\n  STRING_UNARY_OPERATORS,\n  anyTypeAnnotation,\n  arrayTypeAnnotation,\n  booleanTypeAnnotation,\n  buildMatchMemberExpression,\n  genericTypeAnnotation,\n  identifier,\n  nullLiteralTypeAnnotation,\n  numberTypeAnnotation,\n  stringTypeAnnotation,\n  tupleTypeAnnotation,\n  unionTypeAnnotation,\n  voidTypeAnnotation,\n  isIdentifier\n} = _t;\nfunction VariableDeclarator() {\n  if (!this.get("id").isIdentifier()) return;\n  return this.get("init").getTypeAnnotation();\n}\nfunction TypeCastExpression(node) {\n  return node.typeAnnotation;\n}\nTypeCastExpression.validParent = true;\nfunction TSAsExpression(node) {\n  return node.typeAnnotation;\n}\nTSAsExpression.validParent = true;\nfunction TSNonNullExpression() {\n  return this.get("expression").getTypeAnnotation();\n}\nfunction NewExpression(node) {\n  if (node.callee.type === "Identifier") {\n    return genericTypeAnnotation(node.callee);\n  }\n}\nfunction TemplateLiteral() {\n  return stringTypeAnnotation();\n}\nfunction UnaryExpression(node) {\n  const operator = node.operator;\n  if (operator === "void") {\n    return voidTypeAnnotation();\n  } else if (NUMBER_UNARY_OPERATORS.includes(operator)) {\n    return numberTypeAnnotation();\n  } else if (STRING_UNARY_OPERATORS.includes(operator)) {\n    return stringTypeAnnotation();\n  } else if (BOOLEAN_UNARY_OPERATORS.includes(operator)) {\n    return booleanTypeAnnotation();\n  }\n}\nfunction BinaryExpression(node) {\n  const operator = node.operator;\n  if (NUMBER_BINARY_OPERATORS.includes(operator)) {\n    return numberTypeAnnotation();\n  } else if (BOOLEAN_BINARY_OPERATORS.includes(operator)) {\n    return booleanTypeAnnotation();\n  } else if (operator === "+") {\n    const right = this.get("right");\n    const left = this.get("left");\n    if (left.isBaseType("number") && right.isBaseType("number")) {\n      return numberTypeAnnotation();\n    } else if (left.isBaseType("string") || right.isBaseType("string")) {\n      return stringTypeAnnotation();\n    }\n    return unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);\n  }\n}\nfunction LogicalExpression() {\n  const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];\n  return (0, _util.createUnionType)(argumentTypes);\n}\nfunction ConditionalExpression() {\n  const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];\n  return (0, _util.createUnionType)(argumentTypes);\n}\nfunction SequenceExpression() {\n  return this.get("expressions").pop().getTypeAnnotation();\n}\nfunction ParenthesizedExpression() {\n  return this.get("expression").getTypeAnnotation();\n}\nfunction AssignmentExpression() {\n  return this.get("right").getTypeAnnotation();\n}\nfunction UpdateExpression(node) {\n  const operator = node.operator;\n  if (operator === "++" || operator === "--") {\n    return numberTypeAnnotation();\n  }\n}\nfunction StringLiteral() {\n  return stringTypeAnnotation();\n}\nfunction NumericLiteral() {\n  return numberTypeAnnotation();\n}\nfunction BooleanLiteral() {\n  return booleanTypeAnnotation();\n}\nfunction NullLiteral() {\n  return nullLiteralTypeAnnotation();\n}\nfunction RegExpLiteral() {\n  return genericTypeAnnotation(identifier("RegExp"));\n}\nfunction ObjectExpression() {\n  return genericTypeAnnotation(identifier("Object"));\n}\nfunction ArrayExpression() {\n  return genericTypeAnnotation(identifier("Array"));\n}\nfunction RestElement() {\n  return ArrayExpression();\n}\nRestElement.validParent = true;\nfunction Func() {\n  return genericTypeAnnotation(identifier("Function"));\n}\nconst isArrayFrom = buildMatchMemberExpression("Array.from");\nconst isObjectKeys = buildMatchMemberExpression("Object.keys");\nconst isObjectValues = buildMatchMemberExpression("Object.values");\nconst isObjectEntries = buildMatchMemberExpression("Object.entries");\nfunction CallExpression() {\n  const {\n    callee\n  } = this.node;\n  if (isObjectKeys(callee)) {\n    return arrayTypeAnnotation(stringTypeAnnotation());\n  } else if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, {\n    name: "Array"\n  })) {\n    return arrayTypeAnnotation(anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));\n  }\n  return resolveCall(this.get("callee"));\n}\nfunction TaggedTemplateExpression() {\n  return resolveCall(this.get("tag"));\n}\nfunction resolveCall(callee) {\n  callee = callee.resolve();\n  if (callee.isFunction()) {\n    const {\n      node\n    } = callee;\n    if (node.async) {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier("AsyncIterator"));\n      } else {\n        return genericTypeAnnotation(identifier("Promise"));\n      }\n    } else {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier("Iterator"));\n      } else if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {}\n    }\n  }\n}\n\n//# sourceMappingURL=inferers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39937\n')},3141:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.createUnionType = createUnionType;\nvar _t = __webpack_require__(2352);\nconst {\n  createFlowUnionType,\n  createTSUnionType,\n  createUnionTypeAnnotation,\n  isFlowType,\n  isTSType\n} = _t;\nfunction createUnionType(types) {\n  {\n    if (types.every(v => isFlowType(v))) {\n      if (createFlowUnionType) {\n        return createFlowUnionType(types);\n      }\n      return createUnionTypeAnnotation(types);\n    } else if (types.every(v => isTSType(v))) {\n      if (createTSUnionType) {\n        return createTSUnionType(types);\n      }\n    }\n  }\n}\n\n//# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0MS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRix1QkFBdUI7QUFDdkIsU0FBUyxtQkFBTyxDQUFDLElBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RyYXZlcnNlL2xpYi9wYXRoL2luZmVyZW5jZS91dGlsLmpzP2RiNzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZVVuaW9uVHlwZSA9IGNyZWF0ZVVuaW9uVHlwZTtcbnZhciBfdCA9IHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIik7XG5jb25zdCB7XG4gIGNyZWF0ZUZsb3dVbmlvblR5cGUsXG4gIGNyZWF0ZVRTVW5pb25UeXBlLFxuICBjcmVhdGVVbmlvblR5cGVBbm5vdGF0aW9uLFxuICBpc0Zsb3dUeXBlLFxuICBpc1RTVHlwZVxufSA9IF90O1xuZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlKHR5cGVzKSB7XG4gIHtcbiAgICBpZiAodHlwZXMuZXZlcnkodiA9PiBpc0Zsb3dUeXBlKHYpKSkge1xuICAgICAgaWYgKGNyZWF0ZUZsb3dVbmlvblR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZsb3dVbmlvblR5cGUodHlwZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVVuaW9uVHlwZUFubm90YXRpb24odHlwZXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZXMuZXZlcnkodiA9PiBpc1RTVHlwZSh2KSkpIHtcbiAgICAgIGlmIChjcmVhdGVUU1VuaW9uVHlwZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlVFNVbmlvblR5cGUodHlwZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3141\n')},40854:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;\nexports._resolve = _resolve;\nexports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;\nexports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;\nexports.getSource = getSource;\nexports.isCompletionRecord = isCompletionRecord;\nexports.isConstantExpression = isConstantExpression;\nexports.isInStrictMode = isInStrictMode;\nexports.isNodeType = isNodeType;\nexports.isStatementOrBlock = isStatementOrBlock;\nexports.isStatic = isStatic;\nexports.matchesPattern = matchesPattern;\nexports.referencesImport = referencesImport;\nexports.resolve = resolve;\nexports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;\nvar _t = __webpack_require__(2352);\nconst {\n  STATEMENT_OR_BLOCK_KEYS,\n  VISITOR_KEYS,\n  isBlockStatement,\n  isExpression,\n  isIdentifier,\n  isLiteral,\n  isStringLiteral,\n  isType,\n  matchesPattern: _matchesPattern\n} = _t;\nfunction matchesPattern(pattern, allowPartial) {\n  return _matchesPattern(this.node, pattern, allowPartial);\n}\n{\n  exports.has = function has(key) {\n    var _this$node;\n    const val = (_this$node = this.node) == null ? void 0 : _this$node[key];\n    if (val && Array.isArray(val)) {\n      return !!val.length;\n    } else {\n      return !!val;\n    }\n  };\n}\nfunction isStatic() {\n  return this.scope.isStatic(this.node);\n}\n{\n  exports.is = exports.has;\n  exports.isnt = function isnt(key) {\n    return !this.has(key);\n  };\n  exports.equals = function equals(key, value) {\n    return this.node[key] === value;\n  };\n}\nfunction isNodeType(type) {\n  return isType(this.type, type);\n}\nfunction canHaveVariableDeclarationOrExpression() {\n  return (this.key === "init" || this.key === "left") && this.parentPath.isFor();\n}\nfunction canSwapBetweenExpressionAndStatement(replacement) {\n  if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n  if (this.isExpression()) {\n    return isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return isExpression(replacement);\n  }\n  return false;\n}\nfunction isCompletionRecord(allowInsideFunction) {\n  let path = this;\n  let first = true;\n  do {\n    const {\n      type,\n      container\n    } = path;\n    if (!first && (path.isFunction() || type === "StaticBlock")) {\n      return !!allowInsideFunction;\n    }\n    first = false;\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while ((path = path.parentPath) && !path.isProgram() && !path.isDoExpression());\n  return true;\n}\nfunction isStatementOrBlock() {\n  if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {\n    return false;\n  } else {\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key);\n  }\n}\nfunction referencesImport(moduleSource, importName) {\n  if (!this.isReferencedIdentifier()) {\n    if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {\n      value: importName\n    }) : this.node.property.name === importName)) {\n      const object = this.get("object");\n      return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");\n    }\n    return false;\n  }\n  const binding = this.scope.getBinding(this.node.name);\n  if (!binding || binding.kind !== "module") return false;\n  const path = binding.path;\n  const parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n  if (path.isImportDefaultSpecifier() && importName === "default") {\n    return true;\n  }\n  if (path.isImportNamespaceSpecifier() && importName === "*") {\n    return true;\n  }\n  if (path.isImportSpecifier() && isIdentifier(path.node.imported, {\n    name: importName\n  })) {\n    return true;\n  }\n  return false;\n}\nfunction getSource() {\n  const node = this.node;\n  if (node.end) {\n    const code = this.hub.getCode();\n    if (code) return code.slice(node.start, node.end);\n  }\n  return "";\n}\nfunction willIMaybeExecuteBefore(target) {\n  return this._guessExecutionStatusRelativeTo(target) !== "after";\n}\nfunction getOuterFunction(path) {\n  return path.isProgram() ? path : (path.parentPath.scope.getFunctionParent() || path.parentPath.scope.getProgramParent()).path;\n}\nfunction isExecutionUncertain(type, key) {\n  switch (type) {\n    case "LogicalExpression":\n      return key === "right";\n    case "ConditionalExpression":\n    case "IfStatement":\n      return key === "consequent" || key === "alternate";\n    case "WhileStatement":\n    case "DoWhileStatement":\n    case "ForInStatement":\n    case "ForOfStatement":\n      return key === "body";\n    case "ForStatement":\n      return key === "body" || key === "update";\n    case "SwitchStatement":\n      return key === "cases";\n    case "TryStatement":\n      return key === "handler";\n    case "AssignmentPattern":\n      return key === "right";\n    case "OptionalMemberExpression":\n      return key === "property";\n    case "OptionalCallExpression":\n      return key === "arguments";\n    default:\n      return false;\n  }\n}\nfunction isExecutionUncertainInList(paths, maxIndex) {\n  for (let i = 0; i < maxIndex; i++) {\n    const path = paths[i];\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\n      return true;\n    }\n  }\n  return false;\n}\nconst SYMBOL_CHECKING = Symbol();\nfunction _guessExecutionStatusRelativeTo(target) {\n  return _guessExecutionStatusRelativeToCached(this, target, new Map());\n}\nfunction _guessExecutionStatusRelativeToCached(base, target, cache) {\n  const funcParent = {\n    this: getOuterFunction(base),\n    target: getOuterFunction(target)\n  };\n  if (funcParent.target.node !== funcParent.this.node) {\n    return _guessExecutionStatusRelativeToDifferentFunctionsCached(base, funcParent.target, cache);\n  }\n  const paths = {\n    target: target.getAncestry(),\n    this: base.getAncestry()\n  };\n  if (paths.target.includes(base)) return "after";\n  if (paths.this.includes(target)) return "before";\n  let commonPath;\n  const commonIndex = {\n    target: 0,\n    this: 0\n  };\n  while (!commonPath && commonIndex.this < paths.this.length) {\n    const path = paths.this[commonIndex.this];\n    commonIndex.target = paths.target.indexOf(path);\n    if (commonIndex.target >= 0) {\n      commonPath = path;\n    } else {\n      commonIndex.this++;\n    }\n  }\n  if (!commonPath) {\n    throw new Error("Internal Babel error - The two compared nodes" + " don\'t appear to belong to the same program.");\n  }\n  if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {\n    return "unknown";\n  }\n  const divergence = {\n    this: paths.this[commonIndex.this - 1],\n    target: paths.target[commonIndex.target - 1]\n  };\n  if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {\n    return divergence.target.key > divergence.this.key ? "before" : "after";\n  }\n  const keys = VISITOR_KEYS[commonPath.type];\n  const keyPosition = {\n    this: keys.indexOf(divergence.this.parentKey),\n    target: keys.indexOf(divergence.target.parentKey)\n  };\n  return keyPosition.target > keyPosition.this ? "before" : "after";\n}\nfunction _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache) {\n  if (!target.isFunctionDeclaration()) {\n    if (_guessExecutionStatusRelativeToCached(base, target, cache) === "before") {\n      return "before";\n    }\n    return "unknown";\n  } else if (target.parentPath.isExportDeclaration()) {\n    return "unknown";\n  }\n  const binding = target.scope.getBinding(target.node.id.name);\n  if (!binding.references) return "before";\n  const referencePaths = binding.referencePaths;\n  let allStatus;\n  for (const path of referencePaths) {\n    const childOfFunction = !!path.find(path => path.node === target.node);\n    if (childOfFunction) continue;\n    if (path.key !== "callee" || !path.parentPath.isCallExpression()) {\n      return "unknown";\n    }\n    const status = _guessExecutionStatusRelativeToCached(base, path, cache);\n    if (allStatus && allStatus !== status) {\n      return "unknown";\n    } else {\n      allStatus = status;\n    }\n  }\n  return allStatus;\n}\nfunction _guessExecutionStatusRelativeToDifferentFunctionsCached(base, target, cache) {\n  let nodeMap = cache.get(base.node);\n  let cached;\n  if (!nodeMap) {\n    cache.set(base.node, nodeMap = new Map());\n  } else if (cached = nodeMap.get(target.node)) {\n    if (cached === SYMBOL_CHECKING) {\n      return "unknown";\n    }\n    return cached;\n  }\n  nodeMap.set(target.node, SYMBOL_CHECKING);\n  const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache);\n  nodeMap.set(target.node, result);\n  return result;\n}\nfunction resolve(dangerous, resolved) {\n  return _resolve.call(this, dangerous, resolved) || this;\n}\nfunction _resolve(dangerous, resolved) {\n  var _resolved;\n  if ((_resolved = resolved) != null && _resolved.includes(this)) return;\n  resolved = resolved || [];\n  resolved.push(this);\n  if (this.isVariableDeclarator()) {\n    if (this.get("id").isIdentifier()) {\n      return this.get("init").resolve(dangerous, resolved);\n    } else {}\n  } else if (this.isReferencedIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n    if (!binding.constant) return;\n    if (binding.kind === "module") return;\n    if (binding.path !== this) {\n      const ret = binding.path.resolve(dangerous, resolved);\n      if (this.find(parent => parent.node === ret.node)) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    return this.get("expression").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    const targetKey = this.toComputedKey();\n    if (!isLiteral(targetKey)) return;\n    const targetName = targetKey.value;\n    const target = this.get("object").resolve(dangerous, resolved);\n    if (target.isObjectExpression()) {\n      const props = target.get("properties");\n      for (const prop of props) {\n        if (!prop.isProperty()) continue;\n        const key = prop.get("key");\n        let match = prop.isnt("computed") && key.isIdentifier({\n          name: targetName\n        });\n        match = match || key.isLiteral({\n          value: targetName\n        });\n        if (match) return prop.get("value").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      const elems = target.get("elements");\n      const elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}\nfunction isConstantExpression() {\n  if (this.isIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return false;\n    return binding.constant;\n  }\n  if (this.isLiteral()) {\n    if (this.isRegExpLiteral()) {\n      return false;\n    }\n    if (this.isTemplateLiteral()) {\n      return this.get("expressions").every(expression => expression.isConstantExpression());\n    }\n    return true;\n  }\n  if (this.isUnaryExpression()) {\n    if (this.node.operator !== "void") {\n      return false;\n    }\n    return this.get("argument").isConstantExpression();\n  }\n  if (this.isBinaryExpression()) {\n    const {\n      operator\n    } = this.node;\n    return operator !== "in" && operator !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();\n  }\n  if (this.isMemberExpression()) {\n    return !this.node.computed && this.get("object").isIdentifier({\n      name: "Symbol"\n    }) && !this.scope.hasBinding("Symbol", {\n      noGlobals: true\n    });\n  }\n  if (this.isCallExpression()) {\n    return this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", {\n      noGlobals: true\n    }) && this.get("arguments")[0].isStringLiteral();\n  }\n  return false;\n}\nfunction isInStrictMode() {\n  const start = this.isProgram() ? this : this.parentPath;\n  const strictParent = start.find(path => {\n    if (path.isProgram({\n      sourceType: "module"\n    })) return true;\n    if (path.isClass()) return true;\n    if (path.isArrowFunctionExpression() && !path.get("body").isBlockStatement()) {\n      return false;\n    }\n    let body;\n    if (path.isFunction()) {\n      body = path.node.body;\n    } else if (path.isProgram()) {\n      body = path.node;\n    } else {\n      return false;\n    }\n    for (const directive of body.directives) {\n      if (directive.value.value === "use strict") {\n        return true;\n      }\n    }\n  });\n  return !!strictParent;\n}\n\n//# sourceMappingURL=introspection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40854\n')},27145:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _t = __webpack_require__(2352);\nvar _t2 = _t;\nconst {\n  react\n} = _t;\nconst {\n  cloneNode,\n  jsxExpressionContainer,\n  variableDeclaration,\n  variableDeclarator\n} = _t2;\nconst referenceVisitor = {\n  ReferencedIdentifier(path, state) {\n    if (path.isJSXIdentifier() && react.isCompatTag(path.node.name) && !path.parentPath.isJSXMemberExpression()) {\n      return;\n    }\n    if (path.node.name === "this") {\n      let scope = path.scope;\n      do {\n        if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while (scope = scope.parent);\n      if (scope) state.breakOnScopePaths.push(scope.path);\n    }\n    const binding = path.scope.getBinding(path.node.name);\n    if (!binding) return;\n    for (const violation of binding.constantViolations) {\n      if (violation.scope !== binding.path.scope) {\n        state.mutableBinding = true;\n        path.stop();\n        return;\n      }\n    }\n    if (binding !== state.scope.getBinding(path.node.name)) return;\n    state.bindings[path.node.name] = binding;\n  }\n};\nclass PathHoister {\n  constructor(path, scope) {\n    this.breakOnScopePaths = void 0;\n    this.bindings = void 0;\n    this.mutableBinding = void 0;\n    this.scopes = void 0;\n    this.scope = void 0;\n    this.path = void 0;\n    this.attachAfter = void 0;\n    this.breakOnScopePaths = [];\n    this.bindings = {};\n    this.mutableBinding = false;\n    this.scopes = [];\n    this.scope = scope;\n    this.path = path;\n    this.attachAfter = false;\n  }\n  isCompatibleScope(scope) {\n    for (const key of Object.keys(this.bindings)) {\n      const binding = this.bindings[key];\n      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  getCompatibleScopes() {\n    let scope = this.path.scope;\n    do {\n      if (this.isCompatibleScope(scope)) {\n        this.scopes.push(scope);\n      } else {\n        break;\n      }\n      if (this.breakOnScopePaths.includes(scope.path)) {\n        break;\n      }\n    } while (scope = scope.parent);\n  }\n  getAttachmentPath() {\n    let path = this._getAttachmentPath();\n    if (!path) return;\n    let targetScope = path.scope;\n    if (targetScope.path === path) {\n      targetScope = path.scope.parent;\n    }\n    if (targetScope.path.isProgram() || targetScope.path.isFunction()) {\n      for (const name of Object.keys(this.bindings)) {\n        if (!targetScope.hasOwnBinding(name)) continue;\n        const binding = this.bindings[name];\n        if (binding.kind === "param" || binding.path.parentKey === "params") {\n          continue;\n        }\n        const bindingParentPath = this.getAttachmentParentForPath(binding.path);\n        if (bindingParentPath.key >= path.key) {\n          this.attachAfter = true;\n          path = binding.path;\n          for (const violationPath of binding.constantViolations) {\n            if (this.getAttachmentParentForPath(violationPath).key > path.key) {\n              path = violationPath;\n            }\n          }\n        }\n      }\n    }\n    return path;\n  }\n  _getAttachmentPath() {\n    const scopes = this.scopes;\n    const scope = scopes.pop();\n    if (!scope) return;\n    if (scope.path.isFunction()) {\n      if (this.hasOwnParamBindings(scope)) {\n        if (this.scope === scope) return;\n        const bodies = scope.path.get("body").get("body");\n        for (let i = 0; i < bodies.length; i++) {\n          if (bodies[i].node._blockHoist) continue;\n          return bodies[i];\n        }\n      } else {\n        return this.getNextScopeAttachmentParent();\n      }\n    } else if (scope.path.isProgram()) {\n      return this.getNextScopeAttachmentParent();\n    }\n  }\n  getNextScopeAttachmentParent() {\n    const scope = this.scopes.pop();\n    if (scope) return this.getAttachmentParentForPath(scope.path);\n  }\n  getAttachmentParentForPath(path) {\n    do {\n      if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {\n        return path;\n      }\n    } while (path = path.parentPath);\n  }\n  hasOwnParamBindings(scope) {\n    for (const name of Object.keys(this.bindings)) {\n      if (!scope.hasOwnBinding(name)) continue;\n      const binding = this.bindings[name];\n      if (binding.kind === "param" && binding.constant) return true;\n    }\n    return false;\n  }\n  run() {\n    this.path.traverse(referenceVisitor, this);\n    if (this.mutableBinding) return;\n    this.getCompatibleScopes();\n    const attachTo = this.getAttachmentPath();\n    if (!attachTo) return;\n    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;\n    let uid = attachTo.scope.generateUidIdentifier("ref");\n    const declarator = variableDeclarator(uid, this.path.node);\n    const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";\n    const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]);\n    const parent = this.path.parentPath;\n    if (parent.isJSXElement() && this.path.container === parent.node.children) {\n      uid = jsxExpressionContainer(uid);\n    }\n    this.path.replaceWith(cloneNode(uid));\n    return attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");\n  }\n}\nexports["default"] = PathHoister;\n\n//# sourceMappingURL=hoister.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27145\n')},77860:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.hooks = void 0;\nconst hooks = exports.hooks = [function (self, parent) {\n  const removeParent = self.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self.key === "declaration" && parent.isExportDeclaration() || self.key === "body" && parent.isLabeledStatement() || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === "expression" && parent.isExpressionStatement();\n  if (removeParent) {\n    parent.remove();\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {\n    parent.replaceWith(parent.node.expressions[0]);\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isBinary()) {\n    if (self.key === "left") {\n      parent.replaceWith(parent.node.right);\n    } else {\n      parent.replaceWith(parent.node.left);\n    }\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isIfStatement() && self.key === "consequent" || self.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression())) {\n    self.replaceWith({\n      type: "BlockStatement",\n      body: []\n    });\n    return true;\n  }\n}];\n\n//# sourceMappingURL=removal-hooks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc4NjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsYUFBYTtBQUNiLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RyYXZlcnNlL2xpYi9wYXRoL2xpYi9yZW1vdmFsLWhvb2tzLmpzP2E1NjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmhvb2tzID0gdm9pZCAwO1xuY29uc3QgaG9va3MgPSBleHBvcnRzLmhvb2tzID0gW2Z1bmN0aW9uIChzZWxmLCBwYXJlbnQpIHtcbiAgY29uc3QgcmVtb3ZlUGFyZW50ID0gc2VsZi5rZXkgPT09IFwidGVzdFwiICYmIChwYXJlbnQuaXNXaGlsZSgpIHx8IHBhcmVudC5pc1N3aXRjaENhc2UoKSkgfHwgc2VsZi5rZXkgPT09IFwiZGVjbGFyYXRpb25cIiAmJiBwYXJlbnQuaXNFeHBvcnREZWNsYXJhdGlvbigpIHx8IHNlbGYua2V5ID09PSBcImJvZHlcIiAmJiBwYXJlbnQuaXNMYWJlbGVkU3RhdGVtZW50KCkgfHwgc2VsZi5saXN0S2V5ID09PSBcImRlY2xhcmF0aW9uc1wiICYmIHBhcmVudC5pc1ZhcmlhYmxlRGVjbGFyYXRpb24oKSAmJiBwYXJlbnQubm9kZS5kZWNsYXJhdGlvbnMubGVuZ3RoID09PSAxIHx8IHNlbGYua2V5ID09PSBcImV4cHJlc3Npb25cIiAmJiBwYXJlbnQuaXNFeHByZXNzaW9uU3RhdGVtZW50KCk7XG4gIGlmIChyZW1vdmVQYXJlbnQpIHtcbiAgICBwYXJlbnQucmVtb3ZlKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sIGZ1bmN0aW9uIChzZWxmLCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudC5pc1NlcXVlbmNlRXhwcmVzc2lvbigpICYmIHBhcmVudC5ub2RlLmV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMSkge1xuICAgIHBhcmVudC5yZXBsYWNlV2l0aChwYXJlbnQubm9kZS5leHByZXNzaW9uc1swXSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0sIGZ1bmN0aW9uIChzZWxmLCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudC5pc0JpbmFyeSgpKSB7XG4gICAgaWYgKHNlbGYua2V5ID09PSBcImxlZnRcIikge1xuICAgICAgcGFyZW50LnJlcGxhY2VXaXRoKHBhcmVudC5ub2RlLnJpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50LnJlcGxhY2VXaXRoKHBhcmVudC5ub2RlLmxlZnQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSwgZnVuY3Rpb24gKHNlbGYsIHBhcmVudCkge1xuICBpZiAocGFyZW50LmlzSWZTdGF0ZW1lbnQoKSAmJiBzZWxmLmtleSA9PT0gXCJjb25zZXF1ZW50XCIgfHwgc2VsZi5rZXkgPT09IFwiYm9keVwiICYmIChwYXJlbnQuaXNMb29wKCkgfHwgcGFyZW50LmlzQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24oKSkpIHtcbiAgICBzZWxmLnJlcGxhY2VXaXRoKHtcbiAgICAgIHR5cGU6IFwiQmxvY2tTdGF0ZW1lbnRcIixcbiAgICAgIGJvZHk6IFtdXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1dO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmFsLWhvb2tzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///77860\n')},57973:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isBindingIdentifier = isBindingIdentifier;\nexports.isBlockScoped = isBlockScoped;\nexports.isExpression = isExpression;\nexports.isFlow = isFlow;\nexports.isForAwaitStatement = isForAwaitStatement;\nexports.isGenerated = isGenerated;\nexports.isPure = isPure;\nexports.isReferenced = isReferenced;\nexports.isReferencedIdentifier = isReferencedIdentifier;\nexports.isReferencedMemberExpression = isReferencedMemberExpression;\nexports.isRestProperty = isRestProperty;\nexports.isScope = isScope;\nexports.isSpreadProperty = isSpreadProperty;\nexports.isStatement = isStatement;\nexports.isUser = isUser;\nexports.isVar = isVar;\nvar _t = __webpack_require__(2352);\nconst {\n  isBinding,\n  isBlockScoped: nodeIsBlockScoped,\n  isExportDeclaration,\n  isExpression: nodeIsExpression,\n  isFlow: nodeIsFlow,\n  isForStatement,\n  isForXStatement,\n  isIdentifier,\n  isImportDeclaration,\n  isImportSpecifier,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isMemberExpression,\n  isRestElement: nodeIsRestElement,\n  isReferenced: nodeIsReferenced,\n  isScope: nodeIsScope,\n  isStatement: nodeIsStatement,\n  isVar: nodeIsVar,\n  isVariableDeclaration,\n  react,\n  isForOfStatement\n} = _t;\nconst {\n  isCompatTag\n} = react;\nfunction isReferencedIdentifier(opts) {\n  const {\n    node,\n    parent\n  } = this;\n  if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {\n    if (isJSXIdentifier(node, opts)) {\n      if (isCompatTag(node.name)) return false;\n    } else {\n      return false;\n    }\n  }\n  return nodeIsReferenced(node, parent, this.parentPath.parent);\n}\nfunction isReferencedMemberExpression() {\n  const {\n    node,\n    parent\n  } = this;\n  return isMemberExpression(node) && nodeIsReferenced(node, parent);\n}\nfunction isBindingIdentifier() {\n  const {\n    node,\n    parent\n  } = this;\n  const grandparent = this.parentPath.parent;\n  return isIdentifier(node) && isBinding(node, parent, grandparent);\n}\nfunction isStatement() {\n  const {\n    node,\n    parent\n  } = this;\n  if (nodeIsStatement(node)) {\n    if (isVariableDeclaration(node)) {\n      if (isForXStatement(parent, {\n        left: node\n      })) return false;\n      if (isForStatement(parent, {\n        init: node\n      })) return false;\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isExpression() {\n  if (this.isIdentifier()) {\n    return this.isReferencedIdentifier();\n  } else {\n    return nodeIsExpression(this.node);\n  }\n}\nfunction isScope() {\n  return nodeIsScope(this.node, this.parent);\n}\nfunction isReferenced() {\n  return nodeIsReferenced(this.node, this.parent);\n}\nfunction isBlockScoped() {\n  return nodeIsBlockScoped(this.node);\n}\nfunction isVar() {\n  return nodeIsVar(this.node);\n}\nfunction isUser() {\n  return this.node && !!this.node.loc;\n}\nfunction isGenerated() {\n  return !this.isUser();\n}\nfunction isPure(constantsOnly) {\n  return this.scope.isPure(this.node, constantsOnly);\n}\nfunction isFlow() {\n  const {\n    node\n  } = this;\n  if (nodeIsFlow(node)) {\n    return true;\n  } else if (isImportDeclaration(node)) {\n    return node.importKind === "type" || node.importKind === "typeof";\n  } else if (isExportDeclaration(node)) {\n    return node.exportKind === "type";\n  } else if (isImportSpecifier(node)) {\n    return node.importKind === "type" || node.importKind === "typeof";\n  } else {\n    return false;\n  }\n}\nfunction isRestProperty() {\n  var _this$parentPath;\n  return nodeIsRestElement(this.node) && ((_this$parentPath = this.parentPath) == null ? void 0 : _this$parentPath.isObjectPattern());\n}\nfunction isSpreadProperty() {\n  var _this$parentPath2;\n  return nodeIsRestElement(this.node) && ((_this$parentPath2 = this.parentPath) == null ? void 0 : _this$parentPath2.isObjectExpression());\n}\nfunction isForAwaitStatement() {\n  return isForOfStatement(this.node, {\n    await: true\n  });\n}\n{\n  exports.isExistentialTypeParam = function isExistentialTypeParam() {\n    throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");\n  };\n  exports.isNumericLiteralTypeAnnotation = function isNumericLiteralTypeAnnotation() {\n    throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");\n  };\n}\n\n//# sourceMappingURL=virtual-types-validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc5NzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMkJBQTJCO0FBQzNCLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsY0FBYztBQUNkLDJCQUEyQjtBQUMzQixtQkFBbUI7QUFDbkIsY0FBYztBQUNkLG9CQUFvQjtBQUNwQiw4QkFBOEI7QUFDOUIsb0NBQW9DO0FBQ3BDLHNCQUFzQjtBQUN0QixlQUFlO0FBQ2Ysd0JBQXdCO0FBQ3hCLG1CQUFtQjtBQUNuQixjQUFjO0FBQ2QsYUFBYTtBQUNiLFNBQVMsbUJBQU8sQ0FBQyxJQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxFQUFFLDhCQUE4QjtBQUNoQztBQUNBO0FBQ0EsRUFBRSxzQ0FBc0M7QUFDeEM7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHJhdmVyc2UvbGliL3BhdGgvbGliL3ZpcnR1YWwtdHlwZXMtdmFsaWRhdG9yLmpzPzliZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzQmluZGluZ0lkZW50aWZpZXIgPSBpc0JpbmRpbmdJZGVudGlmaWVyO1xuZXhwb3J0cy5pc0Jsb2NrU2NvcGVkID0gaXNCbG9ja1Njb3BlZDtcbmV4cG9ydHMuaXNFeHByZXNzaW9uID0gaXNFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0Zsb3cgPSBpc0Zsb3c7XG5leHBvcnRzLmlzRm9yQXdhaXRTdGF0ZW1lbnQgPSBpc0ZvckF3YWl0U3RhdGVtZW50O1xuZXhwb3J0cy5pc0dlbmVyYXRlZCA9IGlzR2VuZXJhdGVkO1xuZXhwb3J0cy5pc1B1cmUgPSBpc1B1cmU7XG5leHBvcnRzLmlzUmVmZXJlbmNlZCA9IGlzUmVmZXJlbmNlZDtcbmV4cG9ydHMuaXNSZWZlcmVuY2VkSWRlbnRpZmllciA9IGlzUmVmZXJlbmNlZElkZW50aWZpZXI7XG5leHBvcnRzLmlzUmVmZXJlbmNlZE1lbWJlckV4cHJlc3Npb24gPSBpc1JlZmVyZW5jZWRNZW1iZXJFeHByZXNzaW9uO1xuZXhwb3J0cy5pc1Jlc3RQcm9wZXJ0eSA9IGlzUmVzdFByb3BlcnR5O1xuZXhwb3J0cy5pc1Njb3BlID0gaXNTY29wZTtcbmV4cG9ydHMuaXNTcHJlYWRQcm9wZXJ0eSA9IGlzU3ByZWFkUHJvcGVydHk7XG5leHBvcnRzLmlzU3RhdGVtZW50ID0gaXNTdGF0ZW1lbnQ7XG5leHBvcnRzLmlzVXNlciA9IGlzVXNlcjtcbmV4cG9ydHMuaXNWYXIgPSBpc1ZhcjtcbnZhciBfdCA9IHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIik7XG5jb25zdCB7XG4gIGlzQmluZGluZyxcbiAgaXNCbG9ja1Njb3BlZDogbm9kZUlzQmxvY2tTY29wZWQsXG4gIGlzRXhwb3J0RGVjbGFyYXRpb24sXG4gIGlzRXhwcmVzc2lvbjogbm9kZUlzRXhwcmVzc2lvbixcbiAgaXNGbG93OiBub2RlSXNGbG93LFxuICBpc0ZvclN0YXRlbWVudCxcbiAgaXNGb3JYU3RhdGVtZW50LFxuICBpc0lkZW50aWZpZXIsXG4gIGlzSW1wb3J0RGVjbGFyYXRpb24sXG4gIGlzSW1wb3J0U3BlY2lmaWVyLFxuICBpc0pTWElkZW50aWZpZXIsXG4gIGlzSlNYTWVtYmVyRXhwcmVzc2lvbixcbiAgaXNNZW1iZXJFeHByZXNzaW9uLFxuICBpc1Jlc3RFbGVtZW50OiBub2RlSXNSZXN0RWxlbWVudCxcbiAgaXNSZWZlcmVuY2VkOiBub2RlSXNSZWZlcmVuY2VkLFxuICBpc1Njb3BlOiBub2RlSXNTY29wZSxcbiAgaXNTdGF0ZW1lbnQ6IG5vZGVJc1N0YXRlbWVudCxcbiAgaXNWYXI6IG5vZGVJc1ZhcixcbiAgaXNWYXJpYWJsZURlY2xhcmF0aW9uLFxuICByZWFjdCxcbiAgaXNGb3JPZlN0YXRlbWVudFxufSA9IF90O1xuY29uc3Qge1xuICBpc0NvbXBhdFRhZ1xufSA9IHJlYWN0O1xuZnVuY3Rpb24gaXNSZWZlcmVuY2VkSWRlbnRpZmllcihvcHRzKSB7XG4gIGNvbnN0IHtcbiAgICBub2RlLFxuICAgIHBhcmVudFxuICB9ID0gdGhpcztcbiAgaWYgKCFpc0lkZW50aWZpZXIobm9kZSwgb3B0cykgJiYgIWlzSlNYTWVtYmVyRXhwcmVzc2lvbihwYXJlbnQsIG9wdHMpKSB7XG4gICAgaWYgKGlzSlNYSWRlbnRpZmllcihub2RlLCBvcHRzKSkge1xuICAgICAgaWYgKGlzQ29tcGF0VGFnKG5vZGUubmFtZSkpIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZUlzUmVmZXJlbmNlZChub2RlLCBwYXJlbnQsIHRoaXMucGFyZW50UGF0aC5wYXJlbnQpO1xufVxuZnVuY3Rpb24gaXNSZWZlcmVuY2VkTWVtYmVyRXhwcmVzc2lvbigpIHtcbiAgY29uc3Qge1xuICAgIG5vZGUsXG4gICAgcGFyZW50XG4gIH0gPSB0aGlzO1xuICByZXR1cm4gaXNNZW1iZXJFeHByZXNzaW9uKG5vZGUpICYmIG5vZGVJc1JlZmVyZW5jZWQobm9kZSwgcGFyZW50KTtcbn1cbmZ1bmN0aW9uIGlzQmluZGluZ0lkZW50aWZpZXIoKSB7XG4gIGNvbnN0IHtcbiAgICBub2RlLFxuICAgIHBhcmVudFxuICB9ID0gdGhpcztcbiAgY29uc3QgZ3JhbmRwYXJlbnQgPSB0aGlzLnBhcmVudFBhdGgucGFyZW50O1xuICByZXR1cm4gaXNJZGVudGlmaWVyKG5vZGUpICYmIGlzQmluZGluZyhub2RlLCBwYXJlbnQsIGdyYW5kcGFyZW50KTtcbn1cbmZ1bmN0aW9uIGlzU3RhdGVtZW50KCkge1xuICBjb25zdCB7XG4gICAgbm9kZSxcbiAgICBwYXJlbnRcbiAgfSA9IHRoaXM7XG4gIGlmIChub2RlSXNTdGF0ZW1lbnQobm9kZSkpIHtcbiAgICBpZiAoaXNWYXJpYWJsZURlY2xhcmF0aW9uKG5vZGUpKSB7XG4gICAgICBpZiAoaXNGb3JYU3RhdGVtZW50KHBhcmVudCwge1xuICAgICAgICBsZWZ0OiBub2RlXG4gICAgICB9KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKGlzRm9yU3RhdGVtZW50KHBhcmVudCwge1xuICAgICAgICBpbml0OiBub2RlXG4gICAgICB9KSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzRXhwcmVzc2lvbigpIHtcbiAgaWYgKHRoaXMuaXNJZGVudGlmaWVyKCkpIHtcbiAgICByZXR1cm4gdGhpcy5pc1JlZmVyZW5jZWRJZGVudGlmaWVyKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVJc0V4cHJlc3Npb24odGhpcy5ub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTY29wZSgpIHtcbiAgcmV0dXJuIG5vZGVJc1Njb3BlKHRoaXMubm9kZSwgdGhpcy5wYXJlbnQpO1xufVxuZnVuY3Rpb24gaXNSZWZlcmVuY2VkKCkge1xuICByZXR1cm4gbm9kZUlzUmVmZXJlbmNlZCh0aGlzLm5vZGUsIHRoaXMucGFyZW50KTtcbn1cbmZ1bmN0aW9uIGlzQmxvY2tTY29wZWQoKSB7XG4gIHJldHVybiBub2RlSXNCbG9ja1Njb3BlZCh0aGlzLm5vZGUpO1xufVxuZnVuY3Rpb24gaXNWYXIoKSB7XG4gIHJldHVybiBub2RlSXNWYXIodGhpcy5ub2RlKTtcbn1cbmZ1bmN0aW9uIGlzVXNlcigpIHtcbiAgcmV0dXJuIHRoaXMubm9kZSAmJiAhIXRoaXMubm9kZS5sb2M7XG59XG5mdW5jdGlvbiBpc0dlbmVyYXRlZCgpIHtcbiAgcmV0dXJuICF0aGlzLmlzVXNlcigpO1xufVxuZnVuY3Rpb24gaXNQdXJlKGNvbnN0YW50c09ubHkpIHtcbiAgcmV0dXJuIHRoaXMuc2NvcGUuaXNQdXJlKHRoaXMubm9kZSwgY29uc3RhbnRzT25seSk7XG59XG5mdW5jdGlvbiBpc0Zsb3coKSB7XG4gIGNvbnN0IHtcbiAgICBub2RlXG4gIH0gPSB0aGlzO1xuICBpZiAobm9kZUlzRmxvdyhub2RlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzSW1wb3J0RGVjbGFyYXRpb24obm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZS5pbXBvcnRLaW5kID09PSBcInR5cGVcIiB8fCBub2RlLmltcG9ydEtpbmQgPT09IFwidHlwZW9mXCI7XG4gIH0gZWxzZSBpZiAoaXNFeHBvcnREZWNsYXJhdGlvbihub2RlKSkge1xuICAgIHJldHVybiBub2RlLmV4cG9ydEtpbmQgPT09IFwidHlwZVwiO1xuICB9IGVsc2UgaWYgKGlzSW1wb3J0U3BlY2lmaWVyKG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGUuaW1wb3J0S2luZCA9PT0gXCJ0eXBlXCIgfHwgbm9kZS5pbXBvcnRLaW5kID09PSBcInR5cGVvZlwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gaXNSZXN0UHJvcGVydHkoKSB7XG4gIHZhciBfdGhpcyRwYXJlbnRQYXRoO1xuICByZXR1cm4gbm9kZUlzUmVzdEVsZW1lbnQodGhpcy5ub2RlKSAmJiAoKF90aGlzJHBhcmVudFBhdGggPSB0aGlzLnBhcmVudFBhdGgpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRwYXJlbnRQYXRoLmlzT2JqZWN0UGF0dGVybigpKTtcbn1cbmZ1bmN0aW9uIGlzU3ByZWFkUHJvcGVydHkoKSB7XG4gIHZhciBfdGhpcyRwYXJlbnRQYXRoMjtcbiAgcmV0dXJuIG5vZGVJc1Jlc3RFbGVtZW50KHRoaXMubm9kZSkgJiYgKChfdGhpcyRwYXJlbnRQYXRoMiA9IHRoaXMucGFyZW50UGF0aCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHBhcmVudFBhdGgyLmlzT2JqZWN0RXhwcmVzc2lvbigpKTtcbn1cbmZ1bmN0aW9uIGlzRm9yQXdhaXRTdGF0ZW1lbnQoKSB7XG4gIHJldHVybiBpc0Zvck9mU3RhdGVtZW50KHRoaXMubm9kZSwge1xuICAgIGF3YWl0OiB0cnVlXG4gIH0pO1xufVxue1xuICBleHBvcnRzLmlzRXhpc3RlbnRpYWxUeXBlUGFyYW0gPSBmdW5jdGlvbiBpc0V4aXN0ZW50aWFsVHlwZVBhcmFtKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImBwYXRoLmlzRXhpc3RlbnRpYWxUeXBlUGFyYW1gIGhhcyBiZWVuIHJlbmFtZWQgdG8gYHBhdGguaXNFeGlzdHNUeXBlQW5ub3RhdGlvbigpYCBpbiBCYWJlbCA3LlwiKTtcbiAgfTtcbiAgZXhwb3J0cy5pc051bWVyaWNMaXRlcmFsVHlwZUFubm90YXRpb24gPSBmdW5jdGlvbiBpc051bWVyaWNMaXRlcmFsVHlwZUFubm90YXRpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYHBhdGguaXNOdW1lcmljTGl0ZXJhbFR5cGVBbm5vdGF0aW9uKClgIGhhcyBiZWVuIHJlbmFtZWQgdG8gYHBhdGguaXNOdW1iZXJMaXRlcmFsVHlwZUFubm90YXRpb24oKWAgaW4gQmFiZWwgNy5cIik7XG4gIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpcnR1YWwtdHlwZXMtdmFsaWRhdG9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///57973\n')},75562:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Var = exports.User = exports.Statement = exports.SpreadProperty = exports.Scope = exports.RestProperty = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = exports.Referenced = exports.Pure = exports.NumericLiteralTypeAnnotation = exports.Generated = exports.ForAwaitStatement = exports.Flow = exports.Expression = exports.ExistentialTypeParam = exports.BlockScoped = exports.BindingIdentifier = void 0;\nconst ReferencedIdentifier = exports.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];\nconst ReferencedMemberExpression = exports.ReferencedMemberExpression = ["MemberExpression"];\nconst BindingIdentifier = exports.BindingIdentifier = ["Identifier"];\nconst Statement = exports.Statement = ["Statement"];\nconst Expression = exports.Expression = ["Expression"];\nconst Scope = exports.Scope = ["Scopable", "Pattern"];\nconst Referenced = exports.Referenced = null;\nconst BlockScoped = exports.BlockScoped = null;\nconst Var = exports.Var = ["VariableDeclaration"];\nconst User = exports.User = null;\nconst Generated = exports.Generated = null;\nconst Pure = exports.Pure = null;\nconst Flow = exports.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];\nconst RestProperty = exports.RestProperty = ["RestElement"];\nconst SpreadProperty = exports.SpreadProperty = ["RestElement"];\nconst ExistentialTypeParam = exports.ExistentialTypeParam = ["ExistsTypeAnnotation"];\nconst NumericLiteralTypeAnnotation = exports.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];\nconst ForAwaitStatement = exports.ForAwaitStatement = ["ForOfStatement"];\n\n//# sourceMappingURL=virtual-types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU1NjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsV0FBVyxHQUFHLFlBQVksR0FBRyxpQkFBaUIsR0FBRyxzQkFBc0IsR0FBRyxhQUFhLEdBQUcsb0JBQW9CLEdBQUcsa0NBQWtDLEdBQUcsNEJBQTRCLEdBQUcsa0JBQWtCLEdBQUcsWUFBWSxHQUFHLG9DQUFvQyxHQUFHLGlCQUFpQixHQUFHLHlCQUF5QixHQUFHLFlBQVksR0FBRyxrQkFBa0IsR0FBRyw0QkFBNEIsR0FBRyxtQkFBbUIsR0FBRyx5QkFBeUI7QUFDbGEsNkJBQTZCLDRCQUE0QjtBQUN6RCxtQ0FBbUMsa0NBQWtDO0FBQ3JFLDBCQUEwQix5QkFBeUI7QUFDbkQsa0JBQWtCLGlCQUFpQjtBQUNuQyxtQkFBbUIsa0JBQWtCO0FBQ3JDLGNBQWMsYUFBYTtBQUMzQixtQkFBbUIsa0JBQWtCO0FBQ3JDLG9CQUFvQixtQkFBbUI7QUFDdkMsWUFBWSxXQUFXO0FBQ3ZCLGFBQWEsWUFBWTtBQUN6QixrQkFBa0IsaUJBQWlCO0FBQ25DLGFBQWEsWUFBWTtBQUN6QixhQUFhLFlBQVk7QUFDekIscUJBQXFCLG9CQUFvQjtBQUN6Qyx1QkFBdUIsc0JBQXNCO0FBQzdDLDZCQUE2Qiw0QkFBNEI7QUFDekQscUNBQXFDLG9DQUFvQztBQUN6RSwwQkFBMEIseUJBQXlCOztBQUVuRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RyYXZlcnNlL2xpYi9wYXRoL2xpYi92aXJ0dWFsLXR5cGVzLmpzPzA2ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlZhciA9IGV4cG9ydHMuVXNlciA9IGV4cG9ydHMuU3RhdGVtZW50ID0gZXhwb3J0cy5TcHJlYWRQcm9wZXJ0eSA9IGV4cG9ydHMuU2NvcGUgPSBleHBvcnRzLlJlc3RQcm9wZXJ0eSA9IGV4cG9ydHMuUmVmZXJlbmNlZE1lbWJlckV4cHJlc3Npb24gPSBleHBvcnRzLlJlZmVyZW5jZWRJZGVudGlmaWVyID0gZXhwb3J0cy5SZWZlcmVuY2VkID0gZXhwb3J0cy5QdXJlID0gZXhwb3J0cy5OdW1lcmljTGl0ZXJhbFR5cGVBbm5vdGF0aW9uID0gZXhwb3J0cy5HZW5lcmF0ZWQgPSBleHBvcnRzLkZvckF3YWl0U3RhdGVtZW50ID0gZXhwb3J0cy5GbG93ID0gZXhwb3J0cy5FeHByZXNzaW9uID0gZXhwb3J0cy5FeGlzdGVudGlhbFR5cGVQYXJhbSA9IGV4cG9ydHMuQmxvY2tTY29wZWQgPSBleHBvcnRzLkJpbmRpbmdJZGVudGlmaWVyID0gdm9pZCAwO1xuY29uc3QgUmVmZXJlbmNlZElkZW50aWZpZXIgPSBleHBvcnRzLlJlZmVyZW5jZWRJZGVudGlmaWVyID0gW1wiSWRlbnRpZmllclwiLCBcIkpTWElkZW50aWZpZXJcIl07XG5jb25zdCBSZWZlcmVuY2VkTWVtYmVyRXhwcmVzc2lvbiA9IGV4cG9ydHMuUmVmZXJlbmNlZE1lbWJlckV4cHJlc3Npb24gPSBbXCJNZW1iZXJFeHByZXNzaW9uXCJdO1xuY29uc3QgQmluZGluZ0lkZW50aWZpZXIgPSBleHBvcnRzLkJpbmRpbmdJZGVudGlmaWVyID0gW1wiSWRlbnRpZmllclwiXTtcbmNvbnN0IFN0YXRlbWVudCA9IGV4cG9ydHMuU3RhdGVtZW50ID0gW1wiU3RhdGVtZW50XCJdO1xuY29uc3QgRXhwcmVzc2lvbiA9IGV4cG9ydHMuRXhwcmVzc2lvbiA9IFtcIkV4cHJlc3Npb25cIl07XG5jb25zdCBTY29wZSA9IGV4cG9ydHMuU2NvcGUgPSBbXCJTY29wYWJsZVwiLCBcIlBhdHRlcm5cIl07XG5jb25zdCBSZWZlcmVuY2VkID0gZXhwb3J0cy5SZWZlcmVuY2VkID0gbnVsbDtcbmNvbnN0IEJsb2NrU2NvcGVkID0gZXhwb3J0cy5CbG9ja1Njb3BlZCA9IG51bGw7XG5jb25zdCBWYXIgPSBleHBvcnRzLlZhciA9IFtcIlZhcmlhYmxlRGVjbGFyYXRpb25cIl07XG5jb25zdCBVc2VyID0gZXhwb3J0cy5Vc2VyID0gbnVsbDtcbmNvbnN0IEdlbmVyYXRlZCA9IGV4cG9ydHMuR2VuZXJhdGVkID0gbnVsbDtcbmNvbnN0IFB1cmUgPSBleHBvcnRzLlB1cmUgPSBudWxsO1xuY29uc3QgRmxvdyA9IGV4cG9ydHMuRmxvdyA9IFtcIkZsb3dcIiwgXCJJbXBvcnREZWNsYXJhdGlvblwiLCBcIkV4cG9ydERlY2xhcmF0aW9uXCIsIFwiSW1wb3J0U3BlY2lmaWVyXCJdO1xuY29uc3QgUmVzdFByb3BlcnR5ID0gZXhwb3J0cy5SZXN0UHJvcGVydHkgPSBbXCJSZXN0RWxlbWVudFwiXTtcbmNvbnN0IFNwcmVhZFByb3BlcnR5ID0gZXhwb3J0cy5TcHJlYWRQcm9wZXJ0eSA9IFtcIlJlc3RFbGVtZW50XCJdO1xuY29uc3QgRXhpc3RlbnRpYWxUeXBlUGFyYW0gPSBleHBvcnRzLkV4aXN0ZW50aWFsVHlwZVBhcmFtID0gW1wiRXhpc3RzVHlwZUFubm90YXRpb25cIl07XG5jb25zdCBOdW1lcmljTGl0ZXJhbFR5cGVBbm5vdGF0aW9uID0gZXhwb3J0cy5OdW1lcmljTGl0ZXJhbFR5cGVBbm5vdGF0aW9uID0gW1wiTnVtYmVyTGl0ZXJhbFR5cGVBbm5vdGF0aW9uXCJdO1xuY29uc3QgRm9yQXdhaXRTdGF0ZW1lbnQgPSBleHBvcnRzLkZvckF3YWl0U3RhdGVtZW50ID0gW1wiRm9yT2ZTdGF0ZW1lbnRcIl07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpcnR1YWwtdHlwZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///75562\n')},58345:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports._containerInsert = _containerInsert;\nexports._containerInsertAfter = _containerInsertAfter;\nexports._containerInsertBefore = _containerInsertBefore;\nexports._verifyNodeList = _verifyNodeList;\nexports.insertAfter = insertAfter;\nexports.insertBefore = insertBefore;\nexports.pushContainer = pushContainer;\nexports.unshiftContainer = unshiftContainer;\nexports.updateSiblingKeys = updateSiblingKeys;\nvar _cache = __webpack_require__(37411);\nvar _hoister = __webpack_require__(27145);\nvar _index = __webpack_require__(29709);\nvar _context = __webpack_require__(79578);\nvar _removal = __webpack_require__(53097);\nvar _t = __webpack_require__(2352);\nconst {\n  arrowFunctionExpression,\n  assertExpression,\n  assignmentExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  isAssignmentExpression,\n  isCallExpression,\n  isExportNamedDeclaration,\n  isExpression,\n  isIdentifier,\n  isSequenceExpression,\n  isSuper,\n  thisExpression\n} = _t;\nfunction insertBefore(nodes_) {\n  _removal._assertUnremoved.call(this);\n  const nodes = _verifyNodeList.call(this, nodes_);\n  const {\n    parentPath,\n    parent\n  } = this;\n  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n    return parentPath.insertBefore(nodes);\n  } else if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init") {\n    if (this.node) nodes.push(this.node);\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return _containerInsertBefore.call(this, nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node;\n    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    return this.unshiftContainer("body", nodes);\n  } else {\n    throw new Error("We don\'t know what to do with this node type. " + "We were previously a Statement but we can\'t fit in here?");\n  }\n}\nfunction _containerInsert(from, nodes) {\n  updateSiblingKeys.call(this, from, nodes.length);\n  const paths = [];\n  this.container.splice(from, 0, ...nodes);\n  for (let i = 0; i < nodes.length; i++) {\n    var _this$context;\n    const to = from + i;\n    const path = this.getSibling(to);\n    paths.push(path);\n    if ((_this$context = this.context) != null && _this$context.queue) {\n      _context.pushContext.call(path, this.context);\n    }\n  }\n  const contexts = _context._getQueueContexts.call(this);\n  for (const path of paths) {\n    _context.setScope.call(path);\n    path.debug("Inserted.");\n    for (const context of contexts) {\n      context.maybeQueue(path, true);\n    }\n  }\n  return paths;\n}\nfunction _containerInsertBefore(nodes) {\n  return _containerInsert.call(this, this.key, nodes);\n}\nfunction _containerInsertAfter(nodes) {\n  return _containerInsert.call(this, this.key + 1, nodes);\n}\nconst last = arr => arr[arr.length - 1];\nfunction isHiddenInSequenceExpression(path) {\n  return isSequenceExpression(path.parent) && (last(path.parent.expressions) !== path.node || isHiddenInSequenceExpression(path.parentPath));\n}\nfunction isAlmostConstantAssignment(node, scope) {\n  if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {\n    return false;\n  }\n  const blockScope = scope.getBlockParent();\n  return blockScope.hasOwnBinding(node.left.name) && blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1;\n}\nfunction insertAfter(nodes_) {\n  _removal._assertUnremoved.call(this);\n  if (this.isSequenceExpression()) {\n    return last(this.get("expressions")).insertAfter(nodes_);\n  }\n  const nodes = _verifyNodeList.call(this, nodes_);\n  const {\n    parentPath,\n    parent\n  } = this;\n  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n    return parentPath.insertAfter(nodes.map(node => {\n      return isExpression(node) ? expressionStatement(node) : node;\n    }));\n  } else if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {\n    const self = this;\n    if (self.node) {\n      const node = self.node;\n      let {\n        scope\n      } = this;\n      if (scope.path.isPattern()) {\n        assertExpression(node);\n        self.replaceWith(callExpression(arrowFunctionExpression([], node), []));\n        self.get("callee.body").insertAfter(nodes);\n        return [self];\n      }\n      if (isHiddenInSequenceExpression(self)) {\n        nodes.unshift(node);\n      } else if (isCallExpression(node) && isSuper(node.callee)) {\n        nodes.unshift(node);\n        nodes.push(thisExpression());\n      } else if (isAlmostConstantAssignment(node, scope)) {\n        nodes.unshift(node);\n        nodes.push(cloneNode(node.left));\n      } else if (scope.isPure(node, true)) {\n        nodes.push(node);\n      } else {\n        if (parentPath.isMethod({\n          computed: true,\n          key: node\n        })) {\n          scope = scope.parent;\n        }\n        const temp = scope.generateDeclaredUidIdentifier();\n        nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node)));\n        nodes.push(expressionStatement(cloneNode(temp)));\n      }\n    }\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return _containerInsertAfter.call(this, nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node;\n    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    return this.pushContainer("body", nodes);\n  } else {\n    throw new Error("We don\'t know what to do with this node type. " + "We were previously a Statement but we can\'t fit in here?");\n  }\n}\nfunction updateSiblingKeys(fromIndex, incrementBy) {\n  if (!this.parent) return;\n  const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];\n  for (const [, path] of paths) {\n    if (typeof path.key === "number" && path.container === this.container && path.key >= fromIndex) {\n      path.key += incrementBy;\n    }\n  }\n}\nfunction _verifyNodeList(nodes) {\n  if (!nodes) {\n    return [];\n  }\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let msg;\n    if (!node) {\n      msg = "has falsy node";\n    } else if (typeof node !== "object") {\n      msg = "contains a non-object node";\n    } else if (!node.type) {\n      msg = "without a type";\n    } else if (node instanceof _index.default) {\n      msg = "has a NodePath when it expected a raw object";\n    }\n    if (msg) {\n      const type = Array.isArray(node) ? "array" : typeof node;\n      throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);\n    }\n  }\n  return nodes;\n}\nfunction unshiftContainer(listKey, nodes) {\n  _removal._assertUnremoved.call(this);\n  nodes = _verifyNodeList.call(this, nodes);\n  const path = _index.default.get({\n    parentPath: this,\n    parent: this.node,\n    container: this.node[listKey],\n    listKey,\n    key: 0\n  }).setContext(this.context);\n  return _containerInsertBefore.call(path, nodes);\n}\nfunction pushContainer(listKey, nodes) {\n  _removal._assertUnremoved.call(this);\n  const verifiedNodes = _verifyNodeList.call(this, nodes);\n  const container = this.node[listKey];\n  const path = _index.default.get({\n    parentPath: this,\n    parent: this.node,\n    container: container,\n    listKey,\n    key: container.length\n  }).setContext(this.context);\n  return path.replaceWithMultiple(verifiedNodes);\n}\n{\n  exports.hoist = function hoist(scope = this.scope) {\n    const hoister = new _hoister.default(this, scope);\n    return hoister.run();\n  };\n}\n\n//# sourceMappingURL=modification.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///58345\n')},53097:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports._assertUnremoved = _assertUnremoved;\nexports._callRemovalHooks = _callRemovalHooks;\nexports._markRemoved = _markRemoved;\nexports._remove = _remove;\nexports._removeFromScope = _removeFromScope;\nexports.remove = remove;\nvar _removalHooks = __webpack_require__(77860);\nvar _cache = __webpack_require__(37411);\nvar _replacement = __webpack_require__(22037);\nvar _index = __webpack_require__(29709);\nvar _t = __webpack_require__(2352);\nvar _modification = __webpack_require__(58345);\nvar _context = __webpack_require__(79578);\nconst {\n  getBindingIdentifiers\n} = _t;\nfunction remove() {\n  var _this$opts;\n  _assertUnremoved.call(this);\n  _context.resync.call(this);\n  if (_callRemovalHooks.call(this)) {\n    _markRemoved.call(this);\n    return;\n  }\n  if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {\n    _removeFromScope.call(this);\n  }\n  this.shareCommentsWithSiblings();\n  _remove.call(this);\n  _markRemoved.call(this);\n}\nfunction _removeFromScope() {\n  const bindings = getBindingIdentifiers(this.node, false, false, true);\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\nfunction _callRemovalHooks() {\n  if (this.parentPath) {\n    for (const fn of _removalHooks.hooks) {\n      if (fn(this, this.parentPath)) return true;\n    }\n  }\n}\nfunction _remove() {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key, 1);\n    _modification.updateSiblingKeys.call(this, this.key, -1);\n  } else {\n    _replacement._replaceWith.call(this, null);\n  }\n}\nfunction _markRemoved() {\n  this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;\n  if (this.parent) {\n    (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node);\n  }\n  this.node = null;\n}\nfunction _assertUnremoved() {\n  if (this.removed) {\n    throw this.buildCodeFrameError("NodePath has been removed so is read-only.");\n  }\n}\n\n//# sourceMappingURL=removal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMwOTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0JBQXdCO0FBQ3hCLHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsZUFBZTtBQUNmLHdCQUF3QjtBQUN4QixjQUFjO0FBQ2Qsb0JBQW9CLG1CQUFPLENBQUMsS0FBd0I7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLEtBQWE7QUFDbEMsbUJBQW1CLG1CQUFPLENBQUMsS0FBa0I7QUFDN0MsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakMsU0FBUyxtQkFBTyxDQUFDLElBQWM7QUFDL0Isb0JBQW9CLG1CQUFPLENBQUMsS0FBbUI7QUFDL0MsZUFBZSxtQkFBTyxDQUFDLEtBQWM7QUFDckM7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHJhdmVyc2UvbGliL3BhdGgvcmVtb3ZhbC5qcz8zODBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5fYXNzZXJ0VW5yZW1vdmVkID0gX2Fzc2VydFVucmVtb3ZlZDtcbmV4cG9ydHMuX2NhbGxSZW1vdmFsSG9va3MgPSBfY2FsbFJlbW92YWxIb29rcztcbmV4cG9ydHMuX21hcmtSZW1vdmVkID0gX21hcmtSZW1vdmVkO1xuZXhwb3J0cy5fcmVtb3ZlID0gX3JlbW92ZTtcbmV4cG9ydHMuX3JlbW92ZUZyb21TY29wZSA9IF9yZW1vdmVGcm9tU2NvcGU7XG5leHBvcnRzLnJlbW92ZSA9IHJlbW92ZTtcbnZhciBfcmVtb3ZhbEhvb2tzID0gcmVxdWlyZShcIi4vbGliL3JlbW92YWwtaG9va3MuanNcIik7XG52YXIgX2NhY2hlID0gcmVxdWlyZShcIi4uL2NhY2hlLmpzXCIpO1xudmFyIF9yZXBsYWNlbWVudCA9IHJlcXVpcmUoXCIuL3JlcGxhY2VtZW50LmpzXCIpO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuL2luZGV4LmpzXCIpO1xudmFyIF90ID0gcmVxdWlyZShcIkBiYWJlbC90eXBlc1wiKTtcbnZhciBfbW9kaWZpY2F0aW9uID0gcmVxdWlyZShcIi4vbW9kaWZpY2F0aW9uLmpzXCIpO1xudmFyIF9jb250ZXh0ID0gcmVxdWlyZShcIi4vY29udGV4dC5qc1wiKTtcbmNvbnN0IHtcbiAgZ2V0QmluZGluZ0lkZW50aWZpZXJzXG59ID0gX3Q7XG5mdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBfdGhpcyRvcHRzO1xuICBfYXNzZXJ0VW5yZW1vdmVkLmNhbGwodGhpcyk7XG4gIF9jb250ZXh0LnJlc3luYy5jYWxsKHRoaXMpO1xuICBpZiAoX2NhbGxSZW1vdmFsSG9va3MuY2FsbCh0aGlzKSkge1xuICAgIF9tYXJrUmVtb3ZlZC5jYWxsKHRoaXMpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoISgoX3RoaXMkb3B0cyA9IHRoaXMub3B0cykgIT0gbnVsbCAmJiBfdGhpcyRvcHRzLm5vU2NvcGUpKSB7XG4gICAgX3JlbW92ZUZyb21TY29wZS5jYWxsKHRoaXMpO1xuICB9XG4gIHRoaXMuc2hhcmVDb21tZW50c1dpdGhTaWJsaW5ncygpO1xuICBfcmVtb3ZlLmNhbGwodGhpcyk7XG4gIF9tYXJrUmVtb3ZlZC5jYWxsKHRoaXMpO1xufVxuZnVuY3Rpb24gX3JlbW92ZUZyb21TY29wZSgpIHtcbiAgY29uc3QgYmluZGluZ3MgPSBnZXRCaW5kaW5nSWRlbnRpZmllcnModGhpcy5ub2RlLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICBPYmplY3Qua2V5cyhiaW5kaW5ncykuZm9yRWFjaChuYW1lID0+IHRoaXMuc2NvcGUucmVtb3ZlQmluZGluZyhuYW1lKSk7XG59XG5mdW5jdGlvbiBfY2FsbFJlbW92YWxIb29rcygpIHtcbiAgaWYgKHRoaXMucGFyZW50UGF0aCkge1xuICAgIGZvciAoY29uc3QgZm4gb2YgX3JlbW92YWxIb29rcy5ob29rcykge1xuICAgICAgaWYgKGZuKHRoaXMsIHRoaXMucGFyZW50UGF0aCkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX3JlbW92ZSgpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5jb250YWluZXIpKSB7XG4gICAgdGhpcy5jb250YWluZXIuc3BsaWNlKHRoaXMua2V5LCAxKTtcbiAgICBfbW9kaWZpY2F0aW9uLnVwZGF0ZVNpYmxpbmdLZXlzLmNhbGwodGhpcywgdGhpcy5rZXksIC0xKTtcbiAgfSBlbHNlIHtcbiAgICBfcmVwbGFjZW1lbnQuX3JlcGxhY2VXaXRoLmNhbGwodGhpcywgbnVsbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9tYXJrUmVtb3ZlZCgpIHtcbiAgdGhpcy5fdHJhdmVyc2VGbGFncyB8PSBfaW5kZXguU0hPVUxEX1NLSVAgfCBfaW5kZXguUkVNT1ZFRDtcbiAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgKDAsIF9jYWNoZS5nZXRDYWNoZWRQYXRocykodGhpcy5odWIsIHRoaXMucGFyZW50KS5kZWxldGUodGhpcy5ub2RlKTtcbiAgfVxuICB0aGlzLm5vZGUgPSBudWxsO1xufVxuZnVuY3Rpb24gX2Fzc2VydFVucmVtb3ZlZCgpIHtcbiAgaWYgKHRoaXMucmVtb3ZlZCkge1xuICAgIHRocm93IHRoaXMuYnVpbGRDb2RlRnJhbWVFcnJvcihcIk5vZGVQYXRoIGhhcyBiZWVuIHJlbW92ZWQgc28gaXMgcmVhZC1vbmx5LlwiKTtcbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmFsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53097\n')},22037:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\nexports.replaceWith = replaceWith;\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nvar _codeFrame = __webpack_require__(62882);\nvar _index = __webpack_require__(25781);\nvar _index2 = __webpack_require__(29709);\nvar _cache = __webpack_require__(37411);\nvar _modification = __webpack_require__(58345);\nvar _parser = __webpack_require__(22172);\nvar _t = __webpack_require__(2352);\nvar _context = __webpack_require__(79578);\nconst {\n  FUNCTION_TYPES,\n  arrowFunctionExpression,\n  assignmentExpression,\n  awaitExpression,\n  blockStatement,\n  buildUndefinedNode,\n  callExpression,\n  cloneNode,\n  conditionalExpression,\n  expressionStatement,\n  getBindingIdentifiers,\n  identifier,\n  inheritLeadingComments,\n  inheritTrailingComments,\n  inheritsComments,\n  isBlockStatement,\n  isEmptyStatement,\n  isExpression,\n  isExpressionStatement,\n  isIfStatement,\n  isProgram,\n  isStatement,\n  isVariableDeclaration,\n  removeComments,\n  returnStatement,\n  sequenceExpression,\n  validate,\n  yieldExpression\n} = _t;\nfunction replaceWithMultiple(nodes) {\n  var _getCachedPaths;\n  _context.resync.call(this);\n  nodes = _modification._verifyNodeList.call(this, nodes);\n  inheritLeadingComments(nodes[0], this.node);\n  inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths.delete(this.node);\n  this.node = this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n  return paths;\n}\nfunction replaceWithSourceString(replacement) {\n  _context.resync.call(this);\n  let ast;\n  try {\n    replacement = `(${replacement})`;\n    ast = (0, _parser.parse)(replacement);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message += " - make sure this is an expression.\\n" + (0, _codeFrame.codeFrameColumns)(replacement, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      });\n      err.code = "BABEL_REPLACE_SOURCE_ERROR";\n    }\n    throw err;\n  }\n  const expressionAST = ast.program.body[0].expression;\n  _index.default.removeProperties(expressionAST);\n  return this.replaceWith(expressionAST);\n}\nfunction replaceWith(replacementPath) {\n  _context.resync.call(this);\n  if (this.removed) {\n    throw new Error("You can\'t replace this node, we\'ve already removed it");\n  }\n  let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;\n  if (!replacement) {\n    throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");\n  }\n  if (this.node === replacement) {\n    return [this];\n  }\n  if (this.isProgram() && !isProgram(replacement)) {\n    throw new Error("You can only replace a Program root node with another Program node");\n  }\n  if (Array.isArray(replacement)) {\n    throw new Error("Don\'t use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");\n  }\n  if (typeof replacement === "string") {\n    throw new Error("Don\'t use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");\n  }\n  let nodePath = "";\n  if (this.isNodeType("Statement") && isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = expressionStatement(replacement);\n      nodePath = "expression";\n    }\n  }\n  if (this.isNodeType("Expression") && isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n  const oldNode = this.node;\n  if (oldNode) {\n    inheritsComments(replacement, oldNode);\n    removeComments(oldNode);\n  }\n  _replaceWith.call(this, replacement);\n  this.type = replacement.type;\n  _context.setScope.call(this);\n  this.requeue();\n  return [nodePath ? this.get(nodePath) : this];\n}\nfunction _replaceWith(node) {\n  var _getCachedPaths2;\n  if (!this.container) {\n    throw new ReferenceError("Container is falsy");\n  }\n  if (this.inList) {\n    validate(this.parent, this.key, [node]);\n  } else {\n    validate(this.parent, this.key, node);\n  }\n  this.debug(`Replace with ${node == null ? void 0 : node.type}`);\n  (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths2.set(node, this).delete(this.node);\n  this.node = this.container[this.key] = node;\n}\nfunction replaceExpressionWithStatements(nodes) {\n  _context.resync.call(this);\n  const declars = [];\n  const nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);\n  if (nodesAsSingleExpression) {\n    for (const id of declars) this.scope.push({\n      id\n    });\n    return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");\n  }\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent == null ? void 0 : functionParent.node.async;\n  const isParentGenerator = functionParent == null ? void 0 : functionParent.node.generator;\n  const container = arrowFunctionExpression([], blockStatement(nodes));\n  this.replaceWith(callExpression(container, []));\n  const callee = this.get("callee");\n  callee.get("body").scope.hoistVariables(id => this.scope.push({\n    id\n  }));\n  const completionRecords = callee.getCompletionRecords();\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n    const loop = path.findParent(path => path.isLoop());\n    if (loop) {\n      let uid = loop.getData("expressionReplacementReturnUid");\n      if (!uid) {\n        uid = callee.scope.generateDeclaredUidIdentifier("ret");\n        callee.get("body").pushContainer("body", returnStatement(cloneNode(uid)));\n        loop.setData("expressionReplacementReturnUid", uid);\n      } else {\n        uid = identifier(uid.name);\n      }\n      path.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path.node.expression));\n    } else {\n      path.replaceWith(returnStatement(path.node.expression));\n    }\n  }\n  callee.arrowFunctionToExpression();\n  const newCallee = callee;\n  const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES);\n  const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);\n  if (needToAwaitFunction) {\n    newCallee.set("async", true);\n    if (!needToYieldFunction) {\n      this.replaceWith(awaitExpression(this.node));\n    }\n  }\n  if (needToYieldFunction) {\n    newCallee.set("generator", true);\n    this.replaceWith(yieldExpression(this.node, true));\n  }\n  return newCallee.get("body.body");\n}\nfunction gatherSequenceExpressions(nodes, declars) {\n  const exprs = [];\n  let ensureLastUndefined = true;\n  for (const node of nodes) {\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== "var") return;\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push(cloneNode(bindings[key]));\n        }\n        if (declar.init) {\n          exprs.push(assignmentExpression("=", declar.id, declar.init));\n        }\n      }\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode();\n      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();\n      if (!consequent || !alternate) return;\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, declars);\n      if (!body) return;\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      return;\n    }\n  }\n  if (ensureLastUndefined) exprs.push(buildUndefinedNode());\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\nfunction replaceInline(nodes) {\n  _context.resync.call(this);\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = _modification._verifyNodeList.call(this, nodes);\n      const paths = _modification._containerInsertAfter.call(this, nodes);\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}\n\n//# sourceMappingURL=replacement.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22037\n')},33599:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nclass Binding {\n  constructor({\n    identifier,\n    scope,\n    path,\n    kind\n  }) {\n    this.identifier = void 0;\n    this.scope = void 0;\n    this.path = void 0;\n    this.kind = void 0;\n    this.constantViolations = [];\n    this.constant = true;\n    this.referencePaths = [];\n    this.referenced = false;\n    this.references = 0;\n    this.identifier = identifier;\n    this.scope = scope;\n    this.path = path;\n    this.kind = kind;\n    if ((kind === "var" || kind === "hoisted") && isDeclaredInLoop(path)) {\n      this.reassign(path);\n    }\n    this.clearValue();\n  }\n  deoptValue() {\n    this.clearValue();\n    this.hasDeoptedValue = true;\n  }\n  setValue(value) {\n    if (this.hasDeoptedValue) return;\n    this.hasValue = true;\n    this.value = value;\n  }\n  clearValue() {\n    this.hasDeoptedValue = false;\n    this.hasValue = false;\n    this.value = null;\n  }\n  reassign(path) {\n    this.constant = false;\n    if (this.constantViolations.includes(path)) {\n      return;\n    }\n    this.constantViolations.push(path);\n  }\n  reference(path) {\n    if (this.referencePaths.includes(path)) {\n      return;\n    }\n    this.referenced = true;\n    this.references++;\n    this.referencePaths.push(path);\n  }\n  dereference() {\n    this.references--;\n    this.referenced = !!this.references;\n  }\n}\nexports["default"] = Binding;\nfunction isDeclaredInLoop(path) {\n  for (let {\n    parentPath,\n    key\n  } = path; parentPath; ({\n    parentPath,\n    key\n  } = parentPath)) {\n    if (parentPath.isFunctionParent()) return false;\n    if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && key === "body") {\n      return true;\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=binding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM1OTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxRQUFRLFlBQVk7QUFDeEI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3RyYXZlcnNlL2xpYi9zY29wZS9iaW5kaW5nLmpzPzk3Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5jbGFzcyBCaW5kaW5nIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGlkZW50aWZpZXIsXG4gICAgc2NvcGUsXG4gICAgcGF0aCxcbiAgICBraW5kXG4gIH0pIHtcbiAgICB0aGlzLmlkZW50aWZpZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5zY29wZSA9IHZvaWQgMDtcbiAgICB0aGlzLnBhdGggPSB2b2lkIDA7XG4gICAgdGhpcy5raW5kID0gdm9pZCAwO1xuICAgIHRoaXMuY29uc3RhbnRWaW9sYXRpb25zID0gW107XG4gICAgdGhpcy5jb25zdGFudCA9IHRydWU7XG4gICAgdGhpcy5yZWZlcmVuY2VQYXRocyA9IFtdO1xuICAgIHRoaXMucmVmZXJlbmNlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVmZXJlbmNlcyA9IDA7XG4gICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIGlmICgoa2luZCA9PT0gXCJ2YXJcIiB8fCBraW5kID09PSBcImhvaXN0ZWRcIikgJiYgaXNEZWNsYXJlZEluTG9vcChwYXRoKSkge1xuICAgICAgdGhpcy5yZWFzc2lnbihwYXRoKTtcbiAgICB9XG4gICAgdGhpcy5jbGVhclZhbHVlKCk7XG4gIH1cbiAgZGVvcHRWYWx1ZSgpIHtcbiAgICB0aGlzLmNsZWFyVmFsdWUoKTtcbiAgICB0aGlzLmhhc0Rlb3B0ZWRWYWx1ZSA9IHRydWU7XG4gIH1cbiAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodGhpcy5oYXNEZW9wdGVkVmFsdWUpIHJldHVybjtcbiAgICB0aGlzLmhhc1ZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgY2xlYXJWYWx1ZSgpIHtcbiAgICB0aGlzLmhhc0Rlb3B0ZWRWYWx1ZSA9IGZhbHNlO1xuICAgIHRoaXMuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgfVxuICByZWFzc2lnbihwYXRoKSB7XG4gICAgdGhpcy5jb25zdGFudCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLmNvbnN0YW50VmlvbGF0aW9ucy5pbmNsdWRlcyhwYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNvbnN0YW50VmlvbGF0aW9ucy5wdXNoKHBhdGgpO1xuICB9XG4gIHJlZmVyZW5jZShwYXRoKSB7XG4gICAgaWYgKHRoaXMucmVmZXJlbmNlUGF0aHMuaW5jbHVkZXMocGF0aCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZWZlcmVuY2VkID0gdHJ1ZTtcbiAgICB0aGlzLnJlZmVyZW5jZXMrKztcbiAgICB0aGlzLnJlZmVyZW5jZVBhdGhzLnB1c2gocGF0aCk7XG4gIH1cbiAgZGVyZWZlcmVuY2UoKSB7XG4gICAgdGhpcy5yZWZlcmVuY2VzLS07XG4gICAgdGhpcy5yZWZlcmVuY2VkID0gISF0aGlzLnJlZmVyZW5jZXM7XG4gIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEJpbmRpbmc7XG5mdW5jdGlvbiBpc0RlY2xhcmVkSW5Mb29wKHBhdGgpIHtcbiAgZm9yIChsZXQge1xuICAgIHBhcmVudFBhdGgsXG4gICAga2V5XG4gIH0gPSBwYXRoOyBwYXJlbnRQYXRoOyAoe1xuICAgIHBhcmVudFBhdGgsXG4gICAga2V5XG4gIH0gPSBwYXJlbnRQYXRoKSkge1xuICAgIGlmIChwYXJlbnRQYXRoLmlzRnVuY3Rpb25QYXJlbnQoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwYXJlbnRQYXRoLmlzV2hpbGUoKSB8fCBwYXJlbnRQYXRoLmlzRm9yWFN0YXRlbWVudCgpIHx8IHBhcmVudFBhdGguaXNGb3JTdGF0ZW1lbnQoKSAmJiBrZXkgPT09IFwiYm9keVwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW5kaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33599\n')},86814:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _renamer = __webpack_require__(23874);\nvar _index = __webpack_require__(25781);\nvar _binding = __webpack_require__(33599);\nvar _globals = __webpack_require__(97627);\nvar _t = __webpack_require__(2352);\nvar t = _t;\nvar _cache = __webpack_require__(37411);\nvar _visitors = __webpack_require__(34950);\nconst {\n  NOT_LOCAL_BINDING,\n  assignmentExpression,\n  callExpression,\n  cloneNode,\n  getBindingIdentifiers,\n  identifier,\n  isArrayExpression,\n  isBinary,\n  isCallExpression,\n  isClass,\n  isClassBody,\n  isClassDeclaration,\n  isExportAllDeclaration,\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n  isFunctionDeclaration,\n  isIdentifier,\n  isImportDeclaration,\n  isLiteral,\n  isMemberExpression,\n  isMethod,\n  isModuleSpecifier,\n  isNullLiteral,\n  isObjectExpression,\n  isProperty,\n  isPureish,\n  isRegExpLiteral,\n  isSuper,\n  isTaggedTemplateExpression,\n  isTemplateLiteral,\n  isThisExpression,\n  isUnaryExpression,\n  isVariableDeclaration,\n  expressionStatement,\n  matchesPattern,\n  memberExpression,\n  numericLiteral,\n  toIdentifier,\n  variableDeclaration,\n  variableDeclarator,\n  isRecordExpression,\n  isTupleExpression,\n  isObjectProperty,\n  isTopicReference,\n  isMetaProperty,\n  isPrivateName,\n  isExportDeclaration,\n  buildUndefinedNode,\n  sequenceExpression\n} = _t;\nfunction gatherNodeParts(node, parts) {\n  switch (node == null ? void 0 : node.type) {\n    default:\n      if (isImportDeclaration(node) || isExportDeclaration(node)) {\n        var _node$specifiers;\n        if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) {\n          gatherNodeParts(node.source, parts);\n        } else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && (_node$specifiers = node.specifiers) != null && _node$specifiers.length) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if ((isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (isModuleSpecifier(node)) {\n        gatherNodeParts(node.local, parts);\n      } else if (isLiteral(node) && !isNullLiteral(node) && !isRegExpLiteral(node) && !isTemplateLiteral(node)) {\n        parts.push(node.value);\n      }\n      break;\n    case "MemberExpression":\n    case "OptionalMemberExpression":\n    case "JSXMemberExpression":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n    case "Identifier":\n    case "JSXIdentifier":\n      parts.push(node.name);\n      break;\n    case "CallExpression":\n    case "OptionalCallExpression":\n    case "NewExpression":\n      gatherNodeParts(node.callee, parts);\n      break;\n    case "ObjectExpression":\n    case "ObjectPattern":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n      break;\n    case "SpreadElement":\n    case "RestElement":\n      gatherNodeParts(node.argument, parts);\n      break;\n    case "ObjectProperty":\n    case "ObjectMethod":\n    case "ClassProperty":\n    case "ClassMethod":\n    case "ClassPrivateProperty":\n    case "ClassPrivateMethod":\n      gatherNodeParts(node.key, parts);\n      break;\n    case "ThisExpression":\n      parts.push("this");\n      break;\n    case "Super":\n      parts.push("super");\n      break;\n    case "Import":\n      parts.push("import");\n      break;\n    case "DoExpression":\n      parts.push("do");\n      break;\n    case "YieldExpression":\n      parts.push("yield");\n      gatherNodeParts(node.argument, parts);\n      break;\n    case "AwaitExpression":\n      parts.push("await");\n      gatherNodeParts(node.argument, parts);\n      break;\n    case "AssignmentExpression":\n      gatherNodeParts(node.left, parts);\n      break;\n    case "VariableDeclarator":\n      gatherNodeParts(node.id, parts);\n      break;\n    case "FunctionExpression":\n    case "FunctionDeclaration":\n    case "ClassExpression":\n    case "ClassDeclaration":\n      gatherNodeParts(node.id, parts);\n      break;\n    case "PrivateName":\n      gatherNodeParts(node.id, parts);\n      break;\n    case "ParenthesizedExpression":\n      gatherNodeParts(node.expression, parts);\n      break;\n    case "UnaryExpression":\n    case "UpdateExpression":\n      gatherNodeParts(node.argument, parts);\n      break;\n    case "MetaProperty":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n    case "JSXElement":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n    case "JSXOpeningElement":\n      gatherNodeParts(node.name, parts);\n      break;\n    case "JSXFragment":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n    case "JSXOpeningFragment":\n      parts.push("Fragment");\n      break;\n    case "JSXNamespacedName":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\nconst collectorVisitor = {\n  ForStatement(path) {\n    const declar = path.get("init");\n    if (declar.isVar()) {\n      const {\n        scope\n      } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding("var", declar);\n    }\n  },\n  Declaration(path) {\n    if (path.isBlockScoped()) return;\n    if (path.isImportDeclaration()) return;\n    if (path.isExportDeclaration()) return;\n    const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n  ImportDeclaration(path) {\n    const parent = path.scope.getBlockParent();\n    parent.registerDeclaration(path);\n  },\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n  ForXStatement(path, state) {\n    const left = path.get("left");\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    } else if (left.isVar()) {\n      const {\n        scope\n      } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding("var", left);\n    }\n  },\n  ExportDeclaration: {\n    exit(path) {\n      const {\n        node,\n        scope\n      } = path;\n      if (isExportAllDeclaration(node)) return;\n      const declar = node.declaration;\n      if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n        const binding = scope.getBinding(id.name);\n        binding == null || binding.reference(path);\n      } else if (isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            binding == null || binding.reference(path);\n          }\n        }\n      }\n    }\n  },\n  LabeledStatement(path) {\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n  UnaryExpression(path, state) {\n    if (path.node.operator === "delete") {\n      state.constantViolations.push(path);\n    }\n  },\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n  CatchClause(path) {\n    path.scope.registerBinding("let", path);\n  },\n  Function(path) {\n    const params = path.get("params");\n    for (const param of params) {\n      path.scope.registerBinding("param", param);\n    }\n    if (path.isFunctionExpression() && path.node.id && !path.node.id[NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding("local", path.get("id"), path);\n    }\n  },\n  ClassExpression(path) {\n    if (path.node.id && !path.node.id[NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding("local", path.get("id"), path);\n    }\n  },\n  TSTypeAnnotation(path) {\n    path.skip();\n  }\n};\nlet uid = 0;\nclass Scope {\n  constructor(path) {\n    this.uid = void 0;\n    this.path = void 0;\n    this.block = void 0;\n    this.inited = void 0;\n    this.labels = void 0;\n    this.bindings = void 0;\n    this.references = void 0;\n    this.globals = void 0;\n    this.uids = void 0;\n    this.data = void 0;\n    this.crawling = void 0;\n    const {\n      node\n    } = path;\n    const cached = _cache.scope.get(node);\n    if ((cached == null ? void 0 : cached.path) === path) {\n      return cached;\n    }\n    _cache.scope.set(node, this);\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n    this.inited = false;\n  }\n  get parent() {\n    var _parent;\n    let parent,\n      path = this.path;\n    do {\n      var _path;\n      const shouldSkip = path.key === "key" || path.listKey === "decorators";\n      path = path.parentPath;\n      if (shouldSkip && path.isMethod()) path = path.parentPath;\n      if ((_path = path) != null && _path.isScope()) parent = path;\n    } while (path && !parent);\n    return (_parent = parent) == null ? void 0 : _parent.scope;\n  }\n  generateDeclaredUidIdentifier(name) {\n    const id = this.generateUidIdentifier(name);\n    this.push({\n      id\n    });\n    return cloneNode(id);\n  }\n  generateUidIdentifier(name) {\n    return identifier(this.generateUid(name));\n  }\n  generateUid(name = "temp") {\n    name = toIdentifier(name).replace(/^_+/, "").replace(/\\d+$/g, "");\n    let uid;\n    let i = 1;\n    do {\n      uid = `_${name}`;\n      if (i > 1) uid += i;\n      i++;\n    } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n    return uid;\n  }\n  generateUidBasedOnNode(node, defaultName) {\n    const parts = [];\n    gatherNodeParts(node, parts);\n    let id = parts.join("$");\n    id = id.replace(/^_/, "") || defaultName || "ref";\n    return this.generateUid(id.slice(0, 20));\n  }\n  generateUidIdentifierBasedOnNode(node, defaultName) {\n    return identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n  isStatic(node) {\n    if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) {\n      return true;\n    }\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n    return false;\n  }\n  maybeGenerateMemoised(node, dontPush) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n      if (!dontPush) {\n        this.push({\n          id\n        });\n        return cloneNode(id);\n      }\n      return id;\n    }\n  }\n  checkBlockScopedCollisions(local, kind, name, id) {\n    if (kind === "param") return;\n    if (local.kind === "local") return;\n    const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const";\n    if (duplicate) {\n      throw this.path.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);\n    }\n  }\n  rename(oldName, newName) {\n    const binding = this.getBinding(oldName);\n    if (binding) {\n      newName || (newName = this.generateUidIdentifier(oldName).name);\n      const renamer = new _renamer.default(binding, oldName, newName);\n      {\n        renamer.rename(arguments[2]);\n      }\n    }\n  }\n  dump() {\n    const sep = "-".repeat(60);\n    console.log(sep);\n    let scope = this;\n    do {\n      console.log("#", scope.block.type);\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(" -", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind\n        });\n      }\n    } while (scope = scope.parent);\n    console.log(sep);\n  }\n  hasLabel(name) {\n    return !!this.getLabel(name);\n  }\n  getLabel(name) {\n    return this.labels.get(name);\n  }\n  registerLabel(path) {\n    this.labels.set(path.node.label.name, path);\n  }\n  registerDeclaration(path) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding("hoisted", path.get("id"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get("declarations");\n      const {\n        kind\n      } = path.node;\n      for (const declar of declarations) {\n        this.registerBinding(kind === "using" || kind === "await using" ? "const" : kind, declar);\n      }\n    } else if (path.isClassDeclaration()) {\n      if (path.node.declare) return;\n      this.registerBinding("let", path);\n    } else if (path.isImportDeclaration()) {\n      const isTypeDeclaration = path.node.importKind === "type" || path.node.importKind === "typeof";\n      const specifiers = path.get("specifiers");\n      for (const specifier of specifiers) {\n        const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");\n        this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      const declar = path.get("declaration");\n      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding("unknown", path);\n    }\n  }\n  buildUndefinedNode() {\n    return buildUndefinedNode();\n  }\n  registerConstantViolation(path) {\n    const ids = path.getAssignmentIdentifiers();\n    for (const name of Object.keys(ids)) {\n      var _this$getBinding;\n      (_this$getBinding = this.getBinding(name)) == null || _this$getBinding.reassign(path);\n    }\n  }\n  registerBinding(kind, path, bindingPath = path) {\n    if (!kind) throw new ReferenceError("no `kind`");\n    if (path.isVariableDeclaration()) {\n      const declarators = path.get("declarations");\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n      return;\n    }\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n        if (local) {\n          if (local.identifier === id) continue;\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n        if (local) {\n          local.reassign(bindingPath);\n        } else {\n          this.bindings[name] = new _binding.default({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind\n          });\n        }\n      }\n    }\n  }\n  addGlobal(node) {\n    this.globals[node.name] = node;\n  }\n  hasUid(name) {\n    let scope = this;\n    do {\n      if (scope.uids[name]) return true;\n    } while (scope = scope.parent);\n    return false;\n  }\n  hasGlobal(name) {\n    let scope = this;\n    do {\n      if (scope.globals[name]) return true;\n    } while (scope = scope.parent);\n    return false;\n  }\n  hasReference(name) {\n    return !!this.getProgramParent().references[name];\n  }\n  isPure(node, constantsOnly) {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) {\n      return true;\n    } else if (isClass(node)) {\n      var _node$decorators;\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n      if (((_node$decorators = node.decorators) == null ? void 0 : _node$decorators.length) > 0) {\n        return false;\n      }\n      return this.isPure(node.body, constantsOnly);\n    } else if (isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isBinary(node)) {\n      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n    } else if (isArrayExpression(node) || isTupleExpression(node)) {\n      for (const elem of node.elements) {\n        if (elem !== null && !this.isPure(elem, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isObjectExpression(node) || isRecordExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isMethod(node)) {\n      var _node$decorators2;\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (((_node$decorators2 = node.decorators) == null ? void 0 : _node$decorators2.length) > 0) {\n        return false;\n      }\n      return true;\n    } else if (isProperty(node)) {\n      var _node$decorators3;\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (((_node$decorators3 = node.decorators) == null ? void 0 : _node$decorators3.length) > 0) {\n        return false;\n      }\n      if (isObjectProperty(node) || node.static) {\n        if (node.value !== null && !this.isPure(node.value, constantsOnly)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isTaggedTemplateExpression(node)) {\n      return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", {\n        noGlobals: true\n      }) && this.isPure(node.quasi, constantsOnly);\n    } else if (isMemberExpression(node)) {\n      return !node.computed && isIdentifier(node.object) && node.object.name === "Symbol" && isIdentifier(node.property) && node.property.name !== "for" && !this.hasBinding("Symbol", {\n        noGlobals: true\n      });\n    } else if (isCallExpression(node)) {\n      return matchesPattern(node.callee, "Symbol.for") && !this.hasBinding("Symbol", {\n        noGlobals: true\n      }) && node.arguments.length === 1 && t.isStringLiteral(node.arguments[0]);\n    } else {\n      return isPureish(node);\n    }\n  }\n  setData(key, val) {\n    return this.data[key] = val;\n  }\n  getData(key) {\n    let scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while (scope = scope.parent);\n  }\n  removeData(key) {\n    let scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while (scope = scope.parent);\n  }\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n  crawl() {\n    const path = this.path;\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n    const state = {\n      references: [],\n      constantViolations: [],\n      assignments: []\n    };\n    this.crawling = true;\n    if (path.type !== "Program" && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {\n      for (const visit of collectorVisitor.enter) {\n        visit.call(state, path, state);\n      }\n      const typeVisitors = collectorVisitor[path.type];\n      if (typeVisitors) {\n        for (const visit of typeVisitors.enter) {\n          visit.call(state, path, state);\n        }\n      }\n    }\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n    for (const path of state.assignments) {\n      const ids = path.getAssignmentIdentifiers();\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n      path.scope.registerConstantViolation(path);\n    }\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n  push(opts) {\n    let path = this.path;\n    if (path.isPattern()) {\n      path = this.getPatternParent().path;\n    } else if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n    const {\n      init,\n      unique,\n      kind = "var",\n      id\n    } = opts;\n    if (!init && !unique && (kind === "var" || kind === "let") && path.isFunction() && !path.node.name && isCallExpression(path.parent, {\n      callee: path.node\n    }) && path.parent.arguments.length <= path.node.params.length && isIdentifier(id)) {\n      path.pushContainer("params", id);\n      path.scope.registerBinding("param", path.get("params")[path.node.params.length - 1]);\n      return;\n    }\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      path.ensureBlock();\n      path = path.get("body");\n    }\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n    if (!declarPath) {\n      const declar = variableDeclaration(kind, []);\n      declar._blockHoist = blockHoist;\n      [declarPath] = path.unshiftContainer("body", [declar]);\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n    const declarator = variableDeclarator(id, init);\n    const len = declarPath.node.declarations.push(declarator);\n    path.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);\n  }\n  getProgramParent() {\n    let scope = this;\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n    throw new Error("Couldn\'t find a Program");\n  }\n  getFunctionParent() {\n    let scope = this;\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n    return null;\n  }\n  getBlockParent() {\n    let scope = this;\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n    throw new Error("We couldn\'t find a BlockStatement, For, Switch, Function, Loop or Program...");\n  }\n  getPatternParent() {\n    let scope = this;\n    do {\n      if (!scope.path.isPattern()) {\n        return scope.getBlockParent();\n      }\n    } while (scope = scope.parent.parent);\n    throw new Error("We couldn\'t find a BlockStatement, For, Switch, Function, Loop or Program...");\n  }\n  getAllBindings() {\n    const ids = Object.create(null);\n    let scope = this;\n    do {\n      for (const key of Object.keys(scope.bindings)) {\n        if (key in ids === false) {\n          ids[key] = scope.bindings[key];\n        }\n      }\n      scope = scope.parent;\n    } while (scope);\n    return ids;\n  }\n  bindingIdentifierEquals(name, node) {\n    return this.getBindingIdentifier(name) === node;\n  }\n  getBinding(name) {\n    let scope = this;\n    let previousPath;\n    do {\n      const binding = scope.getOwnBinding(name);\n      if (binding) {\n        var _previousPath;\n        if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== "param" && binding.kind !== "local") {} else {\n          return binding;\n        }\n      } else if (!binding && name === "arguments" && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {\n        break;\n      }\n      previousPath = scope.path;\n    } while (scope = scope.parent);\n  }\n  getOwnBinding(name) {\n    return this.bindings[name];\n  }\n  getBindingIdentifier(name) {\n    var _this$getBinding2;\n    return (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.identifier;\n  }\n  getOwnBindingIdentifier(name) {\n    const binding = this.bindings[name];\n    return binding == null ? void 0 : binding.identifier;\n  }\n  hasOwnBinding(name) {\n    return !!this.getOwnBinding(name);\n  }\n  hasBinding(name, opts) {\n    if (!name) return false;\n    let scope = this;\n    do {\n      if (scope.hasOwnBinding(name)) {\n        return true;\n      }\n    } while (scope = scope.parent);\n    let noGlobals;\n    let noUids;\n    if (typeof opts === "object") {\n      noGlobals = opts.noGlobals;\n      noUids = opts.noUids;\n    } else if (typeof opts === "boolean") {\n      noGlobals = opts;\n    }\n    if (!noUids && this.hasUid(name)) return true;\n    if (!noGlobals && Scope.globals.includes(name)) return true;\n    if (!noGlobals && Scope.contextVariables.includes(name)) return true;\n    return false;\n  }\n  parentHasBinding(name, opts) {\n    var _this$parent;\n    return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, opts);\n  }\n  moveBindingTo(name, scope) {\n    const info = this.getBinding(name);\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n  removeOwnBinding(name) {\n    delete this.bindings[name];\n  }\n  removeBinding(name) {\n    var _this$getBinding3;\n    (_this$getBinding3 = this.getBinding(name)) == null || _this$getBinding3.scope.removeOwnBinding(name);\n    let scope = this;\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while (scope = scope.parent);\n  }\n  hoistVariables(emit = id => this.push({\n    id\n  })) {\n    this.crawl();\n    const seen = new Set();\n    for (const name of Object.keys(this.bindings)) {\n      const binding = this.bindings[name];\n      if (!binding) continue;\n      const {\n        path\n      } = binding;\n      if (!path.isVariableDeclarator()) continue;\n      const {\n        parent,\n        parentPath\n      } = path;\n      if (parent.kind !== "var" || seen.has(parent)) continue;\n      seen.add(path.parent);\n      let firstId;\n      const init = [];\n      for (const decl of parent.declarations) {\n        var _firstId;\n        (_firstId = firstId) != null ? _firstId : firstId = decl.id;\n        if (decl.init) {\n          init.push(assignmentExpression("=", decl.id, decl.init));\n        }\n        const ids = Object.keys(getBindingIdentifiers(decl, false, true, true));\n        for (const name of ids) {\n          emit(identifier(name), decl.init != null);\n        }\n      }\n      if (parentPath.parentPath.isFor({\n        left: parent\n      })) {\n        parentPath.replaceWith(firstId);\n      } else if (init.length === 0) {\n        parentPath.remove();\n      } else {\n        const expr = init.length === 1 ? init[0] : sequenceExpression(init);\n        if (parentPath.parentPath.isForStatement({\n          init: parent\n        })) {\n          parentPath.replaceWith(expr);\n        } else {\n          parentPath.replaceWith(expressionStatement(expr));\n        }\n      }\n    }\n  }\n}\nexports["default"] = Scope;\nScope.globals = Object.keys(_globals.builtin);\nScope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];\n{\n  Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  };\n  Scope.prototype.traverse = function (node, opts, state) {\n    (0, _index.default)(node, opts, this, state, this.path);\n  };\n  Scope.prototype._generateUid = function _generateUid(name, i) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  };\n  Scope.prototype.toArray = function toArray(node, i, arrayLikeIsIterable) {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding != null && binding.constant && binding.path.isGenericType("Array")) {\n        return node;\n      }\n    }\n    if (isArrayExpression(node)) {\n      return node;\n    }\n    if (isIdentifier(node, {\n      name: "arguments"\n    })) {\n      return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);\n    }\n    let helperName;\n    const args = [node];\n    if (i === true) {\n      helperName = "toConsumableArray";\n    } else if (typeof i === "number") {\n      args.push(numericLiteral(i));\n      helperName = "slicedToArray";\n    } else {\n      helperName = "toArray";\n    }\n    if (arrayLikeIsIterable) {\n      args.unshift(this.path.hub.addHelper(helperName));\n      helperName = "maybeArrayLike";\n    }\n    return callExpression(this.path.hub.addHelper(helperName), args);\n  };\n  Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind(...kinds) {\n    const ids = Object.create(null);\n    for (const kind of kinds) {\n      let scope = this;\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n        scope = scope.parent;\n      } while (scope);\n    }\n    return ids;\n  };\n  Object.defineProperties(Scope.prototype, {\n    parentBlock: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return this.path.parent;\n      }\n    },\n    hub: {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return this.path.hub;\n      }\n    }\n  });\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86814\n')},23874:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar t = __webpack_require__(2352);\nvar _t = t;\nvar _traverseNode = __webpack_require__(22264);\nvar _visitors = __webpack_require__(34950);\nvar _context = __webpack_require__(79578);\nconst {\n  getAssignmentIdentifiers\n} = _t;\nconst renameVisitor = {\n  ReferencedIdentifier({\n    node\n  }, state) {\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n  Scope(path, state) {\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\n      path.skip();\n      if (path.isMethod()) {\n        if (!path.requeueComputedKeyAndDecorators) {\n          _context.requeueComputedKeyAndDecorators.call(path);\n        } else {\n          path.requeueComputedKeyAndDecorators();\n        }\n      }\n    }\n  },\n  ObjectProperty({\n    node,\n    scope\n  }, state) {\n    const {\n      name\n    } = node.key;\n    if (node.shorthand && (name === state.oldName || name === state.newName) && scope.getBindingIdentifier(name) === state.binding.identifier) {\n      node.shorthand = false;\n      {\n        var _node$extra;\n        if ((_node$extra = node.extra) != null && _node$extra.shorthand) node.extra.shorthand = false;\n      }\n    }\n  },\n  "AssignmentExpression|Declaration|VariableDeclarator"(path, state) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.isAssignmentExpression() ? getAssignmentIdentifiers(path.node) : path.getOuterBindingIdentifiers();\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  }\n};\nclass Renamer {\n  constructor(binding, oldName, newName) {\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n  maybeConvertFromExportDeclaration(parentDeclar) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n    if (maybeExportDeclar.isExportDefaultDeclaration()) {\n      const {\n        declaration\n      } = maybeExportDeclar.node;\n      if (t.isDeclaration(declaration) && !declaration.id) {\n        return;\n      }\n    }\n    if (maybeExportDeclar.isExportAllDeclaration()) {\n      return;\n    }\n    maybeExportDeclar.splitExportDeclaration();\n  }\n  maybeConvertFromClassFunctionDeclaration(path) {\n    return path;\n  }\n  maybeConvertFromClassFunctionExpression(path) {\n    return path;\n  }\n  rename() {\n    const {\n      binding,\n      oldName,\n      newName\n    } = this;\n    const {\n      scope,\n      path\n    } = binding;\n    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n      if (bindingIds[oldName] === binding.identifier) {\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n    const blockToTraverse = arguments[0] || scope.block;\n    const skipKeys = {\n      discriminant: true\n    };\n    if (t.isMethod(blockToTraverse)) {\n      if (blockToTraverse.computed) {\n        skipKeys.key = true;\n      }\n      if (!t.isObjectMethod(blockToTraverse)) {\n        skipKeys.decorators = true;\n      }\n    }\n    (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, skipKeys);\n    if (!arguments[0]) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(path);\n      this.maybeConvertFromClassFunctionExpression(path);\n    }\n  }\n}\nexports["default"] = Renamer;\n\n//# sourceMappingURL=renamer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM4NzQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixRQUFRLG1CQUFPLENBQUMsSUFBYztBQUM5QjtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLEtBQXdCO0FBQ3BELGdCQUFnQixtQkFBTyxDQUFDLEtBQW1CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQyxLQUF1QjtBQUM5QztBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7O0FBRWYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90cmF2ZXJzZS9saWIvc2NvcGUvbGliL3JlbmFtZXIuanM/ZWZjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciB0ID0gcmVxdWlyZShcIkBiYWJlbC90eXBlc1wiKTtcbnZhciBfdCA9IHQ7XG52YXIgX3RyYXZlcnNlTm9kZSA9IHJlcXVpcmUoXCIuLi8uLi90cmF2ZXJzZS1ub2RlLmpzXCIpO1xudmFyIF92aXNpdG9ycyA9IHJlcXVpcmUoXCIuLi8uLi92aXNpdG9ycy5qc1wiKTtcbnZhciBfY29udGV4dCA9IHJlcXVpcmUoXCIuLi8uLi9wYXRoL2NvbnRleHQuanNcIik7XG5jb25zdCB7XG4gIGdldEFzc2lnbm1lbnRJZGVudGlmaWVyc1xufSA9IF90O1xuY29uc3QgcmVuYW1lVmlzaXRvciA9IHtcbiAgUmVmZXJlbmNlZElkZW50aWZpZXIoe1xuICAgIG5vZGVcbiAgfSwgc3RhdGUpIHtcbiAgICBpZiAobm9kZS5uYW1lID09PSBzdGF0ZS5vbGROYW1lKSB7XG4gICAgICBub2RlLm5hbWUgPSBzdGF0ZS5uZXdOYW1lO1xuICAgIH1cbiAgfSxcbiAgU2NvcGUocGF0aCwgc3RhdGUpIHtcbiAgICBpZiAoIXBhdGguc2NvcGUuYmluZGluZ0lkZW50aWZpZXJFcXVhbHMoc3RhdGUub2xkTmFtZSwgc3RhdGUuYmluZGluZy5pZGVudGlmaWVyKSkge1xuICAgICAgcGF0aC5za2lwKCk7XG4gICAgICBpZiAocGF0aC5pc01ldGhvZCgpKSB7XG4gICAgICAgIGlmICghcGF0aC5yZXF1ZXVlQ29tcHV0ZWRLZXlBbmREZWNvcmF0b3JzKSB7XG4gICAgICAgICAgX2NvbnRleHQucmVxdWV1ZUNvbXB1dGVkS2V5QW5kRGVjb3JhdG9ycy5jYWxsKHBhdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGgucmVxdWV1ZUNvbXB1dGVkS2V5QW5kRGVjb3JhdG9ycygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBPYmplY3RQcm9wZXJ0eSh7XG4gICAgbm9kZSxcbiAgICBzY29wZVxuICB9LCBzdGF0ZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWVcbiAgICB9ID0gbm9kZS5rZXk7XG4gICAgaWYgKG5vZGUuc2hvcnRoYW5kICYmIChuYW1lID09PSBzdGF0ZS5vbGROYW1lIHx8IG5hbWUgPT09IHN0YXRlLm5ld05hbWUpICYmIHNjb3BlLmdldEJpbmRpbmdJZGVudGlmaWVyKG5hbWUpID09PSBzdGF0ZS5iaW5kaW5nLmlkZW50aWZpZXIpIHtcbiAgICAgIG5vZGUuc2hvcnRoYW5kID0gZmFsc2U7XG4gICAgICB7XG4gICAgICAgIHZhciBfbm9kZSRleHRyYTtcbiAgICAgICAgaWYgKChfbm9kZSRleHRyYSA9IG5vZGUuZXh0cmEpICE9IG51bGwgJiYgX25vZGUkZXh0cmEuc2hvcnRoYW5kKSBub2RlLmV4dHJhLnNob3J0aGFuZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgXCJBc3NpZ25tZW50RXhwcmVzc2lvbnxEZWNsYXJhdGlvbnxWYXJpYWJsZURlY2xhcmF0b3JcIihwYXRoLCBzdGF0ZSkge1xuICAgIGlmIChwYXRoLmlzVmFyaWFibGVEZWNsYXJhdGlvbigpKSByZXR1cm47XG4gICAgY29uc3QgaWRzID0gcGF0aC5pc0Fzc2lnbm1lbnRFeHByZXNzaW9uKCkgPyBnZXRBc3NpZ25tZW50SWRlbnRpZmllcnMocGF0aC5ub2RlKSA6IHBhdGguZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnMoKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gaWRzKSB7XG4gICAgICBpZiAobmFtZSA9PT0gc3RhdGUub2xkTmFtZSkgaWRzW25hbWVdLm5hbWUgPSBzdGF0ZS5uZXdOYW1lO1xuICAgIH1cbiAgfVxufTtcbmNsYXNzIFJlbmFtZXIge1xuICBjb25zdHJ1Y3RvcihiaW5kaW5nLCBvbGROYW1lLCBuZXdOYW1lKSB7XG4gICAgdGhpcy5uZXdOYW1lID0gbmV3TmFtZTtcbiAgICB0aGlzLm9sZE5hbWUgPSBvbGROYW1lO1xuICAgIHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XG4gIH1cbiAgbWF5YmVDb252ZXJ0RnJvbUV4cG9ydERlY2xhcmF0aW9uKHBhcmVudERlY2xhcikge1xuICAgIGNvbnN0IG1heWJlRXhwb3J0RGVjbGFyID0gcGFyZW50RGVjbGFyLnBhcmVudFBhdGg7XG4gICAgaWYgKCFtYXliZUV4cG9ydERlY2xhci5pc0V4cG9ydERlY2xhcmF0aW9uKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG1heWJlRXhwb3J0RGVjbGFyLmlzRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKCkpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGVjbGFyYXRpb25cbiAgICAgIH0gPSBtYXliZUV4cG9ydERlY2xhci5ub2RlO1xuICAgICAgaWYgKHQuaXNEZWNsYXJhdGlvbihkZWNsYXJhdGlvbikgJiYgIWRlY2xhcmF0aW9uLmlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1heWJlRXhwb3J0RGVjbGFyLmlzRXhwb3J0QWxsRGVjbGFyYXRpb24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtYXliZUV4cG9ydERlY2xhci5zcGxpdEV4cG9ydERlY2xhcmF0aW9uKCk7XG4gIH1cbiAgbWF5YmVDb252ZXJ0RnJvbUNsYXNzRnVuY3Rpb25EZWNsYXJhdGlvbihwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgbWF5YmVDb252ZXJ0RnJvbUNsYXNzRnVuY3Rpb25FeHByZXNzaW9uKHBhdGgpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICByZW5hbWUoKSB7XG4gICAgY29uc3Qge1xuICAgICAgYmluZGluZyxcbiAgICAgIG9sZE5hbWUsXG4gICAgICBuZXdOYW1lXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgc2NvcGUsXG4gICAgICBwYXRoXG4gICAgfSA9IGJpbmRpbmc7XG4gICAgY29uc3QgcGFyZW50RGVjbGFyID0gcGF0aC5maW5kKHBhdGggPT4gcGF0aC5pc0RlY2xhcmF0aW9uKCkgfHwgcGF0aC5pc0Z1bmN0aW9uRXhwcmVzc2lvbigpIHx8IHBhdGguaXNDbGFzc0V4cHJlc3Npb24oKSk7XG4gICAgaWYgKHBhcmVudERlY2xhcikge1xuICAgICAgY29uc3QgYmluZGluZ0lkcyA9IHBhcmVudERlY2xhci5nZXRPdXRlckJpbmRpbmdJZGVudGlmaWVycygpO1xuICAgICAgaWYgKGJpbmRpbmdJZHNbb2xkTmFtZV0gPT09IGJpbmRpbmcuaWRlbnRpZmllcikge1xuICAgICAgICB0aGlzLm1heWJlQ29udmVydEZyb21FeHBvcnREZWNsYXJhdGlvbihwYXJlbnREZWNsYXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBibG9ja1RvVHJhdmVyc2UgPSBhcmd1bWVudHNbMF0gfHwgc2NvcGUuYmxvY2s7XG4gICAgY29uc3Qgc2tpcEtleXMgPSB7XG4gICAgICBkaXNjcmltaW5hbnQ6IHRydWVcbiAgICB9O1xuICAgIGlmICh0LmlzTWV0aG9kKGJsb2NrVG9UcmF2ZXJzZSkpIHtcbiAgICAgIGlmIChibG9ja1RvVHJhdmVyc2UuY29tcHV0ZWQpIHtcbiAgICAgICAgc2tpcEtleXMua2V5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghdC5pc09iamVjdE1ldGhvZChibG9ja1RvVHJhdmVyc2UpKSB7XG4gICAgICAgIHNraXBLZXlzLmRlY29yYXRvcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAoMCwgX3RyYXZlcnNlTm9kZS50cmF2ZXJzZU5vZGUpKGJsb2NrVG9UcmF2ZXJzZSwgKDAsIF92aXNpdG9ycy5leHBsb2RlKShyZW5hbWVWaXNpdG9yKSwgc2NvcGUsIHRoaXMsIHNjb3BlLnBhdGgsIHNraXBLZXlzKTtcbiAgICBpZiAoIWFyZ3VtZW50c1swXSkge1xuICAgICAgc2NvcGUucmVtb3ZlT3duQmluZGluZyhvbGROYW1lKTtcbiAgICAgIHNjb3BlLmJpbmRpbmdzW25ld05hbWVdID0gYmluZGluZztcbiAgICAgIHRoaXMuYmluZGluZy5pZGVudGlmaWVyLm5hbWUgPSBuZXdOYW1lO1xuICAgIH1cbiAgICBpZiAocGFyZW50RGVjbGFyKSB7XG4gICAgICB0aGlzLm1heWJlQ29udmVydEZyb21DbGFzc0Z1bmN0aW9uRGVjbGFyYXRpb24ocGF0aCk7XG4gICAgICB0aGlzLm1heWJlQ29udmVydEZyb21DbGFzc0Z1bmN0aW9uRXhwcmVzc2lvbihwYXRoKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJlbmFtZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmFtZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23874\n')},22264:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.traverseNode = traverseNode;\nvar _context = __webpack_require__(1602);\nvar _t = __webpack_require__(2352);\nconst {\n  VISITOR_KEYS\n} = _t;\nfunction traverseNode(node, opts, scope, state, path, skipKeys, visitSelf) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return false;\n  const context = new _context.default(scope, opts, state, path);\n  if (visitSelf) {\n    if (skipKeys != null && skipKeys[path.parentKey]) return false;\n    return context.visitQueue([path]);\n  }\n  for (const key of keys) {\n    if (skipKeys != null && skipKeys[key]) continue;\n    if (context.visit(node, key)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=traverse-node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIyNjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysb0JBQW9CO0FBQ3BCLGVBQWUsbUJBQU8sQ0FBQyxJQUFjO0FBQ3JDLFNBQVMsbUJBQU8sQ0FBQyxJQUFjO0FBQy9CO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90cmF2ZXJzZS9saWIvdHJhdmVyc2Utbm9kZS5qcz9hYTY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50cmF2ZXJzZU5vZGUgPSB0cmF2ZXJzZU5vZGU7XG52YXIgX2NvbnRleHQgPSByZXF1aXJlKFwiLi9jb250ZXh0LmpzXCIpO1xudmFyIF90ID0gcmVxdWlyZShcIkBiYWJlbC90eXBlc1wiKTtcbmNvbnN0IHtcbiAgVklTSVRPUl9LRVlTXG59ID0gX3Q7XG5mdW5jdGlvbiB0cmF2ZXJzZU5vZGUobm9kZSwgb3B0cywgc2NvcGUsIHN0YXRlLCBwYXRoLCBza2lwS2V5cywgdmlzaXRTZWxmKSB7XG4gIGNvbnN0IGtleXMgPSBWSVNJVE9SX0tFWVNbbm9kZS50eXBlXTtcbiAgaWYgKCFrZXlzKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgX2NvbnRleHQuZGVmYXVsdChzY29wZSwgb3B0cywgc3RhdGUsIHBhdGgpO1xuICBpZiAodmlzaXRTZWxmKSB7XG4gICAgaWYgKHNraXBLZXlzICE9IG51bGwgJiYgc2tpcEtleXNbcGF0aC5wYXJlbnRLZXldKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnRleHQudmlzaXRRdWV1ZShbcGF0aF0pO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoc2tpcEtleXMgIT0gbnVsbCAmJiBza2lwS2V5c1trZXldKSBjb250aW51ZTtcbiAgICBpZiAoY29udGV4dC52aXNpdChub2RlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmF2ZXJzZS1ub2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22264\n')},34950:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.environmentVisitor = environmentVisitor;\nexports.explode = explode$1;\nexports.isExplodedVisitor = isExplodedVisitor;\nexports.merge = merge;\nexports.verify = verify$1;\nvar virtualTypes = __webpack_require__(75562);\nvar virtualTypesValidators = __webpack_require__(57973);\nvar _t = __webpack_require__(2352);\nvar _context = __webpack_require__(79578);\nconst {\n  DEPRECATED_KEYS,\n  DEPRECATED_ALIASES,\n  FLIPPED_ALIAS_KEYS,\n  TYPES,\n  __internal__deprecationWarning: deprecationWarning\n} = _t;\nfunction isVirtualType(type) {\n  return type in virtualTypes;\n}\nfunction isExplodedVisitor(visitor) {\n  return visitor == null ? void 0 : visitor._exploded;\n}\nfunction explode$1(visitor) {\n  if (isExplodedVisitor(visitor)) return visitor;\n  visitor._exploded = true;\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    const parts = nodeType.split("|");\n    if (parts.length === 1) continue;\n    const fns = visitor[nodeType];\n    delete visitor[nodeType];\n    for (const part of parts) {\n      visitor[part] = fns;\n    }\n  }\n  verify$1(visitor);\n  delete visitor.__esModule;\n  ensureEntranceObjects(visitor);\n  ensureCallbackArrays(visitor);\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    if (!isVirtualType(nodeType)) continue;\n    const fns = visitor[nodeType];\n    for (const type of Object.keys(fns)) {\n      fns[type] = wrapCheck(nodeType, fns[type]);\n    }\n    delete visitor[nodeType];\n    const types = virtualTypes[nodeType];\n    if (types !== null) {\n      for (const type of types) {\n        if (visitor[type]) {\n          mergePair(visitor[type], fns);\n        } else {\n          visitor[type] = fns;\n        }\n      }\n    } else {\n      mergePair(visitor, fns);\n    }\n  }\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    let aliases = FLIPPED_ALIAS_KEYS[nodeType];\n    if (nodeType in DEPRECATED_KEYS) {\n      const deprecatedKey = DEPRECATED_KEYS[nodeType];\n      deprecationWarning(nodeType, deprecatedKey, "Visitor ");\n      aliases = [deprecatedKey];\n    } else if (nodeType in DEPRECATED_ALIASES) {\n      const deprecatedAlias = DEPRECATED_ALIASES[nodeType];\n      deprecationWarning(nodeType, deprecatedAlias, "Visitor ");\n      aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];\n    }\n    if (!aliases) continue;\n    const fns = visitor[nodeType];\n    delete visitor[nodeType];\n    for (const alias of aliases) {\n      const existing = visitor[alias];\n      if (existing) {\n        mergePair(existing, fns);\n      } else {\n        visitor[alias] = Object.assign({}, fns);\n      }\n    }\n  }\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    ensureCallbackArrays(visitor[nodeType]);\n  }\n  return visitor;\n}\nfunction verify$1(visitor) {\n  if (visitor._verified) return;\n  if (typeof visitor === "function") {\n    throw new Error("You passed `traverse()` a function when it expected a visitor object, " + "are you sure you didn\'t mean `{ enter: Function }`?");\n  }\n  for (const nodeType of Object.keys(visitor)) {\n    if (nodeType === "enter" || nodeType === "exit") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n    if (shouldIgnoreKey(nodeType)) continue;\n    if (!TYPES.includes(nodeType)) {\n      throw new Error(`You gave us a visitor for the node type ${nodeType} but it\'s not a valid type in @babel/traverse ${"7.25.9"}`);\n    }\n    const visitors = visitor[nodeType];\n    if (typeof visitors === "object") {\n      for (const visitorKey of Object.keys(visitors)) {\n        if (visitorKey === "enter" || visitorKey === "exit") {\n          validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);\n        } else {\n          throw new Error("You passed `traverse()` a visitor object with the property " + `${nodeType} that has the invalid property ${visitorKey}`);\n        }\n      }\n    }\n  }\n  visitor._verified = true;\n}\nfunction validateVisitorMethods(path, val) {\n  const fns = [].concat(val);\n  for (const fn of fns) {\n    if (typeof fn !== "function") {\n      throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`);\n    }\n  }\n}\nfunction merge(visitors, states = [], wrapper) {\n  const mergedVisitor = {\n    _verified: true,\n    _exploded: true\n  };\n  {\n    Object.defineProperty(mergedVisitor, "_exploded", {\n      enumerable: false\n    });\n    Object.defineProperty(mergedVisitor, "_verified", {\n      enumerable: false\n    });\n  }\n  for (let i = 0; i < visitors.length; i++) {\n    const visitor = explode$1(visitors[i]);\n    const state = states[i];\n    let topVisitor = visitor;\n    if (state || wrapper) {\n      topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper);\n    }\n    mergePair(mergedVisitor, topVisitor);\n    for (const key of Object.keys(visitor)) {\n      if (shouldIgnoreKey(key)) continue;\n      let typeVisitor = visitor[key];\n      if (state || wrapper) {\n        typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper);\n      }\n      const nodeVisitor = mergedVisitor[key] || (mergedVisitor[key] = {});\n      mergePair(nodeVisitor, typeVisitor);\n    }\n  }\n  return mergedVisitor;\n}\nfunction wrapWithStateOrWrapper(oldVisitor, state, wrapper) {\n  const newVisitor = {};\n  for (const phase of ["enter", "exit"]) {\n    let fns = oldVisitor[phase];\n    if (!Array.isArray(fns)) continue;\n    fns = fns.map(function (fn) {\n      let newFn = fn;\n      if (state) {\n        newFn = function (path) {\n          fn.call(state, path, state);\n        };\n      }\n      if (wrapper) {\n        newFn = wrapper(state == null ? void 0 : state.key, phase, newFn);\n      }\n      if (newFn !== fn) {\n        newFn.toString = () => fn.toString();\n      }\n      return newFn;\n    });\n    newVisitor[phase] = fns;\n  }\n  return newVisitor;\n}\nfunction ensureEntranceObjects(obj) {\n  for (const key of Object.keys(obj)) {\n    if (shouldIgnoreKey(key)) continue;\n    const fns = obj[key];\n    if (typeof fns === "function") {\n      obj[key] = {\n        enter: fns\n      };\n    }\n  }\n}\nfunction ensureCallbackArrays(obj) {\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\nfunction wrapCheck(nodeType, fn) {\n  const fnKey = `is${nodeType}`;\n  const validator = virtualTypesValidators[fnKey];\n  const newFn = function (path) {\n    if (validator.call(path)) {\n      return fn.apply(this, arguments);\n    }\n  };\n  newFn.toString = () => fn.toString();\n  return newFn;\n}\nfunction shouldIgnoreKey(key) {\n  if (key[0] === "_") return true;\n  if (key === "enter" || key === "exit" || key === "shouldSkip") return true;\n  if (key === "denylist" || key === "noScope" || key === "skipKeys") {\n    return true;\n  }\n  {\n    if (key === "blacklist") {\n      return true;\n    }\n  }\n  return false;\n}\nfunction mergePair(dest, src) {\n  for (const phase of ["enter", "exit"]) {\n    if (!src[phase]) continue;\n    dest[phase] = [].concat(dest[phase] || [], src[phase]);\n  }\n}\nconst _environmentVisitor = {\n  FunctionParent(path) {\n    if (path.isArrowFunctionExpression()) return;\n    path.skip();\n    if (path.isMethod()) {\n      if (!path.requeueComputedKeyAndDecorators) {\n        _context.requeueComputedKeyAndDecorators.call(path);\n      } else {\n        path.requeueComputedKeyAndDecorators();\n      }\n    }\n  },\n  Property(path) {\n    if (path.isObjectProperty()) return;\n    path.skip();\n    if (!path.requeueComputedKeyAndDecorators) {\n      _context.requeueComputedKeyAndDecorators.call(path);\n    } else {\n      path.requeueComputedKeyAndDecorators();\n    }\n  }\n};\nfunction environmentVisitor(visitor) {\n  return merge([_environmentVisitor, visitor]);\n}\n\n//# sourceMappingURL=visitors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34950\n')},34568:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = assertNode;\nvar _isNode = __webpack_require__(73908);\nfunction assertNode(node) {\n  if (!(0, _isNode.default)(node)) {\n    var _node$type;\n    const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type "${type}"`);\n  }\n}\n\n//# sourceMappingURL=assertNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ1NjguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixjQUFjLG1CQUFPLENBQUMsS0FBeUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsS0FBSztBQUMxRDtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2Fzc2VydHMvYXNzZXJ0Tm9kZS5qcz9hYjYzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYXNzZXJ0Tm9kZTtcbnZhciBfaXNOb2RlID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvaXNOb2RlLmpzXCIpO1xuZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlKSB7XG4gIGlmICghKDAsIF9pc05vZGUuZGVmYXVsdCkobm9kZSkpIHtcbiAgICB2YXIgX25vZGUkdHlwZTtcbiAgICBjb25zdCB0eXBlID0gKF9ub2RlJHR5cGUgPSBub2RlID09IG51bGwgPyB2b2lkIDAgOiBub2RlLnR5cGUpICE9IG51bGwgPyBfbm9kZSR0eXBlIDogSlNPTi5zdHJpbmdpZnkobm9kZSk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm90IGEgdmFsaWQgbm9kZSBvZiB0eXBlIFwiJHt0eXBlfVwiYCk7XG4gIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXNzZXJ0Tm9kZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34568\n')},72246:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.assertAccessor = assertAccessor;\nexports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;\nexports.assertArgumentPlaceholder = assertArgumentPlaceholder;\nexports.assertArrayExpression = assertArrayExpression;\nexports.assertArrayPattern = assertArrayPattern;\nexports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;\nexports.assertArrowFunctionExpression = assertArrowFunctionExpression;\nexports.assertAssignmentExpression = assertAssignmentExpression;\nexports.assertAssignmentPattern = assertAssignmentPattern;\nexports.assertAwaitExpression = assertAwaitExpression;\nexports.assertBigIntLiteral = assertBigIntLiteral;\nexports.assertBinary = assertBinary;\nexports.assertBinaryExpression = assertBinaryExpression;\nexports.assertBindExpression = assertBindExpression;\nexports.assertBlock = assertBlock;\nexports.assertBlockParent = assertBlockParent;\nexports.assertBlockStatement = assertBlockStatement;\nexports.assertBooleanLiteral = assertBooleanLiteral;\nexports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;\nexports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;\nexports.assertBreakStatement = assertBreakStatement;\nexports.assertCallExpression = assertCallExpression;\nexports.assertCatchClause = assertCatchClause;\nexports.assertClass = assertClass;\nexports.assertClassAccessorProperty = assertClassAccessorProperty;\nexports.assertClassBody = assertClassBody;\nexports.assertClassDeclaration = assertClassDeclaration;\nexports.assertClassExpression = assertClassExpression;\nexports.assertClassImplements = assertClassImplements;\nexports.assertClassMethod = assertClassMethod;\nexports.assertClassPrivateMethod = assertClassPrivateMethod;\nexports.assertClassPrivateProperty = assertClassPrivateProperty;\nexports.assertClassProperty = assertClassProperty;\nexports.assertCompletionStatement = assertCompletionStatement;\nexports.assertConditional = assertConditional;\nexports.assertConditionalExpression = assertConditionalExpression;\nexports.assertContinueStatement = assertContinueStatement;\nexports.assertDebuggerStatement = assertDebuggerStatement;\nexports.assertDecimalLiteral = assertDecimalLiteral;\nexports.assertDeclaration = assertDeclaration;\nexports.assertDeclareClass = assertDeclareClass;\nexports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;\nexports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;\nexports.assertDeclareFunction = assertDeclareFunction;\nexports.assertDeclareInterface = assertDeclareInterface;\nexports.assertDeclareModule = assertDeclareModule;\nexports.assertDeclareModuleExports = assertDeclareModuleExports;\nexports.assertDeclareOpaqueType = assertDeclareOpaqueType;\nexports.assertDeclareTypeAlias = assertDeclareTypeAlias;\nexports.assertDeclareVariable = assertDeclareVariable;\nexports.assertDeclaredPredicate = assertDeclaredPredicate;\nexports.assertDecorator = assertDecorator;\nexports.assertDirective = assertDirective;\nexports.assertDirectiveLiteral = assertDirectiveLiteral;\nexports.assertDoExpression = assertDoExpression;\nexports.assertDoWhileStatement = assertDoWhileStatement;\nexports.assertEmptyStatement = assertEmptyStatement;\nexports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;\nexports.assertEnumBody = assertEnumBody;\nexports.assertEnumBooleanBody = assertEnumBooleanBody;\nexports.assertEnumBooleanMember = assertEnumBooleanMember;\nexports.assertEnumDeclaration = assertEnumDeclaration;\nexports.assertEnumDefaultedMember = assertEnumDefaultedMember;\nexports.assertEnumMember = assertEnumMember;\nexports.assertEnumNumberBody = assertEnumNumberBody;\nexports.assertEnumNumberMember = assertEnumNumberMember;\nexports.assertEnumStringBody = assertEnumStringBody;\nexports.assertEnumStringMember = assertEnumStringMember;\nexports.assertEnumSymbolBody = assertEnumSymbolBody;\nexports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;\nexports.assertExportAllDeclaration = assertExportAllDeclaration;\nexports.assertExportDeclaration = assertExportDeclaration;\nexports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;\nexports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;\nexports.assertExportNamedDeclaration = assertExportNamedDeclaration;\nexports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;\nexports.assertExportSpecifier = assertExportSpecifier;\nexports.assertExpression = assertExpression;\nexports.assertExpressionStatement = assertExpressionStatement;\nexports.assertExpressionWrapper = assertExpressionWrapper;\nexports.assertFile = assertFile;\nexports.assertFlow = assertFlow;\nexports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;\nexports.assertFlowDeclaration = assertFlowDeclaration;\nexports.assertFlowPredicate = assertFlowPredicate;\nexports.assertFlowType = assertFlowType;\nexports.assertFor = assertFor;\nexports.assertForInStatement = assertForInStatement;\nexports.assertForOfStatement = assertForOfStatement;\nexports.assertForStatement = assertForStatement;\nexports.assertForXStatement = assertForXStatement;\nexports.assertFunction = assertFunction;\nexports.assertFunctionDeclaration = assertFunctionDeclaration;\nexports.assertFunctionExpression = assertFunctionExpression;\nexports.assertFunctionParent = assertFunctionParent;\nexports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;\nexports.assertFunctionTypeParam = assertFunctionTypeParam;\nexports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;\nexports.assertIdentifier = assertIdentifier;\nexports.assertIfStatement = assertIfStatement;\nexports.assertImmutable = assertImmutable;\nexports.assertImport = assertImport;\nexports.assertImportAttribute = assertImportAttribute;\nexports.assertImportDeclaration = assertImportDeclaration;\nexports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;\nexports.assertImportExpression = assertImportExpression;\nexports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;\nexports.assertImportOrExportDeclaration = assertImportOrExportDeclaration;\nexports.assertImportSpecifier = assertImportSpecifier;\nexports.assertIndexedAccessType = assertIndexedAccessType;\nexports.assertInferredPredicate = assertInferredPredicate;\nexports.assertInterfaceDeclaration = assertInterfaceDeclaration;\nexports.assertInterfaceExtends = assertInterfaceExtends;\nexports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;\nexports.assertInterpreterDirective = assertInterpreterDirective;\nexports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;\nexports.assertJSX = assertJSX;\nexports.assertJSXAttribute = assertJSXAttribute;\nexports.assertJSXClosingElement = assertJSXClosingElement;\nexports.assertJSXClosingFragment = assertJSXClosingFragment;\nexports.assertJSXElement = assertJSXElement;\nexports.assertJSXEmptyExpression = assertJSXEmptyExpression;\nexports.assertJSXExpressionContainer = assertJSXExpressionContainer;\nexports.assertJSXFragment = assertJSXFragment;\nexports.assertJSXIdentifier = assertJSXIdentifier;\nexports.assertJSXMemberExpression = assertJSXMemberExpression;\nexports.assertJSXNamespacedName = assertJSXNamespacedName;\nexports.assertJSXOpeningElement = assertJSXOpeningElement;\nexports.assertJSXOpeningFragment = assertJSXOpeningFragment;\nexports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;\nexports.assertJSXSpreadChild = assertJSXSpreadChild;\nexports.assertJSXText = assertJSXText;\nexports.assertLVal = assertLVal;\nexports.assertLabeledStatement = assertLabeledStatement;\nexports.assertLiteral = assertLiteral;\nexports.assertLogicalExpression = assertLogicalExpression;\nexports.assertLoop = assertLoop;\nexports.assertMemberExpression = assertMemberExpression;\nexports.assertMetaProperty = assertMetaProperty;\nexports.assertMethod = assertMethod;\nexports.assertMiscellaneous = assertMiscellaneous;\nexports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;\nexports.assertModuleDeclaration = assertModuleDeclaration;\nexports.assertModuleExpression = assertModuleExpression;\nexports.assertModuleSpecifier = assertModuleSpecifier;\nexports.assertNewExpression = assertNewExpression;\nexports.assertNoop = assertNoop;\nexports.assertNullLiteral = assertNullLiteral;\nexports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;\nexports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;\nexports.assertNumberLiteral = assertNumberLiteral;\nexports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;\nexports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;\nexports.assertNumericLiteral = assertNumericLiteral;\nexports.assertObjectExpression = assertObjectExpression;\nexports.assertObjectMember = assertObjectMember;\nexports.assertObjectMethod = assertObjectMethod;\nexports.assertObjectPattern = assertObjectPattern;\nexports.assertObjectProperty = assertObjectProperty;\nexports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;\nexports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;\nexports.assertObjectTypeIndexer = assertObjectTypeIndexer;\nexports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;\nexports.assertObjectTypeProperty = assertObjectTypeProperty;\nexports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;\nexports.assertOpaqueType = assertOpaqueType;\nexports.assertOptionalCallExpression = assertOptionalCallExpression;\nexports.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;\nexports.assertOptionalMemberExpression = assertOptionalMemberExpression;\nexports.assertParenthesizedExpression = assertParenthesizedExpression;\nexports.assertPattern = assertPattern;\nexports.assertPatternLike = assertPatternLike;\nexports.assertPipelineBareFunction = assertPipelineBareFunction;\nexports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;\nexports.assertPipelineTopicExpression = assertPipelineTopicExpression;\nexports.assertPlaceholder = assertPlaceholder;\nexports.assertPrivate = assertPrivate;\nexports.assertPrivateName = assertPrivateName;\nexports.assertProgram = assertProgram;\nexports.assertProperty = assertProperty;\nexports.assertPureish = assertPureish;\nexports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;\nexports.assertRecordExpression = assertRecordExpression;\nexports.assertRegExpLiteral = assertRegExpLiteral;\nexports.assertRegexLiteral = assertRegexLiteral;\nexports.assertRestElement = assertRestElement;\nexports.assertRestProperty = assertRestProperty;\nexports.assertReturnStatement = assertReturnStatement;\nexports.assertScopable = assertScopable;\nexports.assertSequenceExpression = assertSequenceExpression;\nexports.assertSpreadElement = assertSpreadElement;\nexports.assertSpreadProperty = assertSpreadProperty;\nexports.assertStandardized = assertStandardized;\nexports.assertStatement = assertStatement;\nexports.assertStaticBlock = assertStaticBlock;\nexports.assertStringLiteral = assertStringLiteral;\nexports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;\nexports.assertStringTypeAnnotation = assertStringTypeAnnotation;\nexports.assertSuper = assertSuper;\nexports.assertSwitchCase = assertSwitchCase;\nexports.assertSwitchStatement = assertSwitchStatement;\nexports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;\nexports.assertTSAnyKeyword = assertTSAnyKeyword;\nexports.assertTSArrayType = assertTSArrayType;\nexports.assertTSAsExpression = assertTSAsExpression;\nexports.assertTSBaseType = assertTSBaseType;\nexports.assertTSBigIntKeyword = assertTSBigIntKeyword;\nexports.assertTSBooleanKeyword = assertTSBooleanKeyword;\nexports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;\nexports.assertTSConditionalType = assertTSConditionalType;\nexports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;\nexports.assertTSConstructorType = assertTSConstructorType;\nexports.assertTSDeclareFunction = assertTSDeclareFunction;\nexports.assertTSDeclareMethod = assertTSDeclareMethod;\nexports.assertTSEntityName = assertTSEntityName;\nexports.assertTSEnumDeclaration = assertTSEnumDeclaration;\nexports.assertTSEnumMember = assertTSEnumMember;\nexports.assertTSExportAssignment = assertTSExportAssignment;\nexports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;\nexports.assertTSExternalModuleReference = assertTSExternalModuleReference;\nexports.assertTSFunctionType = assertTSFunctionType;\nexports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;\nexports.assertTSImportType = assertTSImportType;\nexports.assertTSIndexSignature = assertTSIndexSignature;\nexports.assertTSIndexedAccessType = assertTSIndexedAccessType;\nexports.assertTSInferType = assertTSInferType;\nexports.assertTSInstantiationExpression = assertTSInstantiationExpression;\nexports.assertTSInterfaceBody = assertTSInterfaceBody;\nexports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;\nexports.assertTSIntersectionType = assertTSIntersectionType;\nexports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;\nexports.assertTSLiteralType = assertTSLiteralType;\nexports.assertTSMappedType = assertTSMappedType;\nexports.assertTSMethodSignature = assertTSMethodSignature;\nexports.assertTSModuleBlock = assertTSModuleBlock;\nexports.assertTSModuleDeclaration = assertTSModuleDeclaration;\nexports.assertTSNamedTupleMember = assertTSNamedTupleMember;\nexports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;\nexports.assertTSNeverKeyword = assertTSNeverKeyword;\nexports.assertTSNonNullExpression = assertTSNonNullExpression;\nexports.assertTSNullKeyword = assertTSNullKeyword;\nexports.assertTSNumberKeyword = assertTSNumberKeyword;\nexports.assertTSObjectKeyword = assertTSObjectKeyword;\nexports.assertTSOptionalType = assertTSOptionalType;\nexports.assertTSParameterProperty = assertTSParameterProperty;\nexports.assertTSParenthesizedType = assertTSParenthesizedType;\nexports.assertTSPropertySignature = assertTSPropertySignature;\nexports.assertTSQualifiedName = assertTSQualifiedName;\nexports.assertTSRestType = assertTSRestType;\nexports.assertTSSatisfiesExpression = assertTSSatisfiesExpression;\nexports.assertTSStringKeyword = assertTSStringKeyword;\nexports.assertTSSymbolKeyword = assertTSSymbolKeyword;\nexports.assertTSThisType = assertTSThisType;\nexports.assertTSTupleType = assertTSTupleType;\nexports.assertTSType = assertTSType;\nexports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;\nexports.assertTSTypeAnnotation = assertTSTypeAnnotation;\nexports.assertTSTypeAssertion = assertTSTypeAssertion;\nexports.assertTSTypeElement = assertTSTypeElement;\nexports.assertTSTypeLiteral = assertTSTypeLiteral;\nexports.assertTSTypeOperator = assertTSTypeOperator;\nexports.assertTSTypeParameter = assertTSTypeParameter;\nexports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;\nexports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;\nexports.assertTSTypePredicate = assertTSTypePredicate;\nexports.assertTSTypeQuery = assertTSTypeQuery;\nexports.assertTSTypeReference = assertTSTypeReference;\nexports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;\nexports.assertTSUnionType = assertTSUnionType;\nexports.assertTSUnknownKeyword = assertTSUnknownKeyword;\nexports.assertTSVoidKeyword = assertTSVoidKeyword;\nexports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;\nexports.assertTemplateElement = assertTemplateElement;\nexports.assertTemplateLiteral = assertTemplateLiteral;\nexports.assertTerminatorless = assertTerminatorless;\nexports.assertThisExpression = assertThisExpression;\nexports.assertThisTypeAnnotation = assertThisTypeAnnotation;\nexports.assertThrowStatement = assertThrowStatement;\nexports.assertTopicReference = assertTopicReference;\nexports.assertTryStatement = assertTryStatement;\nexports.assertTupleExpression = assertTupleExpression;\nexports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;\nexports.assertTypeAlias = assertTypeAlias;\nexports.assertTypeAnnotation = assertTypeAnnotation;\nexports.assertTypeCastExpression = assertTypeCastExpression;\nexports.assertTypeParameter = assertTypeParameter;\nexports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;\nexports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;\nexports.assertTypeScript = assertTypeScript;\nexports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;\nexports.assertUnaryExpression = assertUnaryExpression;\nexports.assertUnaryLike = assertUnaryLike;\nexports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;\nexports.assertUpdateExpression = assertUpdateExpression;\nexports.assertUserWhitespacable = assertUserWhitespacable;\nexports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;\nexports.assertVariableDeclaration = assertVariableDeclaration;\nexports.assertVariableDeclarator = assertVariableDeclarator;\nexports.assertVariance = assertVariance;\nexports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;\nexports.assertWhile = assertWhile;\nexports.assertWhileStatement = assertWhileStatement;\nexports.assertWithStatement = assertWithStatement;\nexports.assertYieldExpression = assertYieldExpression;\nvar _is = __webpack_require__(93828);\nvar _deprecationWarning = __webpack_require__(63762);\nfunction assert(type, node, opts) {\n  if (!(0, _is.default)(type, node, opts)) {\n    throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, ` + `but instead got "${node.type}".`);\n  }\n}\nfunction assertArrayExpression(node, opts) {\n  assert("ArrayExpression", node, opts);\n}\nfunction assertAssignmentExpression(node, opts) {\n  assert("AssignmentExpression", node, opts);\n}\nfunction assertBinaryExpression(node, opts) {\n  assert("BinaryExpression", node, opts);\n}\nfunction assertInterpreterDirective(node, opts) {\n  assert("InterpreterDirective", node, opts);\n}\nfunction assertDirective(node, opts) {\n  assert("Directive", node, opts);\n}\nfunction assertDirectiveLiteral(node, opts) {\n  assert("DirectiveLiteral", node, opts);\n}\nfunction assertBlockStatement(node, opts) {\n  assert("BlockStatement", node, opts);\n}\nfunction assertBreakStatement(node, opts) {\n  assert("BreakStatement", node, opts);\n}\nfunction assertCallExpression(node, opts) {\n  assert("CallExpression", node, opts);\n}\nfunction assertCatchClause(node, opts) {\n  assert("CatchClause", node, opts);\n}\nfunction assertConditionalExpression(node, opts) {\n  assert("ConditionalExpression", node, opts);\n}\nfunction assertContinueStatement(node, opts) {\n  assert("ContinueStatement", node, opts);\n}\nfunction assertDebuggerStatement(node, opts) {\n  assert("DebuggerStatement", node, opts);\n}\nfunction assertDoWhileStatement(node, opts) {\n  assert("DoWhileStatement", node, opts);\n}\nfunction assertEmptyStatement(node, opts) {\n  assert("EmptyStatement", node, opts);\n}\nfunction assertExpressionStatement(node, opts) {\n  assert("ExpressionStatement", node, opts);\n}\nfunction assertFile(node, opts) {\n  assert("File", node, opts);\n}\nfunction assertForInStatement(node, opts) {\n  assert("ForInStatement", node, opts);\n}\nfunction assertForStatement(node, opts) {\n  assert("ForStatement", node, opts);\n}\nfunction assertFunctionDeclaration(node, opts) {\n  assert("FunctionDeclaration", node, opts);\n}\nfunction assertFunctionExpression(node, opts) {\n  assert("FunctionExpression", node, opts);\n}\nfunction assertIdentifier(node, opts) {\n  assert("Identifier", node, opts);\n}\nfunction assertIfStatement(node, opts) {\n  assert("IfStatement", node, opts);\n}\nfunction assertLabeledStatement(node, opts) {\n  assert("LabeledStatement", node, opts);\n}\nfunction assertStringLiteral(node, opts) {\n  assert("StringLiteral", node, opts);\n}\nfunction assertNumericLiteral(node, opts) {\n  assert("NumericLiteral", node, opts);\n}\nfunction assertNullLiteral(node, opts) {\n  assert("NullLiteral", node, opts);\n}\nfunction assertBooleanLiteral(node, opts) {\n  assert("BooleanLiteral", node, opts);\n}\nfunction assertRegExpLiteral(node, opts) {\n  assert("RegExpLiteral", node, opts);\n}\nfunction assertLogicalExpression(node, opts) {\n  assert("LogicalExpression", node, opts);\n}\nfunction assertMemberExpression(node, opts) {\n  assert("MemberExpression", node, opts);\n}\nfunction assertNewExpression(node, opts) {\n  assert("NewExpression", node, opts);\n}\nfunction assertProgram(node, opts) {\n  assert("Program", node, opts);\n}\nfunction assertObjectExpression(node, opts) {\n  assert("ObjectExpression", node, opts);\n}\nfunction assertObjectMethod(node, opts) {\n  assert("ObjectMethod", node, opts);\n}\nfunction assertObjectProperty(node, opts) {\n  assert("ObjectProperty", node, opts);\n}\nfunction assertRestElement(node, opts) {\n  assert("RestElement", node, opts);\n}\nfunction assertReturnStatement(node, opts) {\n  assert("ReturnStatement", node, opts);\n}\nfunction assertSequenceExpression(node, opts) {\n  assert("SequenceExpression", node, opts);\n}\nfunction assertParenthesizedExpression(node, opts) {\n  assert("ParenthesizedExpression", node, opts);\n}\nfunction assertSwitchCase(node, opts) {\n  assert("SwitchCase", node, opts);\n}\nfunction assertSwitchStatement(node, opts) {\n  assert("SwitchStatement", node, opts);\n}\nfunction assertThisExpression(node, opts) {\n  assert("ThisExpression", node, opts);\n}\nfunction assertThrowStatement(node, opts) {\n  assert("ThrowStatement", node, opts);\n}\nfunction assertTryStatement(node, opts) {\n  assert("TryStatement", node, opts);\n}\nfunction assertUnaryExpression(node, opts) {\n  assert("UnaryExpression", node, opts);\n}\nfunction assertUpdateExpression(node, opts) {\n  assert("UpdateExpression", node, opts);\n}\nfunction assertVariableDeclaration(node, opts) {\n  assert("VariableDeclaration", node, opts);\n}\nfunction assertVariableDeclarator(node, opts) {\n  assert("VariableDeclarator", node, opts);\n}\nfunction assertWhileStatement(node, opts) {\n  assert("WhileStatement", node, opts);\n}\nfunction assertWithStatement(node, opts) {\n  assert("WithStatement", node, opts);\n}\nfunction assertAssignmentPattern(node, opts) {\n  assert("AssignmentPattern", node, opts);\n}\nfunction assertArrayPattern(node, opts) {\n  assert("ArrayPattern", node, opts);\n}\nfunction assertArrowFunctionExpression(node, opts) {\n  assert("ArrowFunctionExpression", node, opts);\n}\nfunction assertClassBody(node, opts) {\n  assert("ClassBody", node, opts);\n}\nfunction assertClassExpression(node, opts) {\n  assert("ClassExpression", node, opts);\n}\nfunction assertClassDeclaration(node, opts) {\n  assert("ClassDeclaration", node, opts);\n}\nfunction assertExportAllDeclaration(node, opts) {\n  assert("ExportAllDeclaration", node, opts);\n}\nfunction assertExportDefaultDeclaration(node, opts) {\n  assert("ExportDefaultDeclaration", node, opts);\n}\nfunction assertExportNamedDeclaration(node, opts) {\n  assert("ExportNamedDeclaration", node, opts);\n}\nfunction assertExportSpecifier(node, opts) {\n  assert("ExportSpecifier", node, opts);\n}\nfunction assertForOfStatement(node, opts) {\n  assert("ForOfStatement", node, opts);\n}\nfunction assertImportDeclaration(node, opts) {\n  assert("ImportDeclaration", node, opts);\n}\nfunction assertImportDefaultSpecifier(node, opts) {\n  assert("ImportDefaultSpecifier", node, opts);\n}\nfunction assertImportNamespaceSpecifier(node, opts) {\n  assert("ImportNamespaceSpecifier", node, opts);\n}\nfunction assertImportSpecifier(node, opts) {\n  assert("ImportSpecifier", node, opts);\n}\nfunction assertImportExpression(node, opts) {\n  assert("ImportExpression", node, opts);\n}\nfunction assertMetaProperty(node, opts) {\n  assert("MetaProperty", node, opts);\n}\nfunction assertClassMethod(node, opts) {\n  assert("ClassMethod", node, opts);\n}\nfunction assertObjectPattern(node, opts) {\n  assert("ObjectPattern", node, opts);\n}\nfunction assertSpreadElement(node, opts) {\n  assert("SpreadElement", node, opts);\n}\nfunction assertSuper(node, opts) {\n  assert("Super", node, opts);\n}\nfunction assertTaggedTemplateExpression(node, opts) {\n  assert("TaggedTemplateExpression", node, opts);\n}\nfunction assertTemplateElement(node, opts) {\n  assert("TemplateElement", node, opts);\n}\nfunction assertTemplateLiteral(node, opts) {\n  assert("TemplateLiteral", node, opts);\n}\nfunction assertYieldExpression(node, opts) {\n  assert("YieldExpression", node, opts);\n}\nfunction assertAwaitExpression(node, opts) {\n  assert("AwaitExpression", node, opts);\n}\nfunction assertImport(node, opts) {\n  assert("Import", node, opts);\n}\nfunction assertBigIntLiteral(node, opts) {\n  assert("BigIntLiteral", node, opts);\n}\nfunction assertExportNamespaceSpecifier(node, opts) {\n  assert("ExportNamespaceSpecifier", node, opts);\n}\nfunction assertOptionalMemberExpression(node, opts) {\n  assert("OptionalMemberExpression", node, opts);\n}\nfunction assertOptionalCallExpression(node, opts) {\n  assert("OptionalCallExpression", node, opts);\n}\nfunction assertClassProperty(node, opts) {\n  assert("ClassProperty", node, opts);\n}\nfunction assertClassAccessorProperty(node, opts) {\n  assert("ClassAccessorProperty", node, opts);\n}\nfunction assertClassPrivateProperty(node, opts) {\n  assert("ClassPrivateProperty", node, opts);\n}\nfunction assertClassPrivateMethod(node, opts) {\n  assert("ClassPrivateMethod", node, opts);\n}\nfunction assertPrivateName(node, opts) {\n  assert("PrivateName", node, opts);\n}\nfunction assertStaticBlock(node, opts) {\n  assert("StaticBlock", node, opts);\n}\nfunction assertAnyTypeAnnotation(node, opts) {\n  assert("AnyTypeAnnotation", node, opts);\n}\nfunction assertArrayTypeAnnotation(node, opts) {\n  assert("ArrayTypeAnnotation", node, opts);\n}\nfunction assertBooleanTypeAnnotation(node, opts) {\n  assert("BooleanTypeAnnotation", node, opts);\n}\nfunction assertBooleanLiteralTypeAnnotation(node, opts) {\n  assert("BooleanLiteralTypeAnnotation", node, opts);\n}\nfunction assertNullLiteralTypeAnnotation(node, opts) {\n  assert("NullLiteralTypeAnnotation", node, opts);\n}\nfunction assertClassImplements(node, opts) {\n  assert("ClassImplements", node, opts);\n}\nfunction assertDeclareClass(node, opts) {\n  assert("DeclareClass", node, opts);\n}\nfunction assertDeclareFunction(node, opts) {\n  assert("DeclareFunction", node, opts);\n}\nfunction assertDeclareInterface(node, opts) {\n  assert("DeclareInterface", node, opts);\n}\nfunction assertDeclareModule(node, opts) {\n  assert("DeclareModule", node, opts);\n}\nfunction assertDeclareModuleExports(node, opts) {\n  assert("DeclareModuleExports", node, opts);\n}\nfunction assertDeclareTypeAlias(node, opts) {\n  assert("DeclareTypeAlias", node, opts);\n}\nfunction assertDeclareOpaqueType(node, opts) {\n  assert("DeclareOpaqueType", node, opts);\n}\nfunction assertDeclareVariable(node, opts) {\n  assert("DeclareVariable", node, opts);\n}\nfunction assertDeclareExportDeclaration(node, opts) {\n  assert("DeclareExportDeclaration", node, opts);\n}\nfunction assertDeclareExportAllDeclaration(node, opts) {\n  assert("DeclareExportAllDeclaration", node, opts);\n}\nfunction assertDeclaredPredicate(node, opts) {\n  assert("DeclaredPredicate", node, opts);\n}\nfunction assertExistsTypeAnnotation(node, opts) {\n  assert("ExistsTypeAnnotation", node, opts);\n}\nfunction assertFunctionTypeAnnotation(node, opts) {\n  assert("FunctionTypeAnnotation", node, opts);\n}\nfunction assertFunctionTypeParam(node, opts) {\n  assert("FunctionTypeParam", node, opts);\n}\nfunction assertGenericTypeAnnotation(node, opts) {\n  assert("GenericTypeAnnotation", node, opts);\n}\nfunction assertInferredPredicate(node, opts) {\n  assert("InferredPredicate", node, opts);\n}\nfunction assertInterfaceExtends(node, opts) {\n  assert("InterfaceExtends", node, opts);\n}\nfunction assertInterfaceDeclaration(node, opts) {\n  assert("InterfaceDeclaration", node, opts);\n}\nfunction assertInterfaceTypeAnnotation(node, opts) {\n  assert("InterfaceTypeAnnotation", node, opts);\n}\nfunction assertIntersectionTypeAnnotation(node, opts) {\n  assert("IntersectionTypeAnnotation", node, opts);\n}\nfunction assertMixedTypeAnnotation(node, opts) {\n  assert("MixedTypeAnnotation", node, opts);\n}\nfunction assertEmptyTypeAnnotation(node, opts) {\n  assert("EmptyTypeAnnotation", node, opts);\n}\nfunction assertNullableTypeAnnotation(node, opts) {\n  assert("NullableTypeAnnotation", node, opts);\n}\nfunction assertNumberLiteralTypeAnnotation(node, opts) {\n  assert("NumberLiteralTypeAnnotation", node, opts);\n}\nfunction assertNumberTypeAnnotation(node, opts) {\n  assert("NumberTypeAnnotation", node, opts);\n}\nfunction assertObjectTypeAnnotation(node, opts) {\n  assert("ObjectTypeAnnotation", node, opts);\n}\nfunction assertObjectTypeInternalSlot(node, opts) {\n  assert("ObjectTypeInternalSlot", node, opts);\n}\nfunction assertObjectTypeCallProperty(node, opts) {\n  assert("ObjectTypeCallProperty", node, opts);\n}\nfunction assertObjectTypeIndexer(node, opts) {\n  assert("ObjectTypeIndexer", node, opts);\n}\nfunction assertObjectTypeProperty(node, opts) {\n  assert("ObjectTypeProperty", node, opts);\n}\nfunction assertObjectTypeSpreadProperty(node, opts) {\n  assert("ObjectTypeSpreadProperty", node, opts);\n}\nfunction assertOpaqueType(node, opts) {\n  assert("OpaqueType", node, opts);\n}\nfunction assertQualifiedTypeIdentifier(node, opts) {\n  assert("QualifiedTypeIdentifier", node, opts);\n}\nfunction assertStringLiteralTypeAnnotation(node, opts) {\n  assert("StringLiteralTypeAnnotation", node, opts);\n}\nfunction assertStringTypeAnnotation(node, opts) {\n  assert("StringTypeAnnotation", node, opts);\n}\nfunction assertSymbolTypeAnnotation(node, opts) {\n  assert("SymbolTypeAnnotation", node, opts);\n}\nfunction assertThisTypeAnnotation(node, opts) {\n  assert("ThisTypeAnnotation", node, opts);\n}\nfunction assertTupleTypeAnnotation(node, opts) {\n  assert("TupleTypeAnnotation", node, opts);\n}\nfunction assertTypeofTypeAnnotation(node, opts) {\n  assert("TypeofTypeAnnotation", node, opts);\n}\nfunction assertTypeAlias(node, opts) {\n  assert("TypeAlias", node, opts);\n}\nfunction assertTypeAnnotation(node, opts) {\n  assert("TypeAnnotation", node, opts);\n}\nfunction assertTypeCastExpression(node, opts) {\n  assert("TypeCastExpression", node, opts);\n}\nfunction assertTypeParameter(node, opts) {\n  assert("TypeParameter", node, opts);\n}\nfunction assertTypeParameterDeclaration(node, opts) {\n  assert("TypeParameterDeclaration", node, opts);\n}\nfunction assertTypeParameterInstantiation(node, opts) {\n  assert("TypeParameterInstantiation", node, opts);\n}\nfunction assertUnionTypeAnnotation(node, opts) {\n  assert("UnionTypeAnnotation", node, opts);\n}\nfunction assertVariance(node, opts) {\n  assert("Variance", node, opts);\n}\nfunction assertVoidTypeAnnotation(node, opts) {\n  assert("VoidTypeAnnotation", node, opts);\n}\nfunction assertEnumDeclaration(node, opts) {\n  assert("EnumDeclaration", node, opts);\n}\nfunction assertEnumBooleanBody(node, opts) {\n  assert("EnumBooleanBody", node, opts);\n}\nfunction assertEnumNumberBody(node, opts) {\n  assert("EnumNumberBody", node, opts);\n}\nfunction assertEnumStringBody(node, opts) {\n  assert("EnumStringBody", node, opts);\n}\nfunction assertEnumSymbolBody(node, opts) {\n  assert("EnumSymbolBody", node, opts);\n}\nfunction assertEnumBooleanMember(node, opts) {\n  assert("EnumBooleanMember", node, opts);\n}\nfunction assertEnumNumberMember(node, opts) {\n  assert("EnumNumberMember", node, opts);\n}\nfunction assertEnumStringMember(node, opts) {\n  assert("EnumStringMember", node, opts);\n}\nfunction assertEnumDefaultedMember(node, opts) {\n  assert("EnumDefaultedMember", node, opts);\n}\nfunction assertIndexedAccessType(node, opts) {\n  assert("IndexedAccessType", node, opts);\n}\nfunction assertOptionalIndexedAccessType(node, opts) {\n  assert("OptionalIndexedAccessType", node, opts);\n}\nfunction assertJSXAttribute(node, opts) {\n  assert("JSXAttribute", node, opts);\n}\nfunction assertJSXClosingElement(node, opts) {\n  assert("JSXClosingElement", node, opts);\n}\nfunction assertJSXElement(node, opts) {\n  assert("JSXElement", node, opts);\n}\nfunction assertJSXEmptyExpression(node, opts) {\n  assert("JSXEmptyExpression", node, opts);\n}\nfunction assertJSXExpressionContainer(node, opts) {\n  assert("JSXExpressionContainer", node, opts);\n}\nfunction assertJSXSpreadChild(node, opts) {\n  assert("JSXSpreadChild", node, opts);\n}\nfunction assertJSXIdentifier(node, opts) {\n  assert("JSXIdentifier", node, opts);\n}\nfunction assertJSXMemberExpression(node, opts) {\n  assert("JSXMemberExpression", node, opts);\n}\nfunction assertJSXNamespacedName(node, opts) {\n  assert("JSXNamespacedName", node, opts);\n}\nfunction assertJSXOpeningElement(node, opts) {\n  assert("JSXOpeningElement", node, opts);\n}\nfunction assertJSXSpreadAttribute(node, opts) {\n  assert("JSXSpreadAttribute", node, opts);\n}\nfunction assertJSXText(node, opts) {\n  assert("JSXText", node, opts);\n}\nfunction assertJSXFragment(node, opts) {\n  assert("JSXFragment", node, opts);\n}\nfunction assertJSXOpeningFragment(node, opts) {\n  assert("JSXOpeningFragment", node, opts);\n}\nfunction assertJSXClosingFragment(node, opts) {\n  assert("JSXClosingFragment", node, opts);\n}\nfunction assertNoop(node, opts) {\n  assert("Noop", node, opts);\n}\nfunction assertPlaceholder(node, opts) {\n  assert("Placeholder", node, opts);\n}\nfunction assertV8IntrinsicIdentifier(node, opts) {\n  assert("V8IntrinsicIdentifier", node, opts);\n}\nfunction assertArgumentPlaceholder(node, opts) {\n  assert("ArgumentPlaceholder", node, opts);\n}\nfunction assertBindExpression(node, opts) {\n  assert("BindExpression", node, opts);\n}\nfunction assertImportAttribute(node, opts) {\n  assert("ImportAttribute", node, opts);\n}\nfunction assertDecorator(node, opts) {\n  assert("Decorator", node, opts);\n}\nfunction assertDoExpression(node, opts) {\n  assert("DoExpression", node, opts);\n}\nfunction assertExportDefaultSpecifier(node, opts) {\n  assert("ExportDefaultSpecifier", node, opts);\n}\nfunction assertRecordExpression(node, opts) {\n  assert("RecordExpression", node, opts);\n}\nfunction assertTupleExpression(node, opts) {\n  assert("TupleExpression", node, opts);\n}\nfunction assertDecimalLiteral(node, opts) {\n  assert("DecimalLiteral", node, opts);\n}\nfunction assertModuleExpression(node, opts) {\n  assert("ModuleExpression", node, opts);\n}\nfunction assertTopicReference(node, opts) {\n  assert("TopicReference", node, opts);\n}\nfunction assertPipelineTopicExpression(node, opts) {\n  assert("PipelineTopicExpression", node, opts);\n}\nfunction assertPipelineBareFunction(node, opts) {\n  assert("PipelineBareFunction", node, opts);\n}\nfunction assertPipelinePrimaryTopicReference(node, opts) {\n  assert("PipelinePrimaryTopicReference", node, opts);\n}\nfunction assertTSParameterProperty(node, opts) {\n  assert("TSParameterProperty", node, opts);\n}\nfunction assertTSDeclareFunction(node, opts) {\n  assert("TSDeclareFunction", node, opts);\n}\nfunction assertTSDeclareMethod(node, opts) {\n  assert("TSDeclareMethod", node, opts);\n}\nfunction assertTSQualifiedName(node, opts) {\n  assert("TSQualifiedName", node, opts);\n}\nfunction assertTSCallSignatureDeclaration(node, opts) {\n  assert("TSCallSignatureDeclaration", node, opts);\n}\nfunction assertTSConstructSignatureDeclaration(node, opts) {\n  assert("TSConstructSignatureDeclaration", node, opts);\n}\nfunction assertTSPropertySignature(node, opts) {\n  assert("TSPropertySignature", node, opts);\n}\nfunction assertTSMethodSignature(node, opts) {\n  assert("TSMethodSignature", node, opts);\n}\nfunction assertTSIndexSignature(node, opts) {\n  assert("TSIndexSignature", node, opts);\n}\nfunction assertTSAnyKeyword(node, opts) {\n  assert("TSAnyKeyword", node, opts);\n}\nfunction assertTSBooleanKeyword(node, opts) {\n  assert("TSBooleanKeyword", node, opts);\n}\nfunction assertTSBigIntKeyword(node, opts) {\n  assert("TSBigIntKeyword", node, opts);\n}\nfunction assertTSIntrinsicKeyword(node, opts) {\n  assert("TSIntrinsicKeyword", node, opts);\n}\nfunction assertTSNeverKeyword(node, opts) {\n  assert("TSNeverKeyword", node, opts);\n}\nfunction assertTSNullKeyword(node, opts) {\n  assert("TSNullKeyword", node, opts);\n}\nfunction assertTSNumberKeyword(node, opts) {\n  assert("TSNumberKeyword", node, opts);\n}\nfunction assertTSObjectKeyword(node, opts) {\n  assert("TSObjectKeyword", node, opts);\n}\nfunction assertTSStringKeyword(node, opts) {\n  assert("TSStringKeyword", node, opts);\n}\nfunction assertTSSymbolKeyword(node, opts) {\n  assert("TSSymbolKeyword", node, opts);\n}\nfunction assertTSUndefinedKeyword(node, opts) {\n  assert("TSUndefinedKeyword", node, opts);\n}\nfunction assertTSUnknownKeyword(node, opts) {\n  assert("TSUnknownKeyword", node, opts);\n}\nfunction assertTSVoidKeyword(node, opts) {\n  assert("TSVoidKeyword", node, opts);\n}\nfunction assertTSThisType(node, opts) {\n  assert("TSThisType", node, opts);\n}\nfunction assertTSFunctionType(node, opts) {\n  assert("TSFunctionType", node, opts);\n}\nfunction assertTSConstructorType(node, opts) {\n  assert("TSConstructorType", node, opts);\n}\nfunction assertTSTypeReference(node, opts) {\n  assert("TSTypeReference", node, opts);\n}\nfunction assertTSTypePredicate(node, opts) {\n  assert("TSTypePredicate", node, opts);\n}\nfunction assertTSTypeQuery(node, opts) {\n  assert("TSTypeQuery", node, opts);\n}\nfunction assertTSTypeLiteral(node, opts) {\n  assert("TSTypeLiteral", node, opts);\n}\nfunction assertTSArrayType(node, opts) {\n  assert("TSArrayType", node, opts);\n}\nfunction assertTSTupleType(node, opts) {\n  assert("TSTupleType", node, opts);\n}\nfunction assertTSOptionalType(node, opts) {\n  assert("TSOptionalType", node, opts);\n}\nfunction assertTSRestType(node, opts) {\n  assert("TSRestType", node, opts);\n}\nfunction assertTSNamedTupleMember(node, opts) {\n  assert("TSNamedTupleMember", node, opts);\n}\nfunction assertTSUnionType(node, opts) {\n  assert("TSUnionType", node, opts);\n}\nfunction assertTSIntersectionType(node, opts) {\n  assert("TSIntersectionType", node, opts);\n}\nfunction assertTSConditionalType(node, opts) {\n  assert("TSConditionalType", node, opts);\n}\nfunction assertTSInferType(node, opts) {\n  assert("TSInferType", node, opts);\n}\nfunction assertTSParenthesizedType(node, opts) {\n  assert("TSParenthesizedType", node, opts);\n}\nfunction assertTSTypeOperator(node, opts) {\n  assert("TSTypeOperator", node, opts);\n}\nfunction assertTSIndexedAccessType(node, opts) {\n  assert("TSIndexedAccessType", node, opts);\n}\nfunction assertTSMappedType(node, opts) {\n  assert("TSMappedType", node, opts);\n}\nfunction assertTSLiteralType(node, opts) {\n  assert("TSLiteralType", node, opts);\n}\nfunction assertTSExpressionWithTypeArguments(node, opts) {\n  assert("TSExpressionWithTypeArguments", node, opts);\n}\nfunction assertTSInterfaceDeclaration(node, opts) {\n  assert("TSInterfaceDeclaration", node, opts);\n}\nfunction assertTSInterfaceBody(node, opts) {\n  assert("TSInterfaceBody", node, opts);\n}\nfunction assertTSTypeAliasDeclaration(node, opts) {\n  assert("TSTypeAliasDeclaration", node, opts);\n}\nfunction assertTSInstantiationExpression(node, opts) {\n  assert("TSInstantiationExpression", node, opts);\n}\nfunction assertTSAsExpression(node, opts) {\n  assert("TSAsExpression", node, opts);\n}\nfunction assertTSSatisfiesExpression(node, opts) {\n  assert("TSSatisfiesExpression", node, opts);\n}\nfunction assertTSTypeAssertion(node, opts) {\n  assert("TSTypeAssertion", node, opts);\n}\nfunction assertTSEnumDeclaration(node, opts) {\n  assert("TSEnumDeclaration", node, opts);\n}\nfunction assertTSEnumMember(node, opts) {\n  assert("TSEnumMember", node, opts);\n}\nfunction assertTSModuleDeclaration(node, opts) {\n  assert("TSModuleDeclaration", node, opts);\n}\nfunction assertTSModuleBlock(node, opts) {\n  assert("TSModuleBlock", node, opts);\n}\nfunction assertTSImportType(node, opts) {\n  assert("TSImportType", node, opts);\n}\nfunction assertTSImportEqualsDeclaration(node, opts) {\n  assert("TSImportEqualsDeclaration", node, opts);\n}\nfunction assertTSExternalModuleReference(node, opts) {\n  assert("TSExternalModuleReference", node, opts);\n}\nfunction assertTSNonNullExpression(node, opts) {\n  assert("TSNonNullExpression", node, opts);\n}\nfunction assertTSExportAssignment(node, opts) {\n  assert("TSExportAssignment", node, opts);\n}\nfunction assertTSNamespaceExportDeclaration(node, opts) {\n  assert("TSNamespaceExportDeclaration", node, opts);\n}\nfunction assertTSTypeAnnotation(node, opts) {\n  assert("TSTypeAnnotation", node, opts);\n}\nfunction assertTSTypeParameterInstantiation(node, opts) {\n  assert("TSTypeParameterInstantiation", node, opts);\n}\nfunction assertTSTypeParameterDeclaration(node, opts) {\n  assert("TSTypeParameterDeclaration", node, opts);\n}\nfunction assertTSTypeParameter(node, opts) {\n  assert("TSTypeParameter", node, opts);\n}\nfunction assertStandardized(node, opts) {\n  assert("Standardized", node, opts);\n}\nfunction assertExpression(node, opts) {\n  assert("Expression", node, opts);\n}\nfunction assertBinary(node, opts) {\n  assert("Binary", node, opts);\n}\nfunction assertScopable(node, opts) {\n  assert("Scopable", node, opts);\n}\nfunction assertBlockParent(node, opts) {\n  assert("BlockParent", node, opts);\n}\nfunction assertBlock(node, opts) {\n  assert("Block", node, opts);\n}\nfunction assertStatement(node, opts) {\n  assert("Statement", node, opts);\n}\nfunction assertTerminatorless(node, opts) {\n  assert("Terminatorless", node, opts);\n}\nfunction assertCompletionStatement(node, opts) {\n  assert("CompletionStatement", node, opts);\n}\nfunction assertConditional(node, opts) {\n  assert("Conditional", node, opts);\n}\nfunction assertLoop(node, opts) {\n  assert("Loop", node, opts);\n}\nfunction assertWhile(node, opts) {\n  assert("While", node, opts);\n}\nfunction assertExpressionWrapper(node, opts) {\n  assert("ExpressionWrapper", node, opts);\n}\nfunction assertFor(node, opts) {\n  assert("For", node, opts);\n}\nfunction assertForXStatement(node, opts) {\n  assert("ForXStatement", node, opts);\n}\nfunction assertFunction(node, opts) {\n  assert("Function", node, opts);\n}\nfunction assertFunctionParent(node, opts) {\n  assert("FunctionParent", node, opts);\n}\nfunction assertPureish(node, opts) {\n  assert("Pureish", node, opts);\n}\nfunction assertDeclaration(node, opts) {\n  assert("Declaration", node, opts);\n}\nfunction assertPatternLike(node, opts) {\n  assert("PatternLike", node, opts);\n}\nfunction assertLVal(node, opts) {\n  assert("LVal", node, opts);\n}\nfunction assertTSEntityName(node, opts) {\n  assert("TSEntityName", node, opts);\n}\nfunction assertLiteral(node, opts) {\n  assert("Literal", node, opts);\n}\nfunction assertImmutable(node, opts) {\n  assert("Immutable", node, opts);\n}\nfunction assertUserWhitespacable(node, opts) {\n  assert("UserWhitespacable", node, opts);\n}\nfunction assertMethod(node, opts) {\n  assert("Method", node, opts);\n}\nfunction assertObjectMember(node, opts) {\n  assert("ObjectMember", node, opts);\n}\nfunction assertProperty(node, opts) {\n  assert("Property", node, opts);\n}\nfunction assertUnaryLike(node, opts) {\n  assert("UnaryLike", node, opts);\n}\nfunction assertPattern(node, opts) {\n  assert("Pattern", node, opts);\n}\nfunction assertClass(node, opts) {\n  assert("Class", node, opts);\n}\nfunction assertImportOrExportDeclaration(node, opts) {\n  assert("ImportOrExportDeclaration", node, opts);\n}\nfunction assertExportDeclaration(node, opts) {\n  assert("ExportDeclaration", node, opts);\n}\nfunction assertModuleSpecifier(node, opts) {\n  assert("ModuleSpecifier", node, opts);\n}\nfunction assertAccessor(node, opts) {\n  assert("Accessor", node, opts);\n}\nfunction assertPrivate(node, opts) {\n  assert("Private", node, opts);\n}\nfunction assertFlow(node, opts) {\n  assert("Flow", node, opts);\n}\nfunction assertFlowType(node, opts) {\n  assert("FlowType", node, opts);\n}\nfunction assertFlowBaseAnnotation(node, opts) {\n  assert("FlowBaseAnnotation", node, opts);\n}\nfunction assertFlowDeclaration(node, opts) {\n  assert("FlowDeclaration", node, opts);\n}\nfunction assertFlowPredicate(node, opts) {\n  assert("FlowPredicate", node, opts);\n}\nfunction assertEnumBody(node, opts) {\n  assert("EnumBody", node, opts);\n}\nfunction assertEnumMember(node, opts) {\n  assert("EnumMember", node, opts);\n}\nfunction assertJSX(node, opts) {\n  assert("JSX", node, opts);\n}\nfunction assertMiscellaneous(node, opts) {\n  assert("Miscellaneous", node, opts);\n}\nfunction assertTypeScript(node, opts) {\n  assert("TypeScript", node, opts);\n}\nfunction assertTSTypeElement(node, opts) {\n  assert("TSTypeElement", node, opts);\n}\nfunction assertTSType(node, opts) {\n  assert("TSType", node, opts);\n}\nfunction assertTSBaseType(node, opts) {\n  assert("TSBaseType", node, opts);\n}\nfunction assertNumberLiteral(node, opts) {\n  (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral");\n  assert("NumberLiteral", node, opts);\n}\nfunction assertRegexLiteral(node, opts) {\n  (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral");\n  assert("RegexLiteral", node, opts);\n}\nfunction assertRestProperty(node, opts) {\n  (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement");\n  assert("RestProperty", node, opts);\n}\nfunction assertSpreadProperty(node, opts) {\n  (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement");\n  assert("SpreadProperty", node, opts);\n}\nfunction assertModuleDeclaration(node, opts) {\n  (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration");\n  assert("ModuleDeclaration", node, opts);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///72246\n')},31009:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = createFlowUnionType;\nvar _index = __webpack_require__(48079);\nvar _removeTypeDuplicates = __webpack_require__(95237);\nfunction createFlowUnionType(types) {\n  const flattened = (0, _removeTypeDuplicates.default)(types);\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return (0, _index.unionTypeAnnotation)(flattened);\n  }\n}\n\n//# sourceMappingURL=createFlowUnionType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEwMDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBdUI7QUFDNUMsNEJBQTRCLG1CQUFPLENBQUMsS0FBa0Q7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2J1aWxkZXJzL2Zsb3cvY3JlYXRlRmxvd1VuaW9uVHlwZS5qcz8xMjgzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlRmxvd1VuaW9uVHlwZTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xudmFyIF9yZW1vdmVUeXBlRHVwbGljYXRlcyA9IHJlcXVpcmUoXCIuLi8uLi9tb2RpZmljYXRpb25zL2Zsb3cvcmVtb3ZlVHlwZUR1cGxpY2F0ZXMuanNcIik7XG5mdW5jdGlvbiBjcmVhdGVGbG93VW5pb25UeXBlKHR5cGVzKSB7XG4gIGNvbnN0IGZsYXR0ZW5lZCA9ICgwLCBfcmVtb3ZlVHlwZUR1cGxpY2F0ZXMuZGVmYXVsdCkodHlwZXMpO1xuICBpZiAoZmxhdHRlbmVkLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmbGF0dGVuZWRbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICgwLCBfaW5kZXgudW5pb25UeXBlQW5ub3RhdGlvbikoZmxhdHRlbmVkKTtcbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVGbG93VW5pb25UeXBlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31009\n')},95958:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _index = __webpack_require__(48079);\nvar _default = exports["default"] = createTypeAnnotationBasedOnTypeof;\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  switch (type) {\n    case "string":\n      return (0, _index.stringTypeAnnotation)();\n    case "number":\n      return (0, _index.numberTypeAnnotation)();\n    case "undefined":\n      return (0, _index.voidTypeAnnotation)();\n    case "boolean":\n      return (0, _index.booleanTypeAnnotation)();\n    case "function":\n      return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));\n    case "object":\n      return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));\n    case "symbol":\n      return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));\n    case "bigint":\n      return (0, _index.anyTypeAnnotation)();\n  }\n  throw new Error("Invalid typeof value: " + type);\n}\n\n//# sourceMappingURL=createTypeAnnotationBasedOnTypeof.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU5NTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBdUI7QUFDNUMsZUFBZSxrQkFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvYnVpbGRlcnMvZmxvdy9jcmVhdGVUeXBlQW5ub3RhdGlvbkJhc2VkT25UeXBlb2YuanM/OTAyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mO1xuZnVuY3Rpb24gY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mKHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgcmV0dXJuICgwLCBfaW5kZXguc3RyaW5nVHlwZUFubm90YXRpb24pKCk7XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgcmV0dXJuICgwLCBfaW5kZXgubnVtYmVyVHlwZUFubm90YXRpb24pKCk7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuICgwLCBfaW5kZXgudm9pZFR5cGVBbm5vdGF0aW9uKSgpO1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICByZXR1cm4gKDAsIF9pbmRleC5ib29sZWFuVHlwZUFubm90YXRpb24pKCk7XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICByZXR1cm4gKDAsIF9pbmRleC5nZW5lcmljVHlwZUFubm90YXRpb24pKCgwLCBfaW5kZXguaWRlbnRpZmllcikoXCJGdW5jdGlvblwiKSk7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgcmV0dXJuICgwLCBfaW5kZXguZ2VuZXJpY1R5cGVBbm5vdGF0aW9uKSgoMCwgX2luZGV4LmlkZW50aWZpZXIpKFwiT2JqZWN0XCIpKTtcbiAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICByZXR1cm4gKDAsIF9pbmRleC5nZW5lcmljVHlwZUFubm90YXRpb24pKCgwLCBfaW5kZXguaWRlbnRpZmllcikoXCJTeW1ib2xcIikpO1xuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIHJldHVybiAoMCwgX2luZGV4LmFueVR5cGVBbm5vdGF0aW9uKSgpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdHlwZW9mIHZhbHVlOiBcIiArIHR5cGUpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVUeXBlQW5ub3RhdGlvbkJhc2VkT25UeXBlb2YuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///95958\n')},48079:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.anyTypeAnnotation = anyTypeAnnotation;\nexports.argumentPlaceholder = argumentPlaceholder;\nexports.arrayExpression = arrayExpression;\nexports.arrayPattern = arrayPattern;\nexports.arrayTypeAnnotation = arrayTypeAnnotation;\nexports.arrowFunctionExpression = arrowFunctionExpression;\nexports.assignmentExpression = assignmentExpression;\nexports.assignmentPattern = assignmentPattern;\nexports.awaitExpression = awaitExpression;\nexports.bigIntLiteral = bigIntLiteral;\nexports.binaryExpression = binaryExpression;\nexports.bindExpression = bindExpression;\nexports.blockStatement = blockStatement;\nexports.booleanLiteral = booleanLiteral;\nexports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;\nexports.booleanTypeAnnotation = booleanTypeAnnotation;\nexports.breakStatement = breakStatement;\nexports.callExpression = callExpression;\nexports.catchClause = catchClause;\nexports.classAccessorProperty = classAccessorProperty;\nexports.classBody = classBody;\nexports.classDeclaration = classDeclaration;\nexports.classExpression = classExpression;\nexports.classImplements = classImplements;\nexports.classMethod = classMethod;\nexports.classPrivateMethod = classPrivateMethod;\nexports.classPrivateProperty = classPrivateProperty;\nexports.classProperty = classProperty;\nexports.conditionalExpression = conditionalExpression;\nexports.continueStatement = continueStatement;\nexports.debuggerStatement = debuggerStatement;\nexports.decimalLiteral = decimalLiteral;\nexports.declareClass = declareClass;\nexports.declareExportAllDeclaration = declareExportAllDeclaration;\nexports.declareExportDeclaration = declareExportDeclaration;\nexports.declareFunction = declareFunction;\nexports.declareInterface = declareInterface;\nexports.declareModule = declareModule;\nexports.declareModuleExports = declareModuleExports;\nexports.declareOpaqueType = declareOpaqueType;\nexports.declareTypeAlias = declareTypeAlias;\nexports.declareVariable = declareVariable;\nexports.declaredPredicate = declaredPredicate;\nexports.decorator = decorator;\nexports.directive = directive;\nexports.directiveLiteral = directiveLiteral;\nexports.doExpression = doExpression;\nexports.doWhileStatement = doWhileStatement;\nexports.emptyStatement = emptyStatement;\nexports.emptyTypeAnnotation = emptyTypeAnnotation;\nexports.enumBooleanBody = enumBooleanBody;\nexports.enumBooleanMember = enumBooleanMember;\nexports.enumDeclaration = enumDeclaration;\nexports.enumDefaultedMember = enumDefaultedMember;\nexports.enumNumberBody = enumNumberBody;\nexports.enumNumberMember = enumNumberMember;\nexports.enumStringBody = enumStringBody;\nexports.enumStringMember = enumStringMember;\nexports.enumSymbolBody = enumSymbolBody;\nexports.existsTypeAnnotation = existsTypeAnnotation;\nexports.exportAllDeclaration = exportAllDeclaration;\nexports.exportDefaultDeclaration = exportDefaultDeclaration;\nexports.exportDefaultSpecifier = exportDefaultSpecifier;\nexports.exportNamedDeclaration = exportNamedDeclaration;\nexports.exportNamespaceSpecifier = exportNamespaceSpecifier;\nexports.exportSpecifier = exportSpecifier;\nexports.expressionStatement = expressionStatement;\nexports.file = file;\nexports.forInStatement = forInStatement;\nexports.forOfStatement = forOfStatement;\nexports.forStatement = forStatement;\nexports.functionDeclaration = functionDeclaration;\nexports.functionExpression = functionExpression;\nexports.functionTypeAnnotation = functionTypeAnnotation;\nexports.functionTypeParam = functionTypeParam;\nexports.genericTypeAnnotation = genericTypeAnnotation;\nexports.identifier = identifier;\nexports.ifStatement = ifStatement;\nexports["import"] = _import;\nexports.importAttribute = importAttribute;\nexports.importDeclaration = importDeclaration;\nexports.importDefaultSpecifier = importDefaultSpecifier;\nexports.importExpression = importExpression;\nexports.importNamespaceSpecifier = importNamespaceSpecifier;\nexports.importSpecifier = importSpecifier;\nexports.indexedAccessType = indexedAccessType;\nexports.inferredPredicate = inferredPredicate;\nexports.interfaceDeclaration = interfaceDeclaration;\nexports.interfaceExtends = interfaceExtends;\nexports.interfaceTypeAnnotation = interfaceTypeAnnotation;\nexports.interpreterDirective = interpreterDirective;\nexports.intersectionTypeAnnotation = intersectionTypeAnnotation;\nexports.jSXAttribute = exports.jsxAttribute = jsxAttribute;\nexports.jSXClosingElement = exports.jsxClosingElement = jsxClosingElement;\nexports.jSXClosingFragment = exports.jsxClosingFragment = jsxClosingFragment;\nexports.jSXElement = exports.jsxElement = jsxElement;\nexports.jSXEmptyExpression = exports.jsxEmptyExpression = jsxEmptyExpression;\nexports.jSXExpressionContainer = exports.jsxExpressionContainer = jsxExpressionContainer;\nexports.jSXFragment = exports.jsxFragment = jsxFragment;\nexports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier;\nexports.jSXMemberExpression = exports.jsxMemberExpression = jsxMemberExpression;\nexports.jSXNamespacedName = exports.jsxNamespacedName = jsxNamespacedName;\nexports.jSXOpeningElement = exports.jsxOpeningElement = jsxOpeningElement;\nexports.jSXOpeningFragment = exports.jsxOpeningFragment = jsxOpeningFragment;\nexports.jSXSpreadAttribute = exports.jsxSpreadAttribute = jsxSpreadAttribute;\nexports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;\nexports.jSXText = exports.jsxText = jsxText;\nexports.labeledStatement = labeledStatement;\nexports.logicalExpression = logicalExpression;\nexports.memberExpression = memberExpression;\nexports.metaProperty = metaProperty;\nexports.mixedTypeAnnotation = mixedTypeAnnotation;\nexports.moduleExpression = moduleExpression;\nexports.newExpression = newExpression;\nexports.noop = noop;\nexports.nullLiteral = nullLiteral;\nexports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;\nexports.nullableTypeAnnotation = nullableTypeAnnotation;\nexports.numberLiteral = NumberLiteral;\nexports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;\nexports.numberTypeAnnotation = numberTypeAnnotation;\nexports.numericLiteral = numericLiteral;\nexports.objectExpression = objectExpression;\nexports.objectMethod = objectMethod;\nexports.objectPattern = objectPattern;\nexports.objectProperty = objectProperty;\nexports.objectTypeAnnotation = objectTypeAnnotation;\nexports.objectTypeCallProperty = objectTypeCallProperty;\nexports.objectTypeIndexer = objectTypeIndexer;\nexports.objectTypeInternalSlot = objectTypeInternalSlot;\nexports.objectTypeProperty = objectTypeProperty;\nexports.objectTypeSpreadProperty = objectTypeSpreadProperty;\nexports.opaqueType = opaqueType;\nexports.optionalCallExpression = optionalCallExpression;\nexports.optionalIndexedAccessType = optionalIndexedAccessType;\nexports.optionalMemberExpression = optionalMemberExpression;\nexports.parenthesizedExpression = parenthesizedExpression;\nexports.pipelineBareFunction = pipelineBareFunction;\nexports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;\nexports.pipelineTopicExpression = pipelineTopicExpression;\nexports.placeholder = placeholder;\nexports.privateName = privateName;\nexports.program = program;\nexports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;\nexports.recordExpression = recordExpression;\nexports.regExpLiteral = regExpLiteral;\nexports.regexLiteral = RegexLiteral;\nexports.restElement = restElement;\nexports.restProperty = RestProperty;\nexports.returnStatement = returnStatement;\nexports.sequenceExpression = sequenceExpression;\nexports.spreadElement = spreadElement;\nexports.spreadProperty = SpreadProperty;\nexports.staticBlock = staticBlock;\nexports.stringLiteral = stringLiteral;\nexports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;\nexports.stringTypeAnnotation = stringTypeAnnotation;\nexports["super"] = _super;\nexports.switchCase = switchCase;\nexports.switchStatement = switchStatement;\nexports.symbolTypeAnnotation = symbolTypeAnnotation;\nexports.taggedTemplateExpression = taggedTemplateExpression;\nexports.templateElement = templateElement;\nexports.templateLiteral = templateLiteral;\nexports.thisExpression = thisExpression;\nexports.thisTypeAnnotation = thisTypeAnnotation;\nexports.throwStatement = throwStatement;\nexports.topicReference = topicReference;\nexports.tryStatement = tryStatement;\nexports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;\nexports.tSArrayType = exports.tsArrayType = tsArrayType;\nexports.tSAsExpression = exports.tsAsExpression = tsAsExpression;\nexports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;\nexports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;\nexports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;\nexports.tSConditionalType = exports.tsConditionalType = tsConditionalType;\nexports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;\nexports.tSConstructorType = exports.tsConstructorType = tsConstructorType;\nexports.tSDeclareFunction = exports.tsDeclareFunction = tsDeclareFunction;\nexports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;\nexports.tSEnumDeclaration = exports.tsEnumDeclaration = tsEnumDeclaration;\nexports.tSEnumMember = exports.tsEnumMember = tsEnumMember;\nexports.tSExportAssignment = exports.tsExportAssignment = tsExportAssignment;\nexports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;\nexports.tSExternalModuleReference = exports.tsExternalModuleReference = tsExternalModuleReference;\nexports.tSFunctionType = exports.tsFunctionType = tsFunctionType;\nexports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = tsImportEqualsDeclaration;\nexports.tSImportType = exports.tsImportType = tsImportType;\nexports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;\nexports.tSIndexedAccessType = exports.tsIndexedAccessType = tsIndexedAccessType;\nexports.tSInferType = exports.tsInferType = tsInferType;\nexports.tSInstantiationExpression = exports.tsInstantiationExpression = tsInstantiationExpression;\nexports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;\nexports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = tsInterfaceDeclaration;\nexports.tSIntersectionType = exports.tsIntersectionType = tsIntersectionType;\nexports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword = tsIntrinsicKeyword;\nexports.tSLiteralType = exports.tsLiteralType = tsLiteralType;\nexports.tSMappedType = exports.tsMappedType = tsMappedType;\nexports.tSMethodSignature = exports.tsMethodSignature = tsMethodSignature;\nexports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;\nexports.tSModuleDeclaration = exports.tsModuleDeclaration = tsModuleDeclaration;\nexports.tSNamedTupleMember = exports.tsNamedTupleMember = tsNamedTupleMember;\nexports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;\nexports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;\nexports.tSNonNullExpression = exports.tsNonNullExpression = tsNonNullExpression;\nexports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;\nexports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;\nexports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;\nexports.tSOptionalType = exports.tsOptionalType = tsOptionalType;\nexports.tSParameterProperty = exports.tsParameterProperty = tsParameterProperty;\nexports.tSParenthesizedType = exports.tsParenthesizedType = tsParenthesizedType;\nexports.tSPropertySignature = exports.tsPropertySignature = tsPropertySignature;\nexports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;\nexports.tSRestType = exports.tsRestType = tsRestType;\nexports.tSSatisfiesExpression = exports.tsSatisfiesExpression = tsSatisfiesExpression;\nexports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;\nexports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;\nexports.tSThisType = exports.tsThisType = tsThisType;\nexports.tSTupleType = exports.tsTupleType = tsTupleType;\nexports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = tsTypeAliasDeclaration;\nexports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;\nexports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;\nexports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;\nexports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;\nexports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;\nexports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;\nexports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;\nexports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;\nexports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;\nexports.tSTypeReference = exports.tsTypeReference = tsTypeReference;\nexports.tSUndefinedKeyword = exports.tsUndefinedKeyword = tsUndefinedKeyword;\nexports.tSUnionType = exports.tsUnionType = tsUnionType;\nexports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;\nexports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;\nexports.tupleExpression = tupleExpression;\nexports.tupleTypeAnnotation = tupleTypeAnnotation;\nexports.typeAlias = typeAlias;\nexports.typeAnnotation = typeAnnotation;\nexports.typeCastExpression = typeCastExpression;\nexports.typeParameter = typeParameter;\nexports.typeParameterDeclaration = typeParameterDeclaration;\nexports.typeParameterInstantiation = typeParameterInstantiation;\nexports.typeofTypeAnnotation = typeofTypeAnnotation;\nexports.unaryExpression = unaryExpression;\nexports.unionTypeAnnotation = unionTypeAnnotation;\nexports.updateExpression = updateExpression;\nexports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;\nexports.variableDeclaration = variableDeclaration;\nexports.variableDeclarator = variableDeclarator;\nexports.variance = variance;\nexports.voidTypeAnnotation = voidTypeAnnotation;\nexports.whileStatement = whileStatement;\nexports.withStatement = withStatement;\nexports.yieldExpression = yieldExpression;\nvar _validate = __webpack_require__(57446);\nvar _deprecationWarning = __webpack_require__(63762);\nvar utils = __webpack_require__(77596);\nconst {\n  validateInternal: validate\n} = _validate;\nconst {\n  NODE_FIELDS\n} = utils;\nfunction arrayExpression(elements = []) {\n  const node = {\n    type: "ArrayExpression",\n    elements\n  };\n  const defs = NODE_FIELDS.ArrayExpression;\n  validate(defs.elements, node, "elements", elements, 1);\n  return node;\n}\nfunction assignmentExpression(operator, left, right) {\n  const node = {\n    type: "AssignmentExpression",\n    operator,\n    left,\n    right\n  };\n  const defs = NODE_FIELDS.AssignmentExpression;\n  validate(defs.operator, node, "operator", operator);\n  validate(defs.left, node, "left", left, 1);\n  validate(defs.right, node, "right", right, 1);\n  return node;\n}\nfunction binaryExpression(operator, left, right) {\n  const node = {\n    type: "BinaryExpression",\n    operator,\n    left,\n    right\n  };\n  const defs = NODE_FIELDS.BinaryExpression;\n  validate(defs.operator, node, "operator", operator);\n  validate(defs.left, node, "left", left, 1);\n  validate(defs.right, node, "right", right, 1);\n  return node;\n}\nfunction interpreterDirective(value) {\n  const node = {\n    type: "InterpreterDirective",\n    value\n  };\n  const defs = NODE_FIELDS.InterpreterDirective;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction directive(value) {\n  const node = {\n    type: "Directive",\n    value\n  };\n  const defs = NODE_FIELDS.Directive;\n  validate(defs.value, node, "value", value, 1);\n  return node;\n}\nfunction directiveLiteral(value) {\n  const node = {\n    type: "DirectiveLiteral",\n    value\n  };\n  const defs = NODE_FIELDS.DirectiveLiteral;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction blockStatement(body, directives = []) {\n  const node = {\n    type: "BlockStatement",\n    body,\n    directives\n  };\n  const defs = NODE_FIELDS.BlockStatement;\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.directives, node, "directives", directives, 1);\n  return node;\n}\nfunction breakStatement(label = null) {\n  const node = {\n    type: "BreakStatement",\n    label\n  };\n  const defs = NODE_FIELDS.BreakStatement;\n  validate(defs.label, node, "label", label, 1);\n  return node;\n}\nfunction callExpression(callee, _arguments) {\n  const node = {\n    type: "CallExpression",\n    callee,\n    arguments: _arguments\n  };\n  const defs = NODE_FIELDS.CallExpression;\n  validate(defs.callee, node, "callee", callee, 1);\n  validate(defs.arguments, node, "arguments", _arguments, 1);\n  return node;\n}\nfunction catchClause(param = null, body) {\n  const node = {\n    type: "CatchClause",\n    param,\n    body\n  };\n  const defs = NODE_FIELDS.CatchClause;\n  validate(defs.param, node, "param", param, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction conditionalExpression(test, consequent, alternate) {\n  const node = {\n    type: "ConditionalExpression",\n    test,\n    consequent,\n    alternate\n  };\n  const defs = NODE_FIELDS.ConditionalExpression;\n  validate(defs.test, node, "test", test, 1);\n  validate(defs.consequent, node, "consequent", consequent, 1);\n  validate(defs.alternate, node, "alternate", alternate, 1);\n  return node;\n}\nfunction continueStatement(label = null) {\n  const node = {\n    type: "ContinueStatement",\n    label\n  };\n  const defs = NODE_FIELDS.ContinueStatement;\n  validate(defs.label, node, "label", label, 1);\n  return node;\n}\nfunction debuggerStatement() {\n  return {\n    type: "DebuggerStatement"\n  };\n}\nfunction doWhileStatement(test, body) {\n  const node = {\n    type: "DoWhileStatement",\n    test,\n    body\n  };\n  const defs = NODE_FIELDS.DoWhileStatement;\n  validate(defs.test, node, "test", test, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction emptyStatement() {\n  return {\n    type: "EmptyStatement"\n  };\n}\nfunction expressionStatement(expression) {\n  const node = {\n    type: "ExpressionStatement",\n    expression\n  };\n  const defs = NODE_FIELDS.ExpressionStatement;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction file(program, comments = null, tokens = null) {\n  const node = {\n    type: "File",\n    program,\n    comments,\n    tokens\n  };\n  const defs = NODE_FIELDS.File;\n  validate(defs.program, node, "program", program, 1);\n  validate(defs.comments, node, "comments", comments, 1);\n  validate(defs.tokens, node, "tokens", tokens);\n  return node;\n}\nfunction forInStatement(left, right, body) {\n  const node = {\n    type: "ForInStatement",\n    left,\n    right,\n    body\n  };\n  const defs = NODE_FIELDS.ForInStatement;\n  validate(defs.left, node, "left", left, 1);\n  validate(defs.right, node, "right", right, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction forStatement(init = null, test = null, update = null, body) {\n  const node = {\n    type: "ForStatement",\n    init,\n    test,\n    update,\n    body\n  };\n  const defs = NODE_FIELDS.ForStatement;\n  validate(defs.init, node, "init", init, 1);\n  validate(defs.test, node, "test", test, 1);\n  validate(defs.update, node, "update", update, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction functionDeclaration(id = null, params, body, generator = false, async = false) {\n  const node = {\n    type: "FunctionDeclaration",\n    id,\n    params,\n    body,\n    generator,\n    async\n  };\n  const defs = NODE_FIELDS.FunctionDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.generator, node, "generator", generator);\n  validate(defs.async, node, "async", async);\n  return node;\n}\nfunction functionExpression(id = null, params, body, generator = false, async = false) {\n  const node = {\n    type: "FunctionExpression",\n    id,\n    params,\n    body,\n    generator,\n    async\n  };\n  const defs = NODE_FIELDS.FunctionExpression;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.generator, node, "generator", generator);\n  validate(defs.async, node, "async", async);\n  return node;\n}\nfunction identifier(name) {\n  const node = {\n    type: "Identifier",\n    name\n  };\n  const defs = NODE_FIELDS.Identifier;\n  validate(defs.name, node, "name", name);\n  return node;\n}\nfunction ifStatement(test, consequent, alternate = null) {\n  const node = {\n    type: "IfStatement",\n    test,\n    consequent,\n    alternate\n  };\n  const defs = NODE_FIELDS.IfStatement;\n  validate(defs.test, node, "test", test, 1);\n  validate(defs.consequent, node, "consequent", consequent, 1);\n  validate(defs.alternate, node, "alternate", alternate, 1);\n  return node;\n}\nfunction labeledStatement(label, body) {\n  const node = {\n    type: "LabeledStatement",\n    label,\n    body\n  };\n  const defs = NODE_FIELDS.LabeledStatement;\n  validate(defs.label, node, "label", label, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction stringLiteral(value) {\n  const node = {\n    type: "StringLiteral",\n    value\n  };\n  const defs = NODE_FIELDS.StringLiteral;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction numericLiteral(value) {\n  const node = {\n    type: "NumericLiteral",\n    value\n  };\n  const defs = NODE_FIELDS.NumericLiteral;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction nullLiteral() {\n  return {\n    type: "NullLiteral"\n  };\n}\nfunction booleanLiteral(value) {\n  const node = {\n    type: "BooleanLiteral",\n    value\n  };\n  const defs = NODE_FIELDS.BooleanLiteral;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction regExpLiteral(pattern, flags = "") {\n  const node = {\n    type: "RegExpLiteral",\n    pattern,\n    flags\n  };\n  const defs = NODE_FIELDS.RegExpLiteral;\n  validate(defs.pattern, node, "pattern", pattern);\n  validate(defs.flags, node, "flags", flags);\n  return node;\n}\nfunction logicalExpression(operator, left, right) {\n  const node = {\n    type: "LogicalExpression",\n    operator,\n    left,\n    right\n  };\n  const defs = NODE_FIELDS.LogicalExpression;\n  validate(defs.operator, node, "operator", operator);\n  validate(defs.left, node, "left", left, 1);\n  validate(defs.right, node, "right", right, 1);\n  return node;\n}\nfunction memberExpression(object, property, computed = false, optional = null) {\n  const node = {\n    type: "MemberExpression",\n    object,\n    property,\n    computed,\n    optional\n  };\n  const defs = NODE_FIELDS.MemberExpression;\n  validate(defs.object, node, "object", object, 1);\n  validate(defs.property, node, "property", property, 1);\n  validate(defs.computed, node, "computed", computed);\n  validate(defs.optional, node, "optional", optional);\n  return node;\n}\nfunction newExpression(callee, _arguments) {\n  const node = {\n    type: "NewExpression",\n    callee,\n    arguments: _arguments\n  };\n  const defs = NODE_FIELDS.NewExpression;\n  validate(defs.callee, node, "callee", callee, 1);\n  validate(defs.arguments, node, "arguments", _arguments, 1);\n  return node;\n}\nfunction program(body, directives = [], sourceType = "script", interpreter = null) {\n  const node = {\n    type: "Program",\n    body,\n    directives,\n    sourceType,\n    interpreter\n  };\n  const defs = NODE_FIELDS.Program;\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.directives, node, "directives", directives, 1);\n  validate(defs.sourceType, node, "sourceType", sourceType);\n  validate(defs.interpreter, node, "interpreter", interpreter, 1);\n  return node;\n}\nfunction objectExpression(properties) {\n  const node = {\n    type: "ObjectExpression",\n    properties\n  };\n  const defs = NODE_FIELDS.ObjectExpression;\n  validate(defs.properties, node, "properties", properties, 1);\n  return node;\n}\nfunction objectMethod(kind = "method", key, params, body, computed = false, generator = false, async = false) {\n  const node = {\n    type: "ObjectMethod",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async\n  };\n  const defs = NODE_FIELDS.ObjectMethod;\n  validate(defs.kind, node, "kind", kind);\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.computed, node, "computed", computed);\n  validate(defs.generator, node, "generator", generator);\n  validate(defs.async, node, "async", async);\n  return node;\n}\nfunction objectProperty(key, value, computed = false, shorthand = false, decorators = null) {\n  const node = {\n    type: "ObjectProperty",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators\n  };\n  const defs = NODE_FIELDS.ObjectProperty;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.value, node, "value", value, 1);\n  validate(defs.computed, node, "computed", computed);\n  validate(defs.shorthand, node, "shorthand", shorthand);\n  validate(defs.decorators, node, "decorators", decorators, 1);\n  return node;\n}\nfunction restElement(argument) {\n  const node = {\n    type: "RestElement",\n    argument\n  };\n  const defs = NODE_FIELDS.RestElement;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction returnStatement(argument = null) {\n  const node = {\n    type: "ReturnStatement",\n    argument\n  };\n  const defs = NODE_FIELDS.ReturnStatement;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction sequenceExpression(expressions) {\n  const node = {\n    type: "SequenceExpression",\n    expressions\n  };\n  const defs = NODE_FIELDS.SequenceExpression;\n  validate(defs.expressions, node, "expressions", expressions, 1);\n  return node;\n}\nfunction parenthesizedExpression(expression) {\n  const node = {\n    type: "ParenthesizedExpression",\n    expression\n  };\n  const defs = NODE_FIELDS.ParenthesizedExpression;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction switchCase(test = null, consequent) {\n  const node = {\n    type: "SwitchCase",\n    test,\n    consequent\n  };\n  const defs = NODE_FIELDS.SwitchCase;\n  validate(defs.test, node, "test", test, 1);\n  validate(defs.consequent, node, "consequent", consequent, 1);\n  return node;\n}\nfunction switchStatement(discriminant, cases) {\n  const node = {\n    type: "SwitchStatement",\n    discriminant,\n    cases\n  };\n  const defs = NODE_FIELDS.SwitchStatement;\n  validate(defs.discriminant, node, "discriminant", discriminant, 1);\n  validate(defs.cases, node, "cases", cases, 1);\n  return node;\n}\nfunction thisExpression() {\n  return {\n    type: "ThisExpression"\n  };\n}\nfunction throwStatement(argument) {\n  const node = {\n    type: "ThrowStatement",\n    argument\n  };\n  const defs = NODE_FIELDS.ThrowStatement;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction tryStatement(block, handler = null, finalizer = null) {\n  const node = {\n    type: "TryStatement",\n    block,\n    handler,\n    finalizer\n  };\n  const defs = NODE_FIELDS.TryStatement;\n  validate(defs.block, node, "block", block, 1);\n  validate(defs.handler, node, "handler", handler, 1);\n  validate(defs.finalizer, node, "finalizer", finalizer, 1);\n  return node;\n}\nfunction unaryExpression(operator, argument, prefix = true) {\n  const node = {\n    type: "UnaryExpression",\n    operator,\n    argument,\n    prefix\n  };\n  const defs = NODE_FIELDS.UnaryExpression;\n  validate(defs.operator, node, "operator", operator);\n  validate(defs.argument, node, "argument", argument, 1);\n  validate(defs.prefix, node, "prefix", prefix);\n  return node;\n}\nfunction updateExpression(operator, argument, prefix = false) {\n  const node = {\n    type: "UpdateExpression",\n    operator,\n    argument,\n    prefix\n  };\n  const defs = NODE_FIELDS.UpdateExpression;\n  validate(defs.operator, node, "operator", operator);\n  validate(defs.argument, node, "argument", argument, 1);\n  validate(defs.prefix, node, "prefix", prefix);\n  return node;\n}\nfunction variableDeclaration(kind, declarations) {\n  const node = {\n    type: "VariableDeclaration",\n    kind,\n    declarations\n  };\n  const defs = NODE_FIELDS.VariableDeclaration;\n  validate(defs.kind, node, "kind", kind);\n  validate(defs.declarations, node, "declarations", declarations, 1);\n  return node;\n}\nfunction variableDeclarator(id, init = null) {\n  const node = {\n    type: "VariableDeclarator",\n    id,\n    init\n  };\n  const defs = NODE_FIELDS.VariableDeclarator;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.init, node, "init", init, 1);\n  return node;\n}\nfunction whileStatement(test, body) {\n  const node = {\n    type: "WhileStatement",\n    test,\n    body\n  };\n  const defs = NODE_FIELDS.WhileStatement;\n  validate(defs.test, node, "test", test, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction withStatement(object, body) {\n  const node = {\n    type: "WithStatement",\n    object,\n    body\n  };\n  const defs = NODE_FIELDS.WithStatement;\n  validate(defs.object, node, "object", object, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction assignmentPattern(left, right) {\n  const node = {\n    type: "AssignmentPattern",\n    left,\n    right\n  };\n  const defs = NODE_FIELDS.AssignmentPattern;\n  validate(defs.left, node, "left", left, 1);\n  validate(defs.right, node, "right", right, 1);\n  return node;\n}\nfunction arrayPattern(elements) {\n  const node = {\n    type: "ArrayPattern",\n    elements\n  };\n  const defs = NODE_FIELDS.ArrayPattern;\n  validate(defs.elements, node, "elements", elements, 1);\n  return node;\n}\nfunction arrowFunctionExpression(params, body, async = false) {\n  const node = {\n    type: "ArrowFunctionExpression",\n    params,\n    body,\n    async,\n    expression: null\n  };\n  const defs = NODE_FIELDS.ArrowFunctionExpression;\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.async, node, "async", async);\n  return node;\n}\nfunction classBody(body) {\n  const node = {\n    type: "ClassBody",\n    body\n  };\n  const defs = NODE_FIELDS.ClassBody;\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction classExpression(id = null, superClass = null, body, decorators = null) {\n  const node = {\n    type: "ClassExpression",\n    id,\n    superClass,\n    body,\n    decorators\n  };\n  const defs = NODE_FIELDS.ClassExpression;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.superClass, node, "superClass", superClass, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.decorators, node, "decorators", decorators, 1);\n  return node;\n}\nfunction classDeclaration(id = null, superClass = null, body, decorators = null) {\n  const node = {\n    type: "ClassDeclaration",\n    id,\n    superClass,\n    body,\n    decorators\n  };\n  const defs = NODE_FIELDS.ClassDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.superClass, node, "superClass", superClass, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.decorators, node, "decorators", decorators, 1);\n  return node;\n}\nfunction exportAllDeclaration(source) {\n  const node = {\n    type: "ExportAllDeclaration",\n    source\n  };\n  const defs = NODE_FIELDS.ExportAllDeclaration;\n  validate(defs.source, node, "source", source, 1);\n  return node;\n}\nfunction exportDefaultDeclaration(declaration) {\n  const node = {\n    type: "ExportDefaultDeclaration",\n    declaration\n  };\n  const defs = NODE_FIELDS.ExportDefaultDeclaration;\n  validate(defs.declaration, node, "declaration", declaration, 1);\n  return node;\n}\nfunction exportNamedDeclaration(declaration = null, specifiers = [], source = null) {\n  const node = {\n    type: "ExportNamedDeclaration",\n    declaration,\n    specifiers,\n    source\n  };\n  const defs = NODE_FIELDS.ExportNamedDeclaration;\n  validate(defs.declaration, node, "declaration", declaration, 1);\n  validate(defs.specifiers, node, "specifiers", specifiers, 1);\n  validate(defs.source, node, "source", source, 1);\n  return node;\n}\nfunction exportSpecifier(local, exported) {\n  const node = {\n    type: "ExportSpecifier",\n    local,\n    exported\n  };\n  const defs = NODE_FIELDS.ExportSpecifier;\n  validate(defs.local, node, "local", local, 1);\n  validate(defs.exported, node, "exported", exported, 1);\n  return node;\n}\nfunction forOfStatement(left, right, body, _await = false) {\n  const node = {\n    type: "ForOfStatement",\n    left,\n    right,\n    body,\n    await: _await\n  };\n  const defs = NODE_FIELDS.ForOfStatement;\n  validate(defs.left, node, "left", left, 1);\n  validate(defs.right, node, "right", right, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.await, node, "await", _await);\n  return node;\n}\nfunction importDeclaration(specifiers, source) {\n  const node = {\n    type: "ImportDeclaration",\n    specifiers,\n    source\n  };\n  const defs = NODE_FIELDS.ImportDeclaration;\n  validate(defs.specifiers, node, "specifiers", specifiers, 1);\n  validate(defs.source, node, "source", source, 1);\n  return node;\n}\nfunction importDefaultSpecifier(local) {\n  const node = {\n    type: "ImportDefaultSpecifier",\n    local\n  };\n  const defs = NODE_FIELDS.ImportDefaultSpecifier;\n  validate(defs.local, node, "local", local, 1);\n  return node;\n}\nfunction importNamespaceSpecifier(local) {\n  const node = {\n    type: "ImportNamespaceSpecifier",\n    local\n  };\n  const defs = NODE_FIELDS.ImportNamespaceSpecifier;\n  validate(defs.local, node, "local", local, 1);\n  return node;\n}\nfunction importSpecifier(local, imported) {\n  const node = {\n    type: "ImportSpecifier",\n    local,\n    imported\n  };\n  const defs = NODE_FIELDS.ImportSpecifier;\n  validate(defs.local, node, "local", local, 1);\n  validate(defs.imported, node, "imported", imported, 1);\n  return node;\n}\nfunction importExpression(source, options = null) {\n  const node = {\n    type: "ImportExpression",\n    source,\n    options\n  };\n  const defs = NODE_FIELDS.ImportExpression;\n  validate(defs.source, node, "source", source, 1);\n  validate(defs.options, node, "options", options, 1);\n  return node;\n}\nfunction metaProperty(meta, property) {\n  const node = {\n    type: "MetaProperty",\n    meta,\n    property\n  };\n  const defs = NODE_FIELDS.MetaProperty;\n  validate(defs.meta, node, "meta", meta, 1);\n  validate(defs.property, node, "property", property, 1);\n  return node;\n}\nfunction classMethod(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {\n  const node = {\n    type: "ClassMethod",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async\n  };\n  const defs = NODE_FIELDS.ClassMethod;\n  validate(defs.kind, node, "kind", kind);\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.computed, node, "computed", computed);\n  validate(defs.static, node, "static", _static);\n  validate(defs.generator, node, "generator", generator);\n  validate(defs.async, node, "async", async);\n  return node;\n}\nfunction objectPattern(properties) {\n  const node = {\n    type: "ObjectPattern",\n    properties\n  };\n  const defs = NODE_FIELDS.ObjectPattern;\n  validate(defs.properties, node, "properties", properties, 1);\n  return node;\n}\nfunction spreadElement(argument) {\n  const node = {\n    type: "SpreadElement",\n    argument\n  };\n  const defs = NODE_FIELDS.SpreadElement;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction _super() {\n  return {\n    type: "Super"\n  };\n}\nfunction taggedTemplateExpression(tag, quasi) {\n  const node = {\n    type: "TaggedTemplateExpression",\n    tag,\n    quasi\n  };\n  const defs = NODE_FIELDS.TaggedTemplateExpression;\n  validate(defs.tag, node, "tag", tag, 1);\n  validate(defs.quasi, node, "quasi", quasi, 1);\n  return node;\n}\nfunction templateElement(value, tail = false) {\n  const node = {\n    type: "TemplateElement",\n    value,\n    tail\n  };\n  const defs = NODE_FIELDS.TemplateElement;\n  validate(defs.value, node, "value", value);\n  validate(defs.tail, node, "tail", tail);\n  return node;\n}\nfunction templateLiteral(quasis, expressions) {\n  const node = {\n    type: "TemplateLiteral",\n    quasis,\n    expressions\n  };\n  const defs = NODE_FIELDS.TemplateLiteral;\n  validate(defs.quasis, node, "quasis", quasis, 1);\n  validate(defs.expressions, node, "expressions", expressions, 1);\n  return node;\n}\nfunction yieldExpression(argument = null, delegate = false) {\n  const node = {\n    type: "YieldExpression",\n    argument,\n    delegate\n  };\n  const defs = NODE_FIELDS.YieldExpression;\n  validate(defs.argument, node, "argument", argument, 1);\n  validate(defs.delegate, node, "delegate", delegate);\n  return node;\n}\nfunction awaitExpression(argument) {\n  const node = {\n    type: "AwaitExpression",\n    argument\n  };\n  const defs = NODE_FIELDS.AwaitExpression;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction _import() {\n  return {\n    type: "Import"\n  };\n}\nfunction bigIntLiteral(value) {\n  const node = {\n    type: "BigIntLiteral",\n    value\n  };\n  const defs = NODE_FIELDS.BigIntLiteral;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction exportNamespaceSpecifier(exported) {\n  const node = {\n    type: "ExportNamespaceSpecifier",\n    exported\n  };\n  const defs = NODE_FIELDS.ExportNamespaceSpecifier;\n  validate(defs.exported, node, "exported", exported, 1);\n  return node;\n}\nfunction optionalMemberExpression(object, property, computed = false, optional) {\n  const node = {\n    type: "OptionalMemberExpression",\n    object,\n    property,\n    computed,\n    optional\n  };\n  const defs = NODE_FIELDS.OptionalMemberExpression;\n  validate(defs.object, node, "object", object, 1);\n  validate(defs.property, node, "property", property, 1);\n  validate(defs.computed, node, "computed", computed);\n  validate(defs.optional, node, "optional", optional);\n  return node;\n}\nfunction optionalCallExpression(callee, _arguments, optional) {\n  const node = {\n    type: "OptionalCallExpression",\n    callee,\n    arguments: _arguments,\n    optional\n  };\n  const defs = NODE_FIELDS.OptionalCallExpression;\n  validate(defs.callee, node, "callee", callee, 1);\n  validate(defs.arguments, node, "arguments", _arguments, 1);\n  validate(defs.optional, node, "optional", optional);\n  return node;\n}\nfunction classProperty(key, value = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {\n  const node = {\n    type: "ClassProperty",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static\n  };\n  const defs = NODE_FIELDS.ClassProperty;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.value, node, "value", value, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  validate(defs.decorators, node, "decorators", decorators, 1);\n  validate(defs.computed, node, "computed", computed);\n  validate(defs.static, node, "static", _static);\n  return node;\n}\nfunction classAccessorProperty(key, value = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {\n  const node = {\n    type: "ClassAccessorProperty",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static\n  };\n  const defs = NODE_FIELDS.ClassAccessorProperty;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.value, node, "value", value, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  validate(defs.decorators, node, "decorators", decorators, 1);\n  validate(defs.computed, node, "computed", computed);\n  validate(defs.static, node, "static", _static);\n  return node;\n}\nfunction classPrivateProperty(key, value = null, decorators = null, _static = false) {\n  const node = {\n    type: "ClassPrivateProperty",\n    key,\n    value,\n    decorators,\n    static: _static\n  };\n  const defs = NODE_FIELDS.ClassPrivateProperty;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.value, node, "value", value, 1);\n  validate(defs.decorators, node, "decorators", decorators, 1);\n  validate(defs.static, node, "static", _static);\n  return node;\n}\nfunction classPrivateMethod(kind = "method", key, params, body, _static = false) {\n  const node = {\n    type: "ClassPrivateMethod",\n    kind,\n    key,\n    params,\n    body,\n    static: _static\n  };\n  const defs = NODE_FIELDS.ClassPrivateMethod;\n  validate(defs.kind, node, "kind", kind);\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.static, node, "static", _static);\n  return node;\n}\nfunction privateName(id) {\n  const node = {\n    type: "PrivateName",\n    id\n  };\n  const defs = NODE_FIELDS.PrivateName;\n  validate(defs.id, node, "id", id, 1);\n  return node;\n}\nfunction staticBlock(body) {\n  const node = {\n    type: "StaticBlock",\n    body\n  };\n  const defs = NODE_FIELDS.StaticBlock;\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction anyTypeAnnotation() {\n  return {\n    type: "AnyTypeAnnotation"\n  };\n}\nfunction arrayTypeAnnotation(elementType) {\n  const node = {\n    type: "ArrayTypeAnnotation",\n    elementType\n  };\n  const defs = NODE_FIELDS.ArrayTypeAnnotation;\n  validate(defs.elementType, node, "elementType", elementType, 1);\n  return node;\n}\nfunction booleanTypeAnnotation() {\n  return {\n    type: "BooleanTypeAnnotation"\n  };\n}\nfunction booleanLiteralTypeAnnotation(value) {\n  const node = {\n    type: "BooleanLiteralTypeAnnotation",\n    value\n  };\n  const defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction nullLiteralTypeAnnotation() {\n  return {\n    type: "NullLiteralTypeAnnotation"\n  };\n}\nfunction classImplements(id, typeParameters = null) {\n  const node = {\n    type: "ClassImplements",\n    id,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.ClassImplements;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction declareClass(id, typeParameters = null, _extends = null, body) {\n  const node = {\n    type: "DeclareClass",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  };\n  const defs = NODE_FIELDS.DeclareClass;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.extends, node, "extends", _extends, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction declareFunction(id) {\n  const node = {\n    type: "DeclareFunction",\n    id\n  };\n  const defs = NODE_FIELDS.DeclareFunction;\n  validate(defs.id, node, "id", id, 1);\n  return node;\n}\nfunction declareInterface(id, typeParameters = null, _extends = null, body) {\n  const node = {\n    type: "DeclareInterface",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  };\n  const defs = NODE_FIELDS.DeclareInterface;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.extends, node, "extends", _extends, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction declareModule(id, body, kind = null) {\n  const node = {\n    type: "DeclareModule",\n    id,\n    body,\n    kind\n  };\n  const defs = NODE_FIELDS.DeclareModule;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.kind, node, "kind", kind);\n  return node;\n}\nfunction declareModuleExports(typeAnnotation) {\n  const node = {\n    type: "DeclareModuleExports",\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.DeclareModuleExports;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction declareTypeAlias(id, typeParameters = null, right) {\n  const node = {\n    type: "DeclareTypeAlias",\n    id,\n    typeParameters,\n    right\n  };\n  const defs = NODE_FIELDS.DeclareTypeAlias;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.right, node, "right", right, 1);\n  return node;\n}\nfunction declareOpaqueType(id, typeParameters = null, supertype = null) {\n  const node = {\n    type: "DeclareOpaqueType",\n    id,\n    typeParameters,\n    supertype\n  };\n  const defs = NODE_FIELDS.DeclareOpaqueType;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.supertype, node, "supertype", supertype, 1);\n  return node;\n}\nfunction declareVariable(id) {\n  const node = {\n    type: "DeclareVariable",\n    id\n  };\n  const defs = NODE_FIELDS.DeclareVariable;\n  validate(defs.id, node, "id", id, 1);\n  return node;\n}\nfunction declareExportDeclaration(declaration = null, specifiers = null, source = null, attributes = null) {\n  const node = {\n    type: "DeclareExportDeclaration",\n    declaration,\n    specifiers,\n    source,\n    attributes\n  };\n  const defs = NODE_FIELDS.DeclareExportDeclaration;\n  validate(defs.declaration, node, "declaration", declaration, 1);\n  validate(defs.specifiers, node, "specifiers", specifiers, 1);\n  validate(defs.source, node, "source", source, 1);\n  validate(defs.attributes, node, "attributes", attributes, 1);\n  return node;\n}\nfunction declareExportAllDeclaration(source, attributes = null) {\n  const node = {\n    type: "DeclareExportAllDeclaration",\n    source,\n    attributes\n  };\n  const defs = NODE_FIELDS.DeclareExportAllDeclaration;\n  validate(defs.source, node, "source", source, 1);\n  validate(defs.attributes, node, "attributes", attributes, 1);\n  return node;\n}\nfunction declaredPredicate(value) {\n  const node = {\n    type: "DeclaredPredicate",\n    value\n  };\n  const defs = NODE_FIELDS.DeclaredPredicate;\n  validate(defs.value, node, "value", value, 1);\n  return node;\n}\nfunction existsTypeAnnotation() {\n  return {\n    type: "ExistsTypeAnnotation"\n  };\n}\nfunction functionTypeAnnotation(typeParameters = null, params, rest = null, returnType) {\n  const node = {\n    type: "FunctionTypeAnnotation",\n    typeParameters,\n    params,\n    rest,\n    returnType\n  };\n  const defs = NODE_FIELDS.FunctionTypeAnnotation;\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.rest, node, "rest", rest, 1);\n  validate(defs.returnType, node, "returnType", returnType, 1);\n  return node;\n}\nfunction functionTypeParam(name = null, typeAnnotation) {\n  const node = {\n    type: "FunctionTypeParam",\n    name,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.FunctionTypeParam;\n  validate(defs.name, node, "name", name, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction genericTypeAnnotation(id, typeParameters = null) {\n  const node = {\n    type: "GenericTypeAnnotation",\n    id,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.GenericTypeAnnotation;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction inferredPredicate() {\n  return {\n    type: "InferredPredicate"\n  };\n}\nfunction interfaceExtends(id, typeParameters = null) {\n  const node = {\n    type: "InterfaceExtends",\n    id,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.InterfaceExtends;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction interfaceDeclaration(id, typeParameters = null, _extends = null, body) {\n  const node = {\n    type: "InterfaceDeclaration",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  };\n  const defs = NODE_FIELDS.InterfaceDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.extends, node, "extends", _extends, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction interfaceTypeAnnotation(_extends = null, body) {\n  const node = {\n    type: "InterfaceTypeAnnotation",\n    extends: _extends,\n    body\n  };\n  const defs = NODE_FIELDS.InterfaceTypeAnnotation;\n  validate(defs.extends, node, "extends", _extends, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction intersectionTypeAnnotation(types) {\n  const node = {\n    type: "IntersectionTypeAnnotation",\n    types\n  };\n  const defs = NODE_FIELDS.IntersectionTypeAnnotation;\n  validate(defs.types, node, "types", types, 1);\n  return node;\n}\nfunction mixedTypeAnnotation() {\n  return {\n    type: "MixedTypeAnnotation"\n  };\n}\nfunction emptyTypeAnnotation() {\n  return {\n    type: "EmptyTypeAnnotation"\n  };\n}\nfunction nullableTypeAnnotation(typeAnnotation) {\n  const node = {\n    type: "NullableTypeAnnotation",\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.NullableTypeAnnotation;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction numberLiteralTypeAnnotation(value) {\n  const node = {\n    type: "NumberLiteralTypeAnnotation",\n    value\n  };\n  const defs = NODE_FIELDS.NumberLiteralTypeAnnotation;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction numberTypeAnnotation() {\n  return {\n    type: "NumberTypeAnnotation"\n  };\n}\nfunction objectTypeAnnotation(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {\n  const node = {\n    type: "ObjectTypeAnnotation",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact\n  };\n  const defs = NODE_FIELDS.ObjectTypeAnnotation;\n  validate(defs.properties, node, "properties", properties, 1);\n  validate(defs.indexers, node, "indexers", indexers, 1);\n  validate(defs.callProperties, node, "callProperties", callProperties, 1);\n  validate(defs.internalSlots, node, "internalSlots", internalSlots, 1);\n  validate(defs.exact, node, "exact", exact);\n  return node;\n}\nfunction objectTypeInternalSlot(id, value, optional, _static, method) {\n  const node = {\n    type: "ObjectTypeInternalSlot",\n    id,\n    value,\n    optional,\n    static: _static,\n    method\n  };\n  const defs = NODE_FIELDS.ObjectTypeInternalSlot;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.value, node, "value", value, 1);\n  validate(defs.optional, node, "optional", optional);\n  validate(defs.static, node, "static", _static);\n  validate(defs.method, node, "method", method);\n  return node;\n}\nfunction objectTypeCallProperty(value) {\n  const node = {\n    type: "ObjectTypeCallProperty",\n    value,\n    static: null\n  };\n  const defs = NODE_FIELDS.ObjectTypeCallProperty;\n  validate(defs.value, node, "value", value, 1);\n  return node;\n}\nfunction objectTypeIndexer(id = null, key, value, variance = null) {\n  const node = {\n    type: "ObjectTypeIndexer",\n    id,\n    key,\n    value,\n    variance,\n    static: null\n  };\n  const defs = NODE_FIELDS.ObjectTypeIndexer;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.value, node, "value", value, 1);\n  validate(defs.variance, node, "variance", variance, 1);\n  return node;\n}\nfunction objectTypeProperty(key, value, variance = null) {\n  const node = {\n    type: "ObjectTypeProperty",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null\n  };\n  const defs = NODE_FIELDS.ObjectTypeProperty;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.value, node, "value", value, 1);\n  validate(defs.variance, node, "variance", variance, 1);\n  return node;\n}\nfunction objectTypeSpreadProperty(argument) {\n  const node = {\n    type: "ObjectTypeSpreadProperty",\n    argument\n  };\n  const defs = NODE_FIELDS.ObjectTypeSpreadProperty;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction opaqueType(id, typeParameters = null, supertype = null, impltype) {\n  const node = {\n    type: "OpaqueType",\n    id,\n    typeParameters,\n    supertype,\n    impltype\n  };\n  const defs = NODE_FIELDS.OpaqueType;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.supertype, node, "supertype", supertype, 1);\n  validate(defs.impltype, node, "impltype", impltype, 1);\n  return node;\n}\nfunction qualifiedTypeIdentifier(id, qualification) {\n  const node = {\n    type: "QualifiedTypeIdentifier",\n    id,\n    qualification\n  };\n  const defs = NODE_FIELDS.QualifiedTypeIdentifier;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.qualification, node, "qualification", qualification, 1);\n  return node;\n}\nfunction stringLiteralTypeAnnotation(value) {\n  const node = {\n    type: "StringLiteralTypeAnnotation",\n    value\n  };\n  const defs = NODE_FIELDS.StringLiteralTypeAnnotation;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction stringTypeAnnotation() {\n  return {\n    type: "StringTypeAnnotation"\n  };\n}\nfunction symbolTypeAnnotation() {\n  return {\n    type: "SymbolTypeAnnotation"\n  };\n}\nfunction thisTypeAnnotation() {\n  return {\n    type: "ThisTypeAnnotation"\n  };\n}\nfunction tupleTypeAnnotation(types) {\n  const node = {\n    type: "TupleTypeAnnotation",\n    types\n  };\n  const defs = NODE_FIELDS.TupleTypeAnnotation;\n  validate(defs.types, node, "types", types, 1);\n  return node;\n}\nfunction typeofTypeAnnotation(argument) {\n  const node = {\n    type: "TypeofTypeAnnotation",\n    argument\n  };\n  const defs = NODE_FIELDS.TypeofTypeAnnotation;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction typeAlias(id, typeParameters = null, right) {\n  const node = {\n    type: "TypeAlias",\n    id,\n    typeParameters,\n    right\n  };\n  const defs = NODE_FIELDS.TypeAlias;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.right, node, "right", right, 1);\n  return node;\n}\nfunction typeAnnotation(typeAnnotation) {\n  const node = {\n    type: "TypeAnnotation",\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TypeAnnotation;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction typeCastExpression(expression, typeAnnotation) {\n  const node = {\n    type: "TypeCastExpression",\n    expression,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TypeCastExpression;\n  validate(defs.expression, node, "expression", expression, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction typeParameter(bound = null, _default = null, variance = null) {\n  const node = {\n    type: "TypeParameter",\n    bound,\n    default: _default,\n    variance,\n    name: null\n  };\n  const defs = NODE_FIELDS.TypeParameter;\n  validate(defs.bound, node, "bound", bound, 1);\n  validate(defs.default, node, "default", _default, 1);\n  validate(defs.variance, node, "variance", variance, 1);\n  return node;\n}\nfunction typeParameterDeclaration(params) {\n  const node = {\n    type: "TypeParameterDeclaration",\n    params\n  };\n  const defs = NODE_FIELDS.TypeParameterDeclaration;\n  validate(defs.params, node, "params", params, 1);\n  return node;\n}\nfunction typeParameterInstantiation(params) {\n  const node = {\n    type: "TypeParameterInstantiation",\n    params\n  };\n  const defs = NODE_FIELDS.TypeParameterInstantiation;\n  validate(defs.params, node, "params", params, 1);\n  return node;\n}\nfunction unionTypeAnnotation(types) {\n  const node = {\n    type: "UnionTypeAnnotation",\n    types\n  };\n  const defs = NODE_FIELDS.UnionTypeAnnotation;\n  validate(defs.types, node, "types", types, 1);\n  return node;\n}\nfunction variance(kind) {\n  const node = {\n    type: "Variance",\n    kind\n  };\n  const defs = NODE_FIELDS.Variance;\n  validate(defs.kind, node, "kind", kind);\n  return node;\n}\nfunction voidTypeAnnotation() {\n  return {\n    type: "VoidTypeAnnotation"\n  };\n}\nfunction enumDeclaration(id, body) {\n  const node = {\n    type: "EnumDeclaration",\n    id,\n    body\n  };\n  const defs = NODE_FIELDS.EnumDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction enumBooleanBody(members) {\n  const node = {\n    type: "EnumBooleanBody",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null\n  };\n  const defs = NODE_FIELDS.EnumBooleanBody;\n  validate(defs.members, node, "members", members, 1);\n  return node;\n}\nfunction enumNumberBody(members) {\n  const node = {\n    type: "EnumNumberBody",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null\n  };\n  const defs = NODE_FIELDS.EnumNumberBody;\n  validate(defs.members, node, "members", members, 1);\n  return node;\n}\nfunction enumStringBody(members) {\n  const node = {\n    type: "EnumStringBody",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null\n  };\n  const defs = NODE_FIELDS.EnumStringBody;\n  validate(defs.members, node, "members", members, 1);\n  return node;\n}\nfunction enumSymbolBody(members) {\n  const node = {\n    type: "EnumSymbolBody",\n    members,\n    hasUnknownMembers: null\n  };\n  const defs = NODE_FIELDS.EnumSymbolBody;\n  validate(defs.members, node, "members", members, 1);\n  return node;\n}\nfunction enumBooleanMember(id) {\n  const node = {\n    type: "EnumBooleanMember",\n    id,\n    init: null\n  };\n  const defs = NODE_FIELDS.EnumBooleanMember;\n  validate(defs.id, node, "id", id, 1);\n  return node;\n}\nfunction enumNumberMember(id, init) {\n  const node = {\n    type: "EnumNumberMember",\n    id,\n    init\n  };\n  const defs = NODE_FIELDS.EnumNumberMember;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.init, node, "init", init, 1);\n  return node;\n}\nfunction enumStringMember(id, init) {\n  const node = {\n    type: "EnumStringMember",\n    id,\n    init\n  };\n  const defs = NODE_FIELDS.EnumStringMember;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.init, node, "init", init, 1);\n  return node;\n}\nfunction enumDefaultedMember(id) {\n  const node = {\n    type: "EnumDefaultedMember",\n    id\n  };\n  const defs = NODE_FIELDS.EnumDefaultedMember;\n  validate(defs.id, node, "id", id, 1);\n  return node;\n}\nfunction indexedAccessType(objectType, indexType) {\n  const node = {\n    type: "IndexedAccessType",\n    objectType,\n    indexType\n  };\n  const defs = NODE_FIELDS.IndexedAccessType;\n  validate(defs.objectType, node, "objectType", objectType, 1);\n  validate(defs.indexType, node, "indexType", indexType, 1);\n  return node;\n}\nfunction optionalIndexedAccessType(objectType, indexType) {\n  const node = {\n    type: "OptionalIndexedAccessType",\n    objectType,\n    indexType,\n    optional: null\n  };\n  const defs = NODE_FIELDS.OptionalIndexedAccessType;\n  validate(defs.objectType, node, "objectType", objectType, 1);\n  validate(defs.indexType, node, "indexType", indexType, 1);\n  return node;\n}\nfunction jsxAttribute(name, value = null) {\n  const node = {\n    type: "JSXAttribute",\n    name,\n    value\n  };\n  const defs = NODE_FIELDS.JSXAttribute;\n  validate(defs.name, node, "name", name, 1);\n  validate(defs.value, node, "value", value, 1);\n  return node;\n}\nfunction jsxClosingElement(name) {\n  const node = {\n    type: "JSXClosingElement",\n    name\n  };\n  const defs = NODE_FIELDS.JSXClosingElement;\n  validate(defs.name, node, "name", name, 1);\n  return node;\n}\nfunction jsxElement(openingElement, closingElement = null, children, selfClosing = null) {\n  const node = {\n    type: "JSXElement",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing\n  };\n  const defs = NODE_FIELDS.JSXElement;\n  validate(defs.openingElement, node, "openingElement", openingElement, 1);\n  validate(defs.closingElement, node, "closingElement", closingElement, 1);\n  validate(defs.children, node, "children", children, 1);\n  validate(defs.selfClosing, node, "selfClosing", selfClosing);\n  return node;\n}\nfunction jsxEmptyExpression() {\n  return {\n    type: "JSXEmptyExpression"\n  };\n}\nfunction jsxExpressionContainer(expression) {\n  const node = {\n    type: "JSXExpressionContainer",\n    expression\n  };\n  const defs = NODE_FIELDS.JSXExpressionContainer;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction jsxSpreadChild(expression) {\n  const node = {\n    type: "JSXSpreadChild",\n    expression\n  };\n  const defs = NODE_FIELDS.JSXSpreadChild;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction jsxIdentifier(name) {\n  const node = {\n    type: "JSXIdentifier",\n    name\n  };\n  const defs = NODE_FIELDS.JSXIdentifier;\n  validate(defs.name, node, "name", name);\n  return node;\n}\nfunction jsxMemberExpression(object, property) {\n  const node = {\n    type: "JSXMemberExpression",\n    object,\n    property\n  };\n  const defs = NODE_FIELDS.JSXMemberExpression;\n  validate(defs.object, node, "object", object, 1);\n  validate(defs.property, node, "property", property, 1);\n  return node;\n}\nfunction jsxNamespacedName(namespace, name) {\n  const node = {\n    type: "JSXNamespacedName",\n    namespace,\n    name\n  };\n  const defs = NODE_FIELDS.JSXNamespacedName;\n  validate(defs.namespace, node, "namespace", namespace, 1);\n  validate(defs.name, node, "name", name, 1);\n  return node;\n}\nfunction jsxOpeningElement(name, attributes, selfClosing = false) {\n  const node = {\n    type: "JSXOpeningElement",\n    name,\n    attributes,\n    selfClosing\n  };\n  const defs = NODE_FIELDS.JSXOpeningElement;\n  validate(defs.name, node, "name", name, 1);\n  validate(defs.attributes, node, "attributes", attributes, 1);\n  validate(defs.selfClosing, node, "selfClosing", selfClosing);\n  return node;\n}\nfunction jsxSpreadAttribute(argument) {\n  const node = {\n    type: "JSXSpreadAttribute",\n    argument\n  };\n  const defs = NODE_FIELDS.JSXSpreadAttribute;\n  validate(defs.argument, node, "argument", argument, 1);\n  return node;\n}\nfunction jsxText(value) {\n  const node = {\n    type: "JSXText",\n    value\n  };\n  const defs = NODE_FIELDS.JSXText;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction jsxFragment(openingFragment, closingFragment, children) {\n  const node = {\n    type: "JSXFragment",\n    openingFragment,\n    closingFragment,\n    children\n  };\n  const defs = NODE_FIELDS.JSXFragment;\n  validate(defs.openingFragment, node, "openingFragment", openingFragment, 1);\n  validate(defs.closingFragment, node, "closingFragment", closingFragment, 1);\n  validate(defs.children, node, "children", children, 1);\n  return node;\n}\nfunction jsxOpeningFragment() {\n  return {\n    type: "JSXOpeningFragment"\n  };\n}\nfunction jsxClosingFragment() {\n  return {\n    type: "JSXClosingFragment"\n  };\n}\nfunction noop() {\n  return {\n    type: "Noop"\n  };\n}\nfunction placeholder(expectedNode, name) {\n  const node = {\n    type: "Placeholder",\n    expectedNode,\n    name\n  };\n  const defs = NODE_FIELDS.Placeholder;\n  validate(defs.expectedNode, node, "expectedNode", expectedNode);\n  validate(defs.name, node, "name", name, 1);\n  return node;\n}\nfunction v8IntrinsicIdentifier(name) {\n  const node = {\n    type: "V8IntrinsicIdentifier",\n    name\n  };\n  const defs = NODE_FIELDS.V8IntrinsicIdentifier;\n  validate(defs.name, node, "name", name);\n  return node;\n}\nfunction argumentPlaceholder() {\n  return {\n    type: "ArgumentPlaceholder"\n  };\n}\nfunction bindExpression(object, callee) {\n  const node = {\n    type: "BindExpression",\n    object,\n    callee\n  };\n  const defs = NODE_FIELDS.BindExpression;\n  validate(defs.object, node, "object", object, 1);\n  validate(defs.callee, node, "callee", callee, 1);\n  return node;\n}\nfunction importAttribute(key, value) {\n  const node = {\n    type: "ImportAttribute",\n    key,\n    value\n  };\n  const defs = NODE_FIELDS.ImportAttribute;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.value, node, "value", value, 1);\n  return node;\n}\nfunction decorator(expression) {\n  const node = {\n    type: "Decorator",\n    expression\n  };\n  const defs = NODE_FIELDS.Decorator;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction doExpression(body, async = false) {\n  const node = {\n    type: "DoExpression",\n    body,\n    async\n  };\n  const defs = NODE_FIELDS.DoExpression;\n  validate(defs.body, node, "body", body, 1);\n  validate(defs.async, node, "async", async);\n  return node;\n}\nfunction exportDefaultSpecifier(exported) {\n  const node = {\n    type: "ExportDefaultSpecifier",\n    exported\n  };\n  const defs = NODE_FIELDS.ExportDefaultSpecifier;\n  validate(defs.exported, node, "exported", exported, 1);\n  return node;\n}\nfunction recordExpression(properties) {\n  const node = {\n    type: "RecordExpression",\n    properties\n  };\n  const defs = NODE_FIELDS.RecordExpression;\n  validate(defs.properties, node, "properties", properties, 1);\n  return node;\n}\nfunction tupleExpression(elements = []) {\n  const node = {\n    type: "TupleExpression",\n    elements\n  };\n  const defs = NODE_FIELDS.TupleExpression;\n  validate(defs.elements, node, "elements", elements, 1);\n  return node;\n}\nfunction decimalLiteral(value) {\n  const node = {\n    type: "DecimalLiteral",\n    value\n  };\n  const defs = NODE_FIELDS.DecimalLiteral;\n  validate(defs.value, node, "value", value);\n  return node;\n}\nfunction moduleExpression(body) {\n  const node = {\n    type: "ModuleExpression",\n    body\n  };\n  const defs = NODE_FIELDS.ModuleExpression;\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction topicReference() {\n  return {\n    type: "TopicReference"\n  };\n}\nfunction pipelineTopicExpression(expression) {\n  const node = {\n    type: "PipelineTopicExpression",\n    expression\n  };\n  const defs = NODE_FIELDS.PipelineTopicExpression;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction pipelineBareFunction(callee) {\n  const node = {\n    type: "PipelineBareFunction",\n    callee\n  };\n  const defs = NODE_FIELDS.PipelineBareFunction;\n  validate(defs.callee, node, "callee", callee, 1);\n  return node;\n}\nfunction pipelinePrimaryTopicReference() {\n  return {\n    type: "PipelinePrimaryTopicReference"\n  };\n}\nfunction tsParameterProperty(parameter) {\n  const node = {\n    type: "TSParameterProperty",\n    parameter\n  };\n  const defs = NODE_FIELDS.TSParameterProperty;\n  validate(defs.parameter, node, "parameter", parameter, 1);\n  return node;\n}\nfunction tsDeclareFunction(id = null, typeParameters = null, params, returnType = null) {\n  const node = {\n    type: "TSDeclareFunction",\n    id,\n    typeParameters,\n    params,\n    returnType\n  };\n  const defs = NODE_FIELDS.TSDeclareFunction;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.returnType, node, "returnType", returnType, 1);\n  return node;\n}\nfunction tsDeclareMethod(decorators = null, key, typeParameters = null, params, returnType = null) {\n  const node = {\n    type: "TSDeclareMethod",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType\n  };\n  const defs = NODE_FIELDS.TSDeclareMethod;\n  validate(defs.decorators, node, "decorators", decorators, 1);\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.params, node, "params", params, 1);\n  validate(defs.returnType, node, "returnType", returnType, 1);\n  return node;\n}\nfunction tsQualifiedName(left, right) {\n  const node = {\n    type: "TSQualifiedName",\n    left,\n    right\n  };\n  const defs = NODE_FIELDS.TSQualifiedName;\n  validate(defs.left, node, "left", left, 1);\n  validate(defs.right, node, "right", right, 1);\n  return node;\n}\nfunction tsCallSignatureDeclaration(typeParameters = null, parameters, typeAnnotation = null) {\n  const node = {\n    type: "TSCallSignatureDeclaration",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSCallSignatureDeclaration;\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.parameters, node, "parameters", parameters, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsConstructSignatureDeclaration(typeParameters = null, parameters, typeAnnotation = null) {\n  const node = {\n    type: "TSConstructSignatureDeclaration",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSConstructSignatureDeclaration;\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.parameters, node, "parameters", parameters, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsPropertySignature(key, typeAnnotation = null) {\n  const node = {\n    type: "TSPropertySignature",\n    key,\n    typeAnnotation,\n    kind: null\n  };\n  const defs = NODE_FIELDS.TSPropertySignature;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsMethodSignature(key, typeParameters = null, parameters, typeAnnotation = null) {\n  const node = {\n    type: "TSMethodSignature",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null\n  };\n  const defs = NODE_FIELDS.TSMethodSignature;\n  validate(defs.key, node, "key", key, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.parameters, node, "parameters", parameters, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsIndexSignature(parameters, typeAnnotation = null) {\n  const node = {\n    type: "TSIndexSignature",\n    parameters,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSIndexSignature;\n  validate(defs.parameters, node, "parameters", parameters, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsAnyKeyword() {\n  return {\n    type: "TSAnyKeyword"\n  };\n}\nfunction tsBooleanKeyword() {\n  return {\n    type: "TSBooleanKeyword"\n  };\n}\nfunction tsBigIntKeyword() {\n  return {\n    type: "TSBigIntKeyword"\n  };\n}\nfunction tsIntrinsicKeyword() {\n  return {\n    type: "TSIntrinsicKeyword"\n  };\n}\nfunction tsNeverKeyword() {\n  return {\n    type: "TSNeverKeyword"\n  };\n}\nfunction tsNullKeyword() {\n  return {\n    type: "TSNullKeyword"\n  };\n}\nfunction tsNumberKeyword() {\n  return {\n    type: "TSNumberKeyword"\n  };\n}\nfunction tsObjectKeyword() {\n  return {\n    type: "TSObjectKeyword"\n  };\n}\nfunction tsStringKeyword() {\n  return {\n    type: "TSStringKeyword"\n  };\n}\nfunction tsSymbolKeyword() {\n  return {\n    type: "TSSymbolKeyword"\n  };\n}\nfunction tsUndefinedKeyword() {\n  return {\n    type: "TSUndefinedKeyword"\n  };\n}\nfunction tsUnknownKeyword() {\n  return {\n    type: "TSUnknownKeyword"\n  };\n}\nfunction tsVoidKeyword() {\n  return {\n    type: "TSVoidKeyword"\n  };\n}\nfunction tsThisType() {\n  return {\n    type: "TSThisType"\n  };\n}\nfunction tsFunctionType(typeParameters = null, parameters, typeAnnotation = null) {\n  const node = {\n    type: "TSFunctionType",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSFunctionType;\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.parameters, node, "parameters", parameters, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsConstructorType(typeParameters = null, parameters, typeAnnotation = null) {\n  const node = {\n    type: "TSConstructorType",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSConstructorType;\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.parameters, node, "parameters", parameters, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsTypeReference(typeName, typeParameters = null) {\n  const node = {\n    type: "TSTypeReference",\n    typeName,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.TSTypeReference;\n  validate(defs.typeName, node, "typeName", typeName, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction tsTypePredicate(parameterName, typeAnnotation = null, asserts = null) {\n  const node = {\n    type: "TSTypePredicate",\n    parameterName,\n    typeAnnotation,\n    asserts\n  };\n  const defs = NODE_FIELDS.TSTypePredicate;\n  validate(defs.parameterName, node, "parameterName", parameterName, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  validate(defs.asserts, node, "asserts", asserts);\n  return node;\n}\nfunction tsTypeQuery(exprName, typeParameters = null) {\n  const node = {\n    type: "TSTypeQuery",\n    exprName,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.TSTypeQuery;\n  validate(defs.exprName, node, "exprName", exprName, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction tsTypeLiteral(members) {\n  const node = {\n    type: "TSTypeLiteral",\n    members\n  };\n  const defs = NODE_FIELDS.TSTypeLiteral;\n  validate(defs.members, node, "members", members, 1);\n  return node;\n}\nfunction tsArrayType(elementType) {\n  const node = {\n    type: "TSArrayType",\n    elementType\n  };\n  const defs = NODE_FIELDS.TSArrayType;\n  validate(defs.elementType, node, "elementType", elementType, 1);\n  return node;\n}\nfunction tsTupleType(elementTypes) {\n  const node = {\n    type: "TSTupleType",\n    elementTypes\n  };\n  const defs = NODE_FIELDS.TSTupleType;\n  validate(defs.elementTypes, node, "elementTypes", elementTypes, 1);\n  return node;\n}\nfunction tsOptionalType(typeAnnotation) {\n  const node = {\n    type: "TSOptionalType",\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSOptionalType;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsRestType(typeAnnotation) {\n  const node = {\n    type: "TSRestType",\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSRestType;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsNamedTupleMember(label, elementType, optional = false) {\n  const node = {\n    type: "TSNamedTupleMember",\n    label,\n    elementType,\n    optional\n  };\n  const defs = NODE_FIELDS.TSNamedTupleMember;\n  validate(defs.label, node, "label", label, 1);\n  validate(defs.elementType, node, "elementType", elementType, 1);\n  validate(defs.optional, node, "optional", optional);\n  return node;\n}\nfunction tsUnionType(types) {\n  const node = {\n    type: "TSUnionType",\n    types\n  };\n  const defs = NODE_FIELDS.TSUnionType;\n  validate(defs.types, node, "types", types, 1);\n  return node;\n}\nfunction tsIntersectionType(types) {\n  const node = {\n    type: "TSIntersectionType",\n    types\n  };\n  const defs = NODE_FIELDS.TSIntersectionType;\n  validate(defs.types, node, "types", types, 1);\n  return node;\n}\nfunction tsConditionalType(checkType, extendsType, trueType, falseType) {\n  const node = {\n    type: "TSConditionalType",\n    checkType,\n    extendsType,\n    trueType,\n    falseType\n  };\n  const defs = NODE_FIELDS.TSConditionalType;\n  validate(defs.checkType, node, "checkType", checkType, 1);\n  validate(defs.extendsType, node, "extendsType", extendsType, 1);\n  validate(defs.trueType, node, "trueType", trueType, 1);\n  validate(defs.falseType, node, "falseType", falseType, 1);\n  return node;\n}\nfunction tsInferType(typeParameter) {\n  const node = {\n    type: "TSInferType",\n    typeParameter\n  };\n  const defs = NODE_FIELDS.TSInferType;\n  validate(defs.typeParameter, node, "typeParameter", typeParameter, 1);\n  return node;\n}\nfunction tsParenthesizedType(typeAnnotation) {\n  const node = {\n    type: "TSParenthesizedType",\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSParenthesizedType;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsTypeOperator(typeAnnotation) {\n  const node = {\n    type: "TSTypeOperator",\n    typeAnnotation,\n    operator: null\n  };\n  const defs = NODE_FIELDS.TSTypeOperator;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsIndexedAccessType(objectType, indexType) {\n  const node = {\n    type: "TSIndexedAccessType",\n    objectType,\n    indexType\n  };\n  const defs = NODE_FIELDS.TSIndexedAccessType;\n  validate(defs.objectType, node, "objectType", objectType, 1);\n  validate(defs.indexType, node, "indexType", indexType, 1);\n  return node;\n}\nfunction tsMappedType(typeParameter, typeAnnotation = null, nameType = null) {\n  const node = {\n    type: "TSMappedType",\n    typeParameter,\n    typeAnnotation,\n    nameType\n  };\n  const defs = NODE_FIELDS.TSMappedType;\n  validate(defs.typeParameter, node, "typeParameter", typeParameter, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  validate(defs.nameType, node, "nameType", nameType, 1);\n  return node;\n}\nfunction tsLiteralType(literal) {\n  const node = {\n    type: "TSLiteralType",\n    literal\n  };\n  const defs = NODE_FIELDS.TSLiteralType;\n  validate(defs.literal, node, "literal", literal, 1);\n  return node;\n}\nfunction tsExpressionWithTypeArguments(expression, typeParameters = null) {\n  const node = {\n    type: "TSExpressionWithTypeArguments",\n    expression,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.TSExpressionWithTypeArguments;\n  validate(defs.expression, node, "expression", expression, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction tsInterfaceDeclaration(id, typeParameters = null, _extends = null, body) {\n  const node = {\n    type: "TSInterfaceDeclaration",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  };\n  const defs = NODE_FIELDS.TSInterfaceDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.extends, node, "extends", _extends, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction tsInterfaceBody(body) {\n  const node = {\n    type: "TSInterfaceBody",\n    body\n  };\n  const defs = NODE_FIELDS.TSInterfaceBody;\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction tsTypeAliasDeclaration(id, typeParameters = null, typeAnnotation) {\n  const node = {\n    type: "TSTypeAliasDeclaration",\n    id,\n    typeParameters,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSTypeAliasDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsInstantiationExpression(expression, typeParameters = null) {\n  const node = {\n    type: "TSInstantiationExpression",\n    expression,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.TSInstantiationExpression;\n  validate(defs.expression, node, "expression", expression, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction tsAsExpression(expression, typeAnnotation) {\n  const node = {\n    type: "TSAsExpression",\n    expression,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSAsExpression;\n  validate(defs.expression, node, "expression", expression, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsSatisfiesExpression(expression, typeAnnotation) {\n  const node = {\n    type: "TSSatisfiesExpression",\n    expression,\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSSatisfiesExpression;\n  validate(defs.expression, node, "expression", expression, 1);\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsTypeAssertion(typeAnnotation, expression) {\n  const node = {\n    type: "TSTypeAssertion",\n    typeAnnotation,\n    expression\n  };\n  const defs = NODE_FIELDS.TSTypeAssertion;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction tsEnumDeclaration(id, members) {\n  const node = {\n    type: "TSEnumDeclaration",\n    id,\n    members\n  };\n  const defs = NODE_FIELDS.TSEnumDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.members, node, "members", members, 1);\n  return node;\n}\nfunction tsEnumMember(id, initializer = null) {\n  const node = {\n    type: "TSEnumMember",\n    id,\n    initializer\n  };\n  const defs = NODE_FIELDS.TSEnumMember;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.initializer, node, "initializer", initializer, 1);\n  return node;\n}\nfunction tsModuleDeclaration(id, body) {\n  const node = {\n    type: "TSModuleDeclaration",\n    id,\n    body,\n    kind: null\n  };\n  const defs = NODE_FIELDS.TSModuleDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction tsModuleBlock(body) {\n  const node = {\n    type: "TSModuleBlock",\n    body\n  };\n  const defs = NODE_FIELDS.TSModuleBlock;\n  validate(defs.body, node, "body", body, 1);\n  return node;\n}\nfunction tsImportType(argument, qualifier = null, typeParameters = null) {\n  const node = {\n    type: "TSImportType",\n    argument,\n    qualifier,\n    typeParameters\n  };\n  const defs = NODE_FIELDS.TSImportType;\n  validate(defs.argument, node, "argument", argument, 1);\n  validate(defs.qualifier, node, "qualifier", qualifier, 1);\n  validate(defs.typeParameters, node, "typeParameters", typeParameters, 1);\n  return node;\n}\nfunction tsImportEqualsDeclaration(id, moduleReference) {\n  const node = {\n    type: "TSImportEqualsDeclaration",\n    id,\n    moduleReference,\n    isExport: null\n  };\n  const defs = NODE_FIELDS.TSImportEqualsDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  validate(defs.moduleReference, node, "moduleReference", moduleReference, 1);\n  return node;\n}\nfunction tsExternalModuleReference(expression) {\n  const node = {\n    type: "TSExternalModuleReference",\n    expression\n  };\n  const defs = NODE_FIELDS.TSExternalModuleReference;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction tsNonNullExpression(expression) {\n  const node = {\n    type: "TSNonNullExpression",\n    expression\n  };\n  const defs = NODE_FIELDS.TSNonNullExpression;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction tsExportAssignment(expression) {\n  const node = {\n    type: "TSExportAssignment",\n    expression\n  };\n  const defs = NODE_FIELDS.TSExportAssignment;\n  validate(defs.expression, node, "expression", expression, 1);\n  return node;\n}\nfunction tsNamespaceExportDeclaration(id) {\n  const node = {\n    type: "TSNamespaceExportDeclaration",\n    id\n  };\n  const defs = NODE_FIELDS.TSNamespaceExportDeclaration;\n  validate(defs.id, node, "id", id, 1);\n  return node;\n}\nfunction tsTypeAnnotation(typeAnnotation) {\n  const node = {\n    type: "TSTypeAnnotation",\n    typeAnnotation\n  };\n  const defs = NODE_FIELDS.TSTypeAnnotation;\n  validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1);\n  return node;\n}\nfunction tsTypeParameterInstantiation(params) {\n  const node = {\n    type: "TSTypeParameterInstantiation",\n    params\n  };\n  const defs = NODE_FIELDS.TSTypeParameterInstantiation;\n  validate(defs.params, node, "params", params, 1);\n  return node;\n}\nfunction tsTypeParameterDeclaration(params) {\n  const node = {\n    type: "TSTypeParameterDeclaration",\n    params\n  };\n  const defs = NODE_FIELDS.TSTypeParameterDeclaration;\n  validate(defs.params, node, "params", params, 1);\n  return node;\n}\nfunction tsTypeParameter(constraint = null, _default = null, name) {\n  const node = {\n    type: "TSTypeParameter",\n    constraint,\n    default: _default,\n    name\n  };\n  const defs = NODE_FIELDS.TSTypeParameter;\n  validate(defs.constraint, node, "constraint", constraint, 1);\n  validate(defs.default, node, "default", _default, 1);\n  validate(defs.name, node, "name", name);\n  return node;\n}\nfunction NumberLiteral(value) {\n  (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type ");\n  return numericLiteral(value);\n}\nfunction RegexLiteral(pattern, flags = "") {\n  (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type ");\n  return regExpLiteral(pattern, flags);\n}\nfunction RestProperty(argument) {\n  (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type ");\n  return restElement(argument);\n}\nfunction SpreadProperty(argument) {\n  (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type ");\n  return spreadElement(argument);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48079\n')},76779:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nObject.defineProperty(exports, "AnyTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.anyTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "ArgumentPlaceholder", ({\n  enumerable: true,\n  get: function () {\n    return _index.argumentPlaceholder;\n  }\n}));\nObject.defineProperty(exports, "ArrayExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.arrayExpression;\n  }\n}));\nObject.defineProperty(exports, "ArrayPattern", ({\n  enumerable: true,\n  get: function () {\n    return _index.arrayPattern;\n  }\n}));\nObject.defineProperty(exports, "ArrayTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.arrayTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "ArrowFunctionExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.arrowFunctionExpression;\n  }\n}));\nObject.defineProperty(exports, "AssignmentExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.assignmentExpression;\n  }\n}));\nObject.defineProperty(exports, "AssignmentPattern", ({\n  enumerable: true,\n  get: function () {\n    return _index.assignmentPattern;\n  }\n}));\nObject.defineProperty(exports, "AwaitExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.awaitExpression;\n  }\n}));\nObject.defineProperty(exports, "BigIntLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.bigIntLiteral;\n  }\n}));\nObject.defineProperty(exports, "BinaryExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.binaryExpression;\n  }\n}));\nObject.defineProperty(exports, "BindExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.bindExpression;\n  }\n}));\nObject.defineProperty(exports, "BlockStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.blockStatement;\n  }\n}));\nObject.defineProperty(exports, "BooleanLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.booleanLiteral;\n  }\n}));\nObject.defineProperty(exports, "BooleanLiteralTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.booleanLiteralTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "BooleanTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.booleanTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "BreakStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.breakStatement;\n  }\n}));\nObject.defineProperty(exports, "CallExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.callExpression;\n  }\n}));\nObject.defineProperty(exports, "CatchClause", ({\n  enumerable: true,\n  get: function () {\n    return _index.catchClause;\n  }\n}));\nObject.defineProperty(exports, "ClassAccessorProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.classAccessorProperty;\n  }\n}));\nObject.defineProperty(exports, "ClassBody", ({\n  enumerable: true,\n  get: function () {\n    return _index.classBody;\n  }\n}));\nObject.defineProperty(exports, "ClassDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.classDeclaration;\n  }\n}));\nObject.defineProperty(exports, "ClassExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.classExpression;\n  }\n}));\nObject.defineProperty(exports, "ClassImplements", ({\n  enumerable: true,\n  get: function () {\n    return _index.classImplements;\n  }\n}));\nObject.defineProperty(exports, "ClassMethod", ({\n  enumerable: true,\n  get: function () {\n    return _index.classMethod;\n  }\n}));\nObject.defineProperty(exports, "ClassPrivateMethod", ({\n  enumerable: true,\n  get: function () {\n    return _index.classPrivateMethod;\n  }\n}));\nObject.defineProperty(exports, "ClassPrivateProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.classPrivateProperty;\n  }\n}));\nObject.defineProperty(exports, "ClassProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.classProperty;\n  }\n}));\nObject.defineProperty(exports, "ConditionalExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.conditionalExpression;\n  }\n}));\nObject.defineProperty(exports, "ContinueStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.continueStatement;\n  }\n}));\nObject.defineProperty(exports, "DebuggerStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.debuggerStatement;\n  }\n}));\nObject.defineProperty(exports, "DecimalLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.decimalLiteral;\n  }\n}));\nObject.defineProperty(exports, "DeclareClass", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareClass;\n  }\n}));\nObject.defineProperty(exports, "DeclareExportAllDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareExportAllDeclaration;\n  }\n}));\nObject.defineProperty(exports, "DeclareExportDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareExportDeclaration;\n  }\n}));\nObject.defineProperty(exports, "DeclareFunction", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareFunction;\n  }\n}));\nObject.defineProperty(exports, "DeclareInterface", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareInterface;\n  }\n}));\nObject.defineProperty(exports, "DeclareModule", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareModule;\n  }\n}));\nObject.defineProperty(exports, "DeclareModuleExports", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareModuleExports;\n  }\n}));\nObject.defineProperty(exports, "DeclareOpaqueType", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareOpaqueType;\n  }\n}));\nObject.defineProperty(exports, "DeclareTypeAlias", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareTypeAlias;\n  }\n}));\nObject.defineProperty(exports, "DeclareVariable", ({\n  enumerable: true,\n  get: function () {\n    return _index.declareVariable;\n  }\n}));\nObject.defineProperty(exports, "DeclaredPredicate", ({\n  enumerable: true,\n  get: function () {\n    return _index.declaredPredicate;\n  }\n}));\nObject.defineProperty(exports, "Decorator", ({\n  enumerable: true,\n  get: function () {\n    return _index.decorator;\n  }\n}));\nObject.defineProperty(exports, "Directive", ({\n  enumerable: true,\n  get: function () {\n    return _index.directive;\n  }\n}));\nObject.defineProperty(exports, "DirectiveLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.directiveLiteral;\n  }\n}));\nObject.defineProperty(exports, "DoExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.doExpression;\n  }\n}));\nObject.defineProperty(exports, "DoWhileStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.doWhileStatement;\n  }\n}));\nObject.defineProperty(exports, "EmptyStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.emptyStatement;\n  }\n}));\nObject.defineProperty(exports, "EmptyTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.emptyTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "EnumBooleanBody", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumBooleanBody;\n  }\n}));\nObject.defineProperty(exports, "EnumBooleanMember", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumBooleanMember;\n  }\n}));\nObject.defineProperty(exports, "EnumDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumDeclaration;\n  }\n}));\nObject.defineProperty(exports, "EnumDefaultedMember", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumDefaultedMember;\n  }\n}));\nObject.defineProperty(exports, "EnumNumberBody", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumNumberBody;\n  }\n}));\nObject.defineProperty(exports, "EnumNumberMember", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumNumberMember;\n  }\n}));\nObject.defineProperty(exports, "EnumStringBody", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumStringBody;\n  }\n}));\nObject.defineProperty(exports, "EnumStringMember", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumStringMember;\n  }\n}));\nObject.defineProperty(exports, "EnumSymbolBody", ({\n  enumerable: true,\n  get: function () {\n    return _index.enumSymbolBody;\n  }\n}));\nObject.defineProperty(exports, "ExistsTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.existsTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "ExportAllDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.exportAllDeclaration;\n  }\n}));\nObject.defineProperty(exports, "ExportDefaultDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.exportDefaultDeclaration;\n  }\n}));\nObject.defineProperty(exports, "ExportDefaultSpecifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.exportDefaultSpecifier;\n  }\n}));\nObject.defineProperty(exports, "ExportNamedDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.exportNamedDeclaration;\n  }\n}));\nObject.defineProperty(exports, "ExportNamespaceSpecifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.exportNamespaceSpecifier;\n  }\n}));\nObject.defineProperty(exports, "ExportSpecifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.exportSpecifier;\n  }\n}));\nObject.defineProperty(exports, "ExpressionStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.expressionStatement;\n  }\n}));\nObject.defineProperty(exports, "File", ({\n  enumerable: true,\n  get: function () {\n    return _index.file;\n  }\n}));\nObject.defineProperty(exports, "ForInStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.forInStatement;\n  }\n}));\nObject.defineProperty(exports, "ForOfStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.forOfStatement;\n  }\n}));\nObject.defineProperty(exports, "ForStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.forStatement;\n  }\n}));\nObject.defineProperty(exports, "FunctionDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.functionDeclaration;\n  }\n}));\nObject.defineProperty(exports, "FunctionExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.functionExpression;\n  }\n}));\nObject.defineProperty(exports, "FunctionTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.functionTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "FunctionTypeParam", ({\n  enumerable: true,\n  get: function () {\n    return _index.functionTypeParam;\n  }\n}));\nObject.defineProperty(exports, "GenericTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.genericTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "Identifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.identifier;\n  }\n}));\nObject.defineProperty(exports, "IfStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.ifStatement;\n  }\n}));\nObject.defineProperty(exports, "Import", ({\n  enumerable: true,\n  get: function () {\n    return _index.import;\n  }\n}));\nObject.defineProperty(exports, "ImportAttribute", ({\n  enumerable: true,\n  get: function () {\n    return _index.importAttribute;\n  }\n}));\nObject.defineProperty(exports, "ImportDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.importDeclaration;\n  }\n}));\nObject.defineProperty(exports, "ImportDefaultSpecifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.importDefaultSpecifier;\n  }\n}));\nObject.defineProperty(exports, "ImportExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.importExpression;\n  }\n}));\nObject.defineProperty(exports, "ImportNamespaceSpecifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.importNamespaceSpecifier;\n  }\n}));\nObject.defineProperty(exports, "ImportSpecifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.importSpecifier;\n  }\n}));\nObject.defineProperty(exports, "IndexedAccessType", ({\n  enumerable: true,\n  get: function () {\n    return _index.indexedAccessType;\n  }\n}));\nObject.defineProperty(exports, "InferredPredicate", ({\n  enumerable: true,\n  get: function () {\n    return _index.inferredPredicate;\n  }\n}));\nObject.defineProperty(exports, "InterfaceDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.interfaceDeclaration;\n  }\n}));\nObject.defineProperty(exports, "InterfaceExtends", ({\n  enumerable: true,\n  get: function () {\n    return _index.interfaceExtends;\n  }\n}));\nObject.defineProperty(exports, "InterfaceTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.interfaceTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "InterpreterDirective", ({\n  enumerable: true,\n  get: function () {\n    return _index.interpreterDirective;\n  }\n}));\nObject.defineProperty(exports, "IntersectionTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.intersectionTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "JSXAttribute", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxAttribute;\n  }\n}));\nObject.defineProperty(exports, "JSXClosingElement", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxClosingElement;\n  }\n}));\nObject.defineProperty(exports, "JSXClosingFragment", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxClosingFragment;\n  }\n}));\nObject.defineProperty(exports, "JSXElement", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxElement;\n  }\n}));\nObject.defineProperty(exports, "JSXEmptyExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxEmptyExpression;\n  }\n}));\nObject.defineProperty(exports, "JSXExpressionContainer", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxExpressionContainer;\n  }\n}));\nObject.defineProperty(exports, "JSXFragment", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxFragment;\n  }\n}));\nObject.defineProperty(exports, "JSXIdentifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxIdentifier;\n  }\n}));\nObject.defineProperty(exports, "JSXMemberExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxMemberExpression;\n  }\n}));\nObject.defineProperty(exports, "JSXNamespacedName", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxNamespacedName;\n  }\n}));\nObject.defineProperty(exports, "JSXOpeningElement", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxOpeningElement;\n  }\n}));\nObject.defineProperty(exports, "JSXOpeningFragment", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxOpeningFragment;\n  }\n}));\nObject.defineProperty(exports, "JSXSpreadAttribute", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxSpreadAttribute;\n  }\n}));\nObject.defineProperty(exports, "JSXSpreadChild", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxSpreadChild;\n  }\n}));\nObject.defineProperty(exports, "JSXText", ({\n  enumerable: true,\n  get: function () {\n    return _index.jsxText;\n  }\n}));\nObject.defineProperty(exports, "LabeledStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.labeledStatement;\n  }\n}));\nObject.defineProperty(exports, "LogicalExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.logicalExpression;\n  }\n}));\nObject.defineProperty(exports, "MemberExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.memberExpression;\n  }\n}));\nObject.defineProperty(exports, "MetaProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.metaProperty;\n  }\n}));\nObject.defineProperty(exports, "MixedTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.mixedTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "ModuleExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.moduleExpression;\n  }\n}));\nObject.defineProperty(exports, "NewExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.newExpression;\n  }\n}));\nObject.defineProperty(exports, "Noop", ({\n  enumerable: true,\n  get: function () {\n    return _index.noop;\n  }\n}));\nObject.defineProperty(exports, "NullLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.nullLiteral;\n  }\n}));\nObject.defineProperty(exports, "NullLiteralTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.nullLiteralTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "NullableTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.nullableTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "NumberLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.numberLiteral;\n  }\n}));\nObject.defineProperty(exports, "NumberLiteralTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.numberLiteralTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "NumberTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.numberTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "NumericLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.numericLiteral;\n  }\n}));\nObject.defineProperty(exports, "ObjectExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectExpression;\n  }\n}));\nObject.defineProperty(exports, "ObjectMethod", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectMethod;\n  }\n}));\nObject.defineProperty(exports, "ObjectPattern", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectPattern;\n  }\n}));\nObject.defineProperty(exports, "ObjectProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectProperty;\n  }\n}));\nObject.defineProperty(exports, "ObjectTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "ObjectTypeCallProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectTypeCallProperty;\n  }\n}));\nObject.defineProperty(exports, "ObjectTypeIndexer", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectTypeIndexer;\n  }\n}));\nObject.defineProperty(exports, "ObjectTypeInternalSlot", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectTypeInternalSlot;\n  }\n}));\nObject.defineProperty(exports, "ObjectTypeProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectTypeProperty;\n  }\n}));\nObject.defineProperty(exports, "ObjectTypeSpreadProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.objectTypeSpreadProperty;\n  }\n}));\nObject.defineProperty(exports, "OpaqueType", ({\n  enumerable: true,\n  get: function () {\n    return _index.opaqueType;\n  }\n}));\nObject.defineProperty(exports, "OptionalCallExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.optionalCallExpression;\n  }\n}));\nObject.defineProperty(exports, "OptionalIndexedAccessType", ({\n  enumerable: true,\n  get: function () {\n    return _index.optionalIndexedAccessType;\n  }\n}));\nObject.defineProperty(exports, "OptionalMemberExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.optionalMemberExpression;\n  }\n}));\nObject.defineProperty(exports, "ParenthesizedExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.parenthesizedExpression;\n  }\n}));\nObject.defineProperty(exports, "PipelineBareFunction", ({\n  enumerable: true,\n  get: function () {\n    return _index.pipelineBareFunction;\n  }\n}));\nObject.defineProperty(exports, "PipelinePrimaryTopicReference", ({\n  enumerable: true,\n  get: function () {\n    return _index.pipelinePrimaryTopicReference;\n  }\n}));\nObject.defineProperty(exports, "PipelineTopicExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.pipelineTopicExpression;\n  }\n}));\nObject.defineProperty(exports, "Placeholder", ({\n  enumerable: true,\n  get: function () {\n    return _index.placeholder;\n  }\n}));\nObject.defineProperty(exports, "PrivateName", ({\n  enumerable: true,\n  get: function () {\n    return _index.privateName;\n  }\n}));\nObject.defineProperty(exports, "Program", ({\n  enumerable: true,\n  get: function () {\n    return _index.program;\n  }\n}));\nObject.defineProperty(exports, "QualifiedTypeIdentifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.qualifiedTypeIdentifier;\n  }\n}));\nObject.defineProperty(exports, "RecordExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.recordExpression;\n  }\n}));\nObject.defineProperty(exports, "RegExpLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.regExpLiteral;\n  }\n}));\nObject.defineProperty(exports, "RegexLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.regexLiteral;\n  }\n}));\nObject.defineProperty(exports, "RestElement", ({\n  enumerable: true,\n  get: function () {\n    return _index.restElement;\n  }\n}));\nObject.defineProperty(exports, "RestProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.restProperty;\n  }\n}));\nObject.defineProperty(exports, "ReturnStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.returnStatement;\n  }\n}));\nObject.defineProperty(exports, "SequenceExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.sequenceExpression;\n  }\n}));\nObject.defineProperty(exports, "SpreadElement", ({\n  enumerable: true,\n  get: function () {\n    return _index.spreadElement;\n  }\n}));\nObject.defineProperty(exports, "SpreadProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.spreadProperty;\n  }\n}));\nObject.defineProperty(exports, "StaticBlock", ({\n  enumerable: true,\n  get: function () {\n    return _index.staticBlock;\n  }\n}));\nObject.defineProperty(exports, "StringLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.stringLiteral;\n  }\n}));\nObject.defineProperty(exports, "StringLiteralTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.stringLiteralTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "StringTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.stringTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "Super", ({\n  enumerable: true,\n  get: function () {\n    return _index.super;\n  }\n}));\nObject.defineProperty(exports, "SwitchCase", ({\n  enumerable: true,\n  get: function () {\n    return _index.switchCase;\n  }\n}));\nObject.defineProperty(exports, "SwitchStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.switchStatement;\n  }\n}));\nObject.defineProperty(exports, "SymbolTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.symbolTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "TSAnyKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsAnyKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSArrayType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsArrayType;\n  }\n}));\nObject.defineProperty(exports, "TSAsExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsAsExpression;\n  }\n}));\nObject.defineProperty(exports, "TSBigIntKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsBigIntKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSBooleanKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsBooleanKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSCallSignatureDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsCallSignatureDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSConditionalType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsConditionalType;\n  }\n}));\nObject.defineProperty(exports, "TSConstructSignatureDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsConstructSignatureDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSConstructorType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsConstructorType;\n  }\n}));\nObject.defineProperty(exports, "TSDeclareFunction", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsDeclareFunction;\n  }\n}));\nObject.defineProperty(exports, "TSDeclareMethod", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsDeclareMethod;\n  }\n}));\nObject.defineProperty(exports, "TSEnumDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsEnumDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSEnumMember", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsEnumMember;\n  }\n}));\nObject.defineProperty(exports, "TSExportAssignment", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsExportAssignment;\n  }\n}));\nObject.defineProperty(exports, "TSExpressionWithTypeArguments", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsExpressionWithTypeArguments;\n  }\n}));\nObject.defineProperty(exports, "TSExternalModuleReference", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsExternalModuleReference;\n  }\n}));\nObject.defineProperty(exports, "TSFunctionType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsFunctionType;\n  }\n}));\nObject.defineProperty(exports, "TSImportEqualsDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsImportEqualsDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSImportType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsImportType;\n  }\n}));\nObject.defineProperty(exports, "TSIndexSignature", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsIndexSignature;\n  }\n}));\nObject.defineProperty(exports, "TSIndexedAccessType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsIndexedAccessType;\n  }\n}));\nObject.defineProperty(exports, "TSInferType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsInferType;\n  }\n}));\nObject.defineProperty(exports, "TSInstantiationExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsInstantiationExpression;\n  }\n}));\nObject.defineProperty(exports, "TSInterfaceBody", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsInterfaceBody;\n  }\n}));\nObject.defineProperty(exports, "TSInterfaceDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsInterfaceDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSIntersectionType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsIntersectionType;\n  }\n}));\nObject.defineProperty(exports, "TSIntrinsicKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsIntrinsicKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSLiteralType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsLiteralType;\n  }\n}));\nObject.defineProperty(exports, "TSMappedType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsMappedType;\n  }\n}));\nObject.defineProperty(exports, "TSMethodSignature", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsMethodSignature;\n  }\n}));\nObject.defineProperty(exports, "TSModuleBlock", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsModuleBlock;\n  }\n}));\nObject.defineProperty(exports, "TSModuleDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsModuleDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSNamedTupleMember", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsNamedTupleMember;\n  }\n}));\nObject.defineProperty(exports, "TSNamespaceExportDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsNamespaceExportDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSNeverKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsNeverKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSNonNullExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsNonNullExpression;\n  }\n}));\nObject.defineProperty(exports, "TSNullKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsNullKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSNumberKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsNumberKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSObjectKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsObjectKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSOptionalType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsOptionalType;\n  }\n}));\nObject.defineProperty(exports, "TSParameterProperty", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsParameterProperty;\n  }\n}));\nObject.defineProperty(exports, "TSParenthesizedType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsParenthesizedType;\n  }\n}));\nObject.defineProperty(exports, "TSPropertySignature", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsPropertySignature;\n  }\n}));\nObject.defineProperty(exports, "TSQualifiedName", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsQualifiedName;\n  }\n}));\nObject.defineProperty(exports, "TSRestType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsRestType;\n  }\n}));\nObject.defineProperty(exports, "TSSatisfiesExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsSatisfiesExpression;\n  }\n}));\nObject.defineProperty(exports, "TSStringKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsStringKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSSymbolKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsSymbolKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSThisType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsThisType;\n  }\n}));\nObject.defineProperty(exports, "TSTupleType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTupleType;\n  }\n}));\nObject.defineProperty(exports, "TSTypeAliasDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeAliasDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "TSTypeAssertion", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeAssertion;\n  }\n}));\nObject.defineProperty(exports, "TSTypeLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeLiteral;\n  }\n}));\nObject.defineProperty(exports, "TSTypeOperator", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeOperator;\n  }\n}));\nObject.defineProperty(exports, "TSTypeParameter", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeParameter;\n  }\n}));\nObject.defineProperty(exports, "TSTypeParameterDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeParameterDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TSTypeParameterInstantiation", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeParameterInstantiation;\n  }\n}));\nObject.defineProperty(exports, "TSTypePredicate", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypePredicate;\n  }\n}));\nObject.defineProperty(exports, "TSTypeQuery", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeQuery;\n  }\n}));\nObject.defineProperty(exports, "TSTypeReference", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsTypeReference;\n  }\n}));\nObject.defineProperty(exports, "TSUndefinedKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsUndefinedKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSUnionType", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsUnionType;\n  }\n}));\nObject.defineProperty(exports, "TSUnknownKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsUnknownKeyword;\n  }\n}));\nObject.defineProperty(exports, "TSVoidKeyword", ({\n  enumerable: true,\n  get: function () {\n    return _index.tsVoidKeyword;\n  }\n}));\nObject.defineProperty(exports, "TaggedTemplateExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.taggedTemplateExpression;\n  }\n}));\nObject.defineProperty(exports, "TemplateElement", ({\n  enumerable: true,\n  get: function () {\n    return _index.templateElement;\n  }\n}));\nObject.defineProperty(exports, "TemplateLiteral", ({\n  enumerable: true,\n  get: function () {\n    return _index.templateLiteral;\n  }\n}));\nObject.defineProperty(exports, "ThisExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.thisExpression;\n  }\n}));\nObject.defineProperty(exports, "ThisTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.thisTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "ThrowStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.throwStatement;\n  }\n}));\nObject.defineProperty(exports, "TopicReference", ({\n  enumerable: true,\n  get: function () {\n    return _index.topicReference;\n  }\n}));\nObject.defineProperty(exports, "TryStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.tryStatement;\n  }\n}));\nObject.defineProperty(exports, "TupleExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.tupleExpression;\n  }\n}));\nObject.defineProperty(exports, "TupleTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.tupleTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "TypeAlias", ({\n  enumerable: true,\n  get: function () {\n    return _index.typeAlias;\n  }\n}));\nObject.defineProperty(exports, "TypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.typeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "TypeCastExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.typeCastExpression;\n  }\n}));\nObject.defineProperty(exports, "TypeParameter", ({\n  enumerable: true,\n  get: function () {\n    return _index.typeParameter;\n  }\n}));\nObject.defineProperty(exports, "TypeParameterDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.typeParameterDeclaration;\n  }\n}));\nObject.defineProperty(exports, "TypeParameterInstantiation", ({\n  enumerable: true,\n  get: function () {\n    return _index.typeParameterInstantiation;\n  }\n}));\nObject.defineProperty(exports, "TypeofTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.typeofTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "UnaryExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.unaryExpression;\n  }\n}));\nObject.defineProperty(exports, "UnionTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.unionTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "UpdateExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.updateExpression;\n  }\n}));\nObject.defineProperty(exports, "V8IntrinsicIdentifier", ({\n  enumerable: true,\n  get: function () {\n    return _index.v8IntrinsicIdentifier;\n  }\n}));\nObject.defineProperty(exports, "VariableDeclaration", ({\n  enumerable: true,\n  get: function () {\n    return _index.variableDeclaration;\n  }\n}));\nObject.defineProperty(exports, "VariableDeclarator", ({\n  enumerable: true,\n  get: function () {\n    return _index.variableDeclarator;\n  }\n}));\nObject.defineProperty(exports, "Variance", ({\n  enumerable: true,\n  get: function () {\n    return _index.variance;\n  }\n}));\nObject.defineProperty(exports, "VoidTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _index.voidTypeAnnotation;\n  }\n}));\nObject.defineProperty(exports, "WhileStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.whileStatement;\n  }\n}));\nObject.defineProperty(exports, "WithStatement", ({\n  enumerable: true,\n  get: function () {\n    return _index.withStatement;\n  }\n}));\nObject.defineProperty(exports, "YieldExpression", ({\n  enumerable: true,\n  get: function () {\n    return _index.yieldExpression;\n  }\n}));\nvar _index = __webpack_require__(48079);\n\n//# sourceMappingURL=uppercase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///76779\n')},10985:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.buildUndefinedNode = buildUndefinedNode;\nvar _index = __webpack_require__(48079);\nfunction buildUndefinedNode() {\n  return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);\n}\n\n//# sourceMappingURL=productions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5ODUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMEJBQTBCO0FBQzFCLGFBQWEsbUJBQU8sQ0FBQyxLQUFzQjtBQUMzQztBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvYnVpbGRlcnMvcHJvZHVjdGlvbnMuanM/ZGI0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYnVpbGRVbmRlZmluZWROb2RlID0gYnVpbGRVbmRlZmluZWROb2RlO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIGJ1aWxkVW5kZWZpbmVkTm9kZSgpIHtcbiAgcmV0dXJuICgwLCBfaW5kZXgudW5hcnlFeHByZXNzaW9uKShcInZvaWRcIiwgKDAsIF9pbmRleC5udW1lcmljTGl0ZXJhbCkoMCksIHRydWUpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9kdWN0aW9ucy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10985\n')},49018:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = buildChildren;\nvar _index = __webpack_require__(98960);\nvar _cleanJSXElementLiteralChild = __webpack_require__(53043);\nfunction buildChildren(node) {\n  const elements = [];\n  for (let i = 0; i < node.children.length; i++) {\n    let child = node.children[i];\n    if ((0, _index.isJSXText)(child)) {\n      (0, _cleanJSXElementLiteralChild.default)(child, elements);\n      continue;\n    }\n    if ((0, _index.isJSXExpressionContainer)(child)) child = child.expression;\n    if ((0, _index.isJSXEmptyExpression)(child)) continue;\n    elements.push(child);\n  }\n  return elements;\n}\n\n//# sourceMappingURL=buildChildren.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkwMTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBcUM7QUFDMUQsbUNBQW1DLG1CQUFPLENBQUMsS0FBa0Q7QUFDN0Y7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9idWlsZGVycy9yZWFjdC9idWlsZENoaWxkcmVuLmpzP2U5ZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBidWlsZENoaWxkcmVuO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi8uLi92YWxpZGF0b3JzL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbnZhciBfY2xlYW5KU1hFbGVtZW50TGl0ZXJhbENoaWxkID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3JlYWN0L2NsZWFuSlNYRWxlbWVudExpdGVyYWxDaGlsZC5qc1wiKTtcbmZ1bmN0aW9uIGJ1aWxkQ2hpbGRyZW4obm9kZSkge1xuICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgIGlmICgoMCwgX2luZGV4LmlzSlNYVGV4dCkoY2hpbGQpKSB7XG4gICAgICAoMCwgX2NsZWFuSlNYRWxlbWVudExpdGVyYWxDaGlsZC5kZWZhdWx0KShjaGlsZCwgZWxlbWVudHMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICgoMCwgX2luZGV4LmlzSlNYRXhwcmVzc2lvbkNvbnRhaW5lcikoY2hpbGQpKSBjaGlsZCA9IGNoaWxkLmV4cHJlc3Npb247XG4gICAgaWYgKCgwLCBfaW5kZXguaXNKU1hFbXB0eUV4cHJlc3Npb24pKGNoaWxkKSkgY29udGludWU7XG4gICAgZWxlbWVudHMucHVzaChjaGlsZCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWlsZENoaWxkcmVuLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49018\n')},46049:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = createTSUnionType;\nvar _index = __webpack_require__(48079);\nvar _removeTypeDuplicates = __webpack_require__(78812);\nvar _index2 = __webpack_require__(98960);\nfunction createTSUnionType(typeAnnotations) {\n  const types = typeAnnotations.map(type => {\n    return (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;\n  });\n  const flattened = (0, _removeTypeDuplicates.default)(types);\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return (0, _index.tsUnionType)(flattened);\n  }\n}\n\n//# sourceMappingURL=createTSUnionType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYwNDkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBdUI7QUFDNUMsNEJBQTRCLG1CQUFPLENBQUMsS0FBd0Q7QUFDNUYsY0FBYyxtQkFBTyxDQUFDLEtBQXFDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2J1aWxkZXJzL3R5cGVzY3JpcHQvY3JlYXRlVFNVbmlvblR5cGUuanM/ZjYyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRTVW5pb25UeXBlO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX3JlbW92ZVR5cGVEdXBsaWNhdGVzID0gcmVxdWlyZShcIi4uLy4uL21vZGlmaWNhdGlvbnMvdHlwZXNjcmlwdC9yZW1vdmVUeXBlRHVwbGljYXRlcy5qc1wiKTtcbnZhciBfaW5kZXgyID0gcmVxdWlyZShcIi4uLy4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gY3JlYXRlVFNVbmlvblR5cGUodHlwZUFubm90YXRpb25zKSB7XG4gIGNvbnN0IHR5cGVzID0gdHlwZUFubm90YXRpb25zLm1hcCh0eXBlID0+IHtcbiAgICByZXR1cm4gKDAsIF9pbmRleDIuaXNUU1R5cGVBbm5vdGF0aW9uKSh0eXBlKSA/IHR5cGUudHlwZUFubm90YXRpb24gOiB0eXBlO1xuICB9KTtcbiAgY29uc3QgZmxhdHRlbmVkID0gKDAsIF9yZW1vdmVUeXBlRHVwbGljYXRlcy5kZWZhdWx0KSh0eXBlcyk7XG4gIGlmIChmbGF0dGVuZWQubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZsYXR0ZW5lZFswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC50c1VuaW9uVHlwZSkoZmxhdHRlbmVkKTtcbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVUU1VuaW9uVHlwZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46049\n')},2107:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = clone;\nvar _cloneNode = __webpack_require__(85279);\nfunction clone(node) {\n  return (0, _cloneNode.default)(node, false);\n}\n\n//# sourceMappingURL=clone.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEwNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLGlCQUFpQixtQkFBTyxDQUFDLEtBQWdCO0FBQ3pDO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jbG9uZS9jbG9uZS5qcz9hOTIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2xvbmU7XG52YXIgX2Nsb25lTm9kZSA9IHJlcXVpcmUoXCIuL2Nsb25lTm9kZS5qc1wiKTtcbmZ1bmN0aW9uIGNsb25lKG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfY2xvbmVOb2RlLmRlZmF1bHQpKG5vZGUsIGZhbHNlKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2107\n')},10245:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = cloneDeep;\nvar _cloneNode = __webpack_require__(85279);\nfunction cloneDeep(node) {\n  return (0, _cloneNode.default)(node);\n}\n\n//# sourceMappingURL=cloneDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyNDUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6QztBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY2xvbmUvY2xvbmVEZWVwLmpzPzVkYjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9uZURlZXA7XG52YXIgX2Nsb25lTm9kZSA9IHJlcXVpcmUoXCIuL2Nsb25lTm9kZS5qc1wiKTtcbmZ1bmN0aW9uIGNsb25lRGVlcChub2RlKSB7XG4gIHJldHVybiAoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShub2RlKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmVEZWVwLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10245\n')},35299:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = cloneDeepWithoutLoc;\nvar _cloneNode = __webpack_require__(85279);\nfunction cloneDeepWithoutLoc(node) {\n  return (0, _cloneNode.default)(node, true, true);\n}\n\n//# sourceMappingURL=cloneDeepWithoutLoc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUyOTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6QztBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY2xvbmUvY2xvbmVEZWVwV2l0aG91dExvYy5qcz82ZmQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2xvbmVEZWVwV2l0aG91dExvYztcbnZhciBfY2xvbmVOb2RlID0gcmVxdWlyZShcIi4vY2xvbmVOb2RlLmpzXCIpO1xuZnVuY3Rpb24gY2xvbmVEZWVwV2l0aG91dExvYyhub2RlKSB7XG4gIHJldHVybiAoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShub2RlLCB0cnVlLCB0cnVlKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xvbmVEZWVwV2l0aG91dExvYy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35299\n')},85279:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = cloneNode;\nvar _index = __webpack_require__(39793);\nvar _index2 = __webpack_require__(98960);\nconst {\n  hasOwn\n} = {\n  hasOwn: Function.call.bind(Object.prototype.hasOwnProperty)\n};\nfunction cloneIfNode(obj, deep, withoutLoc, commentsCache) {\n  if (obj && typeof obj.type === "string") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n  return obj;\n}\nfunction cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\nfunction cloneNode(node, deep = true, withoutLoc = false) {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\nfunction cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {\n  if (!node) return node;\n  const {\n    type\n  } = node;\n  const newNode = {\n    type: node.type\n  };\n  if ((0, _index2.isIdentifier)(node)) {\n    newNode.name = node.name;\n    if (hasOwn(node, "optional") && typeof node.optional === "boolean") {\n      newNode.optional = node.optional;\n    }\n    if (hasOwn(node, "typeAnnotation")) {\n      newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation;\n    }\n    if (hasOwn(node, "decorators")) {\n      newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache) : node.decorators;\n    }\n  } else if (!hasOwn(_index.NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: "${type}"`);\n  } else {\n    for (const field of Object.keys(_index.NODE_FIELDS[type])) {\n      if (hasOwn(node, field)) {\n        if (deep) {\n          newNode[field] = (0, _index2.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache);\n        } else {\n          newNode[field] = node[field];\n        }\n      }\n    }\n  }\n  if (hasOwn(node, "loc")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (hasOwn(node, "leadingComments")) {\n    newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache);\n  }\n  if (hasOwn(node, "innerComments")) {\n    newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache);\n  }\n  if (hasOwn(node, "trailingComments")) {\n    newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache);\n  }\n  if (hasOwn(node, "extra")) {\n    newNode.extra = Object.assign({}, node.extra);\n  }\n  return newNode;\n}\nfunction maybeCloneComments(comments, deep, withoutLoc, commentsCache) {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n    const {\n      type,\n      value,\n      loc\n    } = comment;\n    const ret = {\n      type,\n      value,\n      loc\n    };\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n    commentsCache.set(comment, ret);\n    return ret;\n  });\n}\n\n//# sourceMappingURL=cloneNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUyNzkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLEtBQWtDO0FBQ3hEO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osMkNBQTJDLEtBQUs7QUFDaEQsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jbG9uZS9jbG9uZU5vZGUuanM/OTk5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNsb25lTm9kZTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vZGVmaW5pdGlvbnMvaW5kZXguanNcIik7XG52YXIgX2luZGV4MiA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbmNvbnN0IHtcbiAgaGFzT3duXG59ID0ge1xuICBoYXNPd246IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KVxufTtcbmZ1bmN0aW9uIGNsb25lSWZOb2RlKG9iaiwgZGVlcCwgd2l0aG91dExvYywgY29tbWVudHNDYWNoZSkge1xuICBpZiAob2JqICYmIHR5cGVvZiBvYmoudHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBjbG9uZU5vZGVJbnRlcm5hbChvYmosIGRlZXAsIHdpdGhvdXRMb2MsIGNvbW1lbnRzQ2FjaGUpO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBjbG9uZUlmTm9kZU9yQXJyYXkob2JqLCBkZWVwLCB3aXRob3V0TG9jLCBjb21tZW50c0NhY2hlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLm1hcChub2RlID0+IGNsb25lSWZOb2RlKG5vZGUsIGRlZXAsIHdpdGhvdXRMb2MsIGNvbW1lbnRzQ2FjaGUpKTtcbiAgfVxuICByZXR1cm4gY2xvbmVJZk5vZGUob2JqLCBkZWVwLCB3aXRob3V0TG9jLCBjb21tZW50c0NhY2hlKTtcbn1cbmZ1bmN0aW9uIGNsb25lTm9kZShub2RlLCBkZWVwID0gdHJ1ZSwgd2l0aG91dExvYyA9IGZhbHNlKSB7XG4gIHJldHVybiBjbG9uZU5vZGVJbnRlcm5hbChub2RlLCBkZWVwLCB3aXRob3V0TG9jLCBuZXcgTWFwKCkpO1xufVxuZnVuY3Rpb24gY2xvbmVOb2RlSW50ZXJuYWwobm9kZSwgZGVlcCA9IHRydWUsIHdpdGhvdXRMb2MgPSBmYWxzZSwgY29tbWVudHNDYWNoZSkge1xuICBpZiAoIW5vZGUpIHJldHVybiBub2RlO1xuICBjb25zdCB7XG4gICAgdHlwZVxuICB9ID0gbm9kZTtcbiAgY29uc3QgbmV3Tm9kZSA9IHtcbiAgICB0eXBlOiBub2RlLnR5cGVcbiAgfTtcbiAgaWYgKCgwLCBfaW5kZXgyLmlzSWRlbnRpZmllcikobm9kZSkpIHtcbiAgICBuZXdOb2RlLm5hbWUgPSBub2RlLm5hbWU7XG4gICAgaWYgKGhhc093bihub2RlLCBcIm9wdGlvbmFsXCIpICYmIHR5cGVvZiBub2RlLm9wdGlvbmFsID09PSBcImJvb2xlYW5cIikge1xuICAgICAgbmV3Tm9kZS5vcHRpb25hbCA9IG5vZGUub3B0aW9uYWw7XG4gICAgfVxuICAgIGlmIChoYXNPd24obm9kZSwgXCJ0eXBlQW5ub3RhdGlvblwiKSkge1xuICAgICAgbmV3Tm9kZS50eXBlQW5ub3RhdGlvbiA9IGRlZXAgPyBjbG9uZUlmTm9kZU9yQXJyYXkobm9kZS50eXBlQW5ub3RhdGlvbiwgdHJ1ZSwgd2l0aG91dExvYywgY29tbWVudHNDYWNoZSkgOiBub2RlLnR5cGVBbm5vdGF0aW9uO1xuICAgIH1cbiAgICBpZiAoaGFzT3duKG5vZGUsIFwiZGVjb3JhdG9yc1wiKSkge1xuICAgICAgbmV3Tm9kZS5kZWNvcmF0b3JzID0gZGVlcCA/IGNsb25lSWZOb2RlT3JBcnJheShub2RlLmRlY29yYXRvcnMsIHRydWUsIHdpdGhvdXRMb2MsIGNvbW1lbnRzQ2FjaGUpIDogbm9kZS5kZWNvcmF0b3JzO1xuICAgIH1cbiAgfSBlbHNlIGlmICghaGFzT3duKF9pbmRleC5OT0RFX0ZJRUxEUywgdHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gbm9kZSB0eXBlOiBcIiR7dHlwZX1cImApO1xuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3QgZmllbGQgb2YgT2JqZWN0LmtleXMoX2luZGV4Lk5PREVfRklFTERTW3R5cGVdKSkge1xuICAgICAgaWYgKGhhc093bihub2RlLCBmaWVsZCkpIHtcbiAgICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgICBuZXdOb2RlW2ZpZWxkXSA9ICgwLCBfaW5kZXgyLmlzRmlsZSkobm9kZSkgJiYgZmllbGQgPT09IFwiY29tbWVudHNcIiA/IG1heWJlQ2xvbmVDb21tZW50cyhub2RlLmNvbW1lbnRzLCBkZWVwLCB3aXRob3V0TG9jLCBjb21tZW50c0NhY2hlKSA6IGNsb25lSWZOb2RlT3JBcnJheShub2RlW2ZpZWxkXSwgdHJ1ZSwgd2l0aG91dExvYywgY29tbWVudHNDYWNoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3Tm9kZVtmaWVsZF0gPSBub2RlW2ZpZWxkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaGFzT3duKG5vZGUsIFwibG9jXCIpKSB7XG4gICAgaWYgKHdpdGhvdXRMb2MpIHtcbiAgICAgIG5ld05vZGUubG9jID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3Tm9kZS5sb2MgPSBub2RlLmxvYztcbiAgICB9XG4gIH1cbiAgaWYgKGhhc093bihub2RlLCBcImxlYWRpbmdDb21tZW50c1wiKSkge1xuICAgIG5ld05vZGUubGVhZGluZ0NvbW1lbnRzID0gbWF5YmVDbG9uZUNvbW1lbnRzKG5vZGUubGVhZGluZ0NvbW1lbnRzLCBkZWVwLCB3aXRob3V0TG9jLCBjb21tZW50c0NhY2hlKTtcbiAgfVxuICBpZiAoaGFzT3duKG5vZGUsIFwiaW5uZXJDb21tZW50c1wiKSkge1xuICAgIG5ld05vZGUuaW5uZXJDb21tZW50cyA9IG1heWJlQ2xvbmVDb21tZW50cyhub2RlLmlubmVyQ29tbWVudHMsIGRlZXAsIHdpdGhvdXRMb2MsIGNvbW1lbnRzQ2FjaGUpO1xuICB9XG4gIGlmIChoYXNPd24obm9kZSwgXCJ0cmFpbGluZ0NvbW1lbnRzXCIpKSB7XG4gICAgbmV3Tm9kZS50cmFpbGluZ0NvbW1lbnRzID0gbWF5YmVDbG9uZUNvbW1lbnRzKG5vZGUudHJhaWxpbmdDb21tZW50cywgZGVlcCwgd2l0aG91dExvYywgY29tbWVudHNDYWNoZSk7XG4gIH1cbiAgaWYgKGhhc093bihub2RlLCBcImV4dHJhXCIpKSB7XG4gICAgbmV3Tm9kZS5leHRyYSA9IE9iamVjdC5hc3NpZ24oe30sIG5vZGUuZXh0cmEpO1xuICB9XG4gIHJldHVybiBuZXdOb2RlO1xufVxuZnVuY3Rpb24gbWF5YmVDbG9uZUNvbW1lbnRzKGNvbW1lbnRzLCBkZWVwLCB3aXRob3V0TG9jLCBjb21tZW50c0NhY2hlKSB7XG4gIGlmICghY29tbWVudHMgfHwgIWRlZXApIHtcbiAgICByZXR1cm4gY29tbWVudHM7XG4gIH1cbiAgcmV0dXJuIGNvbW1lbnRzLm1hcChjb21tZW50ID0+IHtcbiAgICBjb25zdCBjYWNoZSA9IGNvbW1lbnRzQ2FjaGUuZ2V0KGNvbW1lbnQpO1xuICAgIGlmIChjYWNoZSkgcmV0dXJuIGNhY2hlO1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZSxcbiAgICAgIGxvY1xuICAgIH0gPSBjb21tZW50O1xuICAgIGNvbnN0IHJldCA9IHtcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZSxcbiAgICAgIGxvY1xuICAgIH07XG4gICAgaWYgKHdpdGhvdXRMb2MpIHtcbiAgICAgIHJldC5sb2MgPSBudWxsO1xuICAgIH1cbiAgICBjb21tZW50c0NhY2hlLnNldChjb21tZW50LCByZXQpO1xuICAgIHJldHVybiByZXQ7XG4gIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbG9uZU5vZGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///85279\n')},62425:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = cloneWithoutLoc;\nvar _cloneNode = __webpack_require__(85279);\nfunction cloneWithoutLoc(node) {\n  return (0, _cloneNode.default)(node, false, true);\n}\n\n//# sourceMappingURL=cloneWithoutLoc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI0MjUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixpQkFBaUIsbUJBQU8sQ0FBQyxLQUFnQjtBQUN6QztBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY2xvbmUvY2xvbmVXaXRob3V0TG9jLmpzPzM3MWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjbG9uZVdpdGhvdXRMb2M7XG52YXIgX2Nsb25lTm9kZSA9IHJlcXVpcmUoXCIuL2Nsb25lTm9kZS5qc1wiKTtcbmZ1bmN0aW9uIGNsb25lV2l0aG91dExvYyhub2RlKSB7XG4gIHJldHVybiAoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShub2RlLCBmYWxzZSwgdHJ1ZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsb25lV2l0aG91dExvYy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///62425\n')},76211:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = addComment;\nvar _addComments = __webpack_require__(52598);\nfunction addComment(node, type, content, line) {\n  return (0, _addComments.default)(node, type, [{\n    type: line ? "CommentLine" : "CommentBlock",\n    value: content\n  }]);\n}\n\n//# sourceMappingURL=addComment.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYyMTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixtQkFBbUIsbUJBQU8sQ0FBQyxLQUFrQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb21tZW50cy9hZGRDb21tZW50LmpzPzQzNDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDb21tZW50O1xudmFyIF9hZGRDb21tZW50cyA9IHJlcXVpcmUoXCIuL2FkZENvbW1lbnRzLmpzXCIpO1xuZnVuY3Rpb24gYWRkQ29tbWVudChub2RlLCB0eXBlLCBjb250ZW50LCBsaW5lKSB7XG4gIHJldHVybiAoMCwgX2FkZENvbW1lbnRzLmRlZmF1bHQpKG5vZGUsIHR5cGUsIFt7XG4gICAgdHlwZTogbGluZSA/IFwiQ29tbWVudExpbmVcIiA6IFwiQ29tbWVudEJsb2NrXCIsXG4gICAgdmFsdWU6IGNvbnRlbnRcbiAgfV0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRDb21tZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///76211\n')},52598:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = addComments;\nfunction addComments(node, type, comments) {\n  if (!comments || !node) return node;\n  const key = `${type}Comments`;\n  if (node[key]) {\n    if (type === "leading") {\n      node[key] = comments.concat(node[key]);\n    } else {\n      node[key].push(...comments);\n    }\n  } else {\n    node[key] = comments;\n  }\n  return node;\n}\n\n//# sourceMappingURL=addComments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI1OTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0EsaUJBQWlCLEtBQUs7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvYWRkQ29tbWVudHMuanM/ZTYyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZENvbW1lbnRzO1xuZnVuY3Rpb24gYWRkQ29tbWVudHMobm9kZSwgdHlwZSwgY29tbWVudHMpIHtcbiAgaWYgKCFjb21tZW50cyB8fCAhbm9kZSkgcmV0dXJuIG5vZGU7XG4gIGNvbnN0IGtleSA9IGAke3R5cGV9Q29tbWVudHNgO1xuICBpZiAobm9kZVtrZXldKSB7XG4gICAgaWYgKHR5cGUgPT09IFwibGVhZGluZ1wiKSB7XG4gICAgICBub2RlW2tleV0gPSBjb21tZW50cy5jb25jYXQobm9kZVtrZXldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZVtrZXldLnB1c2goLi4uY29tbWVudHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlW2tleV0gPSBjb21tZW50cztcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkQ29tbWVudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52598\n')},7932:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = inheritInnerComments;\nvar _inherit = __webpack_require__(73205);\nfunction inheritInnerComments(child, parent) {\n  (0, _inherit.default)("innerComments", child, parent);\n}\n\n//# sourceMappingURL=inheritInnerComments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkzMi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLGVBQWUsbUJBQU8sQ0FBQyxLQUFxQjtBQUM1QztBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvaW5oZXJpdElubmVyQ29tbWVudHMuanM/MTc3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluaGVyaXRJbm5lckNvbW1lbnRzO1xudmFyIF9pbmhlcml0ID0gcmVxdWlyZShcIi4uL3V0aWxzL2luaGVyaXQuanNcIik7XG5mdW5jdGlvbiBpbmhlcml0SW5uZXJDb21tZW50cyhjaGlsZCwgcGFyZW50KSB7XG4gICgwLCBfaW5oZXJpdC5kZWZhdWx0KShcImlubmVyQ29tbWVudHNcIiwgY2hpbGQsIHBhcmVudCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaGVyaXRJbm5lckNvbW1lbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7932\n')},55766:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = inheritLeadingComments;\nvar _inherit = __webpack_require__(73205);\nfunction inheritLeadingComments(child, parent) {\n  (0, _inherit.default)("leadingComments", child, parent);\n}\n\n//# sourceMappingURL=inheritLeadingComments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU3NjYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixlQUFlLG1CQUFPLENBQUMsS0FBcUI7QUFDNUM7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbW1lbnRzL2luaGVyaXRMZWFkaW5nQ29tbWVudHMuanM/ZmRkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluaGVyaXRMZWFkaW5nQ29tbWVudHM7XG52YXIgX2luaGVyaXQgPSByZXF1aXJlKFwiLi4vdXRpbHMvaW5oZXJpdC5qc1wiKTtcbmZ1bmN0aW9uIGluaGVyaXRMZWFkaW5nQ29tbWVudHMoY2hpbGQsIHBhcmVudCkge1xuICAoMCwgX2luaGVyaXQuZGVmYXVsdCkoXCJsZWFkaW5nQ29tbWVudHNcIiwgY2hpbGQsIHBhcmVudCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaGVyaXRMZWFkaW5nQ29tbWVudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55766\n')},15586:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = inheritTrailingComments;\nvar _inherit = __webpack_require__(73205);\nfunction inheritTrailingComments(child, parent) {\n  (0, _inherit.default)("trailingComments", child, parent);\n}\n\n//# sourceMappingURL=inheritTrailingComments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1ODYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixlQUFlLG1CQUFPLENBQUMsS0FBcUI7QUFDNUM7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbW1lbnRzL2luaGVyaXRUcmFpbGluZ0NvbW1lbnRzLmpzPzg4ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpbmhlcml0VHJhaWxpbmdDb21tZW50cztcbnZhciBfaW5oZXJpdCA9IHJlcXVpcmUoXCIuLi91dGlscy9pbmhlcml0LmpzXCIpO1xuZnVuY3Rpb24gaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMoY2hpbGQsIHBhcmVudCkge1xuICAoMCwgX2luaGVyaXQuZGVmYXVsdCkoXCJ0cmFpbGluZ0NvbW1lbnRzXCIsIGNoaWxkLCBwYXJlbnQpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmhlcml0VHJhaWxpbmdDb21tZW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15586\n')},18125:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = inheritsComments;\nvar _inheritTrailingComments = __webpack_require__(15586);\nvar _inheritLeadingComments = __webpack_require__(55766);\nvar _inheritInnerComments = __webpack_require__(7932);\nfunction inheritsComments(child, parent) {\n  (0, _inheritTrailingComments.default)(child, parent);\n  (0, _inheritLeadingComments.default)(child, parent);\n  (0, _inheritInnerComments.default)(child, parent);\n  return child;\n}\n\n//# sourceMappingURL=inheritsComments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxMjUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZiwrQkFBK0IsbUJBQU8sQ0FBQyxLQUE4QjtBQUNyRSw4QkFBOEIsbUJBQU8sQ0FBQyxLQUE2QjtBQUNuRSw0QkFBNEIsbUJBQU8sQ0FBQyxJQUEyQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvaW5oZXJpdHNDb21tZW50cy5qcz8xNzI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW5oZXJpdHNDb21tZW50cztcbnZhciBfaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMgPSByZXF1aXJlKFwiLi9pbmhlcml0VHJhaWxpbmdDb21tZW50cy5qc1wiKTtcbnZhciBfaW5oZXJpdExlYWRpbmdDb21tZW50cyA9IHJlcXVpcmUoXCIuL2luaGVyaXRMZWFkaW5nQ29tbWVudHMuanNcIik7XG52YXIgX2luaGVyaXRJbm5lckNvbW1lbnRzID0gcmVxdWlyZShcIi4vaW5oZXJpdElubmVyQ29tbWVudHMuanNcIik7XG5mdW5jdGlvbiBpbmhlcml0c0NvbW1lbnRzKGNoaWxkLCBwYXJlbnQpIHtcbiAgKDAsIF9pbmhlcml0VHJhaWxpbmdDb21tZW50cy5kZWZhdWx0KShjaGlsZCwgcGFyZW50KTtcbiAgKDAsIF9pbmhlcml0TGVhZGluZ0NvbW1lbnRzLmRlZmF1bHQpKGNoaWxkLCBwYXJlbnQpO1xuICAoMCwgX2luaGVyaXRJbm5lckNvbW1lbnRzLmRlZmF1bHQpKGNoaWxkLCBwYXJlbnQpO1xuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaGVyaXRzQ29tbWVudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18125\n')},93437:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = removeComments;\nvar _index = __webpack_require__(93422);\nfunction removeComments(node) {\n  _index.COMMENT_KEYS.forEach(key => {\n    node[key] = null;\n  });\n  return node;\n}\n\n//# sourceMappingURL=removeComments.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM0MzcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBdUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvY29tbWVudHMvcmVtb3ZlQ29tbWVudHMuanM/YmU1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZUNvbW1lbnRzO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvaW5kZXguanNcIik7XG5mdW5jdGlvbiByZW1vdmVDb21tZW50cyhub2RlKSB7XG4gIF9pbmRleC5DT01NRU5UX0tFWVMuZm9yRWFjaChrZXkgPT4ge1xuICAgIG5vZGVba2V5XSA9IG51bGw7XG4gIH0pO1xuICByZXR1cm4gbm9kZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlQ29tbWVudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///93437\n')},67980:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.WHILE_TYPES = exports.USERWHITESPACABLE_TYPES = exports.UNARYLIKE_TYPES = exports.TYPESCRIPT_TYPES = exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.TSENTITYNAME_TYPES = exports.TSBASETYPE_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.STANDARDIZED_TYPES = exports.SCOPABLE_TYPES = exports.PUREISH_TYPES = exports.PROPERTY_TYPES = exports.PRIVATE_TYPES = exports.PATTERN_TYPES = exports.PATTERNLIKE_TYPES = exports.OBJECTMEMBER_TYPES = exports.MODULESPECIFIER_TYPES = exports.MODULEDECLARATION_TYPES = exports.MISCELLANEOUS_TYPES = exports.METHOD_TYPES = exports.LVAL_TYPES = exports.LOOP_TYPES = exports.LITERAL_TYPES = exports.JSX_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = exports.IMMUTABLE_TYPES = exports.FUNCTION_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FOR_TYPES = exports.FORXSTATEMENT_TYPES = exports.FLOW_TYPES = exports.FLOWTYPE_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.EXPRESSION_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.ENUMMEMBER_TYPES = exports.ENUMBODY_TYPES = exports.DECLARATION_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.CLASS_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.BINARY_TYPES = exports.ACCESSOR_TYPES = void 0;\nvar _index = __webpack_require__(39793);\nconst STANDARDIZED_TYPES = exports.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS["Standardized"];\nconst EXPRESSION_TYPES = exports.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS["Expression"];\nconst BINARY_TYPES = exports.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS["Binary"];\nconst SCOPABLE_TYPES = exports.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Scopable"];\nconst BLOCKPARENT_TYPES = exports.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["BlockParent"];\nconst BLOCK_TYPES = exports.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS["Block"];\nconst STATEMENT_TYPES = exports.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["Statement"];\nconst TERMINATORLESS_TYPES = exports.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS["Terminatorless"];\nconst COMPLETIONSTATEMENT_TYPES = exports.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["CompletionStatement"];\nconst CONDITIONAL_TYPES = exports.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Conditional"];\nconst LOOP_TYPES = exports.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS["Loop"];\nconst WHILE_TYPES = exports.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS["While"];\nconst EXPRESSIONWRAPPER_TYPES = exports.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];\nconst FOR_TYPES = exports.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS["For"];\nconst FORXSTATEMENT_TYPES = exports.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["ForXStatement"];\nconst FUNCTION_TYPES = exports.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS["Function"];\nconst FUNCTIONPARENT_TYPES = exports.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["FunctionParent"];\nconst PUREISH_TYPES = exports.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS["Pureish"];\nconst DECLARATION_TYPES = exports.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["Declaration"];\nconst PATTERNLIKE_TYPES = exports.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["PatternLike"];\nconst LVAL_TYPES = exports.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS["LVal"];\nconst TSENTITYNAME_TYPES = exports.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS["TSEntityName"];\nconst LITERAL_TYPES = exports.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Literal"];\nconst IMMUTABLE_TYPES = exports.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Immutable"];\nconst USERWHITESPACABLE_TYPES = exports.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["UserWhitespacable"];\nconst METHOD_TYPES = exports.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS["Method"];\nconst OBJECTMEMBER_TYPES = exports.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["ObjectMember"];\nconst PROPERTY_TYPES = exports.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS["Property"];\nconst UNARYLIKE_TYPES = exports.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["UnaryLike"];\nconst PATTERN_TYPES = exports.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS["Pattern"];\nconst CLASS_TYPES = exports.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS["Class"];\nconst IMPORTOREXPORTDECLARATION_TYPES = exports.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ImportOrExportDeclaration"];\nconst EXPORTDECLARATION_TYPES = exports.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ExportDeclaration"];\nconst MODULESPECIFIER_TYPES = exports.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];\nconst ACCESSOR_TYPES = exports.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS["Accessor"];\nconst PRIVATE_TYPES = exports.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS["Private"];\nconst FLOW_TYPES = exports.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS["Flow"];\nconst FLOWTYPE_TYPES = exports.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowType"];\nconst FLOWBASEANNOTATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];\nconst FLOWDECLARATION_TYPES = exports.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowDeclaration"];\nconst FLOWPREDICATE_TYPES = exports.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowPredicate"];\nconst ENUMBODY_TYPES = exports.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumBody"];\nconst ENUMMEMBER_TYPES = exports.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumMember"];\nconst JSX_TYPES = exports.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS["JSX"];\nconst MISCELLANEOUS_TYPES = exports.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS["Miscellaneous"];\nconst TYPESCRIPT_TYPES = exports.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS["TypeScript"];\nconst TSTYPEELEMENT_TYPES = exports.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["TSTypeElement"];\nconst TSTYPE_TYPES = exports.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSType"];\nconst TSBASETYPE_TYPES = exports.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSBaseType"];\nconst MODULEDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///67980\n')},93422:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.UPDATE_OPERATORS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.STATEMENT_OR_BLOCK_KEYS = exports.NUMBER_UNARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.NOT_LOCAL_BINDING = exports.LOGICAL_OPERATORS = exports.INHERIT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.EQUALITY_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.COMMENT_KEYS = exports.BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.BLOCK_SCOPED_SYMBOL = exports.BINARY_OPERATORS = exports.ASSIGNMENT_OPERATORS = void 0;\nconst STATEMENT_OR_BLOCK_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];\nconst FLATTENABLE_KEYS = exports.FLATTENABLE_KEYS = ["body", "expressions"];\nconst FOR_INIT_KEYS = exports.FOR_INIT_KEYS = ["left", "init"];\nconst COMMENT_KEYS = exports.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];\nconst LOGICAL_OPERATORS = exports.LOGICAL_OPERATORS = ["||", "&&", "??"];\nconst UPDATE_OPERATORS = exports.UPDATE_OPERATORS = ["++", "--"];\nconst BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];\nconst EQUALITY_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];\nconst COMPARISON_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];\nconst BOOLEAN_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];\nconst NUMBER_BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];\nconst BINARY_OPERATORS = exports.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];\nconst ASSIGNMENT_OPERATORS = exports.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map(op => op + "="), ...LOGICAL_OPERATORS.map(op => op + "=")];\nconst BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];\nconst NUMBER_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = ["+", "-", "~"];\nconst STRING_UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = ["typeof"];\nconst UNARY_OPERATORS = exports.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];\nconst INHERIT_KEYS = exports.INHERIT_KEYS = {\n  optional: ["typeAnnotation", "typeParameters", "returnType"],\n  force: ["start", "loc", "end"]\n};\nconst BLOCK_SCOPED_SYMBOL = exports.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");\nconst NOT_LOCAL_BINDING = exports.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM0MjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysd0JBQXdCLEdBQUcsdUJBQXVCLEdBQUcsOEJBQThCLEdBQUcsK0JBQStCLEdBQUcsOEJBQThCLEdBQUcsK0JBQStCLEdBQUcseUJBQXlCLEdBQUcseUJBQXlCLEdBQUcsb0JBQW9CLEdBQUcscUJBQXFCLEdBQUcsd0JBQXdCLEdBQUcsaUNBQWlDLEdBQUcsbUNBQW1DLEdBQUcsb0JBQW9CLEdBQUcsK0JBQStCLEdBQUcsdUNBQXVDLEdBQUcsZ0NBQWdDLEdBQUcsMkJBQTJCLEdBQUcsd0JBQXdCLEdBQUcsNEJBQTRCO0FBQ2xtQixnQ0FBZ0MsK0JBQStCO0FBQy9ELHlCQUF5Qix3QkFBd0I7QUFDakQsc0JBQXNCLHFCQUFxQjtBQUMzQyxxQkFBcUIsb0JBQW9CO0FBQ3pDLDBCQUEwQix5QkFBeUI7QUFDbkQseUJBQXlCLHdCQUF3QjtBQUNqRCx3Q0FBd0MsdUNBQXVDO0FBQy9FLGtDQUFrQyxpQ0FBaUM7QUFDbkUsb0NBQW9DLG1DQUFtQztBQUN2RSxpQ0FBaUMsZ0NBQWdDO0FBQ2pFLGdDQUFnQywrQkFBK0I7QUFDL0QseUJBQXlCLHdCQUF3QjtBQUNqRCw2QkFBNkIsNEJBQTRCO0FBQ3pELGdDQUFnQywrQkFBK0I7QUFDL0QsK0JBQStCLDhCQUE4QjtBQUM3RCwrQkFBK0IsOEJBQThCO0FBQzdELHdCQUF3Qix1QkFBdUI7QUFDL0MscUJBQXFCLG9CQUFvQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkJBQTJCO0FBQ3ZELDBCQUEwQix5QkFBeUI7O0FBRW5EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnN0YW50cy9pbmRleC5qcz9jM2Y4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5VUERBVEVfT1BFUkFUT1JTID0gZXhwb3J0cy5VTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLlNUUklOR19VTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLlNUQVRFTUVOVF9PUl9CTE9DS19LRVlTID0gZXhwb3J0cy5OVU1CRVJfVU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5OVU1CRVJfQklOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuTk9UX0xPQ0FMX0JJTkRJTkcgPSBleHBvcnRzLkxPR0lDQUxfT1BFUkFUT1JTID0gZXhwb3J0cy5JTkhFUklUX0tFWVMgPSBleHBvcnRzLkZPUl9JTklUX0tFWVMgPSBleHBvcnRzLkZMQVRURU5BQkxFX0tFWVMgPSBleHBvcnRzLkVRVUFMSVRZX0JJTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLkNPTVBBUklTT05fQklOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuQ09NTUVOVF9LRVlTID0gZXhwb3J0cy5CT09MRUFOX1VOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuQk9PTEVBTl9OVU1CRVJfQklOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuQk9PTEVBTl9CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5CTE9DS19TQ09QRURfU1lNQk9MID0gZXhwb3J0cy5CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5BU1NJR05NRU5UX09QRVJBVE9SUyA9IHZvaWQgMDtcbmNvbnN0IFNUQVRFTUVOVF9PUl9CTE9DS19LRVlTID0gZXhwb3J0cy5TVEFURU1FTlRfT1JfQkxPQ0tfS0VZUyA9IFtcImNvbnNlcXVlbnRcIiwgXCJib2R5XCIsIFwiYWx0ZXJuYXRlXCJdO1xuY29uc3QgRkxBVFRFTkFCTEVfS0VZUyA9IGV4cG9ydHMuRkxBVFRFTkFCTEVfS0VZUyA9IFtcImJvZHlcIiwgXCJleHByZXNzaW9uc1wiXTtcbmNvbnN0IEZPUl9JTklUX0tFWVMgPSBleHBvcnRzLkZPUl9JTklUX0tFWVMgPSBbXCJsZWZ0XCIsIFwiaW5pdFwiXTtcbmNvbnN0IENPTU1FTlRfS0VZUyA9IGV4cG9ydHMuQ09NTUVOVF9LRVlTID0gW1wibGVhZGluZ0NvbW1lbnRzXCIsIFwidHJhaWxpbmdDb21tZW50c1wiLCBcImlubmVyQ29tbWVudHNcIl07XG5jb25zdCBMT0dJQ0FMX09QRVJBVE9SUyA9IGV4cG9ydHMuTE9HSUNBTF9PUEVSQVRPUlMgPSBbXCJ8fFwiLCBcIiYmXCIsIFwiPz9cIl07XG5jb25zdCBVUERBVEVfT1BFUkFUT1JTID0gZXhwb3J0cy5VUERBVEVfT1BFUkFUT1JTID0gW1wiKytcIiwgXCItLVwiXTtcbmNvbnN0IEJPT0xFQU5fTlVNQkVSX0JJTkFSWV9PUEVSQVRPUlMgPSBleHBvcnRzLkJPT0xFQU5fTlVNQkVSX0JJTkFSWV9PUEVSQVRPUlMgPSBbXCI+XCIsIFwiPFwiLCBcIj49XCIsIFwiPD1cIl07XG5jb25zdCBFUVVBTElUWV9CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5FUVVBTElUWV9CSU5BUllfT1BFUkFUT1JTID0gW1wiPT1cIiwgXCI9PT1cIiwgXCIhPVwiLCBcIiE9PVwiXTtcbmNvbnN0IENPTVBBUklTT05fQklOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuQ09NUEFSSVNPTl9CSU5BUllfT1BFUkFUT1JTID0gWy4uLkVRVUFMSVRZX0JJTkFSWV9PUEVSQVRPUlMsIFwiaW5cIiwgXCJpbnN0YW5jZW9mXCJdO1xuY29uc3QgQk9PTEVBTl9CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5CT09MRUFOX0JJTkFSWV9PUEVSQVRPUlMgPSBbLi4uQ09NUEFSSVNPTl9CSU5BUllfT1BFUkFUT1JTLCAuLi5CT09MRUFOX05VTUJFUl9CSU5BUllfT1BFUkFUT1JTXTtcbmNvbnN0IE5VTUJFUl9CSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5OVU1CRVJfQklOQVJZX09QRVJBVE9SUyA9IFtcIi1cIiwgXCIvXCIsIFwiJVwiLCBcIipcIiwgXCIqKlwiLCBcIiZcIiwgXCJ8XCIsIFwiPj5cIiwgXCI+Pj5cIiwgXCI8PFwiLCBcIl5cIl07XG5jb25zdCBCSU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5CSU5BUllfT1BFUkFUT1JTID0gW1wiK1wiLCAuLi5OVU1CRVJfQklOQVJZX09QRVJBVE9SUywgLi4uQk9PTEVBTl9CSU5BUllfT1BFUkFUT1JTLCBcInw+XCJdO1xuY29uc3QgQVNTSUdOTUVOVF9PUEVSQVRPUlMgPSBleHBvcnRzLkFTU0lHTk1FTlRfT1BFUkFUT1JTID0gW1wiPVwiLCBcIis9XCIsIC4uLk5VTUJFUl9CSU5BUllfT1BFUkFUT1JTLm1hcChvcCA9PiBvcCArIFwiPVwiKSwgLi4uTE9HSUNBTF9PUEVSQVRPUlMubWFwKG9wID0+IG9wICsgXCI9XCIpXTtcbmNvbnN0IEJPT0xFQU5fVU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5CT09MRUFOX1VOQVJZX09QRVJBVE9SUyA9IFtcImRlbGV0ZVwiLCBcIiFcIl07XG5jb25zdCBOVU1CRVJfVU5BUllfT1BFUkFUT1JTID0gZXhwb3J0cy5OVU1CRVJfVU5BUllfT1BFUkFUT1JTID0gW1wiK1wiLCBcIi1cIiwgXCJ+XCJdO1xuY29uc3QgU1RSSU5HX1VOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuU1RSSU5HX1VOQVJZX09QRVJBVE9SUyA9IFtcInR5cGVvZlwiXTtcbmNvbnN0IFVOQVJZX09QRVJBVE9SUyA9IGV4cG9ydHMuVU5BUllfT1BFUkFUT1JTID0gW1widm9pZFwiLCBcInRocm93XCIsIC4uLkJPT0xFQU5fVU5BUllfT1BFUkFUT1JTLCAuLi5OVU1CRVJfVU5BUllfT1BFUkFUT1JTLCAuLi5TVFJJTkdfVU5BUllfT1BFUkFUT1JTXTtcbmNvbnN0IElOSEVSSVRfS0VZUyA9IGV4cG9ydHMuSU5IRVJJVF9LRVlTID0ge1xuICBvcHRpb25hbDogW1widHlwZUFubm90YXRpb25cIiwgXCJ0eXBlUGFyYW1ldGVyc1wiLCBcInJldHVyblR5cGVcIl0sXG4gIGZvcmNlOiBbXCJzdGFydFwiLCBcImxvY1wiLCBcImVuZFwiXVxufTtcbmNvbnN0IEJMT0NLX1NDT1BFRF9TWU1CT0wgPSBleHBvcnRzLkJMT0NLX1NDT1BFRF9TWU1CT0wgPSBTeW1ib2wuZm9yKFwidmFyIHVzZWQgdG8gYmUgYmxvY2sgc2NvcGVkXCIpO1xuY29uc3QgTk9UX0xPQ0FMX0JJTkRJTkcgPSBleHBvcnRzLk5PVF9MT0NBTF9CSU5ESU5HID0gU3ltYm9sLmZvcihcInNob3VsZCBub3QgYmUgY29uc2lkZXJlZCBhIGxvY2FsIGJpbmRpbmdcIik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///93422\n')},57931:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = ensureBlock;\nvar _toBlock = __webpack_require__(25010);\nfunction ensureBlock(node, key = "body") {\n  const result = (0, _toBlock.default)(node[key], node);\n  node[key] = result;\n  return result;\n}\n\n//# sourceMappingURL=ensureBlock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc5MzEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixlQUFlLG1CQUFPLENBQUMsS0FBYztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvZW5zdXJlQmxvY2suanM/ZTBmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGVuc3VyZUJsb2NrO1xudmFyIF90b0Jsb2NrID0gcmVxdWlyZShcIi4vdG9CbG9jay5qc1wiKTtcbmZ1bmN0aW9uIGVuc3VyZUJsb2NrKG5vZGUsIGtleSA9IFwiYm9keVwiKSB7XG4gIGNvbnN0IHJlc3VsdCA9ICgwLCBfdG9CbG9jay5kZWZhdWx0KShub2RlW2tleV0sIG5vZGUpO1xuICBub2RlW2tleV0gPSByZXN1bHQ7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuc3VyZUJsb2NrLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///57931\n')},14089:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = gatherSequenceExpressions;\nvar _getBindingIdentifiers = __webpack_require__(70329);\nvar _index = __webpack_require__(98960);\nvar _index2 = __webpack_require__(48079);\nvar _productions = __webpack_require__(10985);\nvar _cloneNode = __webpack_require__(85279);\n;\nfunction gatherSequenceExpressions(nodes, declars) {\n  const exprs = [];\n  let ensureLastUndefined = true;\n  for (const node of nodes) {\n    if (!(0, _index.isEmptyStatement)(node)) {\n      ensureLastUndefined = false;\n    }\n    if ((0, _index.isExpression)(node)) {\n      exprs.push(node);\n    } else if ((0, _index.isExpressionStatement)(node)) {\n      exprs.push(node.expression);\n    } else if ((0, _index.isVariableDeclaration)(node)) {\n      if (node.kind !== "var") return;\n      for (const declar of node.declarations) {\n        const bindings = (0, _getBindingIdentifiers.default)(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: (0, _cloneNode.default)(bindings[key])\n          });\n        }\n        if (declar.init) {\n          exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));\n        }\n      }\n      ensureLastUndefined = true;\n    } else if ((0, _index.isIfStatement)(node)) {\n      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)();\n      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();\n      if (!consequent || !alternate) return;\n      exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));\n    } else if ((0, _index.isBlockStatement)(node)) {\n      const body = gatherSequenceExpressions(node.body, declars);\n      if (!body) return;\n      exprs.push(body);\n    } else if ((0, _index.isEmptyStatement)(node)) {\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      return;\n    }\n  }\n  if (ensureLastUndefined) {\n    exprs.push((0, _productions.buildUndefinedNode)());\n  }\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return (0, _index2.sequenceExpression)(exprs);\n  }\n}\n\n//# sourceMappingURL=gatherSequenceExpressions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwODkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZiw2QkFBNkIsbUJBQU8sQ0FBQyxLQUF3QztBQUM3RSxhQUFhLG1CQUFPLENBQUMsS0FBa0M7QUFDdkQsY0FBYyxtQkFBTyxDQUFDLEtBQWdDO0FBQ3RELG1CQUFtQixtQkFBTyxDQUFDLEtBQTRCO0FBQ3ZELGlCQUFpQixtQkFBTyxDQUFDLEtBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucy5qcz9mODIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucztcbnZhciBfZ2V0QmluZGluZ0lkZW50aWZpZXJzID0gcmVxdWlyZShcIi4uL3JldHJpZXZlcnMvZ2V0QmluZGluZ0lkZW50aWZpZXJzLmpzXCIpO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbnZhciBfaW5kZXgyID0gcmVxdWlyZShcIi4uL2J1aWxkZXJzL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbnZhciBfcHJvZHVjdGlvbnMgPSByZXF1aXJlKFwiLi4vYnVpbGRlcnMvcHJvZHVjdGlvbnMuanNcIik7XG52YXIgX2Nsb25lTm9kZSA9IHJlcXVpcmUoXCIuLi9jbG9uZS9jbG9uZU5vZGUuanNcIik7XG47XG5mdW5jdGlvbiBnYXRoZXJTZXF1ZW5jZUV4cHJlc3Npb25zKG5vZGVzLCBkZWNsYXJzKSB7XG4gIGNvbnN0IGV4cHJzID0gW107XG4gIGxldCBlbnN1cmVMYXN0VW5kZWZpbmVkID0gdHJ1ZTtcbiAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7XG4gICAgaWYgKCEoMCwgX2luZGV4LmlzRW1wdHlTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgICBlbnN1cmVMYXN0VW5kZWZpbmVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICgoMCwgX2luZGV4LmlzRXhwcmVzc2lvbikobm9kZSkpIHtcbiAgICAgIGV4cHJzLnB1c2gobm9kZSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2luZGV4LmlzRXhwcmVzc2lvblN0YXRlbWVudCkobm9kZSkpIHtcbiAgICAgIGV4cHJzLnB1c2gobm9kZS5leHByZXNzaW9uKTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaW5kZXguaXNWYXJpYWJsZURlY2xhcmF0aW9uKShub2RlKSkge1xuICAgICAgaWYgKG5vZGUua2luZCAhPT0gXCJ2YXJcIikgcmV0dXJuO1xuICAgICAgZm9yIChjb25zdCBkZWNsYXIgb2Ygbm9kZS5kZWNsYXJhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYmluZGluZ3MgPSAoMCwgX2dldEJpbmRpbmdJZGVudGlmaWVycy5kZWZhdWx0KShkZWNsYXIpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhiaW5kaW5ncykpIHtcbiAgICAgICAgICBkZWNsYXJzLnB1c2goe1xuICAgICAgICAgICAga2luZDogbm9kZS5raW5kLFxuICAgICAgICAgICAgaWQ6ICgwLCBfY2xvbmVOb2RlLmRlZmF1bHQpKGJpbmRpbmdzW2tleV0pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlY2xhci5pbml0KSB7XG4gICAgICAgICAgZXhwcnMucHVzaCgoMCwgX2luZGV4Mi5hc3NpZ25tZW50RXhwcmVzc2lvbikoXCI9XCIsIGRlY2xhci5pZCwgZGVjbGFyLmluaXQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZW5zdXJlTGFzdFVuZGVmaW5lZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICgoMCwgX2luZGV4LmlzSWZTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgICBjb25zdCBjb25zZXF1ZW50ID0gbm9kZS5jb25zZXF1ZW50ID8gZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucyhbbm9kZS5jb25zZXF1ZW50XSwgZGVjbGFycykgOiAoMCwgX3Byb2R1Y3Rpb25zLmJ1aWxkVW5kZWZpbmVkTm9kZSkoKTtcbiAgICAgIGNvbnN0IGFsdGVybmF0ZSA9IG5vZGUuYWx0ZXJuYXRlID8gZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucyhbbm9kZS5hbHRlcm5hdGVdLCBkZWNsYXJzKSA6ICgwLCBfcHJvZHVjdGlvbnMuYnVpbGRVbmRlZmluZWROb2RlKSgpO1xuICAgICAgaWYgKCFjb25zZXF1ZW50IHx8ICFhbHRlcm5hdGUpIHJldHVybjtcbiAgICAgIGV4cHJzLnB1c2goKDAsIF9pbmRleDIuY29uZGl0aW9uYWxFeHByZXNzaW9uKShub2RlLnRlc3QsIGNvbnNlcXVlbnQsIGFsdGVybmF0ZSkpO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pbmRleC5pc0Jsb2NrU3RhdGVtZW50KShub2RlKSkge1xuICAgICAgY29uc3QgYm9keSA9IGdhdGhlclNlcXVlbmNlRXhwcmVzc2lvbnMobm9kZS5ib2R5LCBkZWNsYXJzKTtcbiAgICAgIGlmICghYm9keSkgcmV0dXJuO1xuICAgICAgZXhwcnMucHVzaChib2R5KTtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaW5kZXguaXNFbXB0eVN0YXRlbWVudCkobm9kZSkpIHtcbiAgICAgIGlmIChub2Rlcy5pbmRleE9mKG5vZGUpID09PSAwKSB7XG4gICAgICAgIGVuc3VyZUxhc3RVbmRlZmluZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChlbnN1cmVMYXN0VW5kZWZpbmVkKSB7XG4gICAgZXhwcnMucHVzaCgoMCwgX3Byb2R1Y3Rpb25zLmJ1aWxkVW5kZWZpbmVkTm9kZSkoKSk7XG4gIH1cbiAgaWYgKGV4cHJzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBleHByc1swXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleDIuc2VxdWVuY2VFeHByZXNzaW9uKShleHBycyk7XG4gIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14089\n')},82234:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = toBindingIdentifierName;\nvar _toIdentifier = __webpack_require__(36744);\nfunction toBindingIdentifierName(name) {\n  name = (0, _toIdentifier.default)(name);\n  if (name === "eval" || name === "arguments") name = "_" + name;\n  return name;\n}\n\n//# sourceMappingURL=toBindingIdentifierName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIyMzQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixvQkFBb0IsbUJBQU8sQ0FBQyxLQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9CaW5kaW5nSWRlbnRpZmllck5hbWUuanM/MDZiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvQmluZGluZ0lkZW50aWZpZXJOYW1lO1xudmFyIF90b0lkZW50aWZpZXIgPSByZXF1aXJlKFwiLi90b0lkZW50aWZpZXIuanNcIik7XG5mdW5jdGlvbiB0b0JpbmRpbmdJZGVudGlmaWVyTmFtZShuYW1lKSB7XG4gIG5hbWUgPSAoMCwgX3RvSWRlbnRpZmllci5kZWZhdWx0KShuYW1lKTtcbiAgaWYgKG5hbWUgPT09IFwiZXZhbFwiIHx8IG5hbWUgPT09IFwiYXJndW1lbnRzXCIpIG5hbWUgPSBcIl9cIiArIG5hbWU7XG4gIHJldHVybiBuYW1lO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10b0JpbmRpbmdJZGVudGlmaWVyTmFtZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///82234\n')},25010:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = toBlock;\nvar _index = __webpack_require__(98960);\nvar _index2 = __webpack_require__(48079);\nfunction toBlock(node, parent) {\n  if ((0, _index.isBlockStatement)(node)) {\n    return node;\n  }\n  let blockNodes = [];\n  if ((0, _index.isEmptyStatement)(node)) {\n    blockNodes = [];\n  } else {\n    if (!(0, _index.isStatement)(node)) {\n      if ((0, _index.isFunction)(parent)) {\n        node = (0, _index2.returnStatement)(node);\n      } else {\n        node = (0, _index2.expressionStatement)(node);\n      }\n    }\n    blockNodes = [node];\n  }\n  return (0, _index2.blockStatement)(blockNodes);\n}\n\n//# sourceMappingURL=toBlock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUwMTAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBa0M7QUFDdkQsY0FBYyxtQkFBTyxDQUFDLEtBQWdDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb252ZXJ0ZXJzL3RvQmxvY2suanM/M2E0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvQmxvY2s7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xudmFyIF9pbmRleDIgPSByZXF1aXJlKFwiLi4vYnVpbGRlcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gdG9CbG9jayhub2RlLCBwYXJlbnQpIHtcbiAgaWYgKCgwLCBfaW5kZXguaXNCbG9ja1N0YXRlbWVudCkobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBsZXQgYmxvY2tOb2RlcyA9IFtdO1xuICBpZiAoKDAsIF9pbmRleC5pc0VtcHR5U3RhdGVtZW50KShub2RlKSkge1xuICAgIGJsb2NrTm9kZXMgPSBbXTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoISgwLCBfaW5kZXguaXNTdGF0ZW1lbnQpKG5vZGUpKSB7XG4gICAgICBpZiAoKDAsIF9pbmRleC5pc0Z1bmN0aW9uKShwYXJlbnQpKSB7XG4gICAgICAgIG5vZGUgPSAoMCwgX2luZGV4Mi5yZXR1cm5TdGF0ZW1lbnQpKG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZSA9ICgwLCBfaW5kZXgyLmV4cHJlc3Npb25TdGF0ZW1lbnQpKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBibG9ja05vZGVzID0gW25vZGVdO1xuICB9XG4gIHJldHVybiAoMCwgX2luZGV4Mi5ibG9ja1N0YXRlbWVudCkoYmxvY2tOb2Rlcyk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQmxvY2suanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25010\n')},33017:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = toComputedKey;\nvar _index = __webpack_require__(98960);\nvar _index2 = __webpack_require__(48079);\nfunction toComputedKey(node, key = node.key || node.property) {\n  if (!node.computed && (0, _index.isIdentifier)(key)) key = (0, _index2.stringLiteral)(key.name);\n  return key;\n}\n\n//# sourceMappingURL=toComputedKey.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMwMTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBa0M7QUFDdkQsY0FBYyxtQkFBTyxDQUFDLEtBQWdDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9Db21wdXRlZEtleS5qcz9hMGJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9Db21wdXRlZEtleTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX2luZGV4MiA9IHJlcXVpcmUoXCIuLi9idWlsZGVycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG5mdW5jdGlvbiB0b0NvbXB1dGVkS2V5KG5vZGUsIGtleSA9IG5vZGUua2V5IHx8IG5vZGUucHJvcGVydHkpIHtcbiAgaWYgKCFub2RlLmNvbXB1dGVkICYmICgwLCBfaW5kZXguaXNJZGVudGlmaWVyKShrZXkpKSBrZXkgPSAoMCwgX2luZGV4Mi5zdHJpbmdMaXRlcmFsKShrZXkubmFtZSk7XG4gIHJldHVybiBrZXk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQ29tcHV0ZWRLZXkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33017\n')},26133:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _index = __webpack_require__(98960);\nvar _default = exports["default"] = toExpression;\nfunction toExpression(node) {\n  if ((0, _index.isExpressionStatement)(node)) {\n    node = node.expression;\n  }\n  if ((0, _index.isExpression)(node)) {\n    return node;\n  }\n  if ((0, _index.isClass)(node)) {\n    node.type = "ClassExpression";\n  } else if ((0, _index.isFunction)(node)) {\n    node.type = "FunctionExpression";\n  }\n  if (!(0, _index.isExpression)(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n  return node;\n}\n\n//# sourceMappingURL=toExpression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYxMzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBa0M7QUFDdkQsZUFBZSxrQkFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFdBQVc7QUFDOUM7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9FeHByZXNzaW9uLmpzPzczMDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gdG9FeHByZXNzaW9uO1xuZnVuY3Rpb24gdG9FeHByZXNzaW9uKG5vZGUpIHtcbiAgaWYgKCgwLCBfaW5kZXguaXNFeHByZXNzaW9uU3RhdGVtZW50KShub2RlKSkge1xuICAgIG5vZGUgPSBub2RlLmV4cHJlc3Npb247XG4gIH1cbiAgaWYgKCgwLCBfaW5kZXguaXNFeHByZXNzaW9uKShub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGlmICgoMCwgX2luZGV4LmlzQ2xhc3MpKG5vZGUpKSB7XG4gICAgbm9kZS50eXBlID0gXCJDbGFzc0V4cHJlc3Npb25cIjtcbiAgfSBlbHNlIGlmICgoMCwgX2luZGV4LmlzRnVuY3Rpb24pKG5vZGUpKSB7XG4gICAgbm9kZS50eXBlID0gXCJGdW5jdGlvbkV4cHJlc3Npb25cIjtcbiAgfVxuICBpZiAoISgwLCBfaW5kZXguaXNFeHByZXNzaW9uKShub2RlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHR1cm4gJHtub2RlLnR5cGV9IHRvIGFuIGV4cHJlc3Npb25gKTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9FeHByZXNzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26133\n')},36744:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = toIdentifier;\nvar _isValidIdentifier = __webpack_require__(60983);\nvar _helperValidatorIdentifier = __webpack_require__(61000);\nfunction toIdentifier(input) {\n  input = input + "";\n  let name = "";\n  for (const c of input) {\n    name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";\n  }\n  name = name.replace(/^[-0-9]+/, "");\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : "";\n  });\n  if (!(0, _isValidIdentifier.default)(name)) {\n    name = `_${name}`;\n  }\n  return name || "_";\n}\n\n//# sourceMappingURL=toIdentifier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY3NDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZix5QkFBeUIsbUJBQU8sQ0FBQyxLQUFvQztBQUNyRSxpQ0FBaUMsbUJBQU8sQ0FBQyxLQUFvQztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxlQUFlLEtBQUs7QUFDcEI7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9JZGVudGlmaWVyLmpzPzViOGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b0lkZW50aWZpZXI7XG52YXIgX2lzVmFsaWRJZGVudGlmaWVyID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvaXNWYWxpZElkZW50aWZpZXIuanNcIik7XG52YXIgX2hlbHBlclZhbGlkYXRvcklkZW50aWZpZXIgPSByZXF1aXJlKFwiQGJhYmVsL2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllclwiKTtcbmZ1bmN0aW9uIHRvSWRlbnRpZmllcihpbnB1dCkge1xuICBpbnB1dCA9IGlucHV0ICsgXCJcIjtcbiAgbGV0IG5hbWUgPSBcIlwiO1xuICBmb3IgKGNvbnN0IGMgb2YgaW5wdXQpIHtcbiAgICBuYW1lICs9ICgwLCBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllci5pc0lkZW50aWZpZXJDaGFyKShjLmNvZGVQb2ludEF0KDApKSA/IGMgOiBcIi1cIjtcbiAgfVxuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9eWy0wLTldKy8sIFwiXCIpO1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bLVxcc10rKC4pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIGMpIHtcbiAgICByZXR1cm4gYyA/IGMudG9VcHBlckNhc2UoKSA6IFwiXCI7XG4gIH0pO1xuICBpZiAoISgwLCBfaXNWYWxpZElkZW50aWZpZXIuZGVmYXVsdCkobmFtZSkpIHtcbiAgICBuYW1lID0gYF8ke25hbWV9YDtcbiAgfVxuICByZXR1cm4gbmFtZSB8fCBcIl9cIjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9JZGVudGlmaWVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36744\n')},72402:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = toKeyAlias;\nvar _index = __webpack_require__(98960);\nvar _cloneNode = __webpack_require__(85279);\nvar _removePropertiesDeep = __webpack_require__(87639);\nfunction toKeyAlias(node, key = node.key) {\n  let alias;\n  if (node.kind === "method") {\n    return toKeyAlias.increment() + "";\n  } else if ((0, _index.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _index.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n  return alias;\n}\ntoKeyAlias.uid = 0;\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n\n//# sourceMappingURL=toKeyAlias.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI0MDIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBa0M7QUFDdkQsaUJBQWlCLG1CQUFPLENBQUMsS0FBdUI7QUFDaEQsNEJBQTRCLG1CQUFPLENBQUMsS0FBMEM7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLE1BQU07QUFDdEI7QUFDQTtBQUNBLHNCQUFzQixNQUFNO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb252ZXJ0ZXJzL3RvS2V5QWxpYXMuanM/MGIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvS2V5QWxpYXM7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xudmFyIF9jbG9uZU5vZGUgPSByZXF1aXJlKFwiLi4vY2xvbmUvY2xvbmVOb2RlLmpzXCIpO1xudmFyIF9yZW1vdmVQcm9wZXJ0aWVzRGVlcCA9IHJlcXVpcmUoXCIuLi9tb2RpZmljYXRpb25zL3JlbW92ZVByb3BlcnRpZXNEZWVwLmpzXCIpO1xuZnVuY3Rpb24gdG9LZXlBbGlhcyhub2RlLCBrZXkgPSBub2RlLmtleSkge1xuICBsZXQgYWxpYXM7XG4gIGlmIChub2RlLmtpbmQgPT09IFwibWV0aG9kXCIpIHtcbiAgICByZXR1cm4gdG9LZXlBbGlhcy5pbmNyZW1lbnQoKSArIFwiXCI7XG4gIH0gZWxzZSBpZiAoKDAsIF9pbmRleC5pc0lkZW50aWZpZXIpKGtleSkpIHtcbiAgICBhbGlhcyA9IGtleS5uYW1lO1xuICB9IGVsc2UgaWYgKCgwLCBfaW5kZXguaXNTdHJpbmdMaXRlcmFsKShrZXkpKSB7XG4gICAgYWxpYXMgPSBKU09OLnN0cmluZ2lmeShrZXkudmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGFsaWFzID0gSlNPTi5zdHJpbmdpZnkoKDAsIF9yZW1vdmVQcm9wZXJ0aWVzRGVlcC5kZWZhdWx0KSgoMCwgX2Nsb25lTm9kZS5kZWZhdWx0KShrZXkpKSk7XG4gIH1cbiAgaWYgKG5vZGUuY29tcHV0ZWQpIHtcbiAgICBhbGlhcyA9IGBbJHthbGlhc31dYDtcbiAgfVxuICBpZiAobm9kZS5zdGF0aWMpIHtcbiAgICBhbGlhcyA9IGBzdGF0aWM6JHthbGlhc31gO1xuICB9XG4gIHJldHVybiBhbGlhcztcbn1cbnRvS2V5QWxpYXMudWlkID0gMDtcbnRvS2V5QWxpYXMuaW5jcmVtZW50ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodG9LZXlBbGlhcy51aWQgPj0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICByZXR1cm4gdG9LZXlBbGlhcy51aWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0tleUFsaWFzLnVpZCsrO1xuICB9XG59O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10b0tleUFsaWFzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72402\n')},90640:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = ({\n  value: true\n});\nexports["default"] = toSequenceExpression;\nvar _gatherSequenceExpressions = __webpack_require__(14089);\n;\nfunction toSequenceExpression(nodes, scope) {\n  if (!(nodes != null && nodes.length)) return;\n  const declars = [];\n  const result = (0, _gatherSequenceExpressions.default)(nodes, declars);\n  if (!result) return;\n  for (const declar of declars) {\n    scope.push(declar);\n  }\n  return result;\n}\n\n//# sourceMappingURL=toSequenceExpression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA2NDAuanMiLCJtYXBwaW5ncyI6IjtBQUFhOztBQUViLDZCQUE2QztBQUM3QztBQUNBLENBQUMsQ0FBQztBQUNGLGtCQUFlO0FBQ2YsaUNBQWlDLG1CQUFPLENBQUMsS0FBZ0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9jb252ZXJ0ZXJzL3RvU2VxdWVuY2VFeHByZXNzaW9uLmpzPzQyZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0b1NlcXVlbmNlRXhwcmVzc2lvbjtcbnZhciBfZ2F0aGVyU2VxdWVuY2VFeHByZXNzaW9ucyA9IHJlcXVpcmUoXCIuL2dhdGhlclNlcXVlbmNlRXhwcmVzc2lvbnMuanNcIik7XG47XG5mdW5jdGlvbiB0b1NlcXVlbmNlRXhwcmVzc2lvbihub2Rlcywgc2NvcGUpIHtcbiAgaWYgKCEobm9kZXMgIT0gbnVsbCAmJiBub2Rlcy5sZW5ndGgpKSByZXR1cm47XG4gIGNvbnN0IGRlY2xhcnMgPSBbXTtcbiAgY29uc3QgcmVzdWx0ID0gKDAsIF9nYXRoZXJTZXF1ZW5jZUV4cHJlc3Npb25zLmRlZmF1bHQpKG5vZGVzLCBkZWNsYXJzKTtcbiAgaWYgKCFyZXN1bHQpIHJldHVybjtcbiAgZm9yIChjb25zdCBkZWNsYXIgb2YgZGVjbGFycykge1xuICAgIHNjb3BlLnB1c2goZGVjbGFyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10b1NlcXVlbmNlRXhwcmVzc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///90640\n')},99198:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _index = __webpack_require__(98960);\nvar _index2 = __webpack_require__(48079);\nvar _default = exports["default"] = toStatement;\nfunction toStatement(node, ignore) {\n  if ((0, _index.isStatement)(node)) {\n    return node;\n  }\n  let mustHaveId = false;\n  let newType;\n  if ((0, _index.isClass)(node)) {\n    mustHaveId = true;\n    newType = "ClassDeclaration";\n  } else if ((0, _index.isFunction)(node)) {\n    mustHaveId = true;\n    newType = "FunctionDeclaration";\n  } else if ((0, _index.isAssignmentExpression)(node)) {\n    return (0, _index2.expressionStatement)(node);\n  }\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n  node.type = newType;\n  return node;\n}\n\n//# sourceMappingURL=toStatement.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkxOTguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBa0M7QUFDdkQsY0FBYyxtQkFBTyxDQUFDLEtBQWdDO0FBQ3RELGVBQWUsa0JBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixxQ0FBcUMsV0FBVztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdG9TdGF0ZW1lbnQuanM/YWZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX2luZGV4MiA9IHJlcXVpcmUoXCIuLi9idWlsZGVycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSB0b1N0YXRlbWVudDtcbmZ1bmN0aW9uIHRvU3RhdGVtZW50KG5vZGUsIGlnbm9yZSkge1xuICBpZiAoKDAsIF9pbmRleC5pc1N0YXRlbWVudCkobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBsZXQgbXVzdEhhdmVJZCA9IGZhbHNlO1xuICBsZXQgbmV3VHlwZTtcbiAgaWYgKCgwLCBfaW5kZXguaXNDbGFzcykobm9kZSkpIHtcbiAgICBtdXN0SGF2ZUlkID0gdHJ1ZTtcbiAgICBuZXdUeXBlID0gXCJDbGFzc0RlY2xhcmF0aW9uXCI7XG4gIH0gZWxzZSBpZiAoKDAsIF9pbmRleC5pc0Z1bmN0aW9uKShub2RlKSkge1xuICAgIG11c3RIYXZlSWQgPSB0cnVlO1xuICAgIG5ld1R5cGUgPSBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIjtcbiAgfSBlbHNlIGlmICgoMCwgX2luZGV4LmlzQXNzaWdubWVudEV4cHJlc3Npb24pKG5vZGUpKSB7XG4gICAgcmV0dXJuICgwLCBfaW5kZXgyLmV4cHJlc3Npb25TdGF0ZW1lbnQpKG5vZGUpO1xuICB9XG4gIGlmIChtdXN0SGF2ZUlkICYmICFub2RlLmlkKSB7XG4gICAgbmV3VHlwZSA9IGZhbHNlO1xuICB9XG4gIGlmICghbmV3VHlwZSkge1xuICAgIGlmIChpZ25vcmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgdHVybiAke25vZGUudHlwZX0gdG8gYSBzdGF0ZW1lbnRgKTtcbiAgICB9XG4gIH1cbiAgbm9kZS50eXBlID0gbmV3VHlwZTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvU3RhdGVtZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///99198\n')},44544:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _isValidIdentifier = __webpack_require__(60983);\nvar _index = __webpack_require__(48079);\nvar _default = exports["default"] = valueToNode;\nconst objectToString = Function.call.bind(Object.prototype.toString);\nfunction isRegExp(value) {\n  return objectToString(value) === "[object RegExp]";\n}\nfunction isPlainObject(value) {\n  if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\nfunction valueToNode(value) {\n  if (value === undefined) {\n    return (0, _index.identifier)("undefined");\n  }\n  if (value === true || value === false) {\n    return (0, _index.booleanLiteral)(value);\n  }\n  if (value === null) {\n    return (0, _index.nullLiteral)();\n  }\n  if (typeof value === "string") {\n    return (0, _index.stringLiteral)(value);\n  }\n  if (typeof value === "number") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = (0, _index.numericLiteral)(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        numerator = (0, _index.numericLiteral)(0);\n      } else {\n        numerator = (0, _index.numericLiteral)(1);\n      }\n      result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));\n    }\n    if (value < 0 || Object.is(value, -0)) {\n      result = (0, _index.unaryExpression)("-", result);\n    }\n    return result;\n  }\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = /\\/([a-z]*)$/.exec(value.toString())[1];\n    return (0, _index.regExpLiteral)(pattern, flags);\n  }\n  if (Array.isArray(value)) {\n    return (0, _index.arrayExpression)(value.map(valueToNode));\n  }\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if ((0, _isValidIdentifier.default)(key)) {\n        nodeKey = (0, _index.identifier)(key);\n      } else {\n        nodeKey = (0, _index.stringLiteral)(key);\n      }\n      props.push((0, _index.objectProperty)(nodeKey, valueToNode(value[key])));\n    }\n    return (0, _index.objectExpression)(props);\n  }\n  throw new Error("don\'t know how to turn this value into a node");\n}\n\n//# sourceMappingURL=valueToNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ1NDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZix5QkFBeUIsbUJBQU8sQ0FBQyxLQUFvQztBQUNyRSxhQUFhLG1CQUFPLENBQUMsS0FBZ0M7QUFDckQsZUFBZSxrQkFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2NvbnZlcnRlcnMvdmFsdWVUb05vZGUuanM/NWJhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfaXNWYWxpZElkZW50aWZpZXIgPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9pc1ZhbGlkSWRlbnRpZmllci5qc1wiKTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vYnVpbGRlcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gdmFsdWVUb05vZGU7XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcbmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09IFwiW29iamVjdCBSZWdFeHBdXCI7XG59XG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gIHJldHVybiBwcm90byA9PT0gbnVsbCB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pID09PSBudWxsO1xufVxuZnVuY3Rpb24gdmFsdWVUb05vZGUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC5pZGVudGlmaWVyKShcInVuZGVmaW5lZFwiKTtcbiAgfVxuICBpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuICgwLCBfaW5kZXguYm9vbGVhbkxpdGVyYWwpKHZhbHVlKTtcbiAgfVxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC5udWxsTGl0ZXJhbCkoKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuICgwLCBfaW5kZXguc3RyaW5nTGl0ZXJhbCkodmFsdWUpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmIChOdW1iZXIuaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICByZXN1bHQgPSAoMCwgX2luZGV4Lm51bWVyaWNMaXRlcmFsKShNYXRoLmFicyh2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbnVtZXJhdG9yO1xuICAgICAgaWYgKE51bWJlci5pc05hTih2YWx1ZSkpIHtcbiAgICAgICAgbnVtZXJhdG9yID0gKDAsIF9pbmRleC5udW1lcmljTGl0ZXJhbCkoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBudW1lcmF0b3IgPSAoMCwgX2luZGV4Lm51bWVyaWNMaXRlcmFsKSgxKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9ICgwLCBfaW5kZXguYmluYXJ5RXhwcmVzc2lvbikoXCIvXCIsIG51bWVyYXRvciwgKDAsIF9pbmRleC5udW1lcmljTGl0ZXJhbCkoMCkpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPCAwIHx8IE9iamVjdC5pcyh2YWx1ZSwgLTApKSB7XG4gICAgICByZXN1bHQgPSAoMCwgX2luZGV4LnVuYXJ5RXhwcmVzc2lvbikoXCItXCIsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGNvbnN0IHBhdHRlcm4gPSB2YWx1ZS5zb3VyY2U7XG4gICAgY29uc3QgZmxhZ3MgPSAvXFwvKFthLXpdKikkLy5leGVjKHZhbHVlLnRvU3RyaW5nKCkpWzFdO1xuICAgIHJldHVybiAoMCwgX2luZGV4LnJlZ0V4cExpdGVyYWwpKHBhdHRlcm4sIGZsYWdzKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gKDAsIF9pbmRleC5hcnJheUV4cHJlc3Npb24pKHZhbHVlLm1hcCh2YWx1ZVRvTm9kZSkpO1xuICB9XG4gIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIGNvbnN0IHByb3BzID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG4gICAgICBsZXQgbm9kZUtleTtcbiAgICAgIGlmICgoMCwgX2lzVmFsaWRJZGVudGlmaWVyLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgbm9kZUtleSA9ICgwLCBfaW5kZXguaWRlbnRpZmllcikoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVLZXkgPSAoMCwgX2luZGV4LnN0cmluZ0xpdGVyYWwpKGtleSk7XG4gICAgICB9XG4gICAgICBwcm9wcy5wdXNoKCgwLCBfaW5kZXgub2JqZWN0UHJvcGVydHkpKG5vZGVLZXksIHZhbHVlVG9Ob2RlKHZhbHVlW2tleV0pKSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX2luZGV4Lm9iamVjdEV4cHJlc3Npb24pKHByb3BzKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJkb24ndCBrbm93IGhvdyB0byB0dXJuIHRoaXMgdmFsdWUgaW50byBhIG5vZGVcIik7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbHVlVG9Ob2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44544\n')},5158:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.patternLikeCommon = exports.importAttributes = exports.functionTypeAnnotationCommon = exports.functionDeclarationCommon = exports.functionCommon = exports.classMethodOrPropertyCommon = exports.classMethodOrDeclareMethodCommon = void 0;\nvar _is = __webpack_require__(93828);\nvar _isValidIdentifier = __webpack_require__(60983);\nvar _helperValidatorIdentifier = __webpack_require__(61000);\nvar _helperStringParser = __webpack_require__(53973);\nvar _index = __webpack_require__(93422);\nvar _utils = __webpack_require__(77596);\nconst defineType = (0, _utils.defineAliasedType)("Standardized");\ndefineType("ArrayExpression", {\n  fields: {\n    elements: {\n      validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement")),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined\n    }\n  },\n  visitor: ["elements"],\n  aliases: ["Expression"]\n});\ndefineType("AssignmentExpression", {\n  fields: {\n    operator: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("string") : Object.assign(function () {\n        const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS);\n        const pattern = (0, _utils.assertOneOf)("=");\n        return function (node, key, val) {\n          const validator = (0, _is.default)("Pattern", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      }(), {\n        type: "string"\n      })\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  },\n  builder: ["operator", "left", "right"],\n  visitor: ["left", "right"],\n  aliases: ["Expression"]\n});\ndefineType("BinaryExpression", {\n  builder: ["operator", "left", "right"],\n  fields: {\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS)\n    },\n    left: {\n      validate: function () {\n        const expression = (0, _utils.assertNodeType)("Expression");\n        const inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");\n        const validator = Object.assign(function (node, key, val) {\n          const validator = node.operator === "in" ? inOp : expression;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: ["Expression", "PrivateName"]\n        });\n        return validator;\n      }()\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  },\n  visitor: ["left", "right"],\n  aliases: ["Binary", "Expression"]\n});\ndefineType("InterpreterDirective", {\n  builder: ["value"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)("string")\n    }\n  }\n});\ndefineType("Directive", {\n  visitor: ["value"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertNodeType)("DirectiveLiteral")\n    }\n  }\n});\ndefineType("DirectiveLiteral", {\n  builder: ["value"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)("string")\n    }\n  }\n});\ndefineType("BlockStatement", {\n  builder: ["body", "directives"],\n  visitor: ["directives", "body"],\n  fields: {\n    directives: {\n      validate: (0, _utils.arrayOfType)("Directive"),\n      default: []\n    },\n    body: (0, _utils.validateArrayOfType)("Statement")\n  },\n  aliases: ["Scopable", "BlockParent", "Block", "Statement"]\n});\ndefineType("BreakStatement", {\n  visitor: ["label"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)("Identifier"),\n      optional: true\n    }\n  },\n  aliases: ["Statement", "Terminatorless", "CompletionStatement"]\n});\ndefineType("CallExpression", {\n  visitor: ["callee", "arguments", "typeParameters", "typeArguments"],\n  builder: ["callee", "arguments"],\n  aliases: ["Expression"],\n  fields: Object.assign({\n    callee: {\n      validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")\n    },\n    arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder")\n  }, !process.env.BABEL_TYPES_8_BREAKING ? {\n    optional: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    }\n  } : {}, {\n    typeArguments: {\n      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),\n      optional: true\n    }\n  })\n});\ndefineType("CatchClause", {\n  visitor: ["param", "body"],\n  fields: {\n    param: {\n      validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    }\n  },\n  aliases: ["Scopable", "BlockParent"]\n});\ndefineType("ConditionalExpression", {\n  visitor: ["test", "consequent", "alternate"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    consequent: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    alternate: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  },\n  aliases: ["Expression", "Conditional"]\n});\ndefineType("ContinueStatement", {\n  visitor: ["label"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)("Identifier"),\n      optional: true\n    }\n  },\n  aliases: ["Statement", "Terminatorless", "CompletionStatement"]\n});\ndefineType("DebuggerStatement", {\n  aliases: ["Statement"]\n});\ndefineType("DoWhileStatement", {\n  builder: ["test", "body"],\n  visitor: ["body", "test"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    }\n  },\n  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]\n});\ndefineType("EmptyStatement", {\n  aliases: ["Statement"]\n});\ndefineType("ExpressionStatement", {\n  visitor: ["expression"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  },\n  aliases: ["Statement", "ExpressionWrapper"]\n});\ndefineType("File", {\n  builder: ["program", "comments", "tokens"],\n  visitor: ["program"],\n  fields: {\n    program: {\n      validate: (0, _utils.assertNodeType)("Program")\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {}, {\n        each: {\n          oneOfNodeTypes: ["CommentBlock", "CommentLine"]\n        }\n      }) : (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")),\n      optional: true\n    },\n    tokens: {\n      validate: (0, _utils.assertEach)(Object.assign(() => {}, {\n        type: "any"\n      })),\n      optional: true\n    }\n  }\n});\ndefineType("ForInStatement", {\n  visitor: ["left", "right", "body"],\n  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    }\n  }\n});\ndefineType("ForStatement", {\n  visitor: ["init", "test", "update", "body"],\n  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],\n  fields: {\n    init: {\n      validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),\n      optional: true\n    },\n    test: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    },\n    update: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    }\n  }\n});\nconst functionCommon = () => ({\n  params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement"),\n  generator: {\n    default: false\n  },\n  async: {\n    default: false\n  }\n});\nexports.functionCommon = functionCommon;\nconst functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),\n    optional: true\n  }\n});\nexports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;\nconst functionDeclarationCommon = () => Object.assign({}, functionCommon(), {\n  declare: {\n    validate: (0, _utils.assertValueType)("boolean"),\n    optional: true\n  },\n  id: {\n    validate: (0, _utils.assertNodeType)("Identifier"),\n    optional: true\n  }\n});\nexports.functionDeclarationCommon = functionDeclarationCommon;\ndefineType("FunctionDeclaration", {\n  builder: ["id", "params", "body", "generator", "async"],\n  visitor: ["id", "typeParameters", "params", "returnType", "body"],\n  fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    },\n    predicate: {\n      validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),\n      optional: true\n    }\n  }),\n  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],\n  validate: !process.env.BABEL_TYPES_8_BREAKING ? undefined : function () {\n    const identifier = (0, _utils.assertNodeType)("Identifier");\n    return function (parent, key, node) {\n      if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {\n        identifier(node, "id", node.id);\n      }\n    };\n  }()\n});\ndefineType("FunctionExpression", {\n  inherits: "FunctionDeclaration",\n  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],\n  fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {\n    id: {\n      validate: (0, _utils.assertNodeType)("Identifier"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    },\n    predicate: {\n      validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),\n      optional: true\n    }\n  })\n});\nconst patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),\n    optional: true\n  },\n  optional: {\n    validate: (0, _utils.assertValueType)("boolean"),\n    optional: true\n  },\n  decorators: {\n    validate: (0, _utils.arrayOfType)("Decorator"),\n    optional: true\n  }\n});\nexports.patternLikeCommon = patternLikeCommon;\ndefineType("Identifier", {\n  builder: ["name"],\n  visitor: ["typeAnnotation", "decorators"],\n  aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    name: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function (node, key, val) {\n        if (!(0, _isValidIdentifier.default)(val, false)) {\n          throw new TypeError(`"${val}" is not a valid identifier name`);\n        }\n      }, {\n        type: "string"\n      })) : (0, _utils.assertValueType)("string")\n    }\n  }),\n  validate: process.env.BABEL_TYPES_8_BREAKING ? function (parent, key, node) {\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n    const [, parentKey] = match;\n    const nonComp = {\n      computed: false\n    };\n    if (parentKey === "property") {\n      if ((0, _is.default)("MemberExpression", parent, nonComp)) return;\n      if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;\n    } else if (parentKey === "key") {\n      if ((0, _is.default)("Property", parent, nonComp)) return;\n      if ((0, _is.default)("Method", parent, nonComp)) return;\n    } else if (parentKey === "exported") {\n      if ((0, _is.default)("ExportSpecifier", parent)) return;\n    } else if (parentKey === "imported") {\n      if ((0, _is.default)("ImportSpecifier", parent, {\n        imported: node\n      })) return;\n    } else if (parentKey === "meta") {\n      if ((0, _is.default)("MetaProperty", parent, {\n        meta: node\n      })) return;\n    }\n    if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== "this") {\n      throw new TypeError(`"${node.name}" is not a valid identifier`);\n    }\n  } : undefined\n});\ndefineType("IfStatement", {\n  visitor: ["test", "consequent", "alternate"],\n  aliases: ["Statement", "Conditional"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    consequent: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    },\n    alternate: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("Statement")\n    }\n  }\n});\ndefineType("LabeledStatement", {\n  visitor: ["label", "body"],\n  aliases: ["Statement"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    }\n  }\n});\ndefineType("StringLiteral", {\n  builder: ["value"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)("string")\n    }\n  },\n  aliases: ["Expression", "Pureish", "Literal", "Immutable"]\n});\ndefineType("NumericLiteral", {\n  builder: ["value"],\n  deprecatedAlias: "NumberLiteral",\n  fields: {\n    value: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function (node, key, val) {\n        if (1 / val < 0 || !Number.isFinite(val)) {\n          const error = new Error("NumericLiterals must be non-negative finite numbers. " + `You can use t.valueToNode(${val}) instead.`);\n          {}\n        }\n      }, {\n        type: "number"\n      }))\n    }\n  },\n  aliases: ["Expression", "Pureish", "Literal", "Immutable"]\n});\ndefineType("NullLiteral", {\n  aliases: ["Expression", "Pureish", "Literal", "Immutable"]\n});\ndefineType("BooleanLiteral", {\n  builder: ["value"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)("boolean")\n    }\n  },\n  aliases: ["Expression", "Pureish", "Literal", "Immutable"]\n});\ndefineType("RegExpLiteral", {\n  builder: ["pattern", "flags"],\n  deprecatedAlias: "RegexLiteral",\n  aliases: ["Expression", "Pureish", "Literal"],\n  fields: {\n    pattern: {\n      validate: (0, _utils.assertValueType)("string")\n    },\n    flags: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function (node, key, val) {\n        const invalid = /[^gimsuy]/.exec(val);\n        if (invalid) {\n          throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);\n        }\n      }, {\n        type: "string"\n      })) : (0, _utils.assertValueType)("string"),\n      default: ""\n    }\n  }\n});\ndefineType("LogicalExpression", {\n  builder: ["operator", "left", "right"],\n  visitor: ["left", "right"],\n  aliases: ["Binary", "Expression"],\n  fields: {\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS)\n    },\n    left: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("MemberExpression", {\n  builder: ["object", "property", "computed", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : [])],\n  visitor: ["object", "property"],\n  aliases: ["Expression", "LVal"],\n  fields: Object.assign({\n    object: {\n      validate: (0, _utils.assertNodeType)("Expression", "Super")\n    },\n    property: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName");\n        const computed = (0, _utils.assertNodeType)("Expression");\n        const validator = function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];\n        return validator;\n      }()\n    },\n    computed: {\n      default: false\n    }\n  }, !process.env.BABEL_TYPES_8_BREAKING ? {\n    optional: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    }\n  } : {})\n});\ndefineType("NewExpression", {\n  inherits: "CallExpression"\n});\ndefineType("Program", {\n  visitor: ["directives", "body"],\n  builder: ["body", "directives", "sourceType", "interpreter"],\n  fields: {\n    sourceType: {\n      validate: (0, _utils.assertOneOf)("script", "module"),\n      default: "script"\n    },\n    interpreter: {\n      validate: (0, _utils.assertNodeType)("InterpreterDirective"),\n      default: null,\n      optional: true\n    },\n    directives: {\n      validate: (0, _utils.arrayOfType)("Directive"),\n      default: []\n    },\n    body: (0, _utils.validateArrayOfType)("Statement")\n  },\n  aliases: ["Scopable", "BlockParent", "Block"]\n});\ndefineType("ObjectExpression", {\n  visitor: ["properties"],\n  aliases: ["Expression"],\n  fields: {\n    properties: (0, _utils.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement")\n  }\n});\ndefineType("ObjectMethod", {\n  builder: ["kind", "key", "params", "body", "computed", "generator", "async"],\n  visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],\n  fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {\n    kind: Object.assign({\n      validate: (0, _utils.assertOneOf)("method", "get", "set")\n    }, !process.env.BABEL_TYPES_8_BREAKING ? {\n      default: "method"\n    } : {}),\n    computed: {\n      default: false\n    },\n    key: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");\n        const computed = (0, _utils.assertNodeType)("Expression");\n        const validator = function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"];\n        return validator;\n      }()\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    }\n  }),\n  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]\n});\ndefineType("ObjectProperty", {\n  builder: ["key", "value", "computed", "shorthand", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : [])],\n  fields: {\n    computed: {\n      default: false\n    },\n    key: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName");\n        const computed = (0, _utils.assertNodeType)("Expression");\n        const validator = Object.assign(function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]\n        });\n        return validator;\n      }()\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)("Expression", "PatternLike")\n    },\n    shorthand: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function (node, key, shorthand) {\n        if (!shorthand) return;\n        if (node.computed) {\n          throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");\n        }\n        if (!(0, _is.default)("Identifier", node.key)) {\n          throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");\n        }\n      }, {\n        type: "boolean"\n      })) : (0, _utils.assertValueType)("boolean"),\n      default: false\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    }\n  },\n  visitor: ["key", "value", "decorators"],\n  aliases: ["UserWhitespacable", "Property", "ObjectMember"],\n  validate: !process.env.BABEL_TYPES_8_BREAKING ? undefined : function () {\n    const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion");\n    const expression = (0, _utils.assertNodeType)("Expression");\n    return function (parent, key, node) {\n      const validator = (0, _is.default)("ObjectPattern", parent) ? pattern : expression;\n      validator(node, "value", node.value);\n    };\n  }()\n});\ndefineType("RestElement", {\n  visitor: ["argument", "typeAnnotation"],\n  builder: ["argument"],\n  aliases: ["LVal", "PatternLike"],\n  deprecatedAlias: "RestProperty",\n  fields: Object.assign({}, patternLikeCommon(), {\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")\n    }\n  }),\n  validate: process.env.BABEL_TYPES_8_BREAKING ? function (parent, key) {\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error("Internal Babel error: malformed key.");\n    const [, listKey, index] = match;\n    if (parent[listKey].length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  } : undefined\n});\ndefineType("ReturnStatement", {\n  visitor: ["argument"],\n  aliases: ["Statement", "Terminatorless", "CompletionStatement"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    }\n  }\n});\ndefineType("SequenceExpression", {\n  visitor: ["expressions"],\n  fields: {\n    expressions: (0, _utils.validateArrayOfType)("Expression")\n  },\n  aliases: ["Expression"]\n});\ndefineType("ParenthesizedExpression", {\n  visitor: ["expression"],\n  aliases: ["Expression", "ExpressionWrapper"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("SwitchCase", {\n  visitor: ["test", "consequent"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    },\n    consequent: (0, _utils.validateArrayOfType)("Statement")\n  }\n});\ndefineType("SwitchStatement", {\n  visitor: ["discriminant", "cases"],\n  aliases: ["Statement", "BlockParent", "Scopable"],\n  fields: {\n    discriminant: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    cases: (0, _utils.validateArrayOfType)("SwitchCase")\n  }\n});\ndefineType("ThisExpression", {\n  aliases: ["Expression"]\n});\ndefineType("ThrowStatement", {\n  visitor: ["argument"],\n  aliases: ["Statement", "Terminatorless", "CompletionStatement"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("TryStatement", {\n  visitor: ["block", "handler", "finalizer"],\n  aliases: ["Statement"],\n  fields: {\n    block: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function (node) {\n        if (!node.handler && !node.finalizer) {\n          throw new TypeError("TryStatement expects either a handler or finalizer, or both");\n        }\n      }, {\n        oneOfNodeTypes: ["BlockStatement"]\n      })) : (0, _utils.assertNodeType)("BlockStatement")\n    },\n    handler: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("CatchClause")\n    },\n    finalizer: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    }\n  }\n});\ndefineType("UnaryExpression", {\n  builder: ["operator", "argument", "prefix"],\n  fields: {\n    prefix: {\n      default: true\n    },\n    argument: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS)\n    }\n  },\n  visitor: ["argument"],\n  aliases: ["UnaryLike", "Expression"]\n});\ndefineType("UpdateExpression", {\n  builder: ["operator", "argument", "prefix"],\n  fields: {\n    prefix: {\n      default: false\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Expression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression")\n    },\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS)\n    }\n  },\n  visitor: ["argument"],\n  aliases: ["Expression"]\n});\ndefineType("VariableDeclaration", {\n  builder: ["kind", "declarations"],\n  visitor: ["declarations"],\n  aliases: ["Statement", "Declaration"],\n  fields: {\n    declare: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    kind: {\n      validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using")\n    },\n    declarations: (0, _utils.validateArrayOfType)("VariableDeclarator")\n  },\n  validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {\n    const withoutInit = (0, _utils.assertNodeType)("Identifier");\n    return function (parent, key, node) {\n      if ((0, _is.default)("ForXStatement", parent, {\n        left: node\n      })) {\n        if (node.declarations.length !== 1) {\n          throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);\n        }\n      } else {\n        node.declarations.forEach(decl => {\n          if (!decl.init) withoutInit(decl, "id", decl.id);\n        });\n      }\n    };\n  })() : undefined\n});\ndefineType("VariableDeclarator", {\n  visitor: ["id", "init"],\n  fields: {\n    id: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern")\n    },\n    definite: {\n      optional: true,\n      validate: (0, _utils.assertValueType)("boolean")\n    },\n    init: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("WhileStatement", {\n  visitor: ["test", "body"],\n  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    }\n  }\n});\ndefineType("WithStatement", {\n  visitor: ["object", "body"],\n  aliases: ["Statement"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    }\n  }\n});\ndefineType("AssignmentPattern", {\n  visitor: ["left", "right", "decorators"],\n  builder: ["left", "right"],\n  aliases: ["Pattern", "PatternLike", "LVal"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    left: {\n      validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    }\n  })\n});\ndefineType("ArrayPattern", {\n  visitor: ["elements", "typeAnnotation"],\n  builder: ["elements"],\n  aliases: ["Pattern", "PatternLike", "LVal"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal")))\n    }\n  })\n});\ndefineType("ArrowFunctionExpression", {\n  builder: ["params", "body", "async"],\n  visitor: ["typeParameters", "params", "returnType", "body"],\n  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],\n  fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {\n    expression: {\n      validate: (0, _utils.assertValueType)("boolean")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement", "Expression")\n    },\n    predicate: {\n      validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),\n      optional: true\n    }\n  })\n});\ndefineType("ClassBody", {\n  visitor: ["body"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")\n  }\n});\ndefineType("ClassExpression", {\n  builder: ["id", "superClass", "body", "decorators"],\n  visitor: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body"],\n  aliases: ["Scopable", "Class", "Expression"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)("Identifier"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("ClassBody")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    superTypeParameters: {\n      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),\n      optional: true\n    },\n    implements: {\n      validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    },\n    mixins: {\n      validate: (0, _utils.assertNodeType)("InterfaceExtends"),\n      optional: true\n    }\n  }\n});\ndefineType("ClassDeclaration", {\n  inherits: "ClassExpression",\n  aliases: ["Scopable", "Class", "Statement", "Declaration"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)("Identifier"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("ClassBody")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    superTypeParameters: {\n      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),\n      optional: true\n    },\n    implements: {\n      validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    },\n    mixins: {\n      validate: (0, _utils.assertNodeType)("InterfaceExtends"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    abstract: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    }\n  },\n  validate: !process.env.BABEL_TYPES_8_BREAKING ? undefined : function () {\n    const identifier = (0, _utils.assertNodeType)("Identifier");\n    return function (parent, key, node) {\n      if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {\n        identifier(node, "id", node.id);\n      }\n    };\n  }()\n});\nconst importAttributes = exports.importAttributes = {\n  attributes: {\n    optional: true,\n    validate: (0, _utils.arrayOfType)("ImportAttribute")\n  },\n  assertions: {\n    deprecated: true,\n    optional: true,\n    validate: (0, _utils.arrayOfType)("ImportAttribute")\n  }\n};\ndefineType("ExportAllDeclaration", {\n  builder: ["source"],\n  visitor: ["source", "attributes", "assertions"],\n  aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],\n  fields: Object.assign({\n    source: {\n      validate: (0, _utils.assertNodeType)("StringLiteral")\n    },\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))\n  }, importAttributes)\n});\ndefineType("ExportDefaultDeclaration", {\n  visitor: ["declaration"],\n  aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],\n  fields: {\n    declaration: (0, _utils.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"),\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))\n  }\n});\ndefineType("ExportNamedDeclaration", {\n  builder: ["declaration", "specifiers", "source"],\n  visitor: process.env ? ["declaration", "specifiers", "source", "attributes"] : ["declaration", "specifiers", "source", "attributes", "assertions"],\n  aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],\n  fields: Object.assign({\n    declaration: {\n      optional: true,\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function (node, key, val) {\n        if (val && node.specifiers.length) {\n          throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");\n        }\n        if (val && node.source) {\n          throw new TypeError("Cannot export a declaration from a source");\n        }\n      }, {\n        oneOfNodeTypes: ["Declaration"]\n      })) : (0, _utils.assertNodeType)("Declaration")\n    }\n  }, importAttributes, {\n    specifiers: {\n      default: [],\n      validate: (0, _utils.arrayOf)(function () {\n        const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");\n        const sourceless = (0, _utils.assertNodeType)("ExportSpecifier");\n        if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n        return Object.assign(function (node, key, val) {\n          const validator = node.source ? sourced : sourceless;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: ["ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"]\n        });\n      }())\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)("StringLiteral"),\n      optional: true\n    },\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))\n  })\n});\ndefineType("ExportSpecifier", {\n  visitor: ["local", "exported"],\n  aliases: ["ModuleSpecifier"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    },\n    exported: {\n      validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")\n    },\n    exportKind: {\n      validate: (0, _utils.assertOneOf)("type", "value"),\n      optional: true\n    }\n  }\n});\ndefineType("ForOfStatement", {\n  visitor: ["left", "right", "body"],\n  builder: ["left", "right", "body", "await"],\n  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],\n  fields: {\n    left: {\n      validate: function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");\n        }\n        const declaration = (0, _utils.assertNodeType)("VariableDeclaration");\n        const lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");\n        return Object.assign(function (node, key, val) {\n          if ((0, _is.default)("VariableDeclaration", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        }, {\n          oneOfNodeTypes: ["VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression"]\n        });\n      }()\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("Statement")\n    },\n    await: {\n      default: false\n    }\n  }\n});\ndefineType("ImportDeclaration", {\n  builder: ["specifiers", "source"],\n  visitor: ["specifiers", "source", "attributes", "assertions"],\n  aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],\n  fields: Object.assign({}, importAttributes, {\n    module: {\n      optional: true,\n      validate: (0, _utils.assertValueType)("boolean")\n    },\n    phase: {\n      default: null,\n      validate: (0, _utils.assertOneOf)("source", "defer")\n    },\n    specifiers: (0, _utils.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"),\n    source: {\n      validate: (0, _utils.assertNodeType)("StringLiteral")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)("type", "typeof", "value"),\n      optional: true\n    }\n  })\n});\ndefineType("ImportDefaultSpecifier", {\n  visitor: ["local"],\n  aliases: ["ModuleSpecifier"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    }\n  }\n});\ndefineType("ImportNamespaceSpecifier", {\n  visitor: ["local"],\n  aliases: ["ModuleSpecifier"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    }\n  }\n});\ndefineType("ImportSpecifier", {\n  visitor: ["imported", "local"],\n  builder: ["local", "imported"],\n  aliases: ["ModuleSpecifier"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    },\n    imported: {\n      validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)("type", "typeof", "value"),\n      optional: true\n    }\n  }\n});\ndefineType("ImportExpression", {\n  visitor: ["source", "options"],\n  aliases: ["Expression"],\n  fields: {\n    phase: {\n      default: null,\n      validate: (0, _utils.assertOneOf)("source", "defer")\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    options: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    }\n  }\n});\ndefineType("MetaProperty", {\n  visitor: ["meta", "property"],\n  aliases: ["Expression"],\n  fields: {\n    meta: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function (node, key, val) {\n        let property;\n        switch (val.name) {\n          case "function":\n            property = "sent";\n            break;\n          case "new":\n            property = "target";\n            break;\n          case "import":\n            property = "meta";\n            break;\n        }\n        if (!(0, _is.default)("Identifier", node.property, {\n          name: property\n        })) {\n          throw new TypeError("Unrecognised MetaProperty");\n        }\n      }, {\n        oneOfNodeTypes: ["Identifier"]\n      })) : (0, _utils.assertNodeType)("Identifier")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    }\n  }\n});\nconst classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: (0, _utils.assertValueType)("boolean"),\n    optional: true\n  },\n  accessibility: {\n    validate: (0, _utils.assertOneOf)("public", "private", "protected"),\n    optional: true\n  },\n  static: {\n    default: false\n  },\n  override: {\n    default: false\n  },\n  computed: {\n    default: false\n  },\n  optional: {\n    validate: (0, _utils.assertValueType)("boolean"),\n    optional: true\n  },\n  key: {\n    validate: (0, _utils.chain)(function () {\n      const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");\n      const computed = (0, _utils.assertNodeType)("Expression");\n      return function (node, key, val) {\n        const validator = node.computed ? computed : normal;\n        validator(node, key, val);\n      };\n    }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))\n  }\n});\nexports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;\nconst classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {\n  params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"),\n  kind: {\n    validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),\n    default: "method"\n  },\n  access: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),\n    optional: true\n  },\n  decorators: {\n    validate: (0, _utils.arrayOfType)("Decorator"),\n    optional: true\n  }\n});\nexports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;\ndefineType("ClassMethod", {\n  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],\n  builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],\n  visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],\n  fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    }\n  })\n});\ndefineType("ObjectPattern", {\n  visitor: ["properties", "typeAnnotation", "decorators"],\n  builder: ["properties"],\n  aliases: ["Pattern", "PatternLike", "LVal"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    properties: (0, _utils.validateArrayOfType)("RestElement", "ObjectProperty")\n  })\n});\ndefineType("SpreadElement", {\n  visitor: ["argument"],\n  aliases: ["UnaryLike"],\n  deprecatedAlias: "SpreadProperty",\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("Super", {\n  aliases: ["Expression"]\n});\ndefineType("TaggedTemplateExpression", {\n  visitor: ["tag", "typeParameters", "quasi"],\n  builder: ["tag", "quasi"],\n  aliases: ["Expression"],\n  fields: {\n    tag: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    quasi: {\n      validate: (0, _utils.assertNodeType)("TemplateLiteral")\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),\n      optional: true\n    }\n  }\n});\ndefineType("TemplateElement", {\n  builder: ["value", "tail"],\n  fields: {\n    value: {\n      validate: (0, _utils.chain)((0, _utils.assertShape)({\n        raw: {\n          validate: (0, _utils.assertValueType)("string")\n        },\n        cooked: {\n          validate: (0, _utils.assertValueType)("string"),\n          optional: true\n        }\n      }), function templateElementCookedValidator(node) {\n        const raw = node.value.raw;\n        let unterminatedCalled = false;\n        const error = () => {\n          throw new Error("Internal @babel/types error.");\n        };\n        const {\n          str,\n          firstInvalidLoc\n        } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, {\n          unterminated() {\n            unterminatedCalled = true;\n          },\n          strictNumericEscape: error,\n          invalidEscapeSequence: error,\n          numericSeparatorInEscapeSequence: error,\n          unexpectedNumericSeparator: error,\n          invalidDigit: error,\n          invalidCodePoint: error\n        });\n        if (!unterminatedCalled) throw new Error("Invalid raw");\n        node.value.cooked = firstInvalidLoc ? null : str;\n      })\n    },\n    tail: {\n      default: false\n    }\n  }\n});\ndefineType("TemplateLiteral", {\n  visitor: ["quasis", "expressions"],\n  aliases: ["Expression", "Literal"],\n  fields: {\n    quasis: (0, _utils.validateArrayOfType)("TemplateElement"),\n    expressions: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function (node, key, val) {\n        if (node.quasis.length !== val.length + 1) {\n          throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);\n        }\n      })\n    }\n  }\n});\ndefineType("YieldExpression", {\n  builder: ["argument", "delegate"],\n  visitor: ["argument"],\n  aliases: ["Expression", "Terminatorless"],\n  fields: {\n    delegate: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function (node, key, val) {\n        if (val && !node.argument) {\n          throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");\n        }\n      }, {\n        type: "boolean"\n      })) : (0, _utils.assertValueType)("boolean"),\n      default: false\n    },\n    argument: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("AwaitExpression", {\n  builder: ["argument"],\n  visitor: ["argument"],\n  aliases: ["Expression", "Terminatorless"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("Import", {\n  aliases: ["Expression"]\n});\ndefineType("BigIntLiteral", {\n  builder: ["value"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)("string")\n    }\n  },\n  aliases: ["Expression", "Pureish", "Literal", "Immutable"]\n});\ndefineType("ExportNamespaceSpecifier", {\n  visitor: ["exported"],\n  aliases: ["ModuleSpecifier"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    }\n  }\n});\ndefineType("OptionalMemberExpression", {\n  builder: ["object", "property", "computed", "optional"],\n  visitor: ["object", "property"],\n  aliases: ["Expression"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    property: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)("Identifier");\n        const computed = (0, _utils.assertNodeType)("Expression");\n        const validator = Object.assign(function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: ["Expression", "Identifier"]\n        });\n        return validator;\n      }()\n    },\n    computed: {\n      default: false\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())\n    }\n  }\n});\ndefineType("OptionalCallExpression", {\n  visitor: ["callee", "arguments", "typeParameters", "typeArguments"],\n  builder: ["callee", "arguments", "optional"],\n  aliases: ["Expression"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())\n    },\n    typeArguments: {\n      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),\n      optional: true\n    }\n  }\n});\ndefineType("ClassProperty", {\n  visitor: ["decorators", "key", "typeAnnotation", "value"],\n  builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],\n  aliases: ["Property"],\n  fields: Object.assign({}, classMethodOrPropertyCommon(), {\n    value: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    variance: {\n      validate: (0, _utils.assertNodeType)("Variance"),\n      optional: true\n    }\n  })\n});\ndefineType("ClassAccessorProperty", {\n  visitor: ["decorators", "key", "typeAnnotation", "value"],\n  builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],\n  aliases: ["Property", "Accessor"],\n  fields: Object.assign({}, classMethodOrPropertyCommon(), {\n    key: {\n      validate: (0, _utils.chain)(function () {\n        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName");\n        const computed = (0, _utils.assertNodeType)("Expression");\n        return function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    variance: {\n      validate: (0, _utils.assertNodeType)("Variance"),\n      optional: true\n    }\n  })\n});\ndefineType("ClassPrivateProperty", {\n  visitor: ["decorators", "key", "typeAnnotation", "value"],\n  builder: ["key", "value", "decorators", "static"],\n  aliases: ["Property", "Private"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)("PrivateName")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    },\n    static: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      default: false\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    variance: {\n      validate: (0, _utils.assertNodeType)("Variance"),\n      optional: true\n    }\n  }\n});\ndefineType("ClassPrivateMethod", {\n  builder: ["kind", "key", "params", "body", "static"],\n  visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"],\n  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],\n  fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {\n    kind: {\n      validate: (0, _utils.assertOneOf)("get", "set", "method"),\n      default: "method"\n    },\n    key: {\n      validate: (0, _utils.assertNodeType)("PrivateName")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    }\n  })\n});\ndefineType("PrivateName", {\n  visitor: ["id"],\n  aliases: ["Private"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    }\n  }\n});\ndefineType("StaticBlock", {\n  visitor: ["body"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)("Statement")\n  },\n  aliases: ["Scopable", "BlockParent", "FunctionParent"]\n});\n\n//# sourceMappingURL=core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5158\n')},85689:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.DEPRECATED_ALIASES = void 0;\nconst DEPRECATED_ALIASES = exports.DEPRECATED_ALIASES = {\n  ModuleDeclaration: "ImportOrExportDeclaration"\n};\n\n//# sourceMappingURL=deprecated-aliases.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODU2ODkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMEJBQTBCO0FBQzFCLDJCQUEyQiwwQkFBMEI7QUFDckQ7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9kZWZpbml0aW9ucy9kZXByZWNhdGVkLWFsaWFzZXMuanM/ZDA3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuREVQUkVDQVRFRF9BTElBU0VTID0gdm9pZCAwO1xuY29uc3QgREVQUkVDQVRFRF9BTElBU0VTID0gZXhwb3J0cy5ERVBSRUNBVEVEX0FMSUFTRVMgPSB7XG4gIE1vZHVsZURlY2xhcmF0aW9uOiBcIkltcG9ydE9yRXhwb3J0RGVjbGFyYXRpb25cIlxufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVwcmVjYXRlZC1hbGlhc2VzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85689\n')},27095:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _utils = __webpack_require__(77596);\n(0, _utils.default)("ArgumentPlaceholder", {});\n(0, _utils.default)("BindExpression", {\n  visitor: ["object", "callee"],\n  aliases: ["Expression"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING ? {\n    object: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: ["Expression"]\n      })\n    },\n    callee: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: ["Expression"]\n      })\n    }\n  } : {\n    object: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    },\n    callee: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\n(0, _utils.default)("ImportAttribute", {\n  visitor: ["key", "value"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)("StringLiteral")\n    }\n  }\n});\n(0, _utils.default)("Decorator", {\n  visitor: ["expression"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\n(0, _utils.default)("DoExpression", {\n  visitor: ["body"],\n  builder: ["body", "async"],\n  aliases: ["Expression"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)("BlockStatement")\n    },\n    async: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)("ExportDefaultSpecifier", {\n  visitor: ["exported"],\n  aliases: ["ModuleSpecifier"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    }\n  }\n});\n(0, _utils.default)("RecordExpression", {\n  visitor: ["properties"],\n  aliases: ["Expression"],\n  fields: {\n    properties: (0, _utils.validateArrayOfType)("ObjectProperty", "SpreadElement")\n  }\n});\n(0, _utils.default)("TupleExpression", {\n  fields: {\n    elements: {\n      validate: (0, _utils.arrayOfType)("Expression", "SpreadElement"),\n      default: []\n    }\n  },\n  visitor: ["elements"],\n  aliases: ["Expression"]\n});\n{\n  (0, _utils.default)("DecimalLiteral", {\n    builder: ["value"],\n    fields: {\n      value: {\n        validate: (0, _utils.assertValueType)("string")\n      }\n    },\n    aliases: ["Expression", "Pureish", "Literal", "Immutable"]\n  });\n}\n(0, _utils.default)("ModuleExpression", {\n  visitor: ["body"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)("Program")\n    }\n  },\n  aliases: ["Expression"]\n});\n(0, _utils.default)("TopicReference", {\n  aliases: ["Expression"]\n});\n(0, _utils.default)("PipelineTopicExpression", {\n  builder: ["expression"],\n  visitor: ["expression"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  },\n  aliases: ["Expression"]\n});\n(0, _utils.default)("PipelineBareFunction", {\n  builder: ["callee"],\n  visitor: ["callee"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  },\n  aliases: ["Expression"]\n});\n(0, _utils.default)("PipelinePrimaryTopicReference", {\n  aliases: ["Expression"]\n});\n\n//# sourceMappingURL=experimental.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcwOTUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakMsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0EsT0FBTztBQUNQO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvZGVmaW5pdGlvbnMvZXhwZXJpbWVudGFsLmpzPzNjNDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJBcmd1bWVudFBsYWNlaG9sZGVyXCIsIHt9KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJCaW5kRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcIm9iamVjdFwiLCBcImNhbGxlZVwiXSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiAhcHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORyA/IHtcbiAgICBvYmplY3Q6IHtcbiAgICAgIHZhbGlkYXRlOiBPYmplY3QuYXNzaWduKCgpID0+IHt9LCB7XG4gICAgICAgIG9uZU9mTm9kZVR5cGVzOiBbXCJFeHByZXNzaW9uXCJdXG4gICAgICB9KVxuICAgIH0sXG4gICAgY2FsbGVlOiB7XG4gICAgICB2YWxpZGF0ZTogT2JqZWN0LmFzc2lnbigoKSA9PiB7fSwge1xuICAgICAgICBvbmVPZk5vZGVUeXBlczogW1wiRXhwcmVzc2lvblwiXVxuICAgICAgfSlcbiAgICB9XG4gIH0gOiB7XG4gICAgb2JqZWN0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gICAgfSxcbiAgICBjYWxsZWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkltcG9ydEF0dHJpYnV0ZVwiLCB7XG4gIHZpc2l0b3I6IFtcImtleVwiLCBcInZhbHVlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBrZXk6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIklkZW50aWZpZXJcIiwgXCJTdHJpbmdMaXRlcmFsXCIpXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiU3RyaW5nTGl0ZXJhbFwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRGVjb3JhdG9yXCIsIHtcbiAgdmlzaXRvcjogW1wiZXhwcmVzc2lvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiRG9FeHByZXNzaW9uXCIsIHtcbiAgdmlzaXRvcjogW1wiYm9keVwiXSxcbiAgYnVpbGRlcjogW1wiYm9keVwiLCBcImFzeW5jXCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBib2R5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJCbG9ja1N0YXRlbWVudFwiKVxuICAgIH0sXG4gICAgYXN5bmM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIkV4cG9ydERlZmF1bHRTcGVjaWZpZXJcIiwge1xuICB2aXNpdG9yOiBbXCJleHBvcnRlZFwiXSxcbiAgYWxpYXNlczogW1wiTW9kdWxlU3BlY2lmaWVyXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHBvcnRlZDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICAgIH1cbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUmVjb3JkRXhwcmVzc2lvblwiLCB7XG4gIHZpc2l0b3I6IFtcInByb3BlcnRpZXNcIl0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHByb3BlcnRpZXM6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJPYmplY3RQcm9wZXJ0eVwiLCBcIlNwcmVhZEVsZW1lbnRcIilcbiAgfVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVHVwbGVFeHByZXNzaW9uXCIsIHtcbiAgZmllbGRzOiB7XG4gICAgZWxlbWVudHM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShcIkV4cHJlc3Npb25cIiwgXCJTcHJlYWRFbGVtZW50XCIpLFxuICAgICAgZGVmYXVsdDogW11cbiAgICB9XG4gIH0sXG4gIHZpc2l0b3I6IFtcImVsZW1lbnRzXCJdLFxuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdXG59KTtcbntcbiAgKDAsIF91dGlscy5kZWZhdWx0KShcIkRlY2ltYWxMaXRlcmFsXCIsIHtcbiAgICBidWlsZGVyOiBbXCJ2YWx1ZVwiXSxcbiAgICBmaWVsZHM6IHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICAgIH1cbiAgICB9LFxuICAgIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJQdXJlaXNoXCIsIFwiTGl0ZXJhbFwiLCBcIkltbXV0YWJsZVwiXVxuICB9KTtcbn1cbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJNb2R1bGVFeHByZXNzaW9uXCIsIHtcbiAgdmlzaXRvcjogW1wiYm9keVwiXSxcbiAgZmllbGRzOiB7XG4gICAgYm9keToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiUHJvZ3JhbVwiKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiVG9waWNSZWZlcmVuY2VcIiwge1xuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdXG59KTtcbigwLCBfdXRpbHMuZGVmYXVsdCkoXCJQaXBlbGluZVRvcGljRXhwcmVzc2lvblwiLCB7XG4gIGJ1aWxkZXI6IFtcImV4cHJlc3Npb25cIl0sXG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH0sXG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIl1cbn0pO1xuKDAsIF91dGlscy5kZWZhdWx0KShcIlBpcGVsaW5lQmFyZUZ1bmN0aW9uXCIsIHtcbiAgYnVpbGRlcjogW1wiY2FsbGVlXCJdLFxuICB2aXNpdG9yOiBbXCJjYWxsZWVcIl0sXG4gIGZpZWxkczoge1xuICAgIGNhbGxlZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfSxcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXVxufSk7XG4oMCwgX3V0aWxzLmRlZmF1bHQpKFwiUGlwZWxpbmVQcmltYXJ5VG9waWNSZWZlcmVuY2VcIiwge1xuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCJdXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwZXJpbWVudGFsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27095\n')},99897:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _core = __webpack_require__(5158);\nvar _utils = __webpack_require__(77596);\nconst defineType = (0, _utils.defineAliasedType)("Flow");\nconst defineInterfaceishType = name => {\n  const isDeclareClass = name === "DeclareClass";\n  defineType(name, {\n    builder: ["id", "typeParameters", "extends", "body"],\n    visitor: ["id", "typeParameters", "extends", ...(isDeclareClass ? ["mixins", "implements"] : []), "body"],\n    aliases: ["FlowDeclaration", "Statement", "Declaration"],\n    fields: Object.assign({\n      id: (0, _utils.validateType)("Identifier"),\n      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),\n      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends"))\n    }, isDeclareClass ? {\n      mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),\n      implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements"))\n    } : {}, {\n      body: (0, _utils.validateType)("ObjectTypeAnnotation")\n    })\n  });\n};\ndefineType("AnyTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("ArrayTypeAnnotation", {\n  visitor: ["elementType"],\n  aliases: ["FlowType"],\n  fields: {\n    elementType: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("BooleanTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("BooleanLiteralTypeAnnotation", {\n  builder: ["value"],\n  aliases: ["FlowType"],\n  fields: {\n    value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("NullLiteralTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("ClassImplements", {\n  visitor: ["id", "typeParameters"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")\n  }\n});\ndefineInterfaceishType("DeclareClass");\ndefineType("DeclareFunction", {\n  visitor: ["id"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")\n  }\n});\ndefineInterfaceishType("DeclareInterface");\ndefineType("DeclareModule", {\n  builder: ["id", "body", "kind"],\n  visitor: ["id", "body"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier", "StringLiteral"),\n    body: (0, _utils.validateType)("BlockStatement"),\n    kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))\n  }\n});\ndefineType("DeclareModuleExports", {\n  visitor: ["typeAnnotation"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)("TypeAnnotation")\n  }\n});\ndefineType("DeclareTypeAlias", {\n  visitor: ["id", "typeParameters", "right"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),\n    right: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("DeclareOpaqueType", {\n  visitor: ["id", "typeParameters", "supertype"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),\n    supertype: (0, _utils.validateOptionalType)("FlowType"),\n    impltype: (0, _utils.validateOptionalType)("FlowType")\n  }\n});\ndefineType("DeclareVariable", {\n  visitor: ["id"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier")\n  }\n});\ndefineType("DeclareExportDeclaration", {\n  visitor: ["declaration", "specifiers", "source", "attributes"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: Object.assign({\n    declaration: (0, _utils.validateOptionalType)("Flow"),\n    specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")),\n    source: (0, _utils.validateOptionalType)("StringLiteral"),\n    default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))\n  }, _core.importAttributes)\n});\ndefineType("DeclareExportAllDeclaration", {\n  visitor: ["source", "attributes"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: Object.assign({\n    source: (0, _utils.validateType)("StringLiteral"),\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))\n  }, _core.importAttributes)\n});\ndefineType("DeclaredPredicate", {\n  visitor: ["value"],\n  aliases: ["FlowPredicate"],\n  fields: {\n    value: (0, _utils.validateType)("Flow")\n  }\n});\ndefineType("ExistsTypeAnnotation", {\n  aliases: ["FlowType"]\n});\ndefineType("FunctionTypeAnnotation", {\n  visitor: ["typeParameters", "params", "rest", "returnType"],\n  aliases: ["FlowType"],\n  fields: {\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),\n    params: (0, _utils.validateArrayOfType)("FunctionTypeParam"),\n    rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),\n    this: (0, _utils.validateOptionalType)("FunctionTypeParam"),\n    returnType: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("FunctionTypeParam", {\n  visitor: ["name", "typeAnnotation"],\n  fields: {\n    name: (0, _utils.validateOptionalType)("Identifier"),\n    typeAnnotation: (0, _utils.validateType)("FlowType"),\n    optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("GenericTypeAnnotation", {\n  visitor: ["id", "typeParameters"],\n  aliases: ["FlowType"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")\n  }\n});\ndefineType("InferredPredicate", {\n  aliases: ["FlowPredicate"]\n});\ndefineType("InterfaceExtends", {\n  visitor: ["id", "typeParameters"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")\n  }\n});\ndefineInterfaceishType("InterfaceDeclaration");\ndefineType("InterfaceTypeAnnotation", {\n  visitor: ["extends", "body"],\n  aliases: ["FlowType"],\n  fields: {\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),\n    body: (0, _utils.validateType)("ObjectTypeAnnotation")\n  }\n});\ndefineType("IntersectionTypeAnnotation", {\n  visitor: ["types"],\n  aliases: ["FlowType"],\n  fields: {\n    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))\n  }\n});\ndefineType("MixedTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("EmptyTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("NullableTypeAnnotation", {\n  visitor: ["typeAnnotation"],\n  aliases: ["FlowType"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("NumberLiteralTypeAnnotation", {\n  builder: ["value"],\n  aliases: ["FlowType"],\n  fields: {\n    value: (0, _utils.validate)((0, _utils.assertValueType)("number"))\n  }\n});\ndefineType("NumberTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("ObjectTypeAnnotation", {\n  visitor: ["properties", "indexers", "callProperties", "internalSlots"],\n  aliases: ["FlowType"],\n  builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],\n  fields: {\n    properties: (0, _utils.validate)((0, _utils.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")),\n    indexers: {\n      validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),\n      optional: true,\n      default: []\n    },\n    callProperties: {\n      validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),\n      optional: true,\n      default: []\n    },\n    internalSlots: {\n      validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),\n      optional: true,\n      default: []\n    },\n    exact: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      default: false\n    },\n    inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("ObjectTypeInternalSlot", {\n  visitor: ["id", "value"],\n  builder: ["id", "value", "optional", "static", "method"],\n  aliases: ["UserWhitespacable"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    value: (0, _utils.validateType)("FlowType"),\n    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("ObjectTypeCallProperty", {\n  visitor: ["value"],\n  aliases: ["UserWhitespacable"],\n  fields: {\n    value: (0, _utils.validateType)("FlowType"),\n    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("ObjectTypeIndexer", {\n  visitor: ["variance", "id", "key", "value"],\n  builder: ["id", "key", "value", "variance"],\n  aliases: ["UserWhitespacable"],\n  fields: {\n    id: (0, _utils.validateOptionalType)("Identifier"),\n    key: (0, _utils.validateType)("FlowType"),\n    value: (0, _utils.validateType)("FlowType"),\n    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    variance: (0, _utils.validateOptionalType)("Variance")\n  }\n});\ndefineType("ObjectTypeProperty", {\n  visitor: ["key", "value", "variance"],\n  aliases: ["UserWhitespacable"],\n  fields: {\n    key: (0, _utils.validateType)("Identifier", "StringLiteral"),\n    value: (0, _utils.validateType)("FlowType"),\n    kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),\n    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    variance: (0, _utils.validateOptionalType)("Variance"),\n    method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("ObjectTypeSpreadProperty", {\n  visitor: ["argument"],\n  aliases: ["UserWhitespacable"],\n  fields: {\n    argument: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("OpaqueType", {\n  visitor: ["id", "typeParameters", "supertype", "impltype"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),\n    supertype: (0, _utils.validateOptionalType)("FlowType"),\n    impltype: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("QualifiedTypeIdentifier", {\n  visitor: ["qualification", "id"],\n  builder: ["id", "qualification"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    qualification: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier")\n  }\n});\ndefineType("StringLiteralTypeAnnotation", {\n  builder: ["value"],\n  aliases: ["FlowType"],\n  fields: {\n    value: (0, _utils.validate)((0, _utils.assertValueType)("string"))\n  }\n});\ndefineType("StringTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("SymbolTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("ThisTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("TupleTypeAnnotation", {\n  visitor: ["types"],\n  aliases: ["FlowType"],\n  fields: {\n    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))\n  }\n});\ndefineType("TypeofTypeAnnotation", {\n  visitor: ["argument"],\n  aliases: ["FlowType"],\n  fields: {\n    argument: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("TypeAlias", {\n  visitor: ["id", "typeParameters", "right"],\n  aliases: ["FlowDeclaration", "Statement", "Declaration"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),\n    right: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("TypeAnnotation", {\n  visitor: ["typeAnnotation"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("TypeCastExpression", {\n  visitor: ["expression", "typeAnnotation"],\n  aliases: ["ExpressionWrapper", "Expression"],\n  fields: {\n    expression: (0, _utils.validateType)("Expression"),\n    typeAnnotation: (0, _utils.validateType)("TypeAnnotation")\n  }\n});\ndefineType("TypeParameter", {\n  visitor: ["bound", "default", "variance"],\n  fields: {\n    name: (0, _utils.validate)((0, _utils.assertValueType)("string")),\n    bound: (0, _utils.validateOptionalType)("TypeAnnotation"),\n    default: (0, _utils.validateOptionalType)("FlowType"),\n    variance: (0, _utils.validateOptionalType)("Variance")\n  }\n});\ndefineType("TypeParameterDeclaration", {\n  visitor: ["params"],\n  fields: {\n    params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))\n  }\n});\ndefineType("TypeParameterInstantiation", {\n  visitor: ["params"],\n  fields: {\n    params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))\n  }\n});\ndefineType("UnionTypeAnnotation", {\n  visitor: ["types"],\n  aliases: ["FlowType"],\n  fields: {\n    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))\n  }\n});\ndefineType("Variance", {\n  builder: ["kind"],\n  fields: {\n    kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))\n  }\n});\ndefineType("VoidTypeAnnotation", {\n  aliases: ["FlowType", "FlowBaseAnnotation"]\n});\ndefineType("EnumDeclaration", {\n  aliases: ["Statement", "Declaration"],\n  visitor: ["id", "body"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    body: (0, _utils.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody")\n  }\n});\ndefineType("EnumBooleanBody", {\n  aliases: ["EnumBody"],\n  visitor: ["members"],\n  fields: {\n    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("EnumNumberBody", {\n  aliases: ["EnumBody"],\n  visitor: ["members"],\n  fields: {\n    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    members: (0, _utils.validateArrayOfType)("EnumNumberMember"),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("EnumStringBody", {\n  aliases: ["EnumBody"],\n  visitor: ["members"],\n  fields: {\n    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),\n    members: (0, _utils.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("EnumSymbolBody", {\n  aliases: ["EnumBody"],\n  visitor: ["members"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\ndefineType("EnumBooleanMember", {\n  aliases: ["EnumMember"],\n  visitor: ["id"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    init: (0, _utils.validateType)("BooleanLiteral")\n  }\n});\ndefineType("EnumNumberMember", {\n  aliases: ["EnumMember"],\n  visitor: ["id", "init"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    init: (0, _utils.validateType)("NumericLiteral")\n  }\n});\ndefineType("EnumStringMember", {\n  aliases: ["EnumMember"],\n  visitor: ["id", "init"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier"),\n    init: (0, _utils.validateType)("StringLiteral")\n  }\n});\ndefineType("EnumDefaultedMember", {\n  aliases: ["EnumMember"],\n  visitor: ["id"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier")\n  }\n});\ndefineType("IndexedAccessType", {\n  visitor: ["objectType", "indexType"],\n  aliases: ["FlowType"],\n  fields: {\n    objectType: (0, _utils.validateType)("FlowType"),\n    indexType: (0, _utils.validateType)("FlowType")\n  }\n});\ndefineType("OptionalIndexedAccessType", {\n  visitor: ["objectType", "indexType"],\n  aliases: ["FlowType"],\n  fields: {\n    objectType: (0, _utils.validateType)("FlowType"),\n    indexType: (0, _utils.validateType)("FlowType"),\n    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))\n  }\n});\n\n//# sourceMappingURL=flow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99897\n')},39793:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nObject.defineProperty(exports, "ALIAS_KEYS", ({\n  enumerable: true,\n  get: function () {\n    return _utils.ALIAS_KEYS;\n  }\n}));\nObject.defineProperty(exports, "BUILDER_KEYS", ({\n  enumerable: true,\n  get: function () {\n    return _utils.BUILDER_KEYS;\n  }\n}));\nObject.defineProperty(exports, "DEPRECATED_ALIASES", ({\n  enumerable: true,\n  get: function () {\n    return _deprecatedAliases.DEPRECATED_ALIASES;\n  }\n}));\nObject.defineProperty(exports, "DEPRECATED_KEYS", ({\n  enumerable: true,\n  get: function () {\n    return _utils.DEPRECATED_KEYS;\n  }\n}));\nObject.defineProperty(exports, "FLIPPED_ALIAS_KEYS", ({\n  enumerable: true,\n  get: function () {\n    return _utils.FLIPPED_ALIAS_KEYS;\n  }\n}));\nObject.defineProperty(exports, "NODE_FIELDS", ({\n  enumerable: true,\n  get: function () {\n    return _utils.NODE_FIELDS;\n  }\n}));\nObject.defineProperty(exports, "NODE_PARENT_VALIDATIONS", ({\n  enumerable: true,\n  get: function () {\n    return _utils.NODE_PARENT_VALIDATIONS;\n  }\n}));\nObject.defineProperty(exports, "PLACEHOLDERS", ({\n  enumerable: true,\n  get: function () {\n    return _placeholders.PLACEHOLDERS;\n  }\n}));\nObject.defineProperty(exports, "PLACEHOLDERS_ALIAS", ({\n  enumerable: true,\n  get: function () {\n    return _placeholders.PLACEHOLDERS_ALIAS;\n  }\n}));\nObject.defineProperty(exports, "PLACEHOLDERS_FLIPPED_ALIAS", ({\n  enumerable: true,\n  get: function () {\n    return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;\n  }\n}));\nexports.TYPES = void 0;\nObject.defineProperty(exports, "VISITOR_KEYS", ({\n  enumerable: true,\n  get: function () {\n    return _utils.VISITOR_KEYS;\n  }\n}));\n__webpack_require__(5158);\n__webpack_require__(99897);\n__webpack_require__(46184);\n__webpack_require__(45589);\n__webpack_require__(27095);\n__webpack_require__(46106);\nvar _utils = __webpack_require__(77596);\nvar _placeholders = __webpack_require__(59187);\nvar _deprecatedAliases = __webpack_require__(85689);\nObject.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach(deprecatedAlias => {\n  _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];\n});\nconst TYPES = exports.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk3OTMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsOENBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZ0RBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0RBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsbURBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0RBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsK0NBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsMkRBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsZ0RBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysc0RBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsOERBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsYUFBYTtBQUNiLGdEQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLG1CQUFPLENBQUMsSUFBVztBQUNuQixtQkFBTyxDQUFDLEtBQVc7QUFDbkIsbUJBQU8sQ0FBQyxLQUFVO0FBQ2xCLG1CQUFPLENBQUMsS0FBVztBQUNuQixtQkFBTyxDQUFDLEtBQW1CO0FBQzNCLG1CQUFPLENBQUMsS0FBaUI7QUFDekIsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsS0FBbUI7QUFDL0MseUJBQXlCLG1CQUFPLENBQUMsS0FBeUI7QUFDMUQ7QUFDQTtBQUNBLENBQUM7QUFDRCxjQUFjLGFBQWE7O0FBRTNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL2RlZmluaXRpb25zL2luZGV4LmpzP2YyM2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBTElBU19LRVlTXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlscy5BTElBU19LRVlTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJVSUxERVJfS0VZU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuQlVJTERFUl9LRVlTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRFUFJFQ0FURURfQUxJQVNFU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZGVwcmVjYXRlZEFsaWFzZXMuREVQUkVDQVRFRF9BTElBU0VTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRFUFJFQ0FURURfS0VZU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuREVQUkVDQVRFRF9LRVlTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZMSVBQRURfQUxJQVNfS0VZU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuRkxJUFBFRF9BTElBU19LRVlTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5PREVfRklFTERTXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlscy5OT0RFX0ZJRUxEUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOT0RFX1BBUkVOVF9WQUxJREFUSU9OU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuTk9ERV9QQVJFTlRfVkFMSURBVElPTlM7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUExBQ0VIT0xERVJTXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9wbGFjZWhvbGRlcnMuUExBQ0VIT0xERVJTO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBMQUNFSE9MREVSU19BTElBU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcGxhY2Vob2xkZXJzLlBMQUNFSE9MREVSU19BTElBUztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQTEFDRUhPTERFUlNfRkxJUFBFRF9BTElBU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcGxhY2Vob2xkZXJzLlBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTO1xuICB9XG59KTtcbmV4cG9ydHMuVFlQRVMgPSB2b2lkIDA7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWSVNJVE9SX0tFWVNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLlZJU0lUT1JfS0VZUztcbiAgfVxufSk7XG5yZXF1aXJlKFwiLi9jb3JlLmpzXCIpO1xucmVxdWlyZShcIi4vZmxvdy5qc1wiKTtcbnJlcXVpcmUoXCIuL2pzeC5qc1wiKTtcbnJlcXVpcmUoXCIuL21pc2MuanNcIik7XG5yZXF1aXJlKFwiLi9leHBlcmltZW50YWwuanNcIik7XG5yZXF1aXJlKFwiLi90eXBlc2NyaXB0LmpzXCIpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xudmFyIF9wbGFjZWhvbGRlcnMgPSByZXF1aXJlKFwiLi9wbGFjZWhvbGRlcnMuanNcIik7XG52YXIgX2RlcHJlY2F0ZWRBbGlhc2VzID0gcmVxdWlyZShcIi4vZGVwcmVjYXRlZC1hbGlhc2VzLmpzXCIpO1xuT2JqZWN0LmtleXMoX2RlcHJlY2F0ZWRBbGlhc2VzLkRFUFJFQ0FURURfQUxJQVNFUykuZm9yRWFjaChkZXByZWNhdGVkQWxpYXMgPT4ge1xuICBfdXRpbHMuRkxJUFBFRF9BTElBU19LRVlTW2RlcHJlY2F0ZWRBbGlhc10gPSBfdXRpbHMuRkxJUFBFRF9BTElBU19LRVlTW19kZXByZWNhdGVkQWxpYXNlcy5ERVBSRUNBVEVEX0FMSUFTRVNbZGVwcmVjYXRlZEFsaWFzXV07XG59KTtcbmNvbnN0IFRZUEVTID0gZXhwb3J0cy5UWVBFUyA9IFtdLmNvbmNhdChPYmplY3Qua2V5cyhfdXRpbHMuVklTSVRPUl9LRVlTKSwgT2JqZWN0LmtleXMoX3V0aWxzLkZMSVBQRURfQUxJQVNfS0VZUyksIE9iamVjdC5rZXlzKF91dGlscy5ERVBSRUNBVEVEX0tFWVMpKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39793\n')},46184:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _utils = __webpack_require__(77596);\nconst defineType = (0, _utils.defineAliasedType)("JSX");\ndefineType("JSXAttribute", {\n  visitor: ["name", "value"],\n  aliases: ["Immutable"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")\n    },\n    value: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")\n    }\n  }\n});\ndefineType("JSXClosingElement", {\n  visitor: ["name"],\n  aliases: ["Immutable"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")\n    }\n  }\n});\ndefineType("JSXElement", {\n  builder: ["openingElement", "closingElement", "children", "selfClosing"],\n  visitor: ["openingElement", "children", "closingElement"],\n  aliases: ["Immutable", "Expression"],\n  fields: Object.assign({\n    openingElement: {\n      validate: (0, _utils.assertNodeType)("JSXOpeningElement")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)("JSXClosingElement")\n    },\n    children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")\n  }, {\n    selfClosing: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    }\n  })\n});\ndefineType("JSXEmptyExpression", {});\ndefineType("JSXExpressionContainer", {\n  visitor: ["expression"],\n  aliases: ["Immutable"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")\n    }\n  }\n});\ndefineType("JSXSpreadChild", {\n  visitor: ["expression"],\n  aliases: ["Immutable"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("JSXIdentifier", {\n  builder: ["name"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)("string")\n    }\n  }\n});\ndefineType("JSXMemberExpression", {\n  visitor: ["object", "property"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)("JSXIdentifier")\n    }\n  }\n});\ndefineType("JSXNamespacedName", {\n  visitor: ["namespace", "name"],\n  fields: {\n    namespace: {\n      validate: (0, _utils.assertNodeType)("JSXIdentifier")\n    },\n    name: {\n      validate: (0, _utils.assertNodeType)("JSXIdentifier")\n    }\n  }\n});\ndefineType("JSXOpeningElement", {\n  builder: ["name", "attributes", "selfClosing"],\n  visitor: ["name", "attributes"],\n  aliases: ["Immutable"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")\n    },\n    selfClosing: {\n      default: false\n    },\n    attributes: (0, _utils.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"),\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),\n      optional: true\n    }\n  }\n});\ndefineType("JSXSpreadAttribute", {\n  visitor: ["argument"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)("Expression")\n    }\n  }\n});\ndefineType("JSXText", {\n  aliases: ["Immutable"],\n  builder: ["value"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)("string")\n    }\n  }\n});\ndefineType("JSXFragment", {\n  builder: ["openingFragment", "closingFragment", "children"],\n  visitor: ["openingFragment", "children", "closingFragment"],\n  aliases: ["Immutable", "Expression"],\n  fields: {\n    openingFragment: {\n      validate: (0, _utils.assertNodeType)("JSXOpeningFragment")\n    },\n    closingFragment: {\n      validate: (0, _utils.assertNodeType)("JSXClosingFragment")\n    },\n    children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")\n  }\n});\ndefineType("JSXOpeningFragment", {\n  aliases: ["Immutable"]\n});\ndefineType("JSXClosingFragment", {\n  aliases: ["Immutable"]\n});\n\n//# sourceMappingURL=jsx.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYxODQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9kZWZpbml0aW9ucy9qc3guanM/NTY0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuY29uc3QgZGVmaW5lVHlwZSA9ICgwLCBfdXRpbHMuZGVmaW5lQWxpYXNlZFR5cGUpKFwiSlNYXCIpO1xuZGVmaW5lVHlwZShcIkpTWEF0dHJpYnV0ZVwiLCB7XG4gIHZpc2l0b3I6IFtcIm5hbWVcIiwgXCJ2YWx1ZVwiXSxcbiAgYWxpYXNlczogW1wiSW1tdXRhYmxlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hJZGVudGlmaWVyXCIsIFwiSlNYTmFtZXNwYWNlZE5hbWVcIilcbiAgICB9LFxuICAgIHZhbHVlOiB7XG4gICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWEVsZW1lbnRcIiwgXCJKU1hGcmFnbWVudFwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJKU1hFeHByZXNzaW9uQ29udGFpbmVyXCIpXG4gICAgfVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJKU1hDbG9zaW5nRWxlbWVudFwiLCB7XG4gIHZpc2l0b3I6IFtcIm5hbWVcIl0sXG4gIGFsaWFzZXM6IFtcIkltbXV0YWJsZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgbmFtZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYSWRlbnRpZmllclwiLCBcIkpTWE1lbWJlckV4cHJlc3Npb25cIiwgXCJKU1hOYW1lc3BhY2VkTmFtZVwiKVxuICAgIH1cbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiSlNYRWxlbWVudFwiLCB7XG4gIGJ1aWxkZXI6IFtcIm9wZW5pbmdFbGVtZW50XCIsIFwiY2xvc2luZ0VsZW1lbnRcIiwgXCJjaGlsZHJlblwiLCBcInNlbGZDbG9zaW5nXCJdLFxuICB2aXNpdG9yOiBbXCJvcGVuaW5nRWxlbWVudFwiLCBcImNoaWxkcmVuXCIsIFwiY2xvc2luZ0VsZW1lbnRcIl0sXG4gIGFsaWFzZXM6IFtcIkltbXV0YWJsZVwiLCBcIkV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7XG4gICAgb3BlbmluZ0VsZW1lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWE9wZW5pbmdFbGVtZW50XCIpXG4gICAgfSxcbiAgICBjbG9zaW5nRWxlbWVudDoge1xuICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hDbG9zaW5nRWxlbWVudFwiKVxuICAgIH0sXG4gICAgY2hpbGRyZW46ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJKU1hUZXh0XCIsIFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLCBcIkpTWFNwcmVhZENoaWxkXCIsIFwiSlNYRWxlbWVudFwiLCBcIkpTWEZyYWdtZW50XCIpXG4gIH0sIHtcbiAgICBzZWxmQ2xvc2luZzoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfSlcbn0pO1xuZGVmaW5lVHlwZShcIkpTWEVtcHR5RXhwcmVzc2lvblwiLCB7fSk7XG5kZWZpbmVUeXBlKFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLCB7XG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIl0sXG4gIGFsaWFzZXM6IFtcIkltbXV0YWJsZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiLCBcIkpTWEVtcHR5RXhwcmVzc2lvblwiKVxuICAgIH1cbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiSlNYU3ByZWFkQ2hpbGRcIiwge1xuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCJdLFxuICBhbGlhc2VzOiBbXCJJbW11dGFibGVcIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIkpTWElkZW50aWZpZXJcIiwge1xuICBidWlsZGVyOiBbXCJuYW1lXCJdLFxuICBmaWVsZHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwic3RyaW5nXCIpXG4gICAgfVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJKU1hNZW1iZXJFeHByZXNzaW9uXCIsIHtcbiAgdmlzaXRvcjogW1wib2JqZWN0XCIsIFwicHJvcGVydHlcIl0sXG4gIGZpZWxkczoge1xuICAgIG9iamVjdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYTWVtYmVyRXhwcmVzc2lvblwiLCBcIkpTWElkZW50aWZpZXJcIilcbiAgICB9LFxuICAgIHByb3BlcnR5OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hJZGVudGlmaWVyXCIpXG4gICAgfVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJKU1hOYW1lc3BhY2VkTmFtZVwiLCB7XG4gIHZpc2l0b3I6IFtcIm5hbWVzcGFjZVwiLCBcIm5hbWVcIl0sXG4gIGZpZWxkczoge1xuICAgIG5hbWVzcGFjZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYSWRlbnRpZmllclwiKVxuICAgIH0sXG4gICAgbmFtZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYSWRlbnRpZmllclwiKVxuICAgIH1cbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiSlNYT3BlbmluZ0VsZW1lbnRcIiwge1xuICBidWlsZGVyOiBbXCJuYW1lXCIsIFwiYXR0cmlidXRlc1wiLCBcInNlbGZDbG9zaW5nXCJdLFxuICB2aXNpdG9yOiBbXCJuYW1lXCIsIFwiYXR0cmlidXRlc1wiXSxcbiAgYWxpYXNlczogW1wiSW1tdXRhYmxlXCJdLFxuICBmaWVsZHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJKU1hJZGVudGlmaWVyXCIsIFwiSlNYTWVtYmVyRXhwcmVzc2lvblwiLCBcIkpTWE5hbWVzcGFjZWROYW1lXCIpXG4gICAgfSxcbiAgICBzZWxmQ2xvc2luZzoge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGF0dHJpYnV0ZXM6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJKU1hBdHRyaWJ1dGVcIiwgXCJKU1hTcHJlYWRBdHRyaWJ1dGVcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIlR5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIsIFwiVFNUeXBlUGFyYW1ldGVySW5zdGFudGlhdGlvblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJKU1hTcHJlYWRBdHRyaWJ1dGVcIiwge1xuICB2aXNpdG9yOiBbXCJhcmd1bWVudFwiXSxcbiAgZmllbGRzOiB7XG4gICAgYXJndW1lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgICB9XG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIkpTWFRleHRcIiwge1xuICBhbGlhc2VzOiBbXCJJbW11dGFibGVcIl0sXG4gIGJ1aWxkZXI6IFtcInZhbHVlXCJdLFxuICBmaWVsZHM6IHtcbiAgICB2YWx1ZToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcInN0cmluZ1wiKVxuICAgIH1cbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiSlNYRnJhZ21lbnRcIiwge1xuICBidWlsZGVyOiBbXCJvcGVuaW5nRnJhZ21lbnRcIiwgXCJjbG9zaW5nRnJhZ21lbnRcIiwgXCJjaGlsZHJlblwiXSxcbiAgdmlzaXRvcjogW1wib3BlbmluZ0ZyYWdtZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJjbG9zaW5nRnJhZ21lbnRcIl0sXG4gIGFsaWFzZXM6IFtcIkltbXV0YWJsZVwiLCBcIkV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIG9wZW5pbmdGcmFnbWVudDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiSlNYT3BlbmluZ0ZyYWdtZW50XCIpXG4gICAgfSxcbiAgICBjbG9zaW5nRnJhZ21lbnQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIkpTWENsb3NpbmdGcmFnbWVudFwiKVxuICAgIH0sXG4gICAgY2hpbGRyZW46ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJKU1hUZXh0XCIsIFwiSlNYRXhwcmVzc2lvbkNvbnRhaW5lclwiLCBcIkpTWFNwcmVhZENoaWxkXCIsIFwiSlNYRWxlbWVudFwiLCBcIkpTWEZyYWdtZW50XCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIkpTWE9wZW5pbmdGcmFnbWVudFwiLCB7XG4gIGFsaWFzZXM6IFtcIkltbXV0YWJsZVwiXVxufSk7XG5kZWZpbmVUeXBlKFwiSlNYQ2xvc2luZ0ZyYWdtZW50XCIsIHtcbiAgYWxpYXNlczogW1wiSW1tdXRhYmxlXCJdXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anN4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46184\n')},45589:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _utils = __webpack_require__(77596);\nvar _placeholders = __webpack_require__(59187);\nvar _core = __webpack_require__(5158);\nconst defineType = (0, _utils.defineAliasedType)("Miscellaneous");\n{\n  defineType("Noop", {\n    visitor: []\n  });\n}\ndefineType("Placeholder", {\n  visitor: [],\n  builder: ["expectedNode", "name"],\n  fields: Object.assign({\n    name: {\n      validate: (0, _utils.assertNodeType)("Identifier")\n    },\n    expectedNode: {\n      validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)\n    }\n  }, (0, _core.patternLikeCommon)())\n});\ndefineType("V8IntrinsicIdentifier", {\n  builder: ["name"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)("string")\n    }\n  }\n});\n\n//# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU1ODkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakMsb0JBQW9CLG1CQUFPLENBQUMsS0FBbUI7QUFDL0MsWUFBWSxtQkFBTyxDQUFDLElBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvZGVmaW5pdGlvbnMvbWlzYy5qcz8zMTM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG52YXIgX3BsYWNlaG9sZGVycyA9IHJlcXVpcmUoXCIuL3BsYWNlaG9sZGVycy5qc1wiKTtcbnZhciBfY29yZSA9IHJlcXVpcmUoXCIuL2NvcmUuanNcIik7XG5jb25zdCBkZWZpbmVUeXBlID0gKDAsIF91dGlscy5kZWZpbmVBbGlhc2VkVHlwZSkoXCJNaXNjZWxsYW5lb3VzXCIpO1xue1xuICBkZWZpbmVUeXBlKFwiTm9vcFwiLCB7XG4gICAgdmlzaXRvcjogW11cbiAgfSk7XG59XG5kZWZpbmVUeXBlKFwiUGxhY2Vob2xkZXJcIiwge1xuICB2aXNpdG9yOiBbXSxcbiAgYnVpbGRlcjogW1wiZXhwZWN0ZWROb2RlXCIsIFwibmFtZVwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHtcbiAgICBuYW1lOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIpXG4gICAgfSxcbiAgICBleHBlY3RlZE5vZGU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKSguLi5fcGxhY2Vob2xkZXJzLlBMQUNFSE9MREVSUylcbiAgICB9XG4gIH0sICgwLCBfY29yZS5wYXR0ZXJuTGlrZUNvbW1vbikoKSlcbn0pO1xuZGVmaW5lVHlwZShcIlY4SW50cmluc2ljSWRlbnRpZmllclwiLCB7XG4gIGJ1aWxkZXI6IFtcIm5hbWVcIl0sXG4gIGZpZWxkczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9XG4gIH1cbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXNjLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///45589\n')},59187:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS = void 0;\nvar _utils = __webpack_require__(77596);\nconst PLACEHOLDERS = exports.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];\nconst PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS_ALIAS = {\n  Declaration: ["Statement"],\n  Pattern: ["PatternLike", "LVal"]\n};\nfor (const type of PLACEHOLDERS) {\n  const alias = _utils.ALIAS_KEYS[type];\n  if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\nconst PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_FLIPPED_ALIAS = {};\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n\n//# sourceMappingURL=placeholders.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkxODcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0NBQWtDLEdBQUcsMEJBQTBCLEdBQUcsb0JBQW9CO0FBQ3RGLGFBQWEsbUJBQU8sQ0FBQyxLQUFZO0FBQ2pDLHFCQUFxQixvQkFBb0I7QUFDekMsMkJBQTJCLDBCQUEwQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxrQ0FBa0M7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvZGVmaW5pdGlvbnMvcGxhY2Vob2xkZXJzLmpzPzk2NGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTID0gZXhwb3J0cy5QTEFDRUhPTERFUlNfQUxJQVMgPSBleHBvcnRzLlBMQUNFSE9MREVSUyA9IHZvaWQgMDtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbmNvbnN0IFBMQUNFSE9MREVSUyA9IGV4cG9ydHMuUExBQ0VIT0xERVJTID0gW1wiSWRlbnRpZmllclwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJFeHByZXNzaW9uXCIsIFwiU3RhdGVtZW50XCIsIFwiRGVjbGFyYXRpb25cIiwgXCJCbG9ja1N0YXRlbWVudFwiLCBcIkNsYXNzQm9keVwiLCBcIlBhdHRlcm5cIl07XG5jb25zdCBQTEFDRUhPTERFUlNfQUxJQVMgPSBleHBvcnRzLlBMQUNFSE9MREVSU19BTElBUyA9IHtcbiAgRGVjbGFyYXRpb246IFtcIlN0YXRlbWVudFwiXSxcbiAgUGF0dGVybjogW1wiUGF0dGVybkxpa2VcIiwgXCJMVmFsXCJdXG59O1xuZm9yIChjb25zdCB0eXBlIG9mIFBMQUNFSE9MREVSUykge1xuICBjb25zdCBhbGlhcyA9IF91dGlscy5BTElBU19LRVlTW3R5cGVdO1xuICBpZiAoYWxpYXMgIT0gbnVsbCAmJiBhbGlhcy5sZW5ndGgpIFBMQUNFSE9MREVSU19BTElBU1t0eXBlXSA9IGFsaWFzO1xufVxuY29uc3QgUExBQ0VIT0xERVJTX0ZMSVBQRURfQUxJQVMgPSBleHBvcnRzLlBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTID0ge307XG5PYmplY3Qua2V5cyhQTEFDRUhPTERFUlNfQUxJQVMpLmZvckVhY2godHlwZSA9PiB7XG4gIFBMQUNFSE9MREVSU19BTElBU1t0eXBlXS5mb3JFYWNoKGFsaWFzID0+IHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoUExBQ0VIT0xERVJTX0ZMSVBQRURfQUxJQVMsIGFsaWFzKSkge1xuICAgICAgUExBQ0VIT0xERVJTX0ZMSVBQRURfQUxJQVNbYWxpYXNdID0gW107XG4gICAgfVxuICAgIFBMQUNFSE9MREVSU19GTElQUEVEX0FMSUFTW2FsaWFzXS5wdXNoKHR5cGUpO1xuICB9KTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGFjZWhvbGRlcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///59187\n')},46106:(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _utils = __webpack_require__(77596);\nvar _core = __webpack_require__(5158);\nvar _is = __webpack_require__(93828);\nconst defineType = (0, _utils.defineAliasedType)("TypeScript");\nconst bool = (0, _utils.assertValueType)("boolean");\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),\n    optional: true\n  }\n});\ndefineType("TSParameterProperty", {\n  aliases: ["LVal"],\n  visitor: ["parameter"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)("public", "private", "protected"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")\n    },\n    override: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)("Decorator"),\n      optional: true\n    }\n  }\n});\ndefineType("TSDeclareFunction", {\n  aliases: ["Statement", "Declaration"],\n  visitor: ["id", "typeParameters", "params", "returnType"],\n  fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())\n});\ndefineType("TSDeclareMethod", {\n  visitor: ["decorators", "key", "typeParameters", "params", "returnType"],\n  fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())\n});\ndefineType("TSQualifiedName", {\n  aliases: ["TSEntityName"],\n  visitor: ["left", "right"],\n  fields: {\n    left: (0, _utils.validateType)("TSEntityName"),\n    right: (0, _utils.validateType)("Identifier")\n  }\n});\nconst signatureDeclarationCommon = () => ({\n  typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),\n  ["parameters"]: (0, _utils.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"),\n  ["typeAnnotation"]: (0, _utils.validateOptionalType)("TSTypeAnnotation")\n});\nconst callConstructSignatureDeclaration = {\n  aliases: ["TSTypeElement"],\n  visitor: ["typeParameters", "parameters", "typeAnnotation"],\n  fields: signatureDeclarationCommon()\n};\ndefineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);\ndefineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = () => ({\n  key: (0, _utils.validateType)("Expression"),\n  computed: {\n    default: false\n  },\n  optional: (0, _utils.validateOptional)(bool)\n});\ndefineType("TSPropertySignature", {\n  aliases: ["TSTypeElement"],\n  visitor: ["key", "typeAnnotation"],\n  fields: Object.assign({}, namedTypeElementCommon(), {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),\n    kind: {\n      validate: (0, _utils.assertOneOf)("get", "set")\n    }\n  })\n});\ndefineType("TSMethodSignature", {\n  aliases: ["TSTypeElement"],\n  visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],\n  fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), {\n    kind: {\n      validate: (0, _utils.assertOneOf)("method", "get", "set")\n    }\n  })\n});\ndefineType("TSIndexSignature", {\n  aliases: ["TSTypeElement"],\n  visitor: ["parameters", "typeAnnotation"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    static: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)("Identifier"),\n    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")\n  }\n});\nconst tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: ["TSType", "TSBaseType"],\n    visitor: [],\n    fields: {}\n  });\n}\ndefineType("TSThisType", {\n  aliases: ["TSType", "TSBaseType"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtrBase = {\n  aliases: ["TSType"],\n  visitor: ["typeParameters", "parameters", "typeAnnotation"]\n};\ndefineType("TSFunctionType", Object.assign({}, fnOrCtrBase, {\n  fields: signatureDeclarationCommon()\n}));\ndefineType("TSConstructorType", Object.assign({}, fnOrCtrBase, {\n  fields: Object.assign({}, signatureDeclarationCommon(), {\n    abstract: (0, _utils.validateOptional)(bool)\n  })\n}));\ndefineType("TSTypeReference", {\n  aliases: ["TSType"],\n  visitor: ["typeName", "typeParameters"],\n  fields: {\n    typeName: (0, _utils.validateType)("TSEntityName"),\n    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")\n  }\n});\ndefineType("TSTypePredicate", {\n  aliases: ["TSType"],\n  visitor: ["parameterName", "typeAnnotation"],\n  builder: ["parameterName", "typeAnnotation", "asserts"],\n  fields: {\n    parameterName: (0, _utils.validateType)("Identifier", "TSThisType"),\n    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),\n    asserts: (0, _utils.validateOptional)(bool)\n  }\n});\ndefineType("TSTypeQuery", {\n  aliases: ["TSType"],\n  visitor: ["exprName", "typeParameters"],\n  fields: {\n    exprName: (0, _utils.validateType)("TSEntityName", "TSImportType"),\n    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")\n  }\n});\ndefineType("TSTypeLiteral", {\n  aliases: ["TSType"],\n  visitor: ["members"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)("TSTypeElement")\n  }\n});\ndefineType("TSArrayType", {\n  aliases: ["TSType"],\n  visitor: ["elementType"],\n  fields: {\n    elementType: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSTupleType", {\n  aliases: ["TSType"],\n  visitor: ["elementTypes"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)("TSType", "TSNamedTupleMember")\n  }\n});\ndefineType("TSOptionalType", {\n  aliases: ["TSType"],\n  visitor: ["typeAnnotation"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSRestType", {\n  aliases: ["TSType"],\n  visitor: ["typeAnnotation"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSNamedTupleMember", {\n  visitor: ["label", "elementType"],\n  builder: ["label", "elementType", "optional"],\n  fields: {\n    label: (0, _utils.validateType)("Identifier"),\n    optional: {\n      validate: bool,\n      default: false\n    },\n    elementType: (0, _utils.validateType)("TSType")\n  }\n});\nconst unionOrIntersection = {\n  aliases: ["TSType"],\n  visitor: ["types"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)("TSType")\n  }\n};\ndefineType("TSUnionType", unionOrIntersection);\ndefineType("TSIntersectionType", unionOrIntersection);\ndefineType("TSConditionalType", {\n  aliases: ["TSType"],\n  visitor: ["checkType", "extendsType", "trueType", "falseType"],\n  fields: {\n    checkType: (0, _utils.validateType)("TSType"),\n    extendsType: (0, _utils.validateType)("TSType"),\n    trueType: (0, _utils.validateType)("TSType"),\n    falseType: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSInferType", {\n  aliases: ["TSType"],\n  visitor: ["typeParameter"],\n  fields: {\n    typeParameter: (0, _utils.validateType)("TSTypeParameter")\n  }\n});\ndefineType("TSParenthesizedType", {\n  aliases: ["TSType"],\n  visitor: ["typeAnnotation"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSTypeOperator", {\n  aliases: ["TSType"],\n  visitor: ["typeAnnotation"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),\n    typeAnnotation: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSIndexedAccessType", {\n  aliases: ["TSType"],\n  visitor: ["objectType", "indexType"],\n  fields: {\n    objectType: (0, _utils.validateType)("TSType"),\n    indexType: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSMappedType", {\n  aliases: ["TSType"],\n  visitor: ["typeParameter", "nameType", "typeAnnotation"],\n  builder: ["typeParameter", "typeAnnotation", "nameType"],\n  fields: Object.assign({}, {\n    typeParameter: (0, _utils.validateType)("TSTypeParameter")\n  }, {\n    readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),\n    optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),\n    typeAnnotation: (0, _utils.validateOptionalType)("TSType"),\n    nameType: (0, _utils.validateOptionalType)("TSType")\n  })\n});\ndefineType("TSLiteralType", {\n  aliases: ["TSType", "TSBaseType"],\n  visitor: ["literal"],\n  fields: {\n    literal: {\n      validate: function () {\n        const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");\n        const unaryOperator = (0, _utils.assertOneOf)("-");\n        const literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");\n        function validator(parent, key, node) {\n          if ((0, _is.default)("UnaryExpression", node)) {\n            unaryOperator(node, "operator", node.operator);\n            unaryExpression(node, "argument", node.argument);\n          } else {\n            literal(parent, key, node);\n          }\n        }\n        validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"];\n        return validator;\n      }()\n    }\n  }\n});\nconst expressionWithTypeArguments = {\n  aliases: ["TSType"],\n  visitor: ["expression", "typeParameters"],\n  fields: {\n    expression: (0, _utils.validateType)("TSEntityName"),\n    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")\n  }\n};\n{\n  defineType("TSExpressionWithTypeArguments", expressionWithTypeArguments);\n}\ndefineType("TSInterfaceDeclaration", {\n  aliases: ["Statement", "Declaration"],\n  visitor: ["id", "typeParameters", "extends", "body"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)("Identifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),\n    body: (0, _utils.validateType)("TSInterfaceBody")\n  }\n});\ndefineType("TSInterfaceBody", {\n  visitor: ["body"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)("TSTypeElement")\n  }\n});\ndefineType("TSTypeAliasDeclaration", {\n  aliases: ["Statement", "Declaration"],\n  visitor: ["id", "typeParameters", "typeAnnotation"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)("Identifier"),\n    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),\n    typeAnnotation: (0, _utils.validateType)("TSType")\n  }\n});\ndefineType("TSInstantiationExpression", {\n  aliases: ["Expression"],\n  visitor: ["expression", "typeParameters"],\n  fields: {\n    expression: (0, _utils.validateType)("Expression"),\n    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")\n  }\n});\nconst TSTypeExpression = {\n  aliases: ["Expression", "LVal", "PatternLike"],\n  visitor: ["expression", "typeAnnotation"],\n  fields: {\n    expression: (0, _utils.validateType)("Expression"),\n    typeAnnotation: (0, _utils.validateType)("TSType")\n  }\n};\ndefineType("TSAsExpression", TSTypeExpression);\ndefineType("TSSatisfiesExpression", TSTypeExpression);\ndefineType("TSTypeAssertion", {\n  aliases: ["Expression", "LVal", "PatternLike"],\n  visitor: ["typeAnnotation", "expression"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)("TSType"),\n    expression: (0, _utils.validateType)("Expression")\n  }\n});\ndefineType("TSEnumDeclaration", {\n  aliases: ["Statement", "Declaration"],\n  visitor: ["id", "members"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)("Identifier"),\n    members: (0, _utils.validateArrayOfType)("TSEnumMember"),\n    initializer: (0, _utils.validateOptionalType)("Expression")\n  }\n});\ndefineType("TSEnumMember", {\n  visitor: ["id", "initializer"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier", "StringLiteral"),\n    initializer: (0, _utils.validateOptionalType)("Expression")\n  }\n});\ndefineType("TSModuleDeclaration", {\n  aliases: ["Statement", "Declaration"],\n  visitor: ["id", "body"],\n  fields: {\n    kind: {\n      validate: (0, _utils.assertOneOf)("global", "module", "namespace")\n    },\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)("Identifier", "StringLiteral"),\n    body: (0, _utils.validateType)("TSModuleBlock", "TSModuleDeclaration")\n  }\n});\ndefineType("TSModuleBlock", {\n  aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],\n  visitor: ["body"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)("Statement")\n  }\n});\ndefineType("TSImportType", {\n  aliases: ["TSType"],\n  visitor: ["argument", "qualifier", "typeParameters"],\n  fields: {\n    argument: (0, _utils.validateType)("StringLiteral"),\n    qualifier: (0, _utils.validateOptionalType)("TSEntityName"),\n    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"),\n    options: {\n      validate: (0, _utils.assertNodeType)("Expression"),\n      optional: true\n    }\n  }\n});\ndefineType("TSImportEqualsDeclaration", {\n  aliases: ["Statement"],\n  visitor: ["id", "moduleReference"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)("Identifier"),\n    moduleReference: (0, _utils.validateType)("TSEntityName", "TSExternalModuleReference"),\n    importKind: {\n      validate: (0, _utils.assertOneOf)("type", "value"),\n      optional: true\n    }\n  }\n});\ndefineType("TSExternalModuleReference", {\n  visitor: ["expression"],\n  fields: {\n    expression: (0, _utils.validateType)("StringLiteral")\n  }\n});\ndefineType("TSNonNullExpression", {\n  aliases: ["Expression", "LVal", "PatternLike"],\n  visitor: ["expression"],\n  fields: {\n    expression: (0, _utils.validateType)("Expression")\n  }\n});\ndefineType("TSExportAssignment", {\n  aliases: ["Statement"],\n  visitor: ["expression"],\n  fields: {\n    expression: (0, _utils.validateType)("Expression")\n  }\n});\ndefineType("TSNamespaceExportDeclaration", {\n  aliases: ["Statement"],\n  visitor: ["id"],\n  fields: {\n    id: (0, _utils.validateType)("Identifier")\n  }\n});\ndefineType("TSTypeAnnotation", {\n  visitor: ["typeAnnotation"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)("TSType")\n    }\n  }\n});\ndefineType("TSTypeParameterInstantiation", {\n  visitor: ["params"],\n  fields: {\n    params: (0, _utils.validateArrayOfType)("TSType")\n  }\n});\ndefineType("TSTypeParameterDeclaration", {\n  visitor: ["params"],\n  fields: {\n    params: (0, _utils.validateArrayOfType)("TSTypeParameter")\n  }\n});\ndefineType("TSTypeParameter", {\n  builder: ["constraint", "default", "name"],\n  visitor: ["constraint", "default"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)("string")\n    },\n    in: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    out: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    const: {\n      validate: (0, _utils.assertValueType)("boolean"),\n      optional: true\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)("TSType"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)("TSType"),\n      optional: true\n    }\n  }\n});\n\n//# sourceMappingURL=typescript.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYxMDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakMsWUFBWSxtQkFBTyxDQUFDLElBQVc7QUFDL0IsVUFBVSxtQkFBTyxDQUFDLEtBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsQ0FBQztBQUNEO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLENBQUM7QUFDRCxnREFBZ0Q7QUFDaEQsMEJBQTBCO0FBQzFCO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9kZWZpbml0aW9ucy90eXBlc2NyaXB0LmpzP2RmYzciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbnZhciBfY29yZSA9IHJlcXVpcmUoXCIuL2NvcmUuanNcIik7XG52YXIgX2lzID0gcmVxdWlyZShcIi4uL3ZhbGlkYXRvcnMvaXMuanNcIik7XG5jb25zdCBkZWZpbmVUeXBlID0gKDAsIF91dGlscy5kZWZpbmVBbGlhc2VkVHlwZSkoXCJUeXBlU2NyaXB0XCIpO1xuY29uc3QgYm9vbCA9ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIik7XG5jb25zdCB0U0Z1bmN0aW9uVHlwZUFubm90YXRpb25Db21tb24gPSAoKSA9PiAoe1xuICByZXR1cm5UeXBlOiB7XG4gICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVFNUeXBlQW5ub3RhdGlvblwiLCBcIk5vb3BcIiksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfSxcbiAgdHlwZVBhcmFtZXRlcnM6IHtcbiAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCBcIk5vb3BcIiksXG4gICAgb3B0aW9uYWw6IHRydWVcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNQYXJhbWV0ZXJQcm9wZXJ0eVwiLCB7XG4gIGFsaWFzZXM6IFtcIkxWYWxcIl0sXG4gIHZpc2l0b3I6IFtcInBhcmFtZXRlclwiXSxcbiAgZmllbGRzOiB7XG4gICAgYWNjZXNzaWJpbGl0eToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwicHVibGljXCIsIFwicHJpdmF0ZVwiLCBcInByb3RlY3RlZFwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICByZWFkb25seToge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0VmFsdWVUeXBlKShcImJvb2xlYW5cIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgcGFyYW1ldGVyOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiQXNzaWdubWVudFBhdHRlcm5cIilcbiAgICB9LFxuICAgIG92ZXJyaWRlOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBkZWNvcmF0b3JzOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hcnJheU9mVHlwZSkoXCJEZWNvcmF0b3JcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNEZWNsYXJlRnVuY3Rpb25cIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiLCBcInBhcmFtc1wiLCBcInJldHVyblR5cGVcIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgKDAsIF9jb3JlLmZ1bmN0aW9uRGVjbGFyYXRpb25Db21tb24pKCksIHRTRnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbigpKVxufSk7XG5kZWZpbmVUeXBlKFwiVFNEZWNsYXJlTWV0aG9kXCIsIHtcbiAgdmlzaXRvcjogW1wiZGVjb3JhdG9yc1wiLCBcImtleVwiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwicGFyYW1zXCIsIFwicmV0dXJuVHlwZVwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCAoMCwgX2NvcmUuY2xhc3NNZXRob2RPckRlY2xhcmVNZXRob2RDb21tb24pKCksIHRTRnVuY3Rpb25UeXBlQW5ub3RhdGlvbkNvbW1vbigpKVxufSk7XG5kZWZpbmVUeXBlKFwiVFNRdWFsaWZpZWROYW1lXCIsIHtcbiAgYWxpYXNlczogW1wiVFNFbnRpdHlOYW1lXCJdLFxuICB2aXNpdG9yOiBbXCJsZWZ0XCIsIFwicmlnaHRcIl0sXG4gIGZpZWxkczoge1xuICAgIGxlZnQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTRW50aXR5TmFtZVwiKSxcbiAgICByaWdodDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICB9XG59KTtcbmNvbnN0IHNpZ25hdHVyZURlY2xhcmF0aW9uQ29tbW9uID0gKCkgPT4gKHtcbiAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiksXG4gIFtcInBhcmFtZXRlcnNcIl06ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJBcnJheVBhdHRlcm5cIiwgXCJJZGVudGlmaWVyXCIsIFwiT2JqZWN0UGF0dGVyblwiLCBcIlJlc3RFbGVtZW50XCIpLFxuICBbXCJ0eXBlQW5ub3RhdGlvblwiXTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVBbm5vdGF0aW9uXCIpXG59KTtcbmNvbnN0IGNhbGxDb25zdHJ1Y3RTaWduYXR1cmVEZWNsYXJhdGlvbiA9IHtcbiAgYWxpYXNlczogW1wiVFNUeXBlRWxlbWVudFwiXSxcbiAgdmlzaXRvcjogW1widHlwZVBhcmFtZXRlcnNcIiwgXCJwYXJhbWV0ZXJzXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczogc2lnbmF0dXJlRGVjbGFyYXRpb25Db21tb24oKVxufTtcbmRlZmluZVR5cGUoXCJUU0NhbGxTaWduYXR1cmVEZWNsYXJhdGlvblwiLCBjYWxsQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb24pO1xuZGVmaW5lVHlwZShcIlRTQ29uc3RydWN0U2lnbmF0dXJlRGVjbGFyYXRpb25cIiwgY2FsbENvbnN0cnVjdFNpZ25hdHVyZURlY2xhcmF0aW9uKTtcbmNvbnN0IG5hbWVkVHlwZUVsZW1lbnRDb21tb24gPSAoKSA9PiAoe1xuICBrZXk6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkV4cHJlc3Npb25cIiksXG4gIGNvbXB1dGVkOiB7XG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgb3B0aW9uYWw6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbClcbn0pO1xuZGVmaW5lVHlwZShcIlRTUHJvcGVydHlTaWduYXR1cmVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVFbGVtZW50XCJdLFxuICB2aXNpdG9yOiBbXCJrZXlcIiwgXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCBuYW1lZFR5cGVFbGVtZW50Q29tbW9uKCksIHtcbiAgICByZWFkb25seTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKShib29sKSxcbiAgICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVBbm5vdGF0aW9uXCIpLFxuICAgIGtpbmQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydE9uZU9mKShcImdldFwiLCBcInNldFwiKVxuICAgIH1cbiAgfSlcbn0pO1xuZGVmaW5lVHlwZShcIlRTTWV0aG9kU2lnbmF0dXJlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlRWxlbWVudFwiXSxcbiAgdmlzaXRvcjogW1wia2V5XCIsIFwidHlwZVBhcmFtZXRlcnNcIiwgXCJwYXJhbWV0ZXJzXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgc2lnbmF0dXJlRGVjbGFyYXRpb25Db21tb24oKSwgbmFtZWRUeXBlRWxlbWVudENvbW1vbigpLCB7XG4gICAga2luZDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwibWV0aG9kXCIsIFwiZ2V0XCIsIFwic2V0XCIpXG4gICAgfVxuICB9KVxufSk7XG5kZWZpbmVUeXBlKFwiVFNJbmRleFNpZ25hdHVyZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZUVsZW1lbnRcIl0sXG4gIHZpc2l0b3I6IFtcInBhcmFtZXRlcnNcIiwgXCJ0eXBlQW5ub3RhdGlvblwiXSxcbiAgZmllbGRzOiB7XG4gICAgcmVhZG9ubHk6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgc3RhdGljOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKGJvb2wpLFxuICAgIHBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZUFubm90YXRpb25cIilcbiAgfVxufSk7XG5jb25zdCB0c0tleXdvcmRUeXBlcyA9IFtcIlRTQW55S2V5d29yZFwiLCBcIlRTQm9vbGVhbktleXdvcmRcIiwgXCJUU0JpZ0ludEtleXdvcmRcIiwgXCJUU0ludHJpbnNpY0tleXdvcmRcIiwgXCJUU05ldmVyS2V5d29yZFwiLCBcIlRTTnVsbEtleXdvcmRcIiwgXCJUU051bWJlcktleXdvcmRcIiwgXCJUU09iamVjdEtleXdvcmRcIiwgXCJUU1N0cmluZ0tleXdvcmRcIiwgXCJUU1N5bWJvbEtleXdvcmRcIiwgXCJUU1VuZGVmaW5lZEtleXdvcmRcIiwgXCJUU1Vua25vd25LZXl3b3JkXCIsIFwiVFNWb2lkS2V5d29yZFwiXTtcbmZvciAoY29uc3QgdHlwZSBvZiB0c0tleXdvcmRUeXBlcykge1xuICBkZWZpbmVUeXBlKHR5cGUsIHtcbiAgICBhbGlhc2VzOiBbXCJUU1R5cGVcIiwgXCJUU0Jhc2VUeXBlXCJdLFxuICAgIHZpc2l0b3I6IFtdLFxuICAgIGZpZWxkczoge31cbiAgfSk7XG59XG5kZWZpbmVUeXBlKFwiVFNUaGlzVHlwZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiLCBcIlRTQmFzZVR5cGVcIl0sXG4gIHZpc2l0b3I6IFtdLFxuICBmaWVsZHM6IHt9XG59KTtcbmNvbnN0IGZuT3JDdHJCYXNlID0ge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVQYXJhbWV0ZXJzXCIsIFwicGFyYW1ldGVyc1wiLCBcInR5cGVBbm5vdGF0aW9uXCJdXG59O1xuZGVmaW5lVHlwZShcIlRTRnVuY3Rpb25UeXBlXCIsIE9iamVjdC5hc3NpZ24oe30sIGZuT3JDdHJCYXNlLCB7XG4gIGZpZWxkczogc2lnbmF0dXJlRGVjbGFyYXRpb25Db21tb24oKVxufSkpO1xuZGVmaW5lVHlwZShcIlRTQ29uc3RydWN0b3JUeXBlXCIsIE9iamVjdC5hc3NpZ24oe30sIGZuT3JDdHJCYXNlLCB7XG4gIGZpZWxkczogT2JqZWN0LmFzc2lnbih7fSwgc2lnbmF0dXJlRGVjbGFyYXRpb25Db21tb24oKSwge1xuICAgIGFic3RyYWN0OiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKGJvb2wpXG4gIH0pXG59KSk7XG5kZWZpbmVUeXBlKFwiVFNUeXBlUmVmZXJlbmNlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlTmFtZVwiLCBcInR5cGVQYXJhbWV0ZXJzXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlTmFtZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNFbnRpdHlOYW1lXCIpLFxuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNUeXBlUHJlZGljYXRlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJwYXJhbWV0ZXJOYW1lXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGJ1aWxkZXI6IFtcInBhcmFtZXRlck5hbWVcIiwgXCJ0eXBlQW5ub3RhdGlvblwiLCBcImFzc2VydHNcIl0sXG4gIGZpZWxkczoge1xuICAgIHBhcmFtZXRlck5hbWU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiwgXCJUU1RoaXNUeXBlXCIpLFxuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZUFubm90YXRpb25cIiksXG4gICAgYXNzZXJ0czogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKShib29sKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU1R5cGVRdWVyeVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiXSxcbiAgdmlzaXRvcjogW1wiZXhwck5hbWVcIiwgXCJ0eXBlUGFyYW1ldGVyc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwck5hbWU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTRW50aXR5TmFtZVwiLCBcIlRTSW1wb3J0VHlwZVwiKSxcbiAgICB0eXBlUGFyYW1ldGVyczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVQYXJhbWV0ZXJJbnN0YW50aWF0aW9uXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTVHlwZUxpdGVyYWxcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcIm1lbWJlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIG1lbWJlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJUU1R5cGVFbGVtZW50XCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTQXJyYXlUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJlbGVtZW50VHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgZWxlbWVudFR5cGU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU1R1cGxlVHlwZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiXSxcbiAgdmlzaXRvcjogW1wiZWxlbWVudFR5cGVzXCJdLFxuICBmaWVsZHM6IHtcbiAgICBlbGVtZW50VHlwZXM6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJUU1R5cGVcIiwgXCJUU05hbWVkVHVwbGVNZW1iZXJcIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNPcHRpb25hbFR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTUmVzdFR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTTmFtZWRUdXBsZU1lbWJlclwiLCB7XG4gIHZpc2l0b3I6IFtcImxhYmVsXCIsIFwiZWxlbWVudFR5cGVcIl0sXG4gIGJ1aWxkZXI6IFtcImxhYmVsXCIsIFwiZWxlbWVudFR5cGVcIiwgXCJvcHRpb25hbFwiXSxcbiAgZmllbGRzOiB7XG4gICAgbGFiZWw6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgb3B0aW9uYWw6IHtcbiAgICAgIHZhbGlkYXRlOiBib29sLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGVsZW1lbnRUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIilcbiAgfVxufSk7XG5jb25zdCB1bmlvbk9ySW50ZXJzZWN0aW9uID0ge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVzXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59O1xuZGVmaW5lVHlwZShcIlRTVW5pb25UeXBlXCIsIHVuaW9uT3JJbnRlcnNlY3Rpb24pO1xuZGVmaW5lVHlwZShcIlRTSW50ZXJzZWN0aW9uVHlwZVwiLCB1bmlvbk9ySW50ZXJzZWN0aW9uKTtcbmRlZmluZVR5cGUoXCJUU0NvbmRpdGlvbmFsVHlwZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiXSxcbiAgdmlzaXRvcjogW1wiY2hlY2tUeXBlXCIsIFwiZXh0ZW5kc1R5cGVcIiwgXCJ0cnVlVHlwZVwiLCBcImZhbHNlVHlwZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgY2hlY2tUeXBlOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIiksXG4gICAgZXh0ZW5kc1R5cGU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKSxcbiAgICB0cnVlVHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpLFxuICAgIGZhbHNlVHlwZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTSW5mZXJUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlUGFyYW1ldGVyXCJdLFxuICBmaWVsZHM6IHtcbiAgICB0eXBlUGFyYW1ldGVyOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVQYXJhbWV0ZXJcIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNQYXJlbnRoZXNpemVkVHlwZVwiLCB7XG4gIGFsaWFzZXM6IFtcIlRTVHlwZVwiXSxcbiAgdmlzaXRvcjogW1widHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNUeXBlT3BlcmF0b3JcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBvcGVyYXRvcjogKDAsIF91dGlscy52YWxpZGF0ZSkoKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwic3RyaW5nXCIpKSxcbiAgICB0eXBlQW5ub3RhdGlvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTSW5kZXhlZEFjY2Vzc1R5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcIm9iamVjdFR5cGVcIiwgXCJpbmRleFR5cGVcIl0sXG4gIGZpZWxkczoge1xuICAgIG9iamVjdFR5cGU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKSxcbiAgICBpbmRleFR5cGU6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU01hcHBlZFR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcInR5cGVQYXJhbWV0ZXJcIiwgXCJuYW1lVHlwZVwiLCBcInR5cGVBbm5vdGF0aW9uXCJdLFxuICBidWlsZGVyOiBbXCJ0eXBlUGFyYW1ldGVyXCIsIFwidHlwZUFubm90YXRpb25cIiwgXCJuYW1lVHlwZVwiXSxcbiAgZmllbGRzOiBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgdHlwZVBhcmFtZXRlcjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyXCIpXG4gIH0sIHtcbiAgICByZWFkb25seTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFzc2VydE9uZU9mKSh0cnVlLCBmYWxzZSwgXCIrXCIsIFwiLVwiKSksXG4gICAgb3B0aW9uYWw6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoKDAsIF91dGlscy5hc3NlcnRPbmVPZikodHJ1ZSwgZmFsc2UsIFwiK1wiLCBcIi1cIikpLFxuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVwiKSxcbiAgICBuYW1lVHlwZTogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJUU1R5cGVcIilcbiAgfSlcbn0pO1xuZGVmaW5lVHlwZShcIlRTTGl0ZXJhbFR5cGVcIiwge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIiwgXCJUU0Jhc2VUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJsaXRlcmFsXCJdLFxuICBmaWVsZHM6IHtcbiAgICBsaXRlcmFsOiB7XG4gICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCB1bmFyeUV4cHJlc3Npb24gPSAoMCwgX3V0aWxzLmFzc2VydE5vZGVUeXBlKShcIk51bWVyaWNMaXRlcmFsXCIsIFwiQmlnSW50TGl0ZXJhbFwiKTtcbiAgICAgICAgY29uc3QgdW5hcnlPcGVyYXRvciA9ICgwLCBfdXRpbHMuYXNzZXJ0T25lT2YpKFwiLVwiKTtcbiAgICAgICAgY29uc3QgbGl0ZXJhbCA9ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiTnVtZXJpY0xpdGVyYWxcIiwgXCJTdHJpbmdMaXRlcmFsXCIsIFwiQm9vbGVhbkxpdGVyYWxcIiwgXCJCaWdJbnRMaXRlcmFsXCIsIFwiVGVtcGxhdGVMaXRlcmFsXCIpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0b3IocGFyZW50LCBrZXksIG5vZGUpIHtcbiAgICAgICAgICBpZiAoKDAsIF9pcy5kZWZhdWx0KShcIlVuYXJ5RXhwcmVzc2lvblwiLCBub2RlKSkge1xuICAgICAgICAgICAgdW5hcnlPcGVyYXRvcihub2RlLCBcIm9wZXJhdG9yXCIsIG5vZGUub3BlcmF0b3IpO1xuICAgICAgICAgICAgdW5hcnlFeHByZXNzaW9uKG5vZGUsIFwiYXJndW1lbnRcIiwgbm9kZS5hcmd1bWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpdGVyYWwocGFyZW50LCBrZXksIG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0b3Iub25lT2ZOb2RlVHlwZXMgPSBbXCJOdW1lcmljTGl0ZXJhbFwiLCBcIlN0cmluZ0xpdGVyYWxcIiwgXCJCb29sZWFuTGl0ZXJhbFwiLCBcIkJpZ0ludExpdGVyYWxcIiwgXCJUZW1wbGF0ZUxpdGVyYWxcIiwgXCJVbmFyeUV4cHJlc3Npb25cIl07XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3I7XG4gICAgICB9KClcbiAgICB9XG4gIH1cbn0pO1xuY29uc3QgZXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzID0ge1xuICBhbGlhc2VzOiBbXCJUU1R5cGVcIl0sXG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIiwgXCJ0eXBlUGFyYW1ldGVyc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgZXhwcmVzc2lvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNFbnRpdHlOYW1lXCIpLFxuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIilcbiAgfVxufTtcbntcbiAgZGVmaW5lVHlwZShcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIsIGV4cHJlc3Npb25XaXRoVHlwZUFyZ3VtZW50cyk7XG59XG5kZWZpbmVUeXBlKFwiVFNJbnRlcmZhY2VEZWNsYXJhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwiZXh0ZW5kc1wiLCBcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIGRlY2xhcmU6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiksXG4gICAgZXh0ZW5kczogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsKSgoMCwgX3V0aWxzLmFycmF5T2ZUeXBlKShcIlRTRXhwcmVzc2lvbldpdGhUeXBlQXJndW1lbnRzXCIpKSxcbiAgICBib2R5OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU0ludGVyZmFjZUJvZHlcIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNJbnRlcmZhY2VCb2R5XCIsIHtcbiAgdmlzaXRvcjogW1wiYm9keVwiXSxcbiAgZmllbGRzOiB7XG4gICAgYm9keTogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIlRTVHlwZUVsZW1lbnRcIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNUeXBlQWxpYXNEZWNsYXJhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcInR5cGVQYXJhbWV0ZXJzXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGRlY2xhcmU6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgdHlwZVBhcmFtZXRlcnM6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyRGVjbGFyYXRpb25cIiksXG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU0luc3RhbnRpYXRpb25FeHByZXNzaW9uXCIsIHtcbiAgYWxpYXNlczogW1wiRXhwcmVzc2lvblwiXSxcbiAgdmlzaXRvcjogW1wiZXhwcmVzc2lvblwiLCBcInR5cGVQYXJhbWV0ZXJzXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHByZXNzaW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJFeHByZXNzaW9uXCIpLFxuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIilcbiAgfVxufSk7XG5jb25zdCBUU1R5cGVFeHByZXNzaW9uID0ge1xuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCIsIFwiTFZhbFwiLCBcIlBhdHRlcm5MaWtlXCJdLFxuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCIsIFwidHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkV4cHJlc3Npb25cIiksXG4gICAgdHlwZUFubm90YXRpb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59O1xuZGVmaW5lVHlwZShcIlRTQXNFeHByZXNzaW9uXCIsIFRTVHlwZUV4cHJlc3Npb24pO1xuZGVmaW5lVHlwZShcIlRTU2F0aXNmaWVzRXhwcmVzc2lvblwiLCBUU1R5cGVFeHByZXNzaW9uKTtcbmRlZmluZVR5cGUoXCJUU1R5cGVBc3NlcnRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJFeHByZXNzaW9uXCIsIFwiTFZhbFwiLCBcIlBhdHRlcm5MaWtlXCJdLFxuICB2aXNpdG9yOiBbXCJ0eXBlQW5ub3RhdGlvblwiLCBcImV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHR5cGVBbm5vdGF0aW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU1R5cGVcIiksXG4gICAgZXhwcmVzc2lvbjogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiRXhwcmVzc2lvblwiKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU0VudW1EZWNsYXJhdGlvblwiLCB7XG4gIGFsaWFzZXM6IFtcIlN0YXRlbWVudFwiLCBcIkRlY2xhcmF0aW9uXCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcIm1lbWJlcnNcIl0sXG4gIGZpZWxkczoge1xuICAgIGRlY2xhcmU6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgY29uc3Q6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgaWQ6ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIklkZW50aWZpZXJcIiksXG4gICAgbWVtYmVyczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIlRTRW51bU1lbWJlclwiKSxcbiAgICBpbml0aWFsaXplcjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTRW51bU1lbWJlclwiLCB7XG4gIHZpc2l0b3I6IFtcImlkXCIsIFwiaW5pdGlhbGl6ZXJcIl0sXG4gIGZpZWxkczoge1xuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiKSxcbiAgICBpbml0aWFsaXplcjogKDAsIF91dGlscy52YWxpZGF0ZU9wdGlvbmFsVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTTW9kdWxlRGVjbGFyYXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIiwgXCJEZWNsYXJhdGlvblwiXSxcbiAgdmlzaXRvcjogW1wiaWRcIiwgXCJib2R5XCJdLFxuICBmaWVsZHM6IHtcbiAgICBraW5kOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRPbmVPZikoXCJnbG9iYWxcIiwgXCJtb2R1bGVcIiwgXCJuYW1lc3BhY2VcIilcbiAgICB9LFxuICAgIGRlY2xhcmU6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbCkoYm9vbCksXG4gICAgZ2xvYmFsOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWwpKGJvb2wpLFxuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIsIFwiU3RyaW5nTGl0ZXJhbFwiKSxcbiAgICBib2R5OiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJUU01vZHVsZUJsb2NrXCIsIFwiVFNNb2R1bGVEZWNsYXJhdGlvblwiKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU01vZHVsZUJsb2NrXCIsIHtcbiAgYWxpYXNlczogW1wiU2NvcGFibGVcIiwgXCJCbG9ja1wiLCBcIkJsb2NrUGFyZW50XCIsIFwiRnVuY3Rpb25QYXJlbnRcIl0sXG4gIHZpc2l0b3I6IFtcImJvZHlcIl0sXG4gIGZpZWxkczoge1xuICAgIGJvZHk6ICgwLCBfdXRpbHMudmFsaWRhdGVBcnJheU9mVHlwZSkoXCJTdGF0ZW1lbnRcIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNJbXBvcnRUeXBlXCIsIHtcbiAgYWxpYXNlczogW1wiVFNUeXBlXCJdLFxuICB2aXNpdG9yOiBbXCJhcmd1bWVudFwiLCBcInF1YWxpZmllclwiLCBcInR5cGVQYXJhbWV0ZXJzXCJdLFxuICBmaWVsZHM6IHtcbiAgICBhcmd1bWVudDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiU3RyaW5nTGl0ZXJhbFwiKSxcbiAgICBxdWFsaWZpZXI6ICgwLCBfdXRpbHMudmFsaWRhdGVPcHRpb25hbFR5cGUpKFwiVFNFbnRpdHlOYW1lXCIpLFxuICAgIHR5cGVQYXJhbWV0ZXJzOiAoMCwgX3V0aWxzLnZhbGlkYXRlT3B0aW9uYWxUeXBlKShcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiksXG4gICAgb3B0aW9uczoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiRXhwcmVzc2lvblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU0ltcG9ydEVxdWFsc0RlY2xhcmF0aW9uXCIsIHtcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCJdLFxuICB2aXNpdG9yOiBbXCJpZFwiLCBcIm1vZHVsZVJlZmVyZW5jZVwiXSxcbiAgZmllbGRzOiB7XG4gICAgaXNFeHBvcnQ6ICgwLCBfdXRpbHMudmFsaWRhdGUpKGJvb2wpLFxuICAgIGlkOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJJZGVudGlmaWVyXCIpLFxuICAgIG1vZHVsZVJlZmVyZW5jZTogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiVFNFbnRpdHlOYW1lXCIsIFwiVFNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZVwiKSxcbiAgICBpbXBvcnRLaW5kOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRPbmVPZikoXCJ0eXBlXCIsIFwidmFsdWVcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNFeHRlcm5hbE1vZHVsZVJlZmVyZW5jZVwiLCB7XG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIlN0cmluZ0xpdGVyYWxcIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNOb25OdWxsRXhwcmVzc2lvblwiLCB7XG4gIGFsaWFzZXM6IFtcIkV4cHJlc3Npb25cIiwgXCJMVmFsXCIsIFwiUGF0dGVybkxpa2VcIl0sXG4gIHZpc2l0b3I6IFtcImV4cHJlc3Npb25cIl0sXG4gIGZpZWxkczoge1xuICAgIGV4cHJlc3Npb246ICgwLCBfdXRpbHMudmFsaWRhdGVUeXBlKShcIkV4cHJlc3Npb25cIilcbiAgfVxufSk7XG5kZWZpbmVUeXBlKFwiVFNFeHBvcnRBc3NpZ25tZW50XCIsIHtcbiAgYWxpYXNlczogW1wiU3RhdGVtZW50XCJdLFxuICB2aXNpdG9yOiBbXCJleHByZXNzaW9uXCJdLFxuICBmaWVsZHM6IHtcbiAgICBleHByZXNzaW9uOiAoMCwgX3V0aWxzLnZhbGlkYXRlVHlwZSkoXCJFeHByZXNzaW9uXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTTmFtZXNwYWNlRXhwb3J0RGVjbGFyYXRpb25cIiwge1xuICBhbGlhc2VzOiBbXCJTdGF0ZW1lbnRcIl0sXG4gIHZpc2l0b3I6IFtcImlkXCJdLFxuICBmaWVsZHM6IHtcbiAgICBpZDogKDAsIF91dGlscy52YWxpZGF0ZVR5cGUpKFwiSWRlbnRpZmllclwiKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU1R5cGVBbm5vdGF0aW9uXCIsIHtcbiAgdmlzaXRvcjogW1widHlwZUFubm90YXRpb25cIl0sXG4gIGZpZWxkczoge1xuICAgIHR5cGVBbm5vdGF0aW9uOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUU1R5cGVcIilcbiAgICB9XG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTVHlwZVBhcmFtZXRlckluc3RhbnRpYXRpb25cIiwge1xuICB2aXNpdG9yOiBbXCJwYXJhbXNcIl0sXG4gIGZpZWxkczoge1xuICAgIHBhcmFtczogKDAsIF91dGlscy52YWxpZGF0ZUFycmF5T2ZUeXBlKShcIlRTVHlwZVwiKVxuICB9XG59KTtcbmRlZmluZVR5cGUoXCJUU1R5cGVQYXJhbWV0ZXJEZWNsYXJhdGlvblwiLCB7XG4gIHZpc2l0b3I6IFtcInBhcmFtc1wiXSxcbiAgZmllbGRzOiB7XG4gICAgcGFyYW1zOiAoMCwgX3V0aWxzLnZhbGlkYXRlQXJyYXlPZlR5cGUpKFwiVFNUeXBlUGFyYW1ldGVyXCIpXG4gIH1cbn0pO1xuZGVmaW5lVHlwZShcIlRTVHlwZVBhcmFtZXRlclwiLCB7XG4gIGJ1aWxkZXI6IFtcImNvbnN0cmFpbnRcIiwgXCJkZWZhdWx0XCIsIFwibmFtZVwiXSxcbiAgdmlzaXRvcjogW1wiY29uc3RyYWludFwiLCBcImRlZmF1bHRcIl0sXG4gIGZpZWxkczoge1xuICAgIG5hbWU6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJzdHJpbmdcIilcbiAgICB9LFxuICAgIGluOiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBvdXQ6IHtcbiAgICAgIHZhbGlkYXRlOiAoMCwgX3V0aWxzLmFzc2VydFZhbHVlVHlwZSkoXCJib29sZWFuXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9LFxuICAgIGNvbnN0OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnRWYWx1ZVR5cGUpKFwiYm9vbGVhblwiKSxcbiAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfSxcbiAgICBjb25zdHJhaW50OiB7XG4gICAgICB2YWxpZGF0ZTogKDAsIF91dGlscy5hc3NlcnROb2RlVHlwZSkoXCJUU1R5cGVcIiksXG4gICAgICBvcHRpb25hbDogdHJ1ZVxuICAgIH0sXG4gICAgZGVmYXVsdDoge1xuICAgICAgdmFsaWRhdGU6ICgwLCBfdXRpbHMuYXNzZXJ0Tm9kZVR5cGUpKFwiVFNUeXBlXCIpLFxuICAgICAgb3B0aW9uYWw6IHRydWVcbiAgICB9XG4gIH1cbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlc2NyaXB0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46106\n')},77596:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;\nexports.arrayOf = arrayOf;\nexports.arrayOfType = arrayOfType;\nexports.assertEach = assertEach;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertNodeType = assertNodeType;\nexports.assertOneOf = assertOneOf;\nexports.assertOptionalChainStart = assertOptionalChainStart;\nexports.assertShape = assertShape;\nexports.assertValueType = assertValueType;\nexports.chain = chain;\nexports["default"] = defineType;\nexports.defineAliasedType = defineAliasedType;\nexports.validate = validate;\nexports.validateArrayOfType = validateArrayOfType;\nexports.validateOptional = validateOptional;\nexports.validateOptionalType = validateOptionalType;\nexports.validateType = validateType;\nvar _is = __webpack_require__(93828);\nvar _validate = __webpack_require__(57446);\nconst VISITOR_KEYS = exports.VISITOR_KEYS = {};\nconst ALIAS_KEYS = exports.ALIAS_KEYS = {};\nconst FLIPPED_ALIAS_KEYS = exports.FLIPPED_ALIAS_KEYS = {};\nconst NODE_FIELDS = exports.NODE_FIELDS = {};\nconst BUILDER_KEYS = exports.BUILDER_KEYS = {};\nconst DEPRECATED_KEYS = exports.DEPRECATED_KEYS = {};\nconst NODE_PARENT_VALIDATIONS = exports.NODE_PARENT_VALIDATIONS = {};\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return "array";\n  } else if (val === null) {\n    return "null";\n  } else {\n    return typeof val;\n  }\n}\nfunction validate(validate) {\n  return {\n    validate\n  };\n}\nfunction validateType(...typeNames) {\n  return validate(assertNodeType(...typeNames));\n}\nfunction validateOptional(validate) {\n  return {\n    validate,\n    optional: true\n  };\n}\nfunction validateOptionalType(...typeNames) {\n  return {\n    validate: assertNodeType(...typeNames),\n    optional: true\n  };\n}\nfunction arrayOf(elementType) {\n  return chain(assertValueType("array"), assertEach(elementType));\n}\nfunction arrayOfType(...typeNames) {\n  return arrayOf(assertNodeType(...typeNames));\n}\nfunction validateArrayOfType(...typeNames) {\n  return validate(arrayOfType(...typeNames));\n}\nfunction assertEach(callback) {\n  const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate.validateChild : () => {};\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) return;\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      childValidator(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\nfunction assertOneOf(...values) {\n  function validate(node, key, val) {\n    if (!values.includes(val)) {\n      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);\n    }\n  }\n  validate.oneOf = values;\n  return validate;\n}\nfunction assertNodeType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if ((0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n  validate.oneOfNodeTypes = types;\n  return validate;\n}\nfunction assertNodeOrValueType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if (getType(val) === type || (0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n  validate.oneOfNodeOrValueTypes = types;\n  return validate;\n}\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    const valid = getType(val) === type;\n    if (!valid) {\n      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);\n    }\n  }\n  validate.type = type;\n  return validate;\n}\nfunction assertShape(shape) {\n  function validate(node, key, val) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        (0, _validate.validateField)(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\\n${errors.join("\\n")}`);\n    }\n  }\n  validate.shapeOf = shape;\n  return validate;\n}\nfunction assertOptionalChainStart() {\n  function validate(node) {\n    var _current;\n    let current = node;\n    while (node) {\n      const {\n        type\n      } = current;\n      if (type === "OptionalCallExpression") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n      if (type === "OptionalMemberExpression") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n      break;\n    }\n    throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);\n  }\n  return validate;\n}\nfunction chain(...fns) {\n  function validate(...args) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n  if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {\n    throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);\n  }\n  return validate;\n}\nconst validTypeOpts = new Set(["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"]);\nconst validFieldKeys = new Set(["default", "optional", "deprecated", "validate"]);\nconst store = {};\nfunction defineAliasedType(...aliases) {\n  return (type, opts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      var _store$opts$inherits$, _defined;\n      if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();\n      (_defined = defined) != null ? _defined : defined = [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\nfunction defineType(type, opts = {}) {\n  const inherits = opts.inherits && store[opts.inherits] || {};\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {\n          throw new Error("field defaults can only be primitives or empty arrays currently");\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          deprecated: field.deprecated,\n          validate: field.validate\n        };\n      }\n    }\n  }\n  const visitor = opts.visitor || inherits.visitor || [];\n  const aliases = opts.aliases || inherits.aliases || [];\n  const builder = opts.builder || inherits.builder || opts.visitor || [];\n  for (const k of Object.keys(opts)) {\n    if (!validTypeOpts.has(k)) {\n      throw new Error(`Unknown type option "${k}" on ${type}`);\n    }\n  }\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n  }\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n    if (field.default !== undefined && !builder.includes(key)) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n    for (const k of Object.keys(field)) {\n      if (!validFieldKeys.has(k)) {\n        throw new Error(`Unknown field key "${k}" on ${type}.${key}`);\n      }\n    }\n  }\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type);\n  });\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n  store[type] = opts;\n}\n\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///77596\n')},2352:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nvar _exportNames = {\n  react: true,\n  assertNode: true,\n  createTypeAnnotationBasedOnTypeof: true,\n  createUnionTypeAnnotation: true,\n  createFlowUnionType: true,\n  createTSUnionType: true,\n  cloneNode: true,\n  clone: true,\n  cloneDeep: true,\n  cloneDeepWithoutLoc: true,\n  cloneWithoutLoc: true,\n  addComment: true,\n  addComments: true,\n  inheritInnerComments: true,\n  inheritLeadingComments: true,\n  inheritsComments: true,\n  inheritTrailingComments: true,\n  removeComments: true,\n  ensureBlock: true,\n  toBindingIdentifierName: true,\n  toBlock: true,\n  toComputedKey: true,\n  toExpression: true,\n  toIdentifier: true,\n  toKeyAlias: true,\n  toStatement: true,\n  valueToNode: true,\n  appendToMemberExpression: true,\n  inherits: true,\n  prependToMemberExpression: true,\n  removeProperties: true,\n  removePropertiesDeep: true,\n  removeTypeDuplicates: true,\n  getAssignmentIdentifiers: true,\n  getBindingIdentifiers: true,\n  getOuterBindingIdentifiers: true,\n  getFunctionName: true,\n  traverse: true,\n  traverseFast: true,\n  shallowEqual: true,\n  is: true,\n  isBinding: true,\n  isBlockScoped: true,\n  isImmutable: true,\n  isLet: true,\n  isNode: true,\n  isNodesEquivalent: true,\n  isPlaceholderType: true,\n  isReferenced: true,\n  isScope: true,\n  isSpecifierDefault: true,\n  isType: true,\n  isValidES3Identifier: true,\n  isValidIdentifier: true,\n  isVar: true,\n  matchesPattern: true,\n  validate: true,\n  buildMatchMemberExpression: true,\n  __internal__deprecationWarning: true\n};\nObject.defineProperty(exports, "__internal__deprecationWarning", ({\n  enumerable: true,\n  get: function () {\n    return _deprecationWarning.default;\n  }\n}));\nObject.defineProperty(exports, "addComment", ({\n  enumerable: true,\n  get: function () {\n    return _addComment.default;\n  }\n}));\nObject.defineProperty(exports, "addComments", ({\n  enumerable: true,\n  get: function () {\n    return _addComments.default;\n  }\n}));\nObject.defineProperty(exports, "appendToMemberExpression", ({\n  enumerable: true,\n  get: function () {\n    return _appendToMemberExpression.default;\n  }\n}));\nObject.defineProperty(exports, "assertNode", ({\n  enumerable: true,\n  get: function () {\n    return _assertNode.default;\n  }\n}));\nObject.defineProperty(exports, "buildMatchMemberExpression", ({\n  enumerable: true,\n  get: function () {\n    return _buildMatchMemberExpression.default;\n  }\n}));\nObject.defineProperty(exports, "clone", ({\n  enumerable: true,\n  get: function () {\n    return _clone.default;\n  }\n}));\nObject.defineProperty(exports, "cloneDeep", ({\n  enumerable: true,\n  get: function () {\n    return _cloneDeep.default;\n  }\n}));\nObject.defineProperty(exports, "cloneDeepWithoutLoc", ({\n  enumerable: true,\n  get: function () {\n    return _cloneDeepWithoutLoc.default;\n  }\n}));\nObject.defineProperty(exports, "cloneNode", ({\n  enumerable: true,\n  get: function () {\n    return _cloneNode.default;\n  }\n}));\nObject.defineProperty(exports, "cloneWithoutLoc", ({\n  enumerable: true,\n  get: function () {\n    return _cloneWithoutLoc.default;\n  }\n}));\nObject.defineProperty(exports, "createFlowUnionType", ({\n  enumerable: true,\n  get: function () {\n    return _createFlowUnionType.default;\n  }\n}));\nObject.defineProperty(exports, "createTSUnionType", ({\n  enumerable: true,\n  get: function () {\n    return _createTSUnionType.default;\n  }\n}));\nObject.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", ({\n  enumerable: true,\n  get: function () {\n    return _createTypeAnnotationBasedOnTypeof.default;\n  }\n}));\nObject.defineProperty(exports, "createUnionTypeAnnotation", ({\n  enumerable: true,\n  get: function () {\n    return _createFlowUnionType.default;\n  }\n}));\nObject.defineProperty(exports, "ensureBlock", ({\n  enumerable: true,\n  get: function () {\n    return _ensureBlock.default;\n  }\n}));\nObject.defineProperty(exports, "getAssignmentIdentifiers", ({\n  enumerable: true,\n  get: function () {\n    return _getAssignmentIdentifiers.default;\n  }\n}));\nObject.defineProperty(exports, "getBindingIdentifiers", ({\n  enumerable: true,\n  get: function () {\n    return _getBindingIdentifiers.default;\n  }\n}));\nObject.defineProperty(exports, "getFunctionName", ({\n  enumerable: true,\n  get: function () {\n    return _getFunctionName.default;\n  }\n}));\nObject.defineProperty(exports, "getOuterBindingIdentifiers", ({\n  enumerable: true,\n  get: function () {\n    return _getOuterBindingIdentifiers.default;\n  }\n}));\nObject.defineProperty(exports, "inheritInnerComments", ({\n  enumerable: true,\n  get: function () {\n    return _inheritInnerComments.default;\n  }\n}));\nObject.defineProperty(exports, "inheritLeadingComments", ({\n  enumerable: true,\n  get: function () {\n    return _inheritLeadingComments.default;\n  }\n}));\nObject.defineProperty(exports, "inheritTrailingComments", ({\n  enumerable: true,\n  get: function () {\n    return _inheritTrailingComments.default;\n  }\n}));\nObject.defineProperty(exports, "inherits", ({\n  enumerable: true,\n  get: function () {\n    return _inherits.default;\n  }\n}));\nObject.defineProperty(exports, "inheritsComments", ({\n  enumerable: true,\n  get: function () {\n    return _inheritsComments.default;\n  }\n}));\nObject.defineProperty(exports, "is", ({\n  enumerable: true,\n  get: function () {\n    return _is.default;\n  }\n}));\nObject.defineProperty(exports, "isBinding", ({\n  enumerable: true,\n  get: function () {\n    return _isBinding.default;\n  }\n}));\nObject.defineProperty(exports, "isBlockScoped", ({\n  enumerable: true,\n  get: function () {\n    return _isBlockScoped.default;\n  }\n}));\nObject.defineProperty(exports, "isImmutable", ({\n  enumerable: true,\n  get: function () {\n    return _isImmutable.default;\n  }\n}));\nObject.defineProperty(exports, "isLet", ({\n  enumerable: true,\n  get: function () {\n    return _isLet.default;\n  }\n}));\nObject.defineProperty(exports, "isNode", ({\n  enumerable: true,\n  get: function () {\n    return _isNode.default;\n  }\n}));\nObject.defineProperty(exports, "isNodesEquivalent", ({\n  enumerable: true,\n  get: function () {\n    return _isNodesEquivalent.default;\n  }\n}));\nObject.defineProperty(exports, "isPlaceholderType", ({\n  enumerable: true,\n  get: function () {\n    return _isPlaceholderType.default;\n  }\n}));\nObject.defineProperty(exports, "isReferenced", ({\n  enumerable: true,\n  get: function () {\n    return _isReferenced.default;\n  }\n}));\nObject.defineProperty(exports, "isScope", ({\n  enumerable: true,\n  get: function () {\n    return _isScope.default;\n  }\n}));\nObject.defineProperty(exports, "isSpecifierDefault", ({\n  enumerable: true,\n  get: function () {\n    return _isSpecifierDefault.default;\n  }\n}));\nObject.defineProperty(exports, "isType", ({\n  enumerable: true,\n  get: function () {\n    return _isType.default;\n  }\n}));\nObject.defineProperty(exports, "isValidES3Identifier", ({\n  enumerable: true,\n  get: function () {\n    return _isValidES3Identifier.default;\n  }\n}));\nObject.defineProperty(exports, "isValidIdentifier", ({\n  enumerable: true,\n  get: function () {\n    return _isValidIdentifier.default;\n  }\n}));\nObject.defineProperty(exports, "isVar", ({\n  enumerable: true,\n  get: function () {\n    return _isVar.default;\n  }\n}));\nObject.defineProperty(exports, "matchesPattern", ({\n  enumerable: true,\n  get: function () {\n    return _matchesPattern.default;\n  }\n}));\nObject.defineProperty(exports, "prependToMemberExpression", ({\n  enumerable: true,\n  get: function () {\n    return _prependToMemberExpression.default;\n  }\n}));\nexports.react = void 0;\nObject.defineProperty(exports, "removeComments", ({\n  enumerable: true,\n  get: function () {\n    return _removeComments.default;\n  }\n}));\nObject.defineProperty(exports, "removeProperties", ({\n  enumerable: true,\n  get: function () {\n    return _removeProperties.default;\n  }\n}));\nObject.defineProperty(exports, "removePropertiesDeep", ({\n  enumerable: true,\n  get: function () {\n    return _removePropertiesDeep.default;\n  }\n}));\nObject.defineProperty(exports, "removeTypeDuplicates", ({\n  enumerable: true,\n  get: function () {\n    return _removeTypeDuplicates.default;\n  }\n}));\nObject.defineProperty(exports, "shallowEqual", ({\n  enumerable: true,\n  get: function () {\n    return _shallowEqual.default;\n  }\n}));\nObject.defineProperty(exports, "toBindingIdentifierName", ({\n  enumerable: true,\n  get: function () {\n    return _toBindingIdentifierName.default;\n  }\n}));\nObject.defineProperty(exports, "toBlock", ({\n  enumerable: true,\n  get: function () {\n    return _toBlock.default;\n  }\n}));\nObject.defineProperty(exports, "toComputedKey", ({\n  enumerable: true,\n  get: function () {\n    return _toComputedKey.default;\n  }\n}));\nObject.defineProperty(exports, "toExpression", ({\n  enumerable: true,\n  get: function () {\n    return _toExpression.default;\n  }\n}));\nObject.defineProperty(exports, "toIdentifier", ({\n  enumerable: true,\n  get: function () {\n    return _toIdentifier.default;\n  }\n}));\nObject.defineProperty(exports, "toKeyAlias", ({\n  enumerable: true,\n  get: function () {\n    return _toKeyAlias.default;\n  }\n}));\nObject.defineProperty(exports, "toStatement", ({\n  enumerable: true,\n  get: function () {\n    return _toStatement.default;\n  }\n}));\nObject.defineProperty(exports, "traverse", ({\n  enumerable: true,\n  get: function () {\n    return _traverse.default;\n  }\n}));\nObject.defineProperty(exports, "traverseFast", ({\n  enumerable: true,\n  get: function () {\n    return _traverseFast.default;\n  }\n}));\nObject.defineProperty(exports, "validate", ({\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n}));\nObject.defineProperty(exports, "valueToNode", ({\n  enumerable: true,\n  get: function () {\n    return _valueToNode.default;\n  }\n}));\nvar _isReactComponent = __webpack_require__(45682);\nvar _isCompatTag = __webpack_require__(85004);\nvar _buildChildren = __webpack_require__(49018);\nvar _assertNode = __webpack_require__(34568);\nvar _index = __webpack_require__(72246);\nObject.keys(_index).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _index[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _index[key];\n    }\n  });\n});\nvar _createTypeAnnotationBasedOnTypeof = __webpack_require__(95958);\nvar _createFlowUnionType = __webpack_require__(31009);\nvar _createTSUnionType = __webpack_require__(46049);\nvar _index2 = __webpack_require__(48079);\nObject.keys(_index2).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _index2[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _index2[key];\n    }\n  });\n});\nvar _uppercase = __webpack_require__(76779);\nObject.keys(_uppercase).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _uppercase[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _uppercase[key];\n    }\n  });\n});\nvar _productions = __webpack_require__(10985);\nObject.keys(_productions).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _productions[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _productions[key];\n    }\n  });\n});\nvar _cloneNode = __webpack_require__(85279);\nvar _clone = __webpack_require__(2107);\nvar _cloneDeep = __webpack_require__(10245);\nvar _cloneDeepWithoutLoc = __webpack_require__(35299);\nvar _cloneWithoutLoc = __webpack_require__(62425);\nvar _addComment = __webpack_require__(76211);\nvar _addComments = __webpack_require__(52598);\nvar _inheritInnerComments = __webpack_require__(7932);\nvar _inheritLeadingComments = __webpack_require__(55766);\nvar _inheritsComments = __webpack_require__(18125);\nvar _inheritTrailingComments = __webpack_require__(15586);\nvar _removeComments = __webpack_require__(93437);\nvar _index3 = __webpack_require__(67980);\nObject.keys(_index3).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _index3[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _index3[key];\n    }\n  });\n});\nvar _index4 = __webpack_require__(93422);\nObject.keys(_index4).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _index4[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _index4[key];\n    }\n  });\n});\nvar _ensureBlock = __webpack_require__(57931);\nvar _toBindingIdentifierName = __webpack_require__(82234);\nvar _toBlock = __webpack_require__(25010);\nvar _toComputedKey = __webpack_require__(33017);\nvar _toExpression = __webpack_require__(26133);\nvar _toIdentifier = __webpack_require__(36744);\nvar _toKeyAlias = __webpack_require__(72402);\nvar _toStatement = __webpack_require__(99198);\nvar _valueToNode = __webpack_require__(44544);\nvar _index5 = __webpack_require__(39793);\nObject.keys(_index5).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _index5[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _index5[key];\n    }\n  });\n});\nvar _appendToMemberExpression = __webpack_require__(74001);\nvar _inherits = __webpack_require__(89564);\nvar _prependToMemberExpression = __webpack_require__(96219);\nvar _removeProperties = __webpack_require__(85333);\nvar _removePropertiesDeep = __webpack_require__(87639);\nvar _removeTypeDuplicates = __webpack_require__(95237);\nvar _getAssignmentIdentifiers = __webpack_require__(1343);\nvar _getBindingIdentifiers = __webpack_require__(70329);\nvar _getOuterBindingIdentifiers = __webpack_require__(49420);\nvar _getFunctionName = __webpack_require__(5109);\nvar _traverse = __webpack_require__(53357);\nObject.keys(_traverse).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _traverse[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _traverse[key];\n    }\n  });\n});\nvar _traverseFast = __webpack_require__(58943);\nvar _shallowEqual = __webpack_require__(96616);\nvar _is = __webpack_require__(93828);\nvar _isBinding = __webpack_require__(2687);\nvar _isBlockScoped = __webpack_require__(29127);\nvar _isImmutable = __webpack_require__(19722);\nvar _isLet = __webpack_require__(63847);\nvar _isNode = __webpack_require__(73908);\nvar _isNodesEquivalent = __webpack_require__(7003);\nvar _isPlaceholderType = __webpack_require__(53571);\nvar _isReferenced = __webpack_require__(37591);\nvar _isScope = __webpack_require__(89246);\nvar _isSpecifierDefault = __webpack_require__(22457);\nvar _isType = __webpack_require__(94460);\nvar _isValidES3Identifier = __webpack_require__(91384);\nvar _isValidIdentifier = __webpack_require__(60983);\nvar _isVar = __webpack_require__(70499);\nvar _matchesPattern = __webpack_require__(94965);\nvar _validate = __webpack_require__(57446);\nvar _buildMatchMemberExpression = __webpack_require__(3937);\nvar _index6 = __webpack_require__(98960);\nObject.keys(_index6).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _index6[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _index6[key];\n    }\n  });\n});\nvar _deprecationWarning = __webpack_require__(63762);\nconst react = exports.react = {\n  isReactComponent: _isReactComponent.default,\n  isCompatTag: _isCompatTag.default,\n  buildChildren: _buildChildren.default\n};\n{\n  exports.toSequenceExpression = __webpack_require__(90640)["default"];\n}\nif (process.env.BABEL_TYPES_8_BREAKING) {\n  console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM1Mi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDhDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDREQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDhDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDhEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHlDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDZDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHVEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDZDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLG1EQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHVEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHFEQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHFFQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDZEQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDREQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHlEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLG1EQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDhEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHdEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDBEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDRDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLG9EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHNDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDZDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGlEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLCtDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHlDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDBDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHFEQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHFEQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGdEQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDJDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHNEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDBDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHdEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHFEQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLHlDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGtEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLDZEQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGLGFBQWE7QUFDYixrREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixvREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwyQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixpREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0Q0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRixnREFBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiw0Q0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRiwrQ0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7QUFDRix3QkFBd0IsbUJBQU8sQ0FBQyxLQUF3QztBQUN4RSxtQkFBbUIsbUJBQU8sQ0FBQyxLQUFtQztBQUM5RCxxQkFBcUIsbUJBQU8sQ0FBQyxLQUFtQztBQUNoRSxrQkFBa0IsbUJBQU8sQ0FBQyxLQUF5QjtBQUNuRCxhQUFhLG1CQUFPLENBQUMsS0FBOEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCx5Q0FBeUMsbUJBQU8sQ0FBQyxLQUFzRDtBQUN2RywyQkFBMkIsbUJBQU8sQ0FBQyxLQUF3QztBQUMzRSx5QkFBeUIsbUJBQU8sQ0FBQyxLQUE0QztBQUM3RSxjQUFjLG1CQUFPLENBQUMsS0FBK0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxpQkFBaUIsbUJBQU8sQ0FBQyxLQUFtQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELG1CQUFtQixtQkFBTyxDQUFDLEtBQTJCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QsaUJBQWlCLG1CQUFPLENBQUMsS0FBc0I7QUFDL0MsYUFBYSxtQkFBTyxDQUFDLElBQWtCO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLEtBQXNCO0FBQy9DLDJCQUEyQixtQkFBTyxDQUFDLEtBQWdDO0FBQ25FLHVCQUF1QixtQkFBTyxDQUFDLEtBQTRCO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLEtBQTBCO0FBQ3BELG1CQUFtQixtQkFBTyxDQUFDLEtBQTJCO0FBQ3RELDRCQUE0QixtQkFBTyxDQUFDLElBQW9DO0FBQ3hFLDhCQUE4QixtQkFBTyxDQUFDLEtBQXNDO0FBQzVFLHdCQUF3QixtQkFBTyxDQUFDLEtBQWdDO0FBQ2hFLCtCQUErQixtQkFBTyxDQUFDLEtBQXVDO0FBQzlFLHNCQUFzQixtQkFBTyxDQUFDLEtBQThCO0FBQzVELGNBQWMsbUJBQU8sQ0FBQyxLQUFnQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELGNBQWMsbUJBQU8sQ0FBQyxLQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELG1CQUFtQixtQkFBTyxDQUFDLEtBQTZCO0FBQ3hELCtCQUErQixtQkFBTyxDQUFDLEtBQXlDO0FBQ2hGLGVBQWUsbUJBQU8sQ0FBQyxLQUF5QjtBQUNoRCxxQkFBcUIsbUJBQU8sQ0FBQyxLQUErQjtBQUM1RCxvQkFBb0IsbUJBQU8sQ0FBQyxLQUE4QjtBQUMxRCxvQkFBb0IsbUJBQU8sQ0FBQyxLQUE4QjtBQUMxRCxrQkFBa0IsbUJBQU8sQ0FBQyxLQUE0QjtBQUN0RCxtQkFBbUIsbUJBQU8sQ0FBQyxLQUE2QjtBQUN4RCxtQkFBbUIsbUJBQU8sQ0FBQyxLQUE2QjtBQUN4RCxjQUFjLG1CQUFPLENBQUMsS0FBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCxnQ0FBZ0MsbUJBQU8sQ0FBQyxLQUE2QztBQUNyRixnQkFBZ0IsbUJBQU8sQ0FBQyxLQUE2QjtBQUNyRCxpQ0FBaUMsbUJBQU8sQ0FBQyxLQUE4QztBQUN2Rix3QkFBd0IsbUJBQU8sQ0FBQyxLQUFxQztBQUNyRSw0QkFBNEIsbUJBQU8sQ0FBQyxLQUF5QztBQUM3RSw0QkFBNEIsbUJBQU8sQ0FBQyxLQUE4QztBQUNsRixnQ0FBZ0MsbUJBQU8sQ0FBQyxJQUEwQztBQUNsRiw2QkFBNkIsbUJBQU8sQ0FBQyxLQUF1QztBQUM1RSxrQ0FBa0MsbUJBQU8sQ0FBQyxLQUE0QztBQUN0Rix1QkFBdUIsbUJBQU8sQ0FBQyxJQUFpQztBQUNoRSxnQkFBZ0IsbUJBQU8sQ0FBQyxLQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELG9CQUFvQixtQkFBTyxDQUFDLEtBQTRCO0FBQ3hELG9CQUFvQixtQkFBTyxDQUFDLEtBQXlCO0FBQ3JELFVBQVUsbUJBQU8sQ0FBQyxLQUFvQjtBQUN0QyxpQkFBaUIsbUJBQU8sQ0FBQyxJQUEyQjtBQUNwRCxxQkFBcUIsbUJBQU8sQ0FBQyxLQUErQjtBQUM1RCxtQkFBbUIsbUJBQU8sQ0FBQyxLQUE2QjtBQUN4RCxhQUFhLG1CQUFPLENBQUMsS0FBdUI7QUFDNUMsY0FBYyxtQkFBTyxDQUFDLEtBQXdCO0FBQzlDLHlCQUF5QixtQkFBTyxDQUFDLElBQW1DO0FBQ3BFLHlCQUF5QixtQkFBTyxDQUFDLEtBQW1DO0FBQ3BFLG9CQUFvQixtQkFBTyxDQUFDLEtBQThCO0FBQzFELGVBQWUsbUJBQU8sQ0FBQyxLQUF5QjtBQUNoRCwwQkFBMEIsbUJBQU8sQ0FBQyxLQUFvQztBQUN0RSxjQUFjLG1CQUFPLENBQUMsS0FBd0I7QUFDOUMsNEJBQTRCLG1CQUFPLENBQUMsS0FBc0M7QUFDMUUseUJBQXlCLG1CQUFPLENBQUMsS0FBbUM7QUFDcEUsYUFBYSxtQkFBTyxDQUFDLEtBQXVCO0FBQzVDLHNCQUFzQixtQkFBTyxDQUFDLEtBQWdDO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLEtBQTBCO0FBQ2xELGtDQUFrQyxtQkFBTyxDQUFDLElBQTRDO0FBQ3RGLGNBQWMsbUJBQU8sQ0FBQyxLQUFpQztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNELDBCQUEwQixtQkFBTyxDQUFDLEtBQStCO0FBQ2pFLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxvRUFBc0Y7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvaW5kZXguanM/NDRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBfZXhwb3J0TmFtZXMgPSB7XG4gIHJlYWN0OiB0cnVlLFxuICBhc3NlcnROb2RlOiB0cnVlLFxuICBjcmVhdGVUeXBlQW5ub3RhdGlvbkJhc2VkT25UeXBlb2Y6IHRydWUsXG4gIGNyZWF0ZVVuaW9uVHlwZUFubm90YXRpb246IHRydWUsXG4gIGNyZWF0ZUZsb3dVbmlvblR5cGU6IHRydWUsXG4gIGNyZWF0ZVRTVW5pb25UeXBlOiB0cnVlLFxuICBjbG9uZU5vZGU6IHRydWUsXG4gIGNsb25lOiB0cnVlLFxuICBjbG9uZURlZXA6IHRydWUsXG4gIGNsb25lRGVlcFdpdGhvdXRMb2M6IHRydWUsXG4gIGNsb25lV2l0aG91dExvYzogdHJ1ZSxcbiAgYWRkQ29tbWVudDogdHJ1ZSxcbiAgYWRkQ29tbWVudHM6IHRydWUsXG4gIGluaGVyaXRJbm5lckNvbW1lbnRzOiB0cnVlLFxuICBpbmhlcml0TGVhZGluZ0NvbW1lbnRzOiB0cnVlLFxuICBpbmhlcml0c0NvbW1lbnRzOiB0cnVlLFxuICBpbmhlcml0VHJhaWxpbmdDb21tZW50czogdHJ1ZSxcbiAgcmVtb3ZlQ29tbWVudHM6IHRydWUsXG4gIGVuc3VyZUJsb2NrOiB0cnVlLFxuICB0b0JpbmRpbmdJZGVudGlmaWVyTmFtZTogdHJ1ZSxcbiAgdG9CbG9jazogdHJ1ZSxcbiAgdG9Db21wdXRlZEtleTogdHJ1ZSxcbiAgdG9FeHByZXNzaW9uOiB0cnVlLFxuICB0b0lkZW50aWZpZXI6IHRydWUsXG4gIHRvS2V5QWxpYXM6IHRydWUsXG4gIHRvU3RhdGVtZW50OiB0cnVlLFxuICB2YWx1ZVRvTm9kZTogdHJ1ZSxcbiAgYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uOiB0cnVlLFxuICBpbmhlcml0czogdHJ1ZSxcbiAgcHJlcGVuZFRvTWVtYmVyRXhwcmVzc2lvbjogdHJ1ZSxcbiAgcmVtb3ZlUHJvcGVydGllczogdHJ1ZSxcbiAgcmVtb3ZlUHJvcGVydGllc0RlZXA6IHRydWUsXG4gIHJlbW92ZVR5cGVEdXBsaWNhdGVzOiB0cnVlLFxuICBnZXRBc3NpZ25tZW50SWRlbnRpZmllcnM6IHRydWUsXG4gIGdldEJpbmRpbmdJZGVudGlmaWVyczogdHJ1ZSxcbiAgZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnM6IHRydWUsXG4gIGdldEZ1bmN0aW9uTmFtZTogdHJ1ZSxcbiAgdHJhdmVyc2U6IHRydWUsXG4gIHRyYXZlcnNlRmFzdDogdHJ1ZSxcbiAgc2hhbGxvd0VxdWFsOiB0cnVlLFxuICBpczogdHJ1ZSxcbiAgaXNCaW5kaW5nOiB0cnVlLFxuICBpc0Jsb2NrU2NvcGVkOiB0cnVlLFxuICBpc0ltbXV0YWJsZTogdHJ1ZSxcbiAgaXNMZXQ6IHRydWUsXG4gIGlzTm9kZTogdHJ1ZSxcbiAgaXNOb2Rlc0VxdWl2YWxlbnQ6IHRydWUsXG4gIGlzUGxhY2Vob2xkZXJUeXBlOiB0cnVlLFxuICBpc1JlZmVyZW5jZWQ6IHRydWUsXG4gIGlzU2NvcGU6IHRydWUsXG4gIGlzU3BlY2lmaWVyRGVmYXVsdDogdHJ1ZSxcbiAgaXNUeXBlOiB0cnVlLFxuICBpc1ZhbGlkRVMzSWRlbnRpZmllcjogdHJ1ZSxcbiAgaXNWYWxpZElkZW50aWZpZXI6IHRydWUsXG4gIGlzVmFyOiB0cnVlLFxuICBtYXRjaGVzUGF0dGVybjogdHJ1ZSxcbiAgdmFsaWRhdGU6IHRydWUsXG4gIGJ1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uOiB0cnVlLFxuICBfX2ludGVybmFsX19kZXByZWNhdGlvbldhcm5pbmc6IHRydWVcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2ludGVybmFsX19kZXByZWNhdGlvbldhcm5pbmdcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2RlcHJlY2F0aW9uV2FybmluZy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFkZENvbW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2FkZENvbW1lbnQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRDb21tZW50c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfYWRkQ29tbWVudHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhcHBlbmRUb01lbWJlckV4cHJlc3Npb25cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2FwcGVuZFRvTWVtYmVyRXhwcmVzc2lvbi5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFzc2VydE5vZGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Fzc2VydE5vZGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWlsZE1hdGNoTWVtYmVyRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb24uZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbG9uZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY2xvbmUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbG9uZURlZXBcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Nsb25lRGVlcC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNsb25lRGVlcFdpdGhvdXRMb2NcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Nsb25lRGVlcFdpdGhvdXRMb2MuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbG9uZU5vZGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Nsb25lTm9kZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNsb25lV2l0aG91dExvY1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY2xvbmVXaXRob3V0TG9jLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlRmxvd1VuaW9uVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY3JlYXRlRmxvd1VuaW9uVHlwZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVRTVW5pb25UeXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVUU1VuaW9uVHlwZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVR5cGVBbm5vdGF0aW9uQmFzZWRPblR5cGVvZlwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlVW5pb25UeXBlQW5ub3RhdGlvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY3JlYXRlRmxvd1VuaW9uVHlwZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuc3VyZUJsb2NrXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lbnN1cmVCbG9jay5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldEFzc2lnbm1lbnRJZGVudGlmaWVyc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZ2V0QXNzaWdubWVudElkZW50aWZpZXJzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0QmluZGluZ0lkZW50aWZpZXJzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9nZXRCaW5kaW5nSWRlbnRpZmllcnMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRGdW5jdGlvbk5hbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2dldEZ1bmN0aW9uTmFtZS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE91dGVyQmluZGluZ0lkZW50aWZpZXJzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9nZXRPdXRlckJpbmRpbmdJZGVudGlmaWVycy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImluaGVyaXRJbm5lckNvbW1lbnRzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmhlcml0SW5uZXJDb21tZW50cy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImluaGVyaXRMZWFkaW5nQ29tbWVudHNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2luaGVyaXRMZWFkaW5nQ29tbWVudHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbmhlcml0VHJhaWxpbmdDb21tZW50c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbmhlcml0c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaW5oZXJpdHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbmhlcml0c0NvbW1lbnRzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pbmhlcml0c0NvbW1lbnRzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNCaW5kaW5nXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0JpbmRpbmcuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0Jsb2NrU2NvcGVkXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc0Jsb2NrU2NvcGVkLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNJbW11dGFibGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzSW1tdXRhYmxlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNMZXRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzTGV0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOb2RlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9pc05vZGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc05vZGVzRXF1aXZhbGVudFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNOb2Rlc0VxdWl2YWxlbnQuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1BsYWNlaG9sZGVyVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNQbGFjZWhvbGRlclR5cGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1JlZmVyZW5jZWRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzUmVmZXJlbmNlZC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzU2NvcGVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzU2NvcGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1NwZWNpZmllckRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzU3BlY2lmaWVyRGVmYXVsdC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVHlwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNUeXBlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNWYWxpZEVTM0lkZW50aWZpZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzVmFsaWRFUzNJZGVudGlmaWVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNWYWxpZElkZW50aWZpZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzVmFsaWRJZGVudGlmaWVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNWYXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzVmFyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWF0Y2hlc1BhdHRlcm5cIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX21hdGNoZXNQYXR0ZXJuLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJlcGVuZFRvTWVtYmVyRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcHJlcGVuZFRvTWVtYmVyRXhwcmVzc2lvbi5kZWZhdWx0O1xuICB9XG59KTtcbmV4cG9ydHMucmVhY3QgPSB2b2lkIDA7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW1vdmVDb21tZW50c1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfcmVtb3ZlQ29tbWVudHMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW1vdmVQcm9wZXJ0aWVzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9yZW1vdmVQcm9wZXJ0aWVzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlUHJvcGVydGllc0RlZXBcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JlbW92ZVByb3BlcnRpZXNEZWVwLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlVHlwZUR1cGxpY2F0ZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3JlbW92ZVR5cGVEdXBsaWNhdGVzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2hhbGxvd0VxdWFsXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9zaGFsbG93RXF1YWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0JpbmRpbmdJZGVudGlmaWVyTmFtZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdG9CaW5kaW5nSWRlbnRpZmllck5hbWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0Jsb2NrXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90b0Jsb2NrLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9Db21wdXRlZEtleVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdG9Db21wdXRlZEtleS5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvRXhwcmVzc2lvblwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdG9FeHByZXNzaW9uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9JZGVudGlmaWVyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90b0lkZW50aWZpZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0tleUFsaWFzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90b0tleUFsaWFzLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9TdGF0ZW1lbnRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RvU3RhdGVtZW50LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHJhdmVyc2VcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3RyYXZlcnNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHJhdmVyc2VGYXN0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90cmF2ZXJzZUZhc3QuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2YWxpZGF0ZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdmFsaWRhdGUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2YWx1ZVRvTm9kZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdmFsdWVUb05vZGUuZGVmYXVsdDtcbiAgfVxufSk7XG52YXIgX2lzUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL3JlYWN0L2lzUmVhY3RDb21wb25lbnQuanNcIik7XG52YXIgX2lzQ29tcGF0VGFnID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9yZWFjdC9pc0NvbXBhdFRhZy5qc1wiKTtcbnZhciBfYnVpbGRDaGlsZHJlbiA9IHJlcXVpcmUoXCIuL2J1aWxkZXJzL3JlYWN0L2J1aWxkQ2hpbGRyZW4uanNcIik7XG52YXIgX2Fzc2VydE5vZGUgPSByZXF1aXJlKFwiLi9hc3NlcnRzL2Fzc2VydE5vZGUuanNcIik7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4vYXNzZXJ0cy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG5PYmplY3Qua2V5cyhfaW5kZXgpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9pbmRleFtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9pbmRleFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfY3JlYXRlVHlwZUFubm90YXRpb25CYXNlZE9uVHlwZW9mID0gcmVxdWlyZShcIi4vYnVpbGRlcnMvZmxvdy9jcmVhdGVUeXBlQW5ub3RhdGlvbkJhc2VkT25UeXBlb2YuanNcIik7XG52YXIgX2NyZWF0ZUZsb3dVbmlvblR5cGUgPSByZXF1aXJlKFwiLi9idWlsZGVycy9mbG93L2NyZWF0ZUZsb3dVbmlvblR5cGUuanNcIik7XG52YXIgX2NyZWF0ZVRTVW5pb25UeXBlID0gcmVxdWlyZShcIi4vYnVpbGRlcnMvdHlwZXNjcmlwdC9jcmVhdGVUU1VuaW9uVHlwZS5qc1wiKTtcbnZhciBfaW5kZXgyID0gcmVxdWlyZShcIi4vYnVpbGRlcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xuT2JqZWN0LmtleXMoX2luZGV4MikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2luZGV4MltrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9pbmRleDJba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX3VwcGVyY2FzZSA9IHJlcXVpcmUoXCIuL2J1aWxkZXJzL2dlbmVyYXRlZC91cHBlcmNhc2UuanNcIik7XG5PYmplY3Qua2V5cyhfdXBwZXJjYXNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfdXBwZXJjYXNlW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3VwcGVyY2FzZVtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfcHJvZHVjdGlvbnMgPSByZXF1aXJlKFwiLi9idWlsZGVycy9wcm9kdWN0aW9ucy5qc1wiKTtcbk9iamVjdC5rZXlzKF9wcm9kdWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3Byb2R1Y3Rpb25zW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3Byb2R1Y3Rpb25zW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9jbG9uZU5vZGUgPSByZXF1aXJlKFwiLi9jbG9uZS9jbG9uZU5vZGUuanNcIik7XG52YXIgX2Nsb25lID0gcmVxdWlyZShcIi4vY2xvbmUvY2xvbmUuanNcIik7XG52YXIgX2Nsb25lRGVlcCA9IHJlcXVpcmUoXCIuL2Nsb25lL2Nsb25lRGVlcC5qc1wiKTtcbnZhciBfY2xvbmVEZWVwV2l0aG91dExvYyA9IHJlcXVpcmUoXCIuL2Nsb25lL2Nsb25lRGVlcFdpdGhvdXRMb2MuanNcIik7XG52YXIgX2Nsb25lV2l0aG91dExvYyA9IHJlcXVpcmUoXCIuL2Nsb25lL2Nsb25lV2l0aG91dExvYy5qc1wiKTtcbnZhciBfYWRkQ29tbWVudCA9IHJlcXVpcmUoXCIuL2NvbW1lbnRzL2FkZENvbW1lbnQuanNcIik7XG52YXIgX2FkZENvbW1lbnRzID0gcmVxdWlyZShcIi4vY29tbWVudHMvYWRkQ29tbWVudHMuanNcIik7XG52YXIgX2luaGVyaXRJbm5lckNvbW1lbnRzID0gcmVxdWlyZShcIi4vY29tbWVudHMvaW5oZXJpdElubmVyQ29tbWVudHMuanNcIik7XG52YXIgX2luaGVyaXRMZWFkaW5nQ29tbWVudHMgPSByZXF1aXJlKFwiLi9jb21tZW50cy9pbmhlcml0TGVhZGluZ0NvbW1lbnRzLmpzXCIpO1xudmFyIF9pbmhlcml0c0NvbW1lbnRzID0gcmVxdWlyZShcIi4vY29tbWVudHMvaW5oZXJpdHNDb21tZW50cy5qc1wiKTtcbnZhciBfaW5oZXJpdFRyYWlsaW5nQ29tbWVudHMgPSByZXF1aXJlKFwiLi9jb21tZW50cy9pbmhlcml0VHJhaWxpbmdDb21tZW50cy5qc1wiKTtcbnZhciBfcmVtb3ZlQ29tbWVudHMgPSByZXF1aXJlKFwiLi9jb21tZW50cy9yZW1vdmVDb21tZW50cy5qc1wiKTtcbnZhciBfaW5kZXgzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbk9iamVjdC5rZXlzKF9pbmRleDMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX2V4cG9ydE5hbWVzLCBrZXkpKSByZXR1cm47XG4gIGlmIChrZXkgaW4gZXhwb3J0cyAmJiBleHBvcnRzW2tleV0gPT09IF9pbmRleDNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfaW5kZXgzW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9pbmRleDQgPSByZXF1aXJlKFwiLi9jb25zdGFudHMvaW5kZXguanNcIik7XG5PYmplY3Qua2V5cyhfaW5kZXg0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfaW5kZXg0W2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2luZGV4NFtrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfZW5zdXJlQmxvY2sgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL2Vuc3VyZUJsb2NrLmpzXCIpO1xudmFyIF90b0JpbmRpbmdJZGVudGlmaWVyTmFtZSA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdG9CaW5kaW5nSWRlbnRpZmllck5hbWUuanNcIik7XG52YXIgX3RvQmxvY2sgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL3RvQmxvY2suanNcIik7XG52YXIgX3RvQ29tcHV0ZWRLZXkgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL3RvQ29tcHV0ZWRLZXkuanNcIik7XG52YXIgX3RvRXhwcmVzc2lvbiA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdG9FeHByZXNzaW9uLmpzXCIpO1xudmFyIF90b0lkZW50aWZpZXIgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL3RvSWRlbnRpZmllci5qc1wiKTtcbnZhciBfdG9LZXlBbGlhcyA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdG9LZXlBbGlhcy5qc1wiKTtcbnZhciBfdG9TdGF0ZW1lbnQgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL3RvU3RhdGVtZW50LmpzXCIpO1xudmFyIF92YWx1ZVRvTm9kZSA9IHJlcXVpcmUoXCIuL2NvbnZlcnRlcnMvdmFsdWVUb05vZGUuanNcIik7XG52YXIgX2luZGV4NSA9IHJlcXVpcmUoXCIuL2RlZmluaXRpb25zL2luZGV4LmpzXCIpO1xuT2JqZWN0LmtleXMoX2luZGV4NSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX2luZGV4NVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9pbmRleDVba2V5XTtcbiAgICB9XG4gIH0pO1xufSk7XG52YXIgX2FwcGVuZFRvTWVtYmVyRXhwcmVzc2lvbiA9IHJlcXVpcmUoXCIuL21vZGlmaWNhdGlvbnMvYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uLmpzXCIpO1xudmFyIF9pbmhlcml0cyA9IHJlcXVpcmUoXCIuL21vZGlmaWNhdGlvbnMvaW5oZXJpdHMuanNcIik7XG52YXIgX3ByZXBlbmRUb01lbWJlckV4cHJlc3Npb24gPSByZXF1aXJlKFwiLi9tb2RpZmljYXRpb25zL3ByZXBlbmRUb01lbWJlckV4cHJlc3Npb24uanNcIik7XG52YXIgX3JlbW92ZVByb3BlcnRpZXMgPSByZXF1aXJlKFwiLi9tb2RpZmljYXRpb25zL3JlbW92ZVByb3BlcnRpZXMuanNcIik7XG52YXIgX3JlbW92ZVByb3BlcnRpZXNEZWVwID0gcmVxdWlyZShcIi4vbW9kaWZpY2F0aW9ucy9yZW1vdmVQcm9wZXJ0aWVzRGVlcC5qc1wiKTtcbnZhciBfcmVtb3ZlVHlwZUR1cGxpY2F0ZXMgPSByZXF1aXJlKFwiLi9tb2RpZmljYXRpb25zL2Zsb3cvcmVtb3ZlVHlwZUR1cGxpY2F0ZXMuanNcIik7XG52YXIgX2dldEFzc2lnbm1lbnRJZGVudGlmaWVycyA9IHJlcXVpcmUoXCIuL3JldHJpZXZlcnMvZ2V0QXNzaWdubWVudElkZW50aWZpZXJzLmpzXCIpO1xudmFyIF9nZXRCaW5kaW5nSWRlbnRpZmllcnMgPSByZXF1aXJlKFwiLi9yZXRyaWV2ZXJzL2dldEJpbmRpbmdJZGVudGlmaWVycy5qc1wiKTtcbnZhciBfZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnMgPSByZXF1aXJlKFwiLi9yZXRyaWV2ZXJzL2dldE91dGVyQmluZGluZ0lkZW50aWZpZXJzLmpzXCIpO1xudmFyIF9nZXRGdW5jdGlvbk5hbWUgPSByZXF1aXJlKFwiLi9yZXRyaWV2ZXJzL2dldEZ1bmN0aW9uTmFtZS5qc1wiKTtcbnZhciBfdHJhdmVyc2UgPSByZXF1aXJlKFwiLi90cmF2ZXJzZS90cmF2ZXJzZS5qc1wiKTtcbk9iamVjdC5rZXlzKF90cmF2ZXJzZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX3RyYXZlcnNlW2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RyYXZlcnNlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF90cmF2ZXJzZUZhc3QgPSByZXF1aXJlKFwiLi90cmF2ZXJzZS90cmF2ZXJzZUZhc3QuanNcIik7XG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoXCIuL3V0aWxzL3NoYWxsb3dFcXVhbC5qc1wiKTtcbnZhciBfaXMgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzLmpzXCIpO1xudmFyIF9pc0JpbmRpbmcgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzQmluZGluZy5qc1wiKTtcbnZhciBfaXNCbG9ja1Njb3BlZCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNCbG9ja1Njb3BlZC5qc1wiKTtcbnZhciBfaXNJbW11dGFibGUgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzSW1tdXRhYmxlLmpzXCIpO1xudmFyIF9pc0xldCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNMZXQuanNcIik7XG52YXIgX2lzTm9kZSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNOb2RlLmpzXCIpO1xudmFyIF9pc05vZGVzRXF1aXZhbGVudCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNOb2Rlc0VxdWl2YWxlbnQuanNcIik7XG52YXIgX2lzUGxhY2Vob2xkZXJUeXBlID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9pc1BsYWNlaG9sZGVyVHlwZS5qc1wiKTtcbnZhciBfaXNSZWZlcmVuY2VkID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9pc1JlZmVyZW5jZWQuanNcIik7XG52YXIgX2lzU2NvcGUgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzU2NvcGUuanNcIik7XG52YXIgX2lzU3BlY2lmaWVyRGVmYXVsdCA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNTcGVjaWZpZXJEZWZhdWx0LmpzXCIpO1xudmFyIF9pc1R5cGUgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzVHlwZS5qc1wiKTtcbnZhciBfaXNWYWxpZEVTM0lkZW50aWZpZXIgPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL2lzVmFsaWRFUzNJZGVudGlmaWVyLmpzXCIpO1xudmFyIF9pc1ZhbGlkSWRlbnRpZmllciA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvaXNWYWxpZElkZW50aWZpZXIuanNcIik7XG52YXIgX2lzVmFyID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9pc1Zhci5qc1wiKTtcbnZhciBfbWF0Y2hlc1BhdHRlcm4gPSByZXF1aXJlKFwiLi92YWxpZGF0b3JzL21hdGNoZXNQYXR0ZXJuLmpzXCIpO1xudmFyIF92YWxpZGF0ZSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRvcnMvdmFsaWRhdGUuanNcIik7XG52YXIgX2J1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9idWlsZE1hdGNoTWVtYmVyRXhwcmVzc2lvbi5qc1wiKTtcbnZhciBfaW5kZXg2ID0gcmVxdWlyZShcIi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG5PYmplY3Qua2V5cyhfaW5kZXg2KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9leHBvcnROYW1lcywga2V5KSkgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfaW5kZXg2W2tleV0pIHJldHVybjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2luZGV4NltrZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbnZhciBfZGVwcmVjYXRpb25XYXJuaW5nID0gcmVxdWlyZShcIi4vdXRpbHMvZGVwcmVjYXRpb25XYXJuaW5nLmpzXCIpO1xuY29uc3QgcmVhY3QgPSBleHBvcnRzLnJlYWN0ID0ge1xuICBpc1JlYWN0Q29tcG9uZW50OiBfaXNSZWFjdENvbXBvbmVudC5kZWZhdWx0LFxuICBpc0NvbXBhdFRhZzogX2lzQ29tcGF0VGFnLmRlZmF1bHQsXG4gIGJ1aWxkQ2hpbGRyZW46IF9idWlsZENoaWxkcmVuLmRlZmF1bHRcbn07XG57XG4gIGV4cG9ydHMudG9TZXF1ZW5jZUV4cHJlc3Npb24gPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzL3RvU2VxdWVuY2VFeHByZXNzaW9uLmpzXCIpLmRlZmF1bHQ7XG59XG5pZiAocHJvY2Vzcy5lbnYuQkFCRUxfVFlQRVNfOF9CUkVBS0lORykge1xuICBjb25zb2xlLndhcm4oXCJCQUJFTF9UWVBFU184X0JSRUFLSU5HIGlzIG5vdCBzdXBwb3J0ZWQgYW55bW9yZS4gVXNlIHRoZSBsYXRlc3QgQmFiZWwgOC4wLjAgcHJlLXJlbGVhc2UgaW5zdGVhZCFcIik7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2352\n')},74001:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = appendToMemberExpression;\nvar _index = __webpack_require__(48079);\nfunction appendToMemberExpression(member, append, computed = false) {\n  member.object = (0, _index.memberExpression)(member.object, member.property, member.computed);\n  member.property = append;\n  member.computed = !!computed;\n  return member;\n}\n\n//# sourceMappingURL=appendToMemberExpression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQwMDEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBZ0M7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL21vZGlmaWNhdGlvbnMvYXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uLmpzP2ExMTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhcHBlbmRUb01lbWJlckV4cHJlc3Npb247XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uL2J1aWxkZXJzL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIGFwcGVuZFRvTWVtYmVyRXhwcmVzc2lvbihtZW1iZXIsIGFwcGVuZCwgY29tcHV0ZWQgPSBmYWxzZSkge1xuICBtZW1iZXIub2JqZWN0ID0gKDAsIF9pbmRleC5tZW1iZXJFeHByZXNzaW9uKShtZW1iZXIub2JqZWN0LCBtZW1iZXIucHJvcGVydHksIG1lbWJlci5jb21wdXRlZCk7XG4gIG1lbWJlci5wcm9wZXJ0eSA9IGFwcGVuZDtcbiAgbWVtYmVyLmNvbXB1dGVkID0gISFjb21wdXRlZDtcbiAgcmV0dXJuIG1lbWJlcjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwZW5kVG9NZW1iZXJFeHByZXNzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74001\n')},95237:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = removeTypeDuplicates;\nvar _index = __webpack_require__(98960);\nfunction getQualifiedName(node) {\n  return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\nfunction removeTypeDuplicates(nodesIn) {\n  const nodes = Array.from(nodesIn);\n  const generics = new Map();\n  const bases = new Map();\n  const typeGroups = new Set();\n  const types = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n    if (types.includes(node)) {\n      continue;\n    }\n    if ((0, _index.isAnyTypeAnnotation)(node)) {\n      return [node];\n    }\n    if ((0, _index.isFlowBaseAnnotation)(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n    if ((0, _index.isUnionTypeAnnotation)(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n    if ((0, _index.isGenericTypeAnnotation)(node)) {\n      const name = getQualifiedName(node.id);\n      if (generics.has(name)) {\n        let existing = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n      continue;\n    }\n    types.push(node);\n  }\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n  return types;\n}\n\n//# sourceMappingURL=removeTypeDuplicates.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUyMzcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBcUM7QUFDMUQ7QUFDQSx5REFBeUQsYUFBYSxHQUFHLHFDQUFxQztBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL21vZGlmaWNhdGlvbnMvZmxvdy9yZW1vdmVUeXBlRHVwbGljYXRlcy5qcz85ODc1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlVHlwZUR1cGxpY2F0ZXM7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uLy4uL3ZhbGlkYXRvcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gZ2V0UXVhbGlmaWVkTmFtZShub2RlKSB7XG4gIHJldHVybiAoMCwgX2luZGV4LmlzSWRlbnRpZmllcikobm9kZSkgPyBub2RlLm5hbWUgOiBgJHtub2RlLmlkLm5hbWV9LiR7Z2V0UXVhbGlmaWVkTmFtZShub2RlLnF1YWxpZmljYXRpb24pfWA7XG59XG5mdW5jdGlvbiByZW1vdmVUeXBlRHVwbGljYXRlcyhub2Rlc0luKSB7XG4gIGNvbnN0IG5vZGVzID0gQXJyYXkuZnJvbShub2Rlc0luKTtcbiAgY29uc3QgZ2VuZXJpY3MgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IGJhc2VzID0gbmV3IE1hcCgpO1xuICBjb25zdCB0eXBlR3JvdXBzID0gbmV3IFNldCgpO1xuICBjb25zdCB0eXBlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmICghbm9kZSkgY29udGludWU7XG4gICAgaWYgKHR5cGVzLmluY2x1ZGVzKG5vZGUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCgwLCBfaW5kZXguaXNBbnlUeXBlQW5ub3RhdGlvbikobm9kZSkpIHtcbiAgICAgIHJldHVybiBbbm9kZV07XG4gICAgfVxuICAgIGlmICgoMCwgX2luZGV4LmlzRmxvd0Jhc2VBbm5vdGF0aW9uKShub2RlKSkge1xuICAgICAgYmFzZXMuc2V0KG5vZGUudHlwZSwgbm9kZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCgwLCBfaW5kZXguaXNVbmlvblR5cGVBbm5vdGF0aW9uKShub2RlKSkge1xuICAgICAgaWYgKCF0eXBlR3JvdXBzLmhhcyhub2RlLnR5cGVzKSkge1xuICAgICAgICBub2Rlcy5wdXNoKC4uLm5vZGUudHlwZXMpO1xuICAgICAgICB0eXBlR3JvdXBzLmFkZChub2RlLnR5cGVzKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoKDAsIF9pbmRleC5pc0dlbmVyaWNUeXBlQW5ub3RhdGlvbikobm9kZSkpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBnZXRRdWFsaWZpZWROYW1lKG5vZGUuaWQpO1xuICAgICAgaWYgKGdlbmVyaWNzLmhhcyhuYW1lKSkge1xuICAgICAgICBsZXQgZXhpc3RpbmcgPSBnZW5lcmljcy5nZXQobmFtZSk7XG4gICAgICAgIGlmIChleGlzdGluZy50eXBlUGFyYW1ldGVycykge1xuICAgICAgICAgIGlmIChub2RlLnR5cGVQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBleGlzdGluZy50eXBlUGFyYW1ldGVycy5wYXJhbXMucHVzaCguLi5ub2RlLnR5cGVQYXJhbWV0ZXJzLnBhcmFtcyk7XG4gICAgICAgICAgICBleGlzdGluZy50eXBlUGFyYW1ldGVycy5wYXJhbXMgPSByZW1vdmVUeXBlRHVwbGljYXRlcyhleGlzdGluZy50eXBlUGFyYW1ldGVycy5wYXJhbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGlzdGluZyA9IG5vZGUudHlwZVBhcmFtZXRlcnM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlbmVyaWNzLnNldChuYW1lLCBub2RlKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0eXBlcy5wdXNoKG5vZGUpO1xuICB9XG4gIGZvciAoY29uc3QgWywgYmFzZVR5cGVdIG9mIGJhc2VzKSB7XG4gICAgdHlwZXMucHVzaChiYXNlVHlwZSk7XG4gIH1cbiAgZm9yIChjb25zdCBbLCBnZW5lcmljTmFtZV0gb2YgZ2VuZXJpY3MpIHtcbiAgICB0eXBlcy5wdXNoKGdlbmVyaWNOYW1lKTtcbiAgfVxuICByZXR1cm4gdHlwZXM7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbW92ZVR5cGVEdXBsaWNhdGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95237\n')},89564:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = inherits;\nvar _index = __webpack_require__(93422);\nvar _inheritsComments = __webpack_require__(18125);\nfunction inherits(child, parent) {\n  if (!child || !parent) return child;\n  for (const key of _index.INHERIT_KEYS.optional) {\n    if (child[key] == null) {\n      child[key] = parent[key];\n    }\n  }\n  for (const key of Object.keys(parent)) {\n    if (key[0] === "_" && key !== "__clone") {\n      child[key] = parent[key];\n    }\n  }\n  for (const key of _index.INHERIT_KEYS.force) {\n    child[key] = parent[key];\n  }\n  (0, _inheritsComments.default)(child, parent);\n  return child;\n}\n\n//# sourceMappingURL=inherits.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODk1NjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBdUI7QUFDNUMsd0JBQXdCLG1CQUFPLENBQUMsS0FBaUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL21vZGlmaWNhdGlvbnMvaW5oZXJpdHMuanM/MGFlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluaGVyaXRzO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvaW5kZXguanNcIik7XG52YXIgX2luaGVyaXRzQ29tbWVudHMgPSByZXF1aXJlKFwiLi4vY29tbWVudHMvaW5oZXJpdHNDb21tZW50cy5qc1wiKTtcbmZ1bmN0aW9uIGluaGVyaXRzKGNoaWxkLCBwYXJlbnQpIHtcbiAgaWYgKCFjaGlsZCB8fCAhcGFyZW50KSByZXR1cm4gY2hpbGQ7XG4gIGZvciAoY29uc3Qga2V5IG9mIF9pbmRleC5JTkhFUklUX0tFWVMub3B0aW9uYWwpIHtcbiAgICBpZiAoY2hpbGRba2V5XSA9PSBudWxsKSB7XG4gICAgICBjaGlsZFtrZXldID0gcGFyZW50W2tleV07XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHBhcmVudCkpIHtcbiAgICBpZiAoa2V5WzBdID09PSBcIl9cIiAmJiBrZXkgIT09IFwiX19jbG9uZVwiKSB7XG4gICAgICBjaGlsZFtrZXldID0gcGFyZW50W2tleV07XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3Qga2V5IG9mIF9pbmRleC5JTkhFUklUX0tFWVMuZm9yY2UpIHtcbiAgICBjaGlsZFtrZXldID0gcGFyZW50W2tleV07XG4gIH1cbiAgKDAsIF9pbmhlcml0c0NvbW1lbnRzLmRlZmF1bHQpKGNoaWxkLCBwYXJlbnQpO1xuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaGVyaXRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///89564\n')},96219:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = prependToMemberExpression;\nvar _index = __webpack_require__(48079);\nvar _index2 = __webpack_require__(2352);\nfunction prependToMemberExpression(member, prepend) {\n  if ((0, _index2.isSuper)(member.object)) {\n    throw new Error("Cannot prepend node to super property access (`super.foo`).");\n  }\n  member.object = (0, _index.memberExpression)(prepend, member.object);\n  return member;\n}\n\n//# sourceMappingURL=prependToMemberExpression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYyMTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBZ0M7QUFDckQsY0FBYyxtQkFBTyxDQUFDLElBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvbW9kaWZpY2F0aW9ucy9wcmVwZW5kVG9NZW1iZXJFeHByZXNzaW9uLmpzPzBlNzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVwZW5kVG9NZW1iZXJFeHByZXNzaW9uO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi9idWlsZGVycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX2luZGV4MiA9IHJlcXVpcmUoXCIuLi9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIHByZXBlbmRUb01lbWJlckV4cHJlc3Npb24obWVtYmVyLCBwcmVwZW5kKSB7XG4gIGlmICgoMCwgX2luZGV4Mi5pc1N1cGVyKShtZW1iZXIub2JqZWN0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBwcmVwZW5kIG5vZGUgdG8gc3VwZXIgcHJvcGVydHkgYWNjZXNzIChgc3VwZXIuZm9vYCkuXCIpO1xuICB9XG4gIG1lbWJlci5vYmplY3QgPSAoMCwgX2luZGV4Lm1lbWJlckV4cHJlc3Npb24pKHByZXBlbmQsIG1lbWJlci5vYmplY3QpO1xuICByZXR1cm4gbWVtYmVyO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVwZW5kVG9NZW1iZXJFeHByZXNzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96219\n')},85333:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = removeProperties;\nvar _index = __webpack_require__(93422);\nconst CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];\nconst CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];\nfunction removeProperties(node, opts = {}) {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    if (node[key] != null) node[key] = undefined;\n  }\n  for (const key of Object.keys(node)) {\n    if (key[0] === "_" && node[key] != null) node[key] = undefined;\n  }\n  const symbols = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    node[sym] = null;\n  }\n}\n\n//# sourceMappingURL=removeProperties.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUzMzMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBdUI7QUFDNUM7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvbW9kaWZpY2F0aW9ucy9yZW1vdmVQcm9wZXJ0aWVzLmpzP2M3OGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVQcm9wZXJ0aWVzO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvaW5kZXguanNcIik7XG5jb25zdCBDTEVBUl9LRVlTID0gW1widG9rZW5zXCIsIFwic3RhcnRcIiwgXCJlbmRcIiwgXCJsb2NcIiwgXCJyYXdcIiwgXCJyYXdWYWx1ZVwiXTtcbmNvbnN0IENMRUFSX0tFWVNfUExVU19DT01NRU5UUyA9IFsuLi5faW5kZXguQ09NTUVOVF9LRVlTLCBcImNvbW1lbnRzXCIsIC4uLkNMRUFSX0tFWVNdO1xuZnVuY3Rpb24gcmVtb3ZlUHJvcGVydGllcyhub2RlLCBvcHRzID0ge30pIHtcbiAgY29uc3QgbWFwID0gb3B0cy5wcmVzZXJ2ZUNvbW1lbnRzID8gQ0xFQVJfS0VZUyA6IENMRUFSX0tFWVNfUExVU19DT01NRU5UUztcbiAgZm9yIChjb25zdCBrZXkgb2YgbWFwKSB7XG4gICAgaWYgKG5vZGVba2V5XSAhPSBudWxsKSBub2RlW2tleV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobm9kZSkpIHtcbiAgICBpZiAoa2V5WzBdID09PSBcIl9cIiAmJiBub2RlW2tleV0gIT0gbnVsbCkgbm9kZVtrZXldID0gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG5vZGUpO1xuICBmb3IgKGNvbnN0IHN5bSBvZiBzeW1ib2xzKSB7XG4gICAgbm9kZVtzeW1dID0gbnVsbDtcbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmVQcm9wZXJ0aWVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85333\n')},87639:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = removePropertiesDeep;\nvar _traverseFast = __webpack_require__(58943);\nvar _removeProperties = __webpack_require__(85333);\nfunction removePropertiesDeep(tree, opts) {\n  (0, _traverseFast.default)(tree, _removeProperties.default, opts);\n  return tree;\n}\n\n//# sourceMappingURL=removePropertiesDeep.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODc2MzkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixvQkFBb0IsbUJBQU8sQ0FBQyxLQUE2QjtBQUN6RCx3QkFBd0IsbUJBQU8sQ0FBQyxLQUF1QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9tb2RpZmljYXRpb25zL3JlbW92ZVByb3BlcnRpZXNEZWVwLmpzPzdkNjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVQcm9wZXJ0aWVzRGVlcDtcbnZhciBfdHJhdmVyc2VGYXN0ID0gcmVxdWlyZShcIi4uL3RyYXZlcnNlL3RyYXZlcnNlRmFzdC5qc1wiKTtcbnZhciBfcmVtb3ZlUHJvcGVydGllcyA9IHJlcXVpcmUoXCIuL3JlbW92ZVByb3BlcnRpZXMuanNcIik7XG5mdW5jdGlvbiByZW1vdmVQcm9wZXJ0aWVzRGVlcCh0cmVlLCBvcHRzKSB7XG4gICgwLCBfdHJhdmVyc2VGYXN0LmRlZmF1bHQpKHRyZWUsIF9yZW1vdmVQcm9wZXJ0aWVzLmRlZmF1bHQsIG9wdHMpO1xuICByZXR1cm4gdHJlZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlUHJvcGVydGllc0RlZXAuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87639\n')},78812:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = removeTypeDuplicates;\nvar _index = __webpack_require__(98960);\nfunction getQualifiedName(node) {\n  return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\nfunction removeTypeDuplicates(nodesIn) {\n  const nodes = Array.from(nodesIn);\n  const generics = new Map();\n  const bases = new Map();\n  const typeGroups = new Set();\n  const types = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n    if (types.includes(node)) {\n      continue;\n    }\n    if ((0, _index.isTSAnyKeyword)(node)) {\n      return [node];\n    }\n    if ((0, _index.isTSBaseType)(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n    if ((0, _index.isTSUnionType)(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n    if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {\n      const name = getQualifiedName(node.typeName);\n      if (generics.has(name)) {\n        let existing = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params.push(...node.typeParameters.params);\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n      continue;\n    }\n    types.push(node);\n  }\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n  return types;\n}\n\n//# sourceMappingURL=removeTypeDuplicates.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg4MTIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBcUM7QUFDMUQ7QUFDQSx5REFBeUQsZ0JBQWdCLEdBQUcsNEJBQTRCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvbW9kaWZpY2F0aW9ucy90eXBlc2NyaXB0L3JlbW92ZVR5cGVEdXBsaWNhdGVzLmpzP2ZlN2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVUeXBlRHVwbGljYXRlcztcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG5mdW5jdGlvbiBnZXRRdWFsaWZpZWROYW1lKG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfaW5kZXguaXNJZGVudGlmaWVyKShub2RlKSA/IG5vZGUubmFtZSA6IGAke25vZGUucmlnaHQubmFtZX0uJHtnZXRRdWFsaWZpZWROYW1lKG5vZGUubGVmdCl9YDtcbn1cbmZ1bmN0aW9uIHJlbW92ZVR5cGVEdXBsaWNhdGVzKG5vZGVzSW4pIHtcbiAgY29uc3Qgbm9kZXMgPSBBcnJheS5mcm9tKG5vZGVzSW4pO1xuICBjb25zdCBnZW5lcmljcyA9IG5ldyBNYXAoKTtcbiAgY29uc3QgYmFzZXMgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IHR5cGVHcm91cHMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHR5cGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgaWYgKCFub2RlKSBjb250aW51ZTtcbiAgICBpZiAodHlwZXMuaW5jbHVkZXMobm9kZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoKDAsIF9pbmRleC5pc1RTQW55S2V5d29yZCkobm9kZSkpIHtcbiAgICAgIHJldHVybiBbbm9kZV07XG4gICAgfVxuICAgIGlmICgoMCwgX2luZGV4LmlzVFNCYXNlVHlwZSkobm9kZSkpIHtcbiAgICAgIGJhc2VzLnNldChub2RlLnR5cGUsIG5vZGUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICgoMCwgX2luZGV4LmlzVFNVbmlvblR5cGUpKG5vZGUpKSB7XG4gICAgICBpZiAoIXR5cGVHcm91cHMuaGFzKG5vZGUudHlwZXMpKSB7XG4gICAgICAgIG5vZGVzLnB1c2goLi4ubm9kZS50eXBlcyk7XG4gICAgICAgIHR5cGVHcm91cHMuYWRkKG5vZGUudHlwZXMpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICgoMCwgX2luZGV4LmlzVFNUeXBlUmVmZXJlbmNlKShub2RlKSAmJiBub2RlLnR5cGVQYXJhbWV0ZXJzKSB7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0UXVhbGlmaWVkTmFtZShub2RlLnR5cGVOYW1lKTtcbiAgICAgIGlmIChnZW5lcmljcy5oYXMobmFtZSkpIHtcbiAgICAgICAgbGV0IGV4aXN0aW5nID0gZ2VuZXJpY3MuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoZXhpc3RpbmcudHlwZVBhcmFtZXRlcnMpIHtcbiAgICAgICAgICBpZiAobm9kZS50eXBlUGFyYW1ldGVycykge1xuICAgICAgICAgICAgZXhpc3RpbmcudHlwZVBhcmFtZXRlcnMucGFyYW1zLnB1c2goLi4ubm9kZS50eXBlUGFyYW1ldGVycy5wYXJhbXMpO1xuICAgICAgICAgICAgZXhpc3RpbmcudHlwZVBhcmFtZXRlcnMucGFyYW1zID0gcmVtb3ZlVHlwZUR1cGxpY2F0ZXMoZXhpc3RpbmcudHlwZVBhcmFtZXRlcnMucGFyYW1zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXhpc3RpbmcgPSBub2RlLnR5cGVQYXJhbWV0ZXJzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZW5lcmljcy5zZXQobmFtZSwgbm9kZSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdHlwZXMucHVzaChub2RlKTtcbiAgfVxuICBmb3IgKGNvbnN0IFssIGJhc2VUeXBlXSBvZiBiYXNlcykge1xuICAgIHR5cGVzLnB1c2goYmFzZVR5cGUpO1xuICB9XG4gIGZvciAoY29uc3QgWywgZ2VuZXJpY05hbWVdIG9mIGdlbmVyaWNzKSB7XG4gICAgdHlwZXMucHVzaChnZW5lcmljTmFtZSk7XG4gIH1cbiAgcmV0dXJuIHR5cGVzO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmVUeXBlRHVwbGljYXRlcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///78812\n')},1343:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = getAssignmentIdentifiers;\nfunction getAssignmentIdentifiers(node) {\n  const search = [].concat(node);\n  const ids = Object.create(null);\n  while (search.length) {\n    const id = search.pop();\n    if (!id) continue;\n    switch (id.type) {\n      case "ArrayPattern":\n        search.push(...id.elements);\n        break;\n      case "AssignmentExpression":\n      case "AssignmentPattern":\n      case "ForInStatement":\n      case "ForOfStatement":\n        search.push(id.left);\n        break;\n      case "ObjectPattern":\n        search.push(...id.properties);\n        break;\n      case "ObjectProperty":\n        search.push(id.value);\n        break;\n      case "RestElement":\n      case "UpdateExpression":\n        search.push(id.argument);\n        break;\n      case "UnaryExpression":\n        if (id.operator === "delete") {\n          search.push(id.argument);\n        }\n        break;\n      case "Identifier":\n        ids[id.name] = id;\n        break;\n      default:\n        break;\n    }\n  }\n  return ids;\n}\n\n//# sourceMappingURL=getAssignmentIdentifiers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0My5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3JldHJpZXZlcnMvZ2V0QXNzaWdubWVudElkZW50aWZpZXJzLmpzPzk1ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRBc3NpZ25tZW50SWRlbnRpZmllcnM7XG5mdW5jdGlvbiBnZXRBc3NpZ25tZW50SWRlbnRpZmllcnMobm9kZSkge1xuICBjb25zdCBzZWFyY2ggPSBbXS5jb25jYXQobm9kZSk7XG4gIGNvbnN0IGlkcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHdoaWxlIChzZWFyY2gubGVuZ3RoKSB7XG4gICAgY29uc3QgaWQgPSBzZWFyY2gucG9wKCk7XG4gICAgaWYgKCFpZCkgY29udGludWU7XG4gICAgc3dpdGNoIChpZC50eXBlKSB7XG4gICAgICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG4gICAgICAgIHNlYXJjaC5wdXNoKC4uLmlkLmVsZW1lbnRzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIjpcbiAgICAgIGNhc2UgXCJBc3NpZ25tZW50UGF0dGVyblwiOlxuICAgICAgY2FzZSBcIkZvckluU3RhdGVtZW50XCI6XG4gICAgICBjYXNlIFwiRm9yT2ZTdGF0ZW1lbnRcIjpcbiAgICAgICAgc2VhcmNoLnB1c2goaWQubGVmdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcbiAgICAgICAgc2VhcmNoLnB1c2goLi4uaWQucHJvcGVydGllcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIk9iamVjdFByb3BlcnR5XCI6XG4gICAgICAgIHNlYXJjaC5wdXNoKGlkLnZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiUmVzdEVsZW1lbnRcIjpcbiAgICAgIGNhc2UgXCJVcGRhdGVFeHByZXNzaW9uXCI6XG4gICAgICAgIHNlYXJjaC5wdXNoKGlkLmFyZ3VtZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiVW5hcnlFeHByZXNzaW9uXCI6XG4gICAgICAgIGlmIChpZC5vcGVyYXRvciA9PT0gXCJkZWxldGVcIikge1xuICAgICAgICAgIHNlYXJjaC5wdXNoKGlkLmFyZ3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJJZGVudGlmaWVyXCI6XG4gICAgICAgIGlkc1tpZC5uYW1lXSA9IGlkO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaWRzO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBc3NpZ25tZW50SWRlbnRpZmllcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1343\n')},70329:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = getBindingIdentifiers;\nvar _index = __webpack_require__(98960);\nfunction getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {\n  const search = [].concat(node);\n  const ids = Object.create(null);\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id))) {\n      continue;\n    }\n    if ((0, _index.isIdentifier)(id)) {\n      if (duplicates) {\n        const _ids = ids[id.name] = ids[id.name] || [];\n        _ids.push(id);\n      } else {\n        ids[id.name] = id;\n      }\n      continue;\n    }\n    if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {\n      if ((0, _index.isDeclaration)(id.declaration)) {\n        search.push(id.declaration);\n      }\n      continue;\n    }\n    if (outerOnly) {\n      if ((0, _index.isFunctionDeclaration)(id)) {\n        search.push(id.id);\n        continue;\n      }\n      if ((0, _index.isFunctionExpression)(id)) {\n        continue;\n      }\n    }\n    const keys = getBindingIdentifiers.keys[id.type];\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const nodes = id[key];\n        if (nodes) {\n          if (Array.isArray(nodes)) {\n            search.push(...nodes);\n          } else {\n            search.push(nodes);\n          }\n        }\n      }\n    }\n  }\n  return ids;\n}\nconst keys = {\n  DeclareClass: ["id"],\n  DeclareFunction: ["id"],\n  DeclareModule: ["id"],\n  DeclareVariable: ["id"],\n  DeclareInterface: ["id"],\n  DeclareTypeAlias: ["id"],\n  DeclareOpaqueType: ["id"],\n  InterfaceDeclaration: ["id"],\n  TypeAlias: ["id"],\n  OpaqueType: ["id"],\n  CatchClause: ["param"],\n  LabeledStatement: ["label"],\n  UnaryExpression: ["argument"],\n  AssignmentExpression: ["left"],\n  ImportSpecifier: ["local"],\n  ImportNamespaceSpecifier: ["local"],\n  ImportDefaultSpecifier: ["local"],\n  ImportDeclaration: ["specifiers"],\n  ExportSpecifier: ["exported"],\n  ExportNamespaceSpecifier: ["exported"],\n  ExportDefaultSpecifier: ["exported"],\n  FunctionDeclaration: ["id", "params"],\n  FunctionExpression: ["id", "params"],\n  ArrowFunctionExpression: ["params"],\n  ObjectMethod: ["params"],\n  ClassMethod: ["params"],\n  ClassPrivateMethod: ["params"],\n  ForInStatement: ["left"],\n  ForOfStatement: ["left"],\n  ClassDeclaration: ["id"],\n  ClassExpression: ["id"],\n  RestElement: ["argument"],\n  UpdateExpression: ["argument"],\n  ObjectProperty: ["value"],\n  AssignmentPattern: ["left"],\n  ArrayPattern: ["elements"],\n  ObjectPattern: ["properties"],\n  VariableDeclaration: ["declarations"],\n  VariableDeclarator: ["id"]\n};\ngetBindingIdentifiers.keys = keys;\n\n//# sourceMappingURL=getBindingIdentifiers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAzMjkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBa0M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGlCQUFpQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvcmV0cmlldmVycy9nZXRCaW5kaW5nSWRlbnRpZmllcnMuanM/N2ZkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldEJpbmRpbmdJZGVudGlmaWVycztcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vdmFsaWRhdG9ycy9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG5mdW5jdGlvbiBnZXRCaW5kaW5nSWRlbnRpZmllcnMobm9kZSwgZHVwbGljYXRlcywgb3V0ZXJPbmx5LCBuZXdCaW5kaW5nc09ubHkpIHtcbiAgY29uc3Qgc2VhcmNoID0gW10uY29uY2F0KG5vZGUpO1xuICBjb25zdCBpZHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB3aGlsZSAoc2VhcmNoLmxlbmd0aCkge1xuICAgIGNvbnN0IGlkID0gc2VhcmNoLnNoaWZ0KCk7XG4gICAgaWYgKCFpZCkgY29udGludWU7XG4gICAgaWYgKG5ld0JpbmRpbmdzT25seSAmJiAoKDAsIF9pbmRleC5pc0Fzc2lnbm1lbnRFeHByZXNzaW9uKShpZCkgfHwgKDAsIF9pbmRleC5pc1VuYXJ5RXhwcmVzc2lvbikoaWQpIHx8ICgwLCBfaW5kZXguaXNVcGRhdGVFeHByZXNzaW9uKShpZCkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCgwLCBfaW5kZXguaXNJZGVudGlmaWVyKShpZCkpIHtcbiAgICAgIGlmIChkdXBsaWNhdGVzKSB7XG4gICAgICAgIGNvbnN0IF9pZHMgPSBpZHNbaWQubmFtZV0gPSBpZHNbaWQubmFtZV0gfHwgW107XG4gICAgICAgIF9pZHMucHVzaChpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZHNbaWQubmFtZV0gPSBpZDtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoKDAsIF9pbmRleC5pc0V4cG9ydERlY2xhcmF0aW9uKShpZCkgJiYgISgwLCBfaW5kZXguaXNFeHBvcnRBbGxEZWNsYXJhdGlvbikoaWQpKSB7XG4gICAgICBpZiAoKDAsIF9pbmRleC5pc0RlY2xhcmF0aW9uKShpZC5kZWNsYXJhdGlvbikpIHtcbiAgICAgICAgc2VhcmNoLnB1c2goaWQuZGVjbGFyYXRpb24pO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChvdXRlck9ubHkpIHtcbiAgICAgIGlmICgoMCwgX2luZGV4LmlzRnVuY3Rpb25EZWNsYXJhdGlvbikoaWQpKSB7XG4gICAgICAgIHNlYXJjaC5wdXNoKGlkLmlkKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoKDAsIF9pbmRleC5pc0Z1bmN0aW9uRXhwcmVzc2lvbikoaWQpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBrZXlzID0gZ2V0QmluZGluZ0lkZW50aWZpZXJzLmtleXNbaWQudHlwZV07XG4gICAgaWYgKGtleXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBjb25zdCBub2RlcyA9IGlkW2tleV07XG4gICAgICAgIGlmIChub2Rlcykge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGVzKSkge1xuICAgICAgICAgICAgc2VhcmNoLnB1c2goLi4ubm9kZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWFyY2gucHVzaChub2Rlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBpZHM7XG59XG5jb25zdCBrZXlzID0ge1xuICBEZWNsYXJlQ2xhc3M6IFtcImlkXCJdLFxuICBEZWNsYXJlRnVuY3Rpb246IFtcImlkXCJdLFxuICBEZWNsYXJlTW9kdWxlOiBbXCJpZFwiXSxcbiAgRGVjbGFyZVZhcmlhYmxlOiBbXCJpZFwiXSxcbiAgRGVjbGFyZUludGVyZmFjZTogW1wiaWRcIl0sXG4gIERlY2xhcmVUeXBlQWxpYXM6IFtcImlkXCJdLFxuICBEZWNsYXJlT3BhcXVlVHlwZTogW1wiaWRcIl0sXG4gIEludGVyZmFjZURlY2xhcmF0aW9uOiBbXCJpZFwiXSxcbiAgVHlwZUFsaWFzOiBbXCJpZFwiXSxcbiAgT3BhcXVlVHlwZTogW1wiaWRcIl0sXG4gIENhdGNoQ2xhdXNlOiBbXCJwYXJhbVwiXSxcbiAgTGFiZWxlZFN0YXRlbWVudDogW1wibGFiZWxcIl0sXG4gIFVuYXJ5RXhwcmVzc2lvbjogW1wiYXJndW1lbnRcIl0sXG4gIEFzc2lnbm1lbnRFeHByZXNzaW9uOiBbXCJsZWZ0XCJdLFxuICBJbXBvcnRTcGVjaWZpZXI6IFtcImxvY2FsXCJdLFxuICBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI6IFtcImxvY2FsXCJdLFxuICBJbXBvcnREZWZhdWx0U3BlY2lmaWVyOiBbXCJsb2NhbFwiXSxcbiAgSW1wb3J0RGVjbGFyYXRpb246IFtcInNwZWNpZmllcnNcIl0sXG4gIEV4cG9ydFNwZWNpZmllcjogW1wiZXhwb3J0ZWRcIl0sXG4gIEV4cG9ydE5hbWVzcGFjZVNwZWNpZmllcjogW1wiZXhwb3J0ZWRcIl0sXG4gIEV4cG9ydERlZmF1bHRTcGVjaWZpZXI6IFtcImV4cG9ydGVkXCJdLFxuICBGdW5jdGlvbkRlY2xhcmF0aW9uOiBbXCJpZFwiLCBcInBhcmFtc1wiXSxcbiAgRnVuY3Rpb25FeHByZXNzaW9uOiBbXCJpZFwiLCBcInBhcmFtc1wiXSxcbiAgQXJyb3dGdW5jdGlvbkV4cHJlc3Npb246IFtcInBhcmFtc1wiXSxcbiAgT2JqZWN0TWV0aG9kOiBbXCJwYXJhbXNcIl0sXG4gIENsYXNzTWV0aG9kOiBbXCJwYXJhbXNcIl0sXG4gIENsYXNzUHJpdmF0ZU1ldGhvZDogW1wicGFyYW1zXCJdLFxuICBGb3JJblN0YXRlbWVudDogW1wibGVmdFwiXSxcbiAgRm9yT2ZTdGF0ZW1lbnQ6IFtcImxlZnRcIl0sXG4gIENsYXNzRGVjbGFyYXRpb246IFtcImlkXCJdLFxuICBDbGFzc0V4cHJlc3Npb246IFtcImlkXCJdLFxuICBSZXN0RWxlbWVudDogW1wiYXJndW1lbnRcIl0sXG4gIFVwZGF0ZUV4cHJlc3Npb246IFtcImFyZ3VtZW50XCJdLFxuICBPYmplY3RQcm9wZXJ0eTogW1widmFsdWVcIl0sXG4gIEFzc2lnbm1lbnRQYXR0ZXJuOiBbXCJsZWZ0XCJdLFxuICBBcnJheVBhdHRlcm46IFtcImVsZW1lbnRzXCJdLFxuICBPYmplY3RQYXR0ZXJuOiBbXCJwcm9wZXJ0aWVzXCJdLFxuICBWYXJpYWJsZURlY2xhcmF0aW9uOiBbXCJkZWNsYXJhdGlvbnNcIl0sXG4gIFZhcmlhYmxlRGVjbGFyYXRvcjogW1wiaWRcIl1cbn07XG5nZXRCaW5kaW5nSWRlbnRpZmllcnMua2V5cyA9IGtleXM7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEJpbmRpbmdJZGVudGlmaWVycy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///70329\n')},5109:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = getFunctionName;\nvar _index = __webpack_require__(98960);\nfunction getNameFromLiteralId(id) {\n  if ((0, _index.isNullLiteral)(id)) {\n    return "null";\n  }\n  if ((0, _index.isRegExpLiteral)(id)) {\n    return `/${id.pattern}/${id.flags}`;\n  }\n  if ((0, _index.isTemplateLiteral)(id)) {\n    return id.quasis.map(quasi => quasi.value.raw).join("");\n  }\n  if (id.value !== undefined) {\n    return String(id.value);\n  }\n  return null;\n}\nfunction getObjectMemberKey(node) {\n  if (!node.computed || (0, _index.isLiteral)(node.key)) {\n    return node.key;\n  }\n}\nfunction getFunctionName(node, parent) {\n  if ("id" in node && node.id) {\n    return {\n      name: node.id.name,\n      originalNode: node.id\n    };\n  }\n  let prefix = "";\n  let id;\n  if ((0, _index.isObjectProperty)(parent, {\n    value: node\n  })) {\n    id = getObjectMemberKey(parent);\n  } else if ((0, _index.isObjectMethod)(node) || (0, _index.isClassMethod)(node)) {\n    id = getObjectMemberKey(node);\n    if (node.kind === "get") prefix = "get ";else if (node.kind === "set") prefix = "set ";\n  } else if ((0, _index.isVariableDeclarator)(parent, {\n    init: node\n  })) {\n    id = parent.id;\n  } else if ((0, _index.isAssignmentExpression)(parent, {\n    operator: "=",\n    right: node\n  })) {\n    id = parent.left;\n  }\n  if (!id) return null;\n  const name = (0, _index.isLiteral)(id) ? getNameFromLiteralId(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;\n  if (name == null) return null;\n  return {\n    name: prefix + name,\n    originalNode: id\n  };\n}\n\n//# sourceMappingURL=getFunctionName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEwOS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLGFBQWEsbUJBQU8sQ0FBQyxLQUFrQztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxXQUFXLEdBQUcsU0FBUztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLElBQUk7QUFDSjtBQUNBLDZDQUE2QztBQUM3QyxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9yZXRyaWV2ZXJzL2dldEZ1bmN0aW9uTmFtZS5qcz85ZTU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0RnVuY3Rpb25OYW1lO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi92YWxpZGF0b3JzL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIGdldE5hbWVGcm9tTGl0ZXJhbElkKGlkKSB7XG4gIGlmICgoMCwgX2luZGV4LmlzTnVsbExpdGVyYWwpKGlkKSkge1xuICAgIHJldHVybiBcIm51bGxcIjtcbiAgfVxuICBpZiAoKDAsIF9pbmRleC5pc1JlZ0V4cExpdGVyYWwpKGlkKSkge1xuICAgIHJldHVybiBgLyR7aWQucGF0dGVybn0vJHtpZC5mbGFnc31gO1xuICB9XG4gIGlmICgoMCwgX2luZGV4LmlzVGVtcGxhdGVMaXRlcmFsKShpZCkpIHtcbiAgICByZXR1cm4gaWQucXVhc2lzLm1hcChxdWFzaSA9PiBxdWFzaS52YWx1ZS5yYXcpLmpvaW4oXCJcIik7XG4gIH1cbiAgaWYgKGlkLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGlkLnZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldE9iamVjdE1lbWJlcktleShub2RlKSB7XG4gIGlmICghbm9kZS5jb21wdXRlZCB8fCAoMCwgX2luZGV4LmlzTGl0ZXJhbCkobm9kZS5rZXkpKSB7XG4gICAgcmV0dXJuIG5vZGUua2V5O1xuICB9XG59XG5mdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWUobm9kZSwgcGFyZW50KSB7XG4gIGlmIChcImlkXCIgaW4gbm9kZSAmJiBub2RlLmlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5vZGUuaWQubmFtZSxcbiAgICAgIG9yaWdpbmFsTm9kZTogbm9kZS5pZFxuICAgIH07XG4gIH1cbiAgbGV0IHByZWZpeCA9IFwiXCI7XG4gIGxldCBpZDtcbiAgaWYgKCgwLCBfaW5kZXguaXNPYmplY3RQcm9wZXJ0eSkocGFyZW50LCB7XG4gICAgdmFsdWU6IG5vZGVcbiAgfSkpIHtcbiAgICBpZCA9IGdldE9iamVjdE1lbWJlcktleShwYXJlbnQpO1xuICB9IGVsc2UgaWYgKCgwLCBfaW5kZXguaXNPYmplY3RNZXRob2QpKG5vZGUpIHx8ICgwLCBfaW5kZXguaXNDbGFzc01ldGhvZCkobm9kZSkpIHtcbiAgICBpZCA9IGdldE9iamVjdE1lbWJlcktleShub2RlKTtcbiAgICBpZiAobm9kZS5raW5kID09PSBcImdldFwiKSBwcmVmaXggPSBcImdldCBcIjtlbHNlIGlmIChub2RlLmtpbmQgPT09IFwic2V0XCIpIHByZWZpeCA9IFwic2V0IFwiO1xuICB9IGVsc2UgaWYgKCgwLCBfaW5kZXguaXNWYXJpYWJsZURlY2xhcmF0b3IpKHBhcmVudCwge1xuICAgIGluaXQ6IG5vZGVcbiAgfSkpIHtcbiAgICBpZCA9IHBhcmVudC5pZDtcbiAgfSBlbHNlIGlmICgoMCwgX2luZGV4LmlzQXNzaWdubWVudEV4cHJlc3Npb24pKHBhcmVudCwge1xuICAgIG9wZXJhdG9yOiBcIj1cIixcbiAgICByaWdodDogbm9kZVxuICB9KSkge1xuICAgIGlkID0gcGFyZW50LmxlZnQ7XG4gIH1cbiAgaWYgKCFpZCkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IG5hbWUgPSAoMCwgX2luZGV4LmlzTGl0ZXJhbCkoaWQpID8gZ2V0TmFtZUZyb21MaXRlcmFsSWQoaWQpIDogKDAsIF9pbmRleC5pc0lkZW50aWZpZXIpKGlkKSA/IGlkLm5hbWUgOiAoMCwgX2luZGV4LmlzUHJpdmF0ZU5hbWUpKGlkKSA/IGlkLmlkLm5hbWUgOiBudWxsO1xuICBpZiAobmFtZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBwcmVmaXggKyBuYW1lLFxuICAgIG9yaWdpbmFsTm9kZTogaWRcbiAgfTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0RnVuY3Rpb25OYW1lLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5109\n')},49420:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _getBindingIdentifiers = __webpack_require__(70329);\nvar _default = exports["default"] = getOuterBindingIdentifiers;\nfunction getOuterBindingIdentifiers(node, duplicates) {\n  return (0, _getBindingIdentifiers.default)(node, duplicates, true);\n}\n\n//# sourceMappingURL=getOuterBindingIdentifiers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk0MjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZiw2QkFBNkIsbUJBQU8sQ0FBQyxLQUE0QjtBQUNqRSxlQUFlLGtCQUFlO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi9yZXRyaWV2ZXJzL2dldE91dGVyQmluZGluZ0lkZW50aWZpZXJzLmpzPzZiNjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2dldEJpbmRpbmdJZGVudGlmaWVycyA9IHJlcXVpcmUoXCIuL2dldEJpbmRpbmdJZGVudGlmaWVycy5qc1wiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9IGdldE91dGVyQmluZGluZ0lkZW50aWZpZXJzO1xuZnVuY3Rpb24gZ2V0T3V0ZXJCaW5kaW5nSWRlbnRpZmllcnMobm9kZSwgZHVwbGljYXRlcykge1xuICByZXR1cm4gKDAsIF9nZXRCaW5kaW5nSWRlbnRpZmllcnMuZGVmYXVsdCkobm9kZSwgZHVwbGljYXRlcywgdHJ1ZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldE91dGVyQmluZGluZ0lkZW50aWZpZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49420\n')},53357:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = traverse;\nvar _index = __webpack_require__(39793);\nfunction traverse(node, handlers, state) {\n  if (typeof handlers === "function") {\n    handlers = {\n      enter: handlers\n    };\n  }\n  const {\n    enter,\n    exit\n  } = handlers;\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\nfunction traverseSimpleImpl(node, enter, exit, state, ancestors) {\n  const keys = _index.VISITOR_KEYS[node.type];\n  if (!keys) return;\n  if (enter) enter(node, ancestors, state);\n  for (const key of keys) {\n    const subNode = node[key];\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n        ancestors.push({\n          node,\n          key,\n          index: i\n        });\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key\n      });\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n      ancestors.pop();\n    }\n  }\n  if (exit) exit(node, ancestors, state);\n}\n\n//# sourceMappingURL=traverse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMzNTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvQkFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3RyYXZlcnNlL3RyYXZlcnNlLmpzP2IwYTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmF2ZXJzZTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vZGVmaW5pdGlvbnMvaW5kZXguanNcIik7XG5mdW5jdGlvbiB0cmF2ZXJzZShub2RlLCBoYW5kbGVycywgc3RhdGUpIHtcbiAgaWYgKHR5cGVvZiBoYW5kbGVycyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgaGFuZGxlcnMgPSB7XG4gICAgICBlbnRlcjogaGFuZGxlcnNcbiAgICB9O1xuICB9XG4gIGNvbnN0IHtcbiAgICBlbnRlcixcbiAgICBleGl0XG4gIH0gPSBoYW5kbGVycztcbiAgdHJhdmVyc2VTaW1wbGVJbXBsKG5vZGUsIGVudGVyLCBleGl0LCBzdGF0ZSwgW10pO1xufVxuZnVuY3Rpb24gdHJhdmVyc2VTaW1wbGVJbXBsKG5vZGUsIGVudGVyLCBleGl0LCBzdGF0ZSwgYW5jZXN0b3JzKSB7XG4gIGNvbnN0IGtleXMgPSBfaW5kZXguVklTSVRPUl9LRVlTW25vZGUudHlwZV07XG4gIGlmICgha2V5cykgcmV0dXJuO1xuICBpZiAoZW50ZXIpIGVudGVyKG5vZGUsIGFuY2VzdG9ycywgc3RhdGUpO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgY29uc3Qgc3ViTm9kZSA9IG5vZGVba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJOb2RlKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJOb2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gc3ViTm9kZVtpXTtcbiAgICAgICAgaWYgKCFjaGlsZCkgY29udGludWU7XG4gICAgICAgIGFuY2VzdG9ycy5wdXNoKHtcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBpbmRleDogaVxuICAgICAgICB9KTtcbiAgICAgICAgdHJhdmVyc2VTaW1wbGVJbXBsKGNoaWxkLCBlbnRlciwgZXhpdCwgc3RhdGUsIGFuY2VzdG9ycyk7XG4gICAgICAgIGFuY2VzdG9ycy5wb3AoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN1Yk5vZGUpIHtcbiAgICAgIGFuY2VzdG9ycy5wdXNoKHtcbiAgICAgICAgbm9kZSxcbiAgICAgICAga2V5XG4gICAgICB9KTtcbiAgICAgIHRyYXZlcnNlU2ltcGxlSW1wbChzdWJOb2RlLCBlbnRlciwgZXhpdCwgc3RhdGUsIGFuY2VzdG9ycyk7XG4gICAgICBhbmNlc3RvcnMucG9wKCk7XG4gICAgfVxuICB9XG4gIGlmIChleGl0KSBleGl0KG5vZGUsIGFuY2VzdG9ycywgc3RhdGUpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmF2ZXJzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53357\n')},58943:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = traverseFast;\nvar _index = __webpack_require__(39793);\nfunction traverseFast(node, enter, opts) {\n  if (!node) return;\n  const keys = _index.VISITOR_KEYS[node.type];\n  if (!keys) return;\n  opts = opts || {};\n  enter(node, opts);\n  for (const key of keys) {\n    const subNode = node[key];\n    if (Array.isArray(subNode)) {\n      for (const node of subNode) {\n        traverseFast(node, enter, opts);\n      }\n    } else {\n      traverseFast(subNode, enter, opts);\n    }\n  }\n}\n\n//# sourceMappingURL=traverseFast.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg5NDMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3RyYXZlcnNlL3RyYXZlcnNlRmFzdC5qcz9iZTEzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdHJhdmVyc2VGYXN0O1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9ucy9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIHRyYXZlcnNlRmFzdChub2RlLCBlbnRlciwgb3B0cykge1xuICBpZiAoIW5vZGUpIHJldHVybjtcbiAgY29uc3Qga2V5cyA9IF9pbmRleC5WSVNJVE9SX0tFWVNbbm9kZS50eXBlXTtcbiAgaWYgKCFrZXlzKSByZXR1cm47XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBlbnRlcihub2RlLCBvcHRzKTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IHN1Yk5vZGUgPSBub2RlW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3ViTm9kZSkpIHtcbiAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBzdWJOb2RlKSB7XG4gICAgICAgIHRyYXZlcnNlRmFzdChub2RlLCBlbnRlciwgb3B0cyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYXZlcnNlRmFzdChzdWJOb2RlLCBlbnRlciwgb3B0cyk7XG4gICAgfVxuICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYXZlcnNlRmFzdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58943\n')},63762:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = deprecationWarning;\nconst warnings = new Set();\nfunction deprecationWarning(oldName, newName, prefix = "") {\n  if (warnings.has(oldName)) return;\n  warnings.add(oldName);\n  const {\n    internal,\n    trace\n  } = captureShortStackTrace(1, 2);\n  if (internal) {\n    return;\n  }\n  console.warn(`${prefix}\\`${oldName}\\` has been deprecated, please migrate to \\`${newName}\\`\\n${trace}`);\n}\nfunction captureShortStackTrace(skip, length) {\n  const {\n    stackTraceLimit,\n    prepareStackTrace\n  } = Error;\n  let stackTrace;\n  Error.stackTraceLimit = 1 + skip + length;\n  Error.prepareStackTrace = function (err, stack) {\n    stackTrace = stack;\n  };\n  new Error().stack;\n  Error.stackTraceLimit = stackTraceLimit;\n  Error.prepareStackTrace = prepareStackTrace;\n  if (!stackTrace) return {\n    internal: false,\n    trace: ""\n  };\n  const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);\n  return {\n    internal: /[\\\\/]@babel[\\\\/]/.test(shortStackTrace[1].getFileName()),\n    trace: shortStackTrace.map(frame => `    at ${frame}`).join("\\n")\n  };\n}\n\n//# sourceMappingURL=deprecationWarning.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM3NjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTyxJQUFJLFFBQVEsOENBQThDLFFBQVEsTUFBTSxNQUFNO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELE1BQU07QUFDeEQ7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi91dGlscy9kZXByZWNhdGlvbldhcm5pbmcuanM/NDFlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlcHJlY2F0aW9uV2FybmluZztcbmNvbnN0IHdhcm5pbmdzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gZGVwcmVjYXRpb25XYXJuaW5nKG9sZE5hbWUsIG5ld05hbWUsIHByZWZpeCA9IFwiXCIpIHtcbiAgaWYgKHdhcm5pbmdzLmhhcyhvbGROYW1lKSkgcmV0dXJuO1xuICB3YXJuaW5ncy5hZGQob2xkTmFtZSk7XG4gIGNvbnN0IHtcbiAgICBpbnRlcm5hbCxcbiAgICB0cmFjZVxuICB9ID0gY2FwdHVyZVNob3J0U3RhY2tUcmFjZSgxLCAyKTtcbiAgaWYgKGludGVybmFsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnNvbGUud2FybihgJHtwcmVmaXh9XFxgJHtvbGROYW1lfVxcYCBoYXMgYmVlbiBkZXByZWNhdGVkLCBwbGVhc2UgbWlncmF0ZSB0byBcXGAke25ld05hbWV9XFxgXFxuJHt0cmFjZX1gKTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVTaG9ydFN0YWNrVHJhY2Uoc2tpcCwgbGVuZ3RoKSB7XG4gIGNvbnN0IHtcbiAgICBzdGFja1RyYWNlTGltaXQsXG4gICAgcHJlcGFyZVN0YWNrVHJhY2VcbiAgfSA9IEVycm9yO1xuICBsZXQgc3RhY2tUcmFjZTtcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMSArIHNraXAgKyBsZW5ndGg7XG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gZnVuY3Rpb24gKGVyciwgc3RhY2spIHtcbiAgICBzdGFja1RyYWNlID0gc3RhY2s7XG4gIH07XG4gIG5ldyBFcnJvcigpLnN0YWNrO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBzdGFja1RyYWNlTGltaXQ7XG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJlcGFyZVN0YWNrVHJhY2U7XG4gIGlmICghc3RhY2tUcmFjZSkgcmV0dXJuIHtcbiAgICBpbnRlcm5hbDogZmFsc2UsXG4gICAgdHJhY2U6IFwiXCJcbiAgfTtcbiAgY29uc3Qgc2hvcnRTdGFja1RyYWNlID0gc3RhY2tUcmFjZS5zbGljZSgxICsgc2tpcCwgMSArIHNraXAgKyBsZW5ndGgpO1xuICByZXR1cm4ge1xuICAgIGludGVybmFsOiAvW1xcXFwvXUBiYWJlbFtcXFxcL10vLnRlc3Qoc2hvcnRTdGFja1RyYWNlWzFdLmdldEZpbGVOYW1lKCkpLFxuICAgIHRyYWNlOiBzaG9ydFN0YWNrVHJhY2UubWFwKGZyYW1lID0+IGAgICAgYXQgJHtmcmFtZX1gKS5qb2luKFwiXFxuXCIpXG4gIH07XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlcHJlY2F0aW9uV2FybmluZy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63762\n')},73205:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = inherit;\nfunction inherit(key, child, parent) {\n  if (child && parent) {\n    child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));\n  }\n}\n\n//# sourceMappingURL=inherit.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMyMDUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3V0aWxzL2luaGVyaXQuanM/N2FiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluaGVyaXQ7XG5mdW5jdGlvbiBpbmhlcml0KGtleSwgY2hpbGQsIHBhcmVudCkge1xuICBpZiAoY2hpbGQgJiYgcGFyZW50KSB7XG4gICAgY2hpbGRba2V5XSA9IEFycmF5LmZyb20obmV3IFNldChbXS5jb25jYXQoY2hpbGRba2V5XSwgcGFyZW50W2tleV0pLmZpbHRlcihCb29sZWFuKSkpO1xuICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaGVyaXQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73205\n')},53043:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = cleanJSXElementLiteralChild;\nvar _index = __webpack_require__(48079);\nvar _index2 = __webpack_require__(2352);\nfunction cleanJSXElementLiteralChild(child, args) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n  let lastNonEmptyLine = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (/[^ \\t]/.exec(lines[i])) {\n      lastNonEmptyLine = i;\n    }\n  }\n  let str = "";\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n    let trimmedLine = line.replace(/\\t/g, " ");\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^ +/, "");\n    }\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/ +$/, "");\n    }\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += " ";\n      }\n      str += trimmedLine;\n    }\n  }\n  if (str) args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));\n}\n\n//# sourceMappingURL=cleanJSXElementLiteralChild.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMwNDMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBbUM7QUFDeEQsY0FBYyxtQkFBTyxDQUFDLElBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi91dGlscy9yZWFjdC9jbGVhbkpTWEVsZW1lbnRMaXRlcmFsQ2hpbGQuanM/MTk4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNsZWFuSlNYRWxlbWVudExpdGVyYWxDaGlsZDtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vLi4vYnVpbGRlcnMvZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xudmFyIF9pbmRleDIgPSByZXF1aXJlKFwiLi4vLi4vaW5kZXguanNcIik7XG5mdW5jdGlvbiBjbGVhbkpTWEVsZW1lbnRMaXRlcmFsQ2hpbGQoY2hpbGQsIGFyZ3MpIHtcbiAgY29uc3QgbGluZXMgPSBjaGlsZC52YWx1ZS5zcGxpdCgvXFxyXFxufFxcbnxcXHIvKTtcbiAgbGV0IGxhc3ROb25FbXB0eUxpbmUgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKC9bXiBcXHRdLy5leGVjKGxpbmVzW2ldKSkge1xuICAgICAgbGFzdE5vbkVtcHR5TGluZSA9IGk7XG4gICAgfVxuICB9XG4gIGxldCBzdHIgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuICAgIGNvbnN0IGlzRmlyc3RMaW5lID0gaSA9PT0gMDtcbiAgICBjb25zdCBpc0xhc3RMaW5lID0gaSA9PT0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBpc0xhc3ROb25FbXB0eUxpbmUgPSBpID09PSBsYXN0Tm9uRW1wdHlMaW5lO1xuICAgIGxldCB0cmltbWVkTGluZSA9IGxpbmUucmVwbGFjZSgvXFx0L2csIFwiIFwiKTtcbiAgICBpZiAoIWlzRmlyc3RMaW5lKSB7XG4gICAgICB0cmltbWVkTGluZSA9IHRyaW1tZWRMaW5lLnJlcGxhY2UoL14gKy8sIFwiXCIpO1xuICAgIH1cbiAgICBpZiAoIWlzTGFzdExpbmUpIHtcbiAgICAgIHRyaW1tZWRMaW5lID0gdHJpbW1lZExpbmUucmVwbGFjZSgvICskLywgXCJcIik7XG4gICAgfVxuICAgIGlmICh0cmltbWVkTGluZSkge1xuICAgICAgaWYgKCFpc0xhc3ROb25FbXB0eUxpbmUpIHtcbiAgICAgICAgdHJpbW1lZExpbmUgKz0gXCIgXCI7XG4gICAgICB9XG4gICAgICBzdHIgKz0gdHJpbW1lZExpbmU7XG4gICAgfVxuICB9XG4gIGlmIChzdHIpIGFyZ3MucHVzaCgoMCwgX2luZGV4Mi5pbmhlcml0cykoKDAsIF9pbmRleC5zdHJpbmdMaXRlcmFsKShzdHIpLCBjaGlsZCkpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGVhbkpTWEVsZW1lbnRMaXRlcmFsQ2hpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53043\n')},96616:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = shallowEqual;\nfunction shallowEqual(actual, expected) {\n  const keys = Object.keys(expected);\n  for (const key of keys) {\n    if (actual[key] !== expected[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n//# sourceMappingURL=shallowEqual.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTY2MTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdXRpbHMvc2hhbGxvd0VxdWFsLmpzP2FiMTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzaGFsbG93RXF1YWw7XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwoYWN0dWFsLCBleHBlY3RlZCkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZXhwZWN0ZWQpO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKGFjdHVhbFtrZXldICE9PSBleHBlY3RlZFtrZXldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFsbG93RXF1YWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///96616\n')},3937:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = buildMatchMemberExpression;\nvar _matchesPattern = __webpack_require__(94965);\nfunction buildMatchMemberExpression(match, allowPartial) {\n  const parts = match.split(".");\n  return member => (0, _matchesPattern.default)(member, parts, allowPartial);\n}\n\n//# sourceMappingURL=buildMatchMemberExpression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkzNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLHNCQUFzQixtQkFBTyxDQUFDLEtBQXFCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb24uanM/YmQ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGJ1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uO1xudmFyIF9tYXRjaGVzUGF0dGVybiA9IHJlcXVpcmUoXCIuL21hdGNoZXNQYXR0ZXJuLmpzXCIpO1xuZnVuY3Rpb24gYnVpbGRNYXRjaE1lbWJlckV4cHJlc3Npb24obWF0Y2gsIGFsbG93UGFydGlhbCkge1xuICBjb25zdCBwYXJ0cyA9IG1hdGNoLnNwbGl0KFwiLlwiKTtcbiAgcmV0dXJuIG1lbWJlciA9PiAoMCwgX21hdGNoZXNQYXR0ZXJuLmRlZmF1bHQpKG1lbWJlciwgcGFydHMsIGFsbG93UGFydGlhbCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3937\n')},98960:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.isAccessor = isAccessor;\nexports.isAnyTypeAnnotation = isAnyTypeAnnotation;\nexports.isArgumentPlaceholder = isArgumentPlaceholder;\nexports.isArrayExpression = isArrayExpression;\nexports.isArrayPattern = isArrayPattern;\nexports.isArrayTypeAnnotation = isArrayTypeAnnotation;\nexports.isArrowFunctionExpression = isArrowFunctionExpression;\nexports.isAssignmentExpression = isAssignmentExpression;\nexports.isAssignmentPattern = isAssignmentPattern;\nexports.isAwaitExpression = isAwaitExpression;\nexports.isBigIntLiteral = isBigIntLiteral;\nexports.isBinary = isBinary;\nexports.isBinaryExpression = isBinaryExpression;\nexports.isBindExpression = isBindExpression;\nexports.isBlock = isBlock;\nexports.isBlockParent = isBlockParent;\nexports.isBlockStatement = isBlockStatement;\nexports.isBooleanLiteral = isBooleanLiteral;\nexports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;\nexports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;\nexports.isBreakStatement = isBreakStatement;\nexports.isCallExpression = isCallExpression;\nexports.isCatchClause = isCatchClause;\nexports.isClass = isClass;\nexports.isClassAccessorProperty = isClassAccessorProperty;\nexports.isClassBody = isClassBody;\nexports.isClassDeclaration = isClassDeclaration;\nexports.isClassExpression = isClassExpression;\nexports.isClassImplements = isClassImplements;\nexports.isClassMethod = isClassMethod;\nexports.isClassPrivateMethod = isClassPrivateMethod;\nexports.isClassPrivateProperty = isClassPrivateProperty;\nexports.isClassProperty = isClassProperty;\nexports.isCompletionStatement = isCompletionStatement;\nexports.isConditional = isConditional;\nexports.isConditionalExpression = isConditionalExpression;\nexports.isContinueStatement = isContinueStatement;\nexports.isDebuggerStatement = isDebuggerStatement;\nexports.isDecimalLiteral = isDecimalLiteral;\nexports.isDeclaration = isDeclaration;\nexports.isDeclareClass = isDeclareClass;\nexports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;\nexports.isDeclareExportDeclaration = isDeclareExportDeclaration;\nexports.isDeclareFunction = isDeclareFunction;\nexports.isDeclareInterface = isDeclareInterface;\nexports.isDeclareModule = isDeclareModule;\nexports.isDeclareModuleExports = isDeclareModuleExports;\nexports.isDeclareOpaqueType = isDeclareOpaqueType;\nexports.isDeclareTypeAlias = isDeclareTypeAlias;\nexports.isDeclareVariable = isDeclareVariable;\nexports.isDeclaredPredicate = isDeclaredPredicate;\nexports.isDecorator = isDecorator;\nexports.isDirective = isDirective;\nexports.isDirectiveLiteral = isDirectiveLiteral;\nexports.isDoExpression = isDoExpression;\nexports.isDoWhileStatement = isDoWhileStatement;\nexports.isEmptyStatement = isEmptyStatement;\nexports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;\nexports.isEnumBody = isEnumBody;\nexports.isEnumBooleanBody = isEnumBooleanBody;\nexports.isEnumBooleanMember = isEnumBooleanMember;\nexports.isEnumDeclaration = isEnumDeclaration;\nexports.isEnumDefaultedMember = isEnumDefaultedMember;\nexports.isEnumMember = isEnumMember;\nexports.isEnumNumberBody = isEnumNumberBody;\nexports.isEnumNumberMember = isEnumNumberMember;\nexports.isEnumStringBody = isEnumStringBody;\nexports.isEnumStringMember = isEnumStringMember;\nexports.isEnumSymbolBody = isEnumSymbolBody;\nexports.isExistsTypeAnnotation = isExistsTypeAnnotation;\nexports.isExportAllDeclaration = isExportAllDeclaration;\nexports.isExportDeclaration = isExportDeclaration;\nexports.isExportDefaultDeclaration = isExportDefaultDeclaration;\nexports.isExportDefaultSpecifier = isExportDefaultSpecifier;\nexports.isExportNamedDeclaration = isExportNamedDeclaration;\nexports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;\nexports.isExportSpecifier = isExportSpecifier;\nexports.isExpression = isExpression;\nexports.isExpressionStatement = isExpressionStatement;\nexports.isExpressionWrapper = isExpressionWrapper;\nexports.isFile = isFile;\nexports.isFlow = isFlow;\nexports.isFlowBaseAnnotation = isFlowBaseAnnotation;\nexports.isFlowDeclaration = isFlowDeclaration;\nexports.isFlowPredicate = isFlowPredicate;\nexports.isFlowType = isFlowType;\nexports.isFor = isFor;\nexports.isForInStatement = isForInStatement;\nexports.isForOfStatement = isForOfStatement;\nexports.isForStatement = isForStatement;\nexports.isForXStatement = isForXStatement;\nexports.isFunction = isFunction;\nexports.isFunctionDeclaration = isFunctionDeclaration;\nexports.isFunctionExpression = isFunctionExpression;\nexports.isFunctionParent = isFunctionParent;\nexports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;\nexports.isFunctionTypeParam = isFunctionTypeParam;\nexports.isGenericTypeAnnotation = isGenericTypeAnnotation;\nexports.isIdentifier = isIdentifier;\nexports.isIfStatement = isIfStatement;\nexports.isImmutable = isImmutable;\nexports.isImport = isImport;\nexports.isImportAttribute = isImportAttribute;\nexports.isImportDeclaration = isImportDeclaration;\nexports.isImportDefaultSpecifier = isImportDefaultSpecifier;\nexports.isImportExpression = isImportExpression;\nexports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;\nexports.isImportOrExportDeclaration = isImportOrExportDeclaration;\nexports.isImportSpecifier = isImportSpecifier;\nexports.isIndexedAccessType = isIndexedAccessType;\nexports.isInferredPredicate = isInferredPredicate;\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\nexports.isInterfaceExtends = isInterfaceExtends;\nexports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;\nexports.isInterpreterDirective = isInterpreterDirective;\nexports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;\nexports.isJSX = isJSX;\nexports.isJSXAttribute = isJSXAttribute;\nexports.isJSXClosingElement = isJSXClosingElement;\nexports.isJSXClosingFragment = isJSXClosingFragment;\nexports.isJSXElement = isJSXElement;\nexports.isJSXEmptyExpression = isJSXEmptyExpression;\nexports.isJSXExpressionContainer = isJSXExpressionContainer;\nexports.isJSXFragment = isJSXFragment;\nexports.isJSXIdentifier = isJSXIdentifier;\nexports.isJSXMemberExpression = isJSXMemberExpression;\nexports.isJSXNamespacedName = isJSXNamespacedName;\nexports.isJSXOpeningElement = isJSXOpeningElement;\nexports.isJSXOpeningFragment = isJSXOpeningFragment;\nexports.isJSXSpreadAttribute = isJSXSpreadAttribute;\nexports.isJSXSpreadChild = isJSXSpreadChild;\nexports.isJSXText = isJSXText;\nexports.isLVal = isLVal;\nexports.isLabeledStatement = isLabeledStatement;\nexports.isLiteral = isLiteral;\nexports.isLogicalExpression = isLogicalExpression;\nexports.isLoop = isLoop;\nexports.isMemberExpression = isMemberExpression;\nexports.isMetaProperty = isMetaProperty;\nexports.isMethod = isMethod;\nexports.isMiscellaneous = isMiscellaneous;\nexports.isMixedTypeAnnotation = isMixedTypeAnnotation;\nexports.isModuleDeclaration = isModuleDeclaration;\nexports.isModuleExpression = isModuleExpression;\nexports.isModuleSpecifier = isModuleSpecifier;\nexports.isNewExpression = isNewExpression;\nexports.isNoop = isNoop;\nexports.isNullLiteral = isNullLiteral;\nexports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;\nexports.isNullableTypeAnnotation = isNullableTypeAnnotation;\nexports.isNumberLiteral = isNumberLiteral;\nexports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;\nexports.isNumberTypeAnnotation = isNumberTypeAnnotation;\nexports.isNumericLiteral = isNumericLiteral;\nexports.isObjectExpression = isObjectExpression;\nexports.isObjectMember = isObjectMember;\nexports.isObjectMethod = isObjectMethod;\nexports.isObjectPattern = isObjectPattern;\nexports.isObjectProperty = isObjectProperty;\nexports.isObjectTypeAnnotation = isObjectTypeAnnotation;\nexports.isObjectTypeCallProperty = isObjectTypeCallProperty;\nexports.isObjectTypeIndexer = isObjectTypeIndexer;\nexports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;\nexports.isObjectTypeProperty = isObjectTypeProperty;\nexports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;\nexports.isOpaqueType = isOpaqueType;\nexports.isOptionalCallExpression = isOptionalCallExpression;\nexports.isOptionalIndexedAccessType = isOptionalIndexedAccessType;\nexports.isOptionalMemberExpression = isOptionalMemberExpression;\nexports.isParenthesizedExpression = isParenthesizedExpression;\nexports.isPattern = isPattern;\nexports.isPatternLike = isPatternLike;\nexports.isPipelineBareFunction = isPipelineBareFunction;\nexports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;\nexports.isPipelineTopicExpression = isPipelineTopicExpression;\nexports.isPlaceholder = isPlaceholder;\nexports.isPrivate = isPrivate;\nexports.isPrivateName = isPrivateName;\nexports.isProgram = isProgram;\nexports.isProperty = isProperty;\nexports.isPureish = isPureish;\nexports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;\nexports.isRecordExpression = isRecordExpression;\nexports.isRegExpLiteral = isRegExpLiteral;\nexports.isRegexLiteral = isRegexLiteral;\nexports.isRestElement = isRestElement;\nexports.isRestProperty = isRestProperty;\nexports.isReturnStatement = isReturnStatement;\nexports.isScopable = isScopable;\nexports.isSequenceExpression = isSequenceExpression;\nexports.isSpreadElement = isSpreadElement;\nexports.isSpreadProperty = isSpreadProperty;\nexports.isStandardized = isStandardized;\nexports.isStatement = isStatement;\nexports.isStaticBlock = isStaticBlock;\nexports.isStringLiteral = isStringLiteral;\nexports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;\nexports.isStringTypeAnnotation = isStringTypeAnnotation;\nexports.isSuper = isSuper;\nexports.isSwitchCase = isSwitchCase;\nexports.isSwitchStatement = isSwitchStatement;\nexports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;\nexports.isTSAnyKeyword = isTSAnyKeyword;\nexports.isTSArrayType = isTSArrayType;\nexports.isTSAsExpression = isTSAsExpression;\nexports.isTSBaseType = isTSBaseType;\nexports.isTSBigIntKeyword = isTSBigIntKeyword;\nexports.isTSBooleanKeyword = isTSBooleanKeyword;\nexports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;\nexports.isTSConditionalType = isTSConditionalType;\nexports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;\nexports.isTSConstructorType = isTSConstructorType;\nexports.isTSDeclareFunction = isTSDeclareFunction;\nexports.isTSDeclareMethod = isTSDeclareMethod;\nexports.isTSEntityName = isTSEntityName;\nexports.isTSEnumDeclaration = isTSEnumDeclaration;\nexports.isTSEnumMember = isTSEnumMember;\nexports.isTSExportAssignment = isTSExportAssignment;\nexports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;\nexports.isTSExternalModuleReference = isTSExternalModuleReference;\nexports.isTSFunctionType = isTSFunctionType;\nexports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;\nexports.isTSImportType = isTSImportType;\nexports.isTSIndexSignature = isTSIndexSignature;\nexports.isTSIndexedAccessType = isTSIndexedAccessType;\nexports.isTSInferType = isTSInferType;\nexports.isTSInstantiationExpression = isTSInstantiationExpression;\nexports.isTSInterfaceBody = isTSInterfaceBody;\nexports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;\nexports.isTSIntersectionType = isTSIntersectionType;\nexports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;\nexports.isTSLiteralType = isTSLiteralType;\nexports.isTSMappedType = isTSMappedType;\nexports.isTSMethodSignature = isTSMethodSignature;\nexports.isTSModuleBlock = isTSModuleBlock;\nexports.isTSModuleDeclaration = isTSModuleDeclaration;\nexports.isTSNamedTupleMember = isTSNamedTupleMember;\nexports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;\nexports.isTSNeverKeyword = isTSNeverKeyword;\nexports.isTSNonNullExpression = isTSNonNullExpression;\nexports.isTSNullKeyword = isTSNullKeyword;\nexports.isTSNumberKeyword = isTSNumberKeyword;\nexports.isTSObjectKeyword = isTSObjectKeyword;\nexports.isTSOptionalType = isTSOptionalType;\nexports.isTSParameterProperty = isTSParameterProperty;\nexports.isTSParenthesizedType = isTSParenthesizedType;\nexports.isTSPropertySignature = isTSPropertySignature;\nexports.isTSQualifiedName = isTSQualifiedName;\nexports.isTSRestType = isTSRestType;\nexports.isTSSatisfiesExpression = isTSSatisfiesExpression;\nexports.isTSStringKeyword = isTSStringKeyword;\nexports.isTSSymbolKeyword = isTSSymbolKeyword;\nexports.isTSThisType = isTSThisType;\nexports.isTSTupleType = isTSTupleType;\nexports.isTSType = isTSType;\nexports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;\nexports.isTSTypeAnnotation = isTSTypeAnnotation;\nexports.isTSTypeAssertion = isTSTypeAssertion;\nexports.isTSTypeElement = isTSTypeElement;\nexports.isTSTypeLiteral = isTSTypeLiteral;\nexports.isTSTypeOperator = isTSTypeOperator;\nexports.isTSTypeParameter = isTSTypeParameter;\nexports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;\nexports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;\nexports.isTSTypePredicate = isTSTypePredicate;\nexports.isTSTypeQuery = isTSTypeQuery;\nexports.isTSTypeReference = isTSTypeReference;\nexports.isTSUndefinedKeyword = isTSUndefinedKeyword;\nexports.isTSUnionType = isTSUnionType;\nexports.isTSUnknownKeyword = isTSUnknownKeyword;\nexports.isTSVoidKeyword = isTSVoidKeyword;\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\nexports.isTemplateElement = isTemplateElement;\nexports.isTemplateLiteral = isTemplateLiteral;\nexports.isTerminatorless = isTerminatorless;\nexports.isThisExpression = isThisExpression;\nexports.isThisTypeAnnotation = isThisTypeAnnotation;\nexports.isThrowStatement = isThrowStatement;\nexports.isTopicReference = isTopicReference;\nexports.isTryStatement = isTryStatement;\nexports.isTupleExpression = isTupleExpression;\nexports.isTupleTypeAnnotation = isTupleTypeAnnotation;\nexports.isTypeAlias = isTypeAlias;\nexports.isTypeAnnotation = isTypeAnnotation;\nexports.isTypeCastExpression = isTypeCastExpression;\nexports.isTypeParameter = isTypeParameter;\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\nexports.isTypeParameterInstantiation = isTypeParameterInstantiation;\nexports.isTypeScript = isTypeScript;\nexports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;\nexports.isUnaryExpression = isUnaryExpression;\nexports.isUnaryLike = isUnaryLike;\nexports.isUnionTypeAnnotation = isUnionTypeAnnotation;\nexports.isUpdateExpression = isUpdateExpression;\nexports.isUserWhitespacable = isUserWhitespacable;\nexports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;\nexports.isVariableDeclaration = isVariableDeclaration;\nexports.isVariableDeclarator = isVariableDeclarator;\nexports.isVariance = isVariance;\nexports.isVoidTypeAnnotation = isVoidTypeAnnotation;\nexports.isWhile = isWhile;\nexports.isWhileStatement = isWhileStatement;\nexports.isWithStatement = isWithStatement;\nexports.isYieldExpression = isYieldExpression;\nvar _shallowEqual = __webpack_require__(96616);\nvar _deprecationWarning = __webpack_require__(63762);\nfunction isArrayExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ArrayExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isAssignmentExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "AssignmentExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBinaryExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BinaryExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isInterpreterDirective(node, opts) {\n  if (!node) return false;\n  if (node.type !== "InterpreterDirective") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDirective(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Directive") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDirectiveLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DirectiveLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBlockStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BlockStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBreakStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BreakStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isCallExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "CallExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isCatchClause(node, opts) {\n  if (!node) return false;\n  if (node.type !== "CatchClause") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isConditionalExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ConditionalExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isContinueStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ContinueStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDebuggerStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DebuggerStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDoWhileStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DoWhileStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEmptyStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EmptyStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExpressionStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExpressionStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFile(node, opts) {\n  if (!node) return false;\n  if (node.type !== "File") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isForInStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ForInStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isForStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ForStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFunctionDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "FunctionDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFunctionExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "FunctionExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isIdentifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Identifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isIfStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "IfStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isLabeledStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "LabeledStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isStringLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "StringLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNumericLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "NumericLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNullLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "NullLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBooleanLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BooleanLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isRegExpLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "RegExpLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isLogicalExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "LogicalExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isMemberExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "MemberExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNewExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "NewExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isProgram(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Program") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectMethod(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectMethod") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isRestElement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "RestElement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isReturnStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ReturnStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isSequenceExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "SequenceExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isParenthesizedExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ParenthesizedExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isSwitchCase(node, opts) {\n  if (!node) return false;\n  if (node.type !== "SwitchCase") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isSwitchStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "SwitchStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isThisExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ThisExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isThrowStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ThrowStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTryStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TryStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isUnaryExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "UnaryExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isUpdateExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "UpdateExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isVariableDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "VariableDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isVariableDeclarator(node, opts) {\n  if (!node) return false;\n  if (node.type !== "VariableDeclarator") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isWhileStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "WhileStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isWithStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "WithStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isAssignmentPattern(node, opts) {\n  if (!node) return false;\n  if (node.type !== "AssignmentPattern") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isArrayPattern(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ArrayPattern") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isArrowFunctionExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ArrowFunctionExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassBody(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassBody") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExportAllDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExportDefaultDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExportDefaultDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExportNamedDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExportNamedDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExportSpecifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExportSpecifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isForOfStatement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ForOfStatement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImportDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ImportDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ImportDefaultSpecifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ImportNamespaceSpecifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImportSpecifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ImportSpecifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImportExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ImportExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isMetaProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "MetaProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassMethod(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassMethod") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectPattern(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectPattern") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isSpreadElement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "SpreadElement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isSuper(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Super") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTaggedTemplateExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TaggedTemplateExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTemplateElement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TemplateElement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTemplateLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TemplateLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isYieldExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "YieldExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isAwaitExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "AwaitExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImport(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Import") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBigIntLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BigIntLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExportNamespaceSpecifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isOptionalMemberExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "OptionalMemberExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isOptionalCallExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "OptionalCallExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassAccessorProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassAccessorProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassPrivateProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassPrivateProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassPrivateMethod(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassPrivateMethod") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPrivateName(node, opts) {\n  if (!node) return false;\n  if (node.type !== "PrivateName") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isStaticBlock(node, opts) {\n  if (!node) return false;\n  if (node.type !== "StaticBlock") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isAnyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "AnyTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isArrayTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ArrayTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBooleanTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BooleanTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBooleanLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BooleanLiteralTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNullLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "NullLiteralTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClassImplements(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ClassImplements") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareClass(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareClass") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareFunction(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareFunction") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareInterface(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareInterface") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareModule(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareModule") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareModuleExports(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareModuleExports") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareTypeAlias(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareTypeAlias") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareOpaqueType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareOpaqueType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareVariable(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareVariable") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareExportDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareExportDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclareExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclareExportAllDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclaredPredicate(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DeclaredPredicate") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExistsTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExistsTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFunctionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "FunctionTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFunctionTypeParam(node, opts) {\n  if (!node) return false;\n  if (node.type !== "FunctionTypeParam") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isGenericTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "GenericTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isInferredPredicate(node, opts) {\n  if (!node) return false;\n  if (node.type !== "InferredPredicate") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isInterfaceExtends(node, opts) {\n  if (!node) return false;\n  if (node.type !== "InterfaceExtends") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "InterfaceDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isInterfaceTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "InterfaceTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isIntersectionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "IntersectionTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isMixedTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "MixedTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEmptyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EmptyTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNullableTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "NullableTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNumberLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "NumberLiteralTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNumberTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "NumberTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectTypeInternalSlot(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectTypeInternalSlot") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectTypeCallProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectTypeCallProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectTypeIndexer(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectTypeIndexer") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectTypeProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectTypeProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectTypeSpreadProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ObjectTypeSpreadProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isOpaqueType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "OpaqueType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isQualifiedTypeIdentifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "QualifiedTypeIdentifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isStringLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "StringLiteralTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isStringTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "StringTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isSymbolTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "SymbolTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isThisTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ThisTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTupleTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TupleTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeofTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TypeofTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeAlias(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TypeAlias") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeCastExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TypeCastExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeParameter(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TypeParameter") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TypeParameterDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TypeParameterInstantiation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isUnionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "UnionTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isVariance(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Variance") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isVoidTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "VoidTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumBooleanBody(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumBooleanBody") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumNumberBody(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumNumberBody") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumStringBody(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumStringBody") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumSymbolBody(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumSymbolBody") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumBooleanMember(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumBooleanMember") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumNumberMember(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumNumberMember") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumStringMember(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumStringMember") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumDefaultedMember(node, opts) {\n  if (!node) return false;\n  if (node.type !== "EnumDefaultedMember") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isIndexedAccessType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "IndexedAccessType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isOptionalIndexedAccessType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "OptionalIndexedAccessType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXAttribute(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXAttribute") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXClosingElement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXClosingElement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXElement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXElement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXEmptyExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXEmptyExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXExpressionContainer(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXExpressionContainer") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXSpreadChild(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXSpreadChild") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXIdentifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXIdentifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXMemberExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXMemberExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXNamespacedName(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXNamespacedName") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXOpeningElement(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXOpeningElement") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXSpreadAttribute(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXSpreadAttribute") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXText(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXText") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXFragment(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXFragment") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXOpeningFragment(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXOpeningFragment") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSXClosingFragment(node, opts) {\n  if (!node) return false;\n  if (node.type !== "JSXClosingFragment") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNoop(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Noop") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPlaceholder(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Placeholder") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isV8IntrinsicIdentifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "V8IntrinsicIdentifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isArgumentPlaceholder(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ArgumentPlaceholder") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBindExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "BindExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImportAttribute(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ImportAttribute") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDecorator(node, opts) {\n  if (!node) return false;\n  if (node.type !== "Decorator") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDoExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DoExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ExportDefaultSpecifier") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isRecordExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "RecordExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTupleExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TupleExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDecimalLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "DecimalLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isModuleExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "ModuleExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTopicReference(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TopicReference") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPipelineTopicExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "PipelineTopicExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPipelineBareFunction(node, opts) {\n  if (!node) return false;\n  if (node.type !== "PipelineBareFunction") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPipelinePrimaryTopicReference(node, opts) {\n  if (!node) return false;\n  if (node.type !== "PipelinePrimaryTopicReference") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSParameterProperty(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSParameterProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSDeclareFunction(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSDeclareFunction") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSDeclareMethod(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSDeclareMethod") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSQualifiedName(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSQualifiedName") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSCallSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSCallSignatureDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSConstructSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSConstructSignatureDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSPropertySignature(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSPropertySignature") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSMethodSignature(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSMethodSignature") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSIndexSignature(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSIndexSignature") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSAnyKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSAnyKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSBooleanKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSBooleanKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSBigIntKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSBigIntKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSIntrinsicKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSIntrinsicKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSNeverKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSNeverKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSNullKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSNullKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSNumberKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSNumberKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSObjectKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSObjectKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSStringKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSStringKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSSymbolKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSSymbolKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSUndefinedKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSUndefinedKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSUnknownKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSUnknownKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSVoidKeyword(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSVoidKeyword") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSThisType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSThisType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSFunctionType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSFunctionType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSConstructorType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSConstructorType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeReference(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeReference") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypePredicate(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypePredicate") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeQuery(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeQuery") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeLiteral(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSArrayType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSArrayType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTupleType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTupleType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSOptionalType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSOptionalType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSRestType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSRestType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSNamedTupleMember(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSNamedTupleMember") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSUnionType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSUnionType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSIntersectionType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSIntersectionType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSConditionalType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSConditionalType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSInferType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSInferType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSParenthesizedType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSParenthesizedType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeOperator(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeOperator") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSIndexedAccessType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSIndexedAccessType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSMappedType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSMappedType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSLiteralType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSLiteralType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSExpressionWithTypeArguments(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSExpressionWithTypeArguments") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSInterfaceDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSInterfaceBody(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSInterfaceBody") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeAliasDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeAliasDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSInstantiationExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSInstantiationExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSAsExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSAsExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSSatisfiesExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSSatisfiesExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeAssertion(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeAssertion") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSEnumDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSEnumDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSEnumMember(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSEnumMember") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSModuleDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSModuleDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSModuleBlock(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSModuleBlock") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSImportType(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSImportType") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSImportEqualsDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSImportEqualsDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSExternalModuleReference(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSExternalModuleReference") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSNonNullExpression(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSNonNullExpression") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSExportAssignment(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSExportAssignment") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSNamespaceExportDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSNamespaceExportDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeAnnotation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeAnnotation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeParameterInstantiation") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeParameterDeclaration") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeParameter(node, opts) {\n  if (!node) return false;\n  if (node.type !== "TSTypeParameter") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isStandardized(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ArrayExpression":\n    case "AssignmentExpression":\n    case "BinaryExpression":\n    case "InterpreterDirective":\n    case "Directive":\n    case "DirectiveLiteral":\n    case "BlockStatement":\n    case "BreakStatement":\n    case "CallExpression":\n    case "CatchClause":\n    case "ConditionalExpression":\n    case "ContinueStatement":\n    case "DebuggerStatement":\n    case "DoWhileStatement":\n    case "EmptyStatement":\n    case "ExpressionStatement":\n    case "File":\n    case "ForInStatement":\n    case "ForStatement":\n    case "FunctionDeclaration":\n    case "FunctionExpression":\n    case "Identifier":\n    case "IfStatement":\n    case "LabeledStatement":\n    case "StringLiteral":\n    case "NumericLiteral":\n    case "NullLiteral":\n    case "BooleanLiteral":\n    case "RegExpLiteral":\n    case "LogicalExpression":\n    case "MemberExpression":\n    case "NewExpression":\n    case "Program":\n    case "ObjectExpression":\n    case "ObjectMethod":\n    case "ObjectProperty":\n    case "RestElement":\n    case "ReturnStatement":\n    case "SequenceExpression":\n    case "ParenthesizedExpression":\n    case "SwitchCase":\n    case "SwitchStatement":\n    case "ThisExpression":\n    case "ThrowStatement":\n    case "TryStatement":\n    case "UnaryExpression":\n    case "UpdateExpression":\n    case "VariableDeclaration":\n    case "VariableDeclarator":\n    case "WhileStatement":\n    case "WithStatement":\n    case "AssignmentPattern":\n    case "ArrayPattern":\n    case "ArrowFunctionExpression":\n    case "ClassBody":\n    case "ClassExpression":\n    case "ClassDeclaration":\n    case "ExportAllDeclaration":\n    case "ExportDefaultDeclaration":\n    case "ExportNamedDeclaration":\n    case "ExportSpecifier":\n    case "ForOfStatement":\n    case "ImportDeclaration":\n    case "ImportDefaultSpecifier":\n    case "ImportNamespaceSpecifier":\n    case "ImportSpecifier":\n    case "ImportExpression":\n    case "MetaProperty":\n    case "ClassMethod":\n    case "ObjectPattern":\n    case "SpreadElement":\n    case "Super":\n    case "TaggedTemplateExpression":\n    case "TemplateElement":\n    case "TemplateLiteral":\n    case "YieldExpression":\n    case "AwaitExpression":\n    case "Import":\n    case "BigIntLiteral":\n    case "ExportNamespaceSpecifier":\n    case "OptionalMemberExpression":\n    case "OptionalCallExpression":\n    case "ClassProperty":\n    case "ClassAccessorProperty":\n    case "ClassPrivateProperty":\n    case "ClassPrivateMethod":\n    case "PrivateName":\n    case "StaticBlock":\n      break;\n    case "Placeholder":\n      switch (node.expectedNode) {\n        case "Identifier":\n        case "StringLiteral":\n        case "BlockStatement":\n        case "ClassBody":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExpression(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ArrayExpression":\n    case "AssignmentExpression":\n    case "BinaryExpression":\n    case "CallExpression":\n    case "ConditionalExpression":\n    case "FunctionExpression":\n    case "Identifier":\n    case "StringLiteral":\n    case "NumericLiteral":\n    case "NullLiteral":\n    case "BooleanLiteral":\n    case "RegExpLiteral":\n    case "LogicalExpression":\n    case "MemberExpression":\n    case "NewExpression":\n    case "ObjectExpression":\n    case "SequenceExpression":\n    case "ParenthesizedExpression":\n    case "ThisExpression":\n    case "UnaryExpression":\n    case "UpdateExpression":\n    case "ArrowFunctionExpression":\n    case "ClassExpression":\n    case "ImportExpression":\n    case "MetaProperty":\n    case "Super":\n    case "TaggedTemplateExpression":\n    case "TemplateLiteral":\n    case "YieldExpression":\n    case "AwaitExpression":\n    case "Import":\n    case "BigIntLiteral":\n    case "OptionalMemberExpression":\n    case "OptionalCallExpression":\n    case "TypeCastExpression":\n    case "JSXElement":\n    case "JSXFragment":\n    case "BindExpression":\n    case "DoExpression":\n    case "RecordExpression":\n    case "TupleExpression":\n    case "DecimalLiteral":\n    case "ModuleExpression":\n    case "TopicReference":\n    case "PipelineTopicExpression":\n    case "PipelineBareFunction":\n    case "PipelinePrimaryTopicReference":\n    case "TSInstantiationExpression":\n    case "TSAsExpression":\n    case "TSSatisfiesExpression":\n    case "TSTypeAssertion":\n    case "TSNonNullExpression":\n      break;\n    case "Placeholder":\n      switch (node.expectedNode) {\n        case "Expression":\n        case "Identifier":\n        case "StringLiteral":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBinary(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "BinaryExpression":\n    case "LogicalExpression":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isScopable(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "BlockStatement":\n    case "CatchClause":\n    case "DoWhileStatement":\n    case "ForInStatement":\n    case "ForStatement":\n    case "FunctionDeclaration":\n    case "FunctionExpression":\n    case "Program":\n    case "ObjectMethod":\n    case "SwitchStatement":\n    case "WhileStatement":\n    case "ArrowFunctionExpression":\n    case "ClassExpression":\n    case "ClassDeclaration":\n    case "ForOfStatement":\n    case "ClassMethod":\n    case "ClassPrivateMethod":\n    case "StaticBlock":\n    case "TSModuleBlock":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "BlockStatement") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBlockParent(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "BlockStatement":\n    case "CatchClause":\n    case "DoWhileStatement":\n    case "ForInStatement":\n    case "ForStatement":\n    case "FunctionDeclaration":\n    case "FunctionExpression":\n    case "Program":\n    case "ObjectMethod":\n    case "SwitchStatement":\n    case "WhileStatement":\n    case "ArrowFunctionExpression":\n    case "ForOfStatement":\n    case "ClassMethod":\n    case "ClassPrivateMethod":\n    case "StaticBlock":\n    case "TSModuleBlock":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "BlockStatement") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isBlock(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "BlockStatement":\n    case "Program":\n    case "TSModuleBlock":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "BlockStatement") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isStatement(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "BlockStatement":\n    case "BreakStatement":\n    case "ContinueStatement":\n    case "DebuggerStatement":\n    case "DoWhileStatement":\n    case "EmptyStatement":\n    case "ExpressionStatement":\n    case "ForInStatement":\n    case "ForStatement":\n    case "FunctionDeclaration":\n    case "IfStatement":\n    case "LabeledStatement":\n    case "ReturnStatement":\n    case "SwitchStatement":\n    case "ThrowStatement":\n    case "TryStatement":\n    case "VariableDeclaration":\n    case "WhileStatement":\n    case "WithStatement":\n    case "ClassDeclaration":\n    case "ExportAllDeclaration":\n    case "ExportDefaultDeclaration":\n    case "ExportNamedDeclaration":\n    case "ForOfStatement":\n    case "ImportDeclaration":\n    case "DeclareClass":\n    case "DeclareFunction":\n    case "DeclareInterface":\n    case "DeclareModule":\n    case "DeclareModuleExports":\n    case "DeclareTypeAlias":\n    case "DeclareOpaqueType":\n    case "DeclareVariable":\n    case "DeclareExportDeclaration":\n    case "DeclareExportAllDeclaration":\n    case "InterfaceDeclaration":\n    case "OpaqueType":\n    case "TypeAlias":\n    case "EnumDeclaration":\n    case "TSDeclareFunction":\n    case "TSInterfaceDeclaration":\n    case "TSTypeAliasDeclaration":\n    case "TSEnumDeclaration":\n    case "TSModuleDeclaration":\n    case "TSImportEqualsDeclaration":\n    case "TSExportAssignment":\n    case "TSNamespaceExportDeclaration":\n      break;\n    case "Placeholder":\n      switch (node.expectedNode) {\n        case "Statement":\n        case "Declaration":\n        case "BlockStatement":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTerminatorless(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "BreakStatement":\n    case "ContinueStatement":\n    case "ReturnStatement":\n    case "ThrowStatement":\n    case "YieldExpression":\n    case "AwaitExpression":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isCompletionStatement(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "BreakStatement":\n    case "ContinueStatement":\n    case "ReturnStatement":\n    case "ThrowStatement":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isConditional(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ConditionalExpression":\n    case "IfStatement":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isLoop(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "DoWhileStatement":\n    case "ForInStatement":\n    case "ForStatement":\n    case "WhileStatement":\n    case "ForOfStatement":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isWhile(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "DoWhileStatement":\n    case "WhileStatement":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExpressionWrapper(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ExpressionStatement":\n    case "ParenthesizedExpression":\n    case "TypeCastExpression":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFor(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ForInStatement":\n    case "ForStatement":\n    case "ForOfStatement":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isForXStatement(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ForInStatement":\n    case "ForOfStatement":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFunction(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "FunctionDeclaration":\n    case "FunctionExpression":\n    case "ObjectMethod":\n    case "ArrowFunctionExpression":\n    case "ClassMethod":\n    case "ClassPrivateMethod":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFunctionParent(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "FunctionDeclaration":\n    case "FunctionExpression":\n    case "ObjectMethod":\n    case "ArrowFunctionExpression":\n    case "ClassMethod":\n    case "ClassPrivateMethod":\n    case "StaticBlock":\n    case "TSModuleBlock":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPureish(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "FunctionDeclaration":\n    case "FunctionExpression":\n    case "StringLiteral":\n    case "NumericLiteral":\n    case "NullLiteral":\n    case "BooleanLiteral":\n    case "RegExpLiteral":\n    case "ArrowFunctionExpression":\n    case "BigIntLiteral":\n    case "DecimalLiteral":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "StringLiteral") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isDeclaration(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "FunctionDeclaration":\n    case "VariableDeclaration":\n    case "ClassDeclaration":\n    case "ExportAllDeclaration":\n    case "ExportDefaultDeclaration":\n    case "ExportNamedDeclaration":\n    case "ImportDeclaration":\n    case "DeclareClass":\n    case "DeclareFunction":\n    case "DeclareInterface":\n    case "DeclareModule":\n    case "DeclareModuleExports":\n    case "DeclareTypeAlias":\n    case "DeclareOpaqueType":\n    case "DeclareVariable":\n    case "DeclareExportDeclaration":\n    case "DeclareExportAllDeclaration":\n    case "InterfaceDeclaration":\n    case "OpaqueType":\n    case "TypeAlias":\n    case "EnumDeclaration":\n    case "TSDeclareFunction":\n    case "TSInterfaceDeclaration":\n    case "TSTypeAliasDeclaration":\n    case "TSEnumDeclaration":\n    case "TSModuleDeclaration":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "Declaration") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPatternLike(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "Identifier":\n    case "RestElement":\n    case "AssignmentPattern":\n    case "ArrayPattern":\n    case "ObjectPattern":\n    case "TSAsExpression":\n    case "TSSatisfiesExpression":\n    case "TSTypeAssertion":\n    case "TSNonNullExpression":\n      break;\n    case "Placeholder":\n      switch (node.expectedNode) {\n        case "Pattern":\n        case "Identifier":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isLVal(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "Identifier":\n    case "MemberExpression":\n    case "RestElement":\n    case "AssignmentPattern":\n    case "ArrayPattern":\n    case "ObjectPattern":\n    case "TSParameterProperty":\n    case "TSAsExpression":\n    case "TSSatisfiesExpression":\n    case "TSTypeAssertion":\n    case "TSNonNullExpression":\n      break;\n    case "Placeholder":\n      switch (node.expectedNode) {\n        case "Pattern":\n        case "Identifier":\n          break;\n        default:\n          return false;\n      }\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSEntityName(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "Identifier":\n    case "TSQualifiedName":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "Identifier") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isLiteral(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "StringLiteral":\n    case "NumericLiteral":\n    case "NullLiteral":\n    case "BooleanLiteral":\n    case "RegExpLiteral":\n    case "TemplateLiteral":\n    case "BigIntLiteral":\n    case "DecimalLiteral":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "StringLiteral") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImmutable(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "StringLiteral":\n    case "NumericLiteral":\n    case "NullLiteral":\n    case "BooleanLiteral":\n    case "BigIntLiteral":\n    case "JSXAttribute":\n    case "JSXClosingElement":\n    case "JSXElement":\n    case "JSXExpressionContainer":\n    case "JSXSpreadChild":\n    case "JSXOpeningElement":\n    case "JSXText":\n    case "JSXFragment":\n    case "JSXOpeningFragment":\n    case "JSXClosingFragment":\n    case "DecimalLiteral":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "StringLiteral") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isUserWhitespacable(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ObjectMethod":\n    case "ObjectProperty":\n    case "ObjectTypeInternalSlot":\n    case "ObjectTypeCallProperty":\n    case "ObjectTypeIndexer":\n    case "ObjectTypeProperty":\n    case "ObjectTypeSpreadProperty":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isMethod(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ObjectMethod":\n    case "ClassMethod":\n    case "ClassPrivateMethod":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isObjectMember(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ObjectMethod":\n    case "ObjectProperty":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isProperty(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ObjectProperty":\n    case "ClassProperty":\n    case "ClassAccessorProperty":\n    case "ClassPrivateProperty":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isUnaryLike(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "UnaryExpression":\n    case "SpreadElement":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPattern(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "AssignmentPattern":\n    case "ArrayPattern":\n    case "ObjectPattern":\n      break;\n    case "Placeholder":\n      if (node.expectedNode === "Pattern") break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isClass(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ClassExpression":\n    case "ClassDeclaration":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isImportOrExportDeclaration(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ExportAllDeclaration":\n    case "ExportDefaultDeclaration":\n    case "ExportNamedDeclaration":\n    case "ImportDeclaration":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isExportDeclaration(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ExportAllDeclaration":\n    case "ExportDefaultDeclaration":\n    case "ExportNamedDeclaration":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isModuleSpecifier(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ExportSpecifier":\n    case "ImportDefaultSpecifier":\n    case "ImportNamespaceSpecifier":\n    case "ImportSpecifier":\n    case "ExportNamespaceSpecifier":\n    case "ExportDefaultSpecifier":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isAccessor(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ClassAccessorProperty":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isPrivate(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "ClassPrivateProperty":\n    case "ClassPrivateMethod":\n    case "PrivateName":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFlow(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "AnyTypeAnnotation":\n    case "ArrayTypeAnnotation":\n    case "BooleanTypeAnnotation":\n    case "BooleanLiteralTypeAnnotation":\n    case "NullLiteralTypeAnnotation":\n    case "ClassImplements":\n    case "DeclareClass":\n    case "DeclareFunction":\n    case "DeclareInterface":\n    case "DeclareModule":\n    case "DeclareModuleExports":\n    case "DeclareTypeAlias":\n    case "DeclareOpaqueType":\n    case "DeclareVariable":\n    case "DeclareExportDeclaration":\n    case "DeclareExportAllDeclaration":\n    case "DeclaredPredicate":\n    case "ExistsTypeAnnotation":\n    case "FunctionTypeAnnotation":\n    case "FunctionTypeParam":\n    case "GenericTypeAnnotation":\n    case "InferredPredicate":\n    case "InterfaceExtends":\n    case "InterfaceDeclaration":\n    case "InterfaceTypeAnnotation":\n    case "IntersectionTypeAnnotation":\n    case "MixedTypeAnnotation":\n    case "EmptyTypeAnnotation":\n    case "NullableTypeAnnotation":\n    case "NumberLiteralTypeAnnotation":\n    case "NumberTypeAnnotation":\n    case "ObjectTypeAnnotation":\n    case "ObjectTypeInternalSlot":\n    case "ObjectTypeCallProperty":\n    case "ObjectTypeIndexer":\n    case "ObjectTypeProperty":\n    case "ObjectTypeSpreadProperty":\n    case "OpaqueType":\n    case "QualifiedTypeIdentifier":\n    case "StringLiteralTypeAnnotation":\n    case "StringTypeAnnotation":\n    case "SymbolTypeAnnotation":\n    case "ThisTypeAnnotation":\n    case "TupleTypeAnnotation":\n    case "TypeofTypeAnnotation":\n    case "TypeAlias":\n    case "TypeAnnotation":\n    case "TypeCastExpression":\n    case "TypeParameter":\n    case "TypeParameterDeclaration":\n    case "TypeParameterInstantiation":\n    case "UnionTypeAnnotation":\n    case "Variance":\n    case "VoidTypeAnnotation":\n    case "EnumDeclaration":\n    case "EnumBooleanBody":\n    case "EnumNumberBody":\n    case "EnumStringBody":\n    case "EnumSymbolBody":\n    case "EnumBooleanMember":\n    case "EnumNumberMember":\n    case "EnumStringMember":\n    case "EnumDefaultedMember":\n    case "IndexedAccessType":\n    case "OptionalIndexedAccessType":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFlowType(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "AnyTypeAnnotation":\n    case "ArrayTypeAnnotation":\n    case "BooleanTypeAnnotation":\n    case "BooleanLiteralTypeAnnotation":\n    case "NullLiteralTypeAnnotation":\n    case "ExistsTypeAnnotation":\n    case "FunctionTypeAnnotation":\n    case "GenericTypeAnnotation":\n    case "InterfaceTypeAnnotation":\n    case "IntersectionTypeAnnotation":\n    case "MixedTypeAnnotation":\n    case "EmptyTypeAnnotation":\n    case "NullableTypeAnnotation":\n    case "NumberLiteralTypeAnnotation":\n    case "NumberTypeAnnotation":\n    case "ObjectTypeAnnotation":\n    case "StringLiteralTypeAnnotation":\n    case "StringTypeAnnotation":\n    case "SymbolTypeAnnotation":\n    case "ThisTypeAnnotation":\n    case "TupleTypeAnnotation":\n    case "TypeofTypeAnnotation":\n    case "UnionTypeAnnotation":\n    case "VoidTypeAnnotation":\n    case "IndexedAccessType":\n    case "OptionalIndexedAccessType":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFlowBaseAnnotation(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "AnyTypeAnnotation":\n    case "BooleanTypeAnnotation":\n    case "NullLiteralTypeAnnotation":\n    case "MixedTypeAnnotation":\n    case "EmptyTypeAnnotation":\n    case "NumberTypeAnnotation":\n    case "StringTypeAnnotation":\n    case "SymbolTypeAnnotation":\n    case "ThisTypeAnnotation":\n    case "VoidTypeAnnotation":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFlowDeclaration(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "DeclareClass":\n    case "DeclareFunction":\n    case "DeclareInterface":\n    case "DeclareModule":\n    case "DeclareModuleExports":\n    case "DeclareTypeAlias":\n    case "DeclareOpaqueType":\n    case "DeclareVariable":\n    case "DeclareExportDeclaration":\n    case "DeclareExportAllDeclaration":\n    case "InterfaceDeclaration":\n    case "OpaqueType":\n    case "TypeAlias":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isFlowPredicate(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "DeclaredPredicate":\n    case "InferredPredicate":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumBody(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "EnumBooleanBody":\n    case "EnumNumberBody":\n    case "EnumStringBody":\n    case "EnumSymbolBody":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isEnumMember(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "EnumBooleanMember":\n    case "EnumNumberMember":\n    case "EnumStringMember":\n    case "EnumDefaultedMember":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isJSX(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "JSXAttribute":\n    case "JSXClosingElement":\n    case "JSXElement":\n    case "JSXEmptyExpression":\n    case "JSXExpressionContainer":\n    case "JSXSpreadChild":\n    case "JSXIdentifier":\n    case "JSXMemberExpression":\n    case "JSXNamespacedName":\n    case "JSXOpeningElement":\n    case "JSXSpreadAttribute":\n    case "JSXText":\n    case "JSXFragment":\n    case "JSXOpeningFragment":\n    case "JSXClosingFragment":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isMiscellaneous(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "Noop":\n    case "Placeholder":\n    case "V8IntrinsicIdentifier":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTypeScript(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "TSParameterProperty":\n    case "TSDeclareFunction":\n    case "TSDeclareMethod":\n    case "TSQualifiedName":\n    case "TSCallSignatureDeclaration":\n    case "TSConstructSignatureDeclaration":\n    case "TSPropertySignature":\n    case "TSMethodSignature":\n    case "TSIndexSignature":\n    case "TSAnyKeyword":\n    case "TSBooleanKeyword":\n    case "TSBigIntKeyword":\n    case "TSIntrinsicKeyword":\n    case "TSNeverKeyword":\n    case "TSNullKeyword":\n    case "TSNumberKeyword":\n    case "TSObjectKeyword":\n    case "TSStringKeyword":\n    case "TSSymbolKeyword":\n    case "TSUndefinedKeyword":\n    case "TSUnknownKeyword":\n    case "TSVoidKeyword":\n    case "TSThisType":\n    case "TSFunctionType":\n    case "TSConstructorType":\n    case "TSTypeReference":\n    case "TSTypePredicate":\n    case "TSTypeQuery":\n    case "TSTypeLiteral":\n    case "TSArrayType":\n    case "TSTupleType":\n    case "TSOptionalType":\n    case "TSRestType":\n    case "TSNamedTupleMember":\n    case "TSUnionType":\n    case "TSIntersectionType":\n    case "TSConditionalType":\n    case "TSInferType":\n    case "TSParenthesizedType":\n    case "TSTypeOperator":\n    case "TSIndexedAccessType":\n    case "TSMappedType":\n    case "TSLiteralType":\n    case "TSExpressionWithTypeArguments":\n    case "TSInterfaceDeclaration":\n    case "TSInterfaceBody":\n    case "TSTypeAliasDeclaration":\n    case "TSInstantiationExpression":\n    case "TSAsExpression":\n    case "TSSatisfiesExpression":\n    case "TSTypeAssertion":\n    case "TSEnumDeclaration":\n    case "TSEnumMember":\n    case "TSModuleDeclaration":\n    case "TSModuleBlock":\n    case "TSImportType":\n    case "TSImportEqualsDeclaration":\n    case "TSExternalModuleReference":\n    case "TSNonNullExpression":\n    case "TSExportAssignment":\n    case "TSNamespaceExportDeclaration":\n    case "TSTypeAnnotation":\n    case "TSTypeParameterInstantiation":\n    case "TSTypeParameterDeclaration":\n    case "TSTypeParameter":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSTypeElement(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "TSCallSignatureDeclaration":\n    case "TSConstructSignatureDeclaration":\n    case "TSPropertySignature":\n    case "TSMethodSignature":\n    case "TSIndexSignature":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSType(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "TSAnyKeyword":\n    case "TSBooleanKeyword":\n    case "TSBigIntKeyword":\n    case "TSIntrinsicKeyword":\n    case "TSNeverKeyword":\n    case "TSNullKeyword":\n    case "TSNumberKeyword":\n    case "TSObjectKeyword":\n    case "TSStringKeyword":\n    case "TSSymbolKeyword":\n    case "TSUndefinedKeyword":\n    case "TSUnknownKeyword":\n    case "TSVoidKeyword":\n    case "TSThisType":\n    case "TSFunctionType":\n    case "TSConstructorType":\n    case "TSTypeReference":\n    case "TSTypePredicate":\n    case "TSTypeQuery":\n    case "TSTypeLiteral":\n    case "TSArrayType":\n    case "TSTupleType":\n    case "TSOptionalType":\n    case "TSRestType":\n    case "TSUnionType":\n    case "TSIntersectionType":\n    case "TSConditionalType":\n    case "TSInferType":\n    case "TSParenthesizedType":\n    case "TSTypeOperator":\n    case "TSIndexedAccessType":\n    case "TSMappedType":\n    case "TSLiteralType":\n    case "TSExpressionWithTypeArguments":\n    case "TSImportType":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isTSBaseType(node, opts) {\n  if (!node) return false;\n  switch (node.type) {\n    case "TSAnyKeyword":\n    case "TSBooleanKeyword":\n    case "TSBigIntKeyword":\n    case "TSIntrinsicKeyword":\n    case "TSNeverKeyword":\n    case "TSNullKeyword":\n    case "TSNumberKeyword":\n    case "TSObjectKeyword":\n    case "TSStringKeyword":\n    case "TSSymbolKeyword":\n    case "TSUndefinedKeyword":\n    case "TSUnknownKeyword":\n    case "TSVoidKeyword":\n    case "TSThisType":\n    case "TSLiteralType":\n      break;\n    default:\n      return false;\n  }\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isNumberLiteral(node, opts) {\n  (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral");\n  if (!node) return false;\n  if (node.type !== "NumberLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isRegexLiteral(node, opts) {\n  (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral");\n  if (!node) return false;\n  if (node.type !== "RegexLiteral") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isRestProperty(node, opts) {\n  (0, _deprecationWarning.default)("isRestProperty", "isRestElement");\n  if (!node) return false;\n  if (node.type !== "RestProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isSpreadProperty(node, opts) {\n  (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement");\n  if (!node) return false;\n  if (node.type !== "SpreadProperty") return false;\n  return opts == null || (0, _shallowEqual.default)(node, opts);\n}\nfunction isModuleDeclaration(node, opts) {\n  (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration");\n  return isImportOrExportDeclaration(node, opts);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///98960\n')},93828:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = is;\nvar _shallowEqual = __webpack_require__(96616);\nvar _isType = __webpack_require__(94460);\nvar _isPlaceholderType = __webpack_require__(53571);\nvar _index = __webpack_require__(39793);\nfunction is(type, node, opts) {\n  if (!node) return false;\n  const matches = (0, _isType.default)(node.type, type);\n  if (!matches) {\n    if (!opts && node.type === "Placeholder" && type in _index.FLIPPED_ALIAS_KEYS) {\n      return (0, _isPlaceholderType.default)(node.expectedNode, type);\n    }\n    return false;\n  }\n  if (opts === undefined) {\n    return true;\n  } else {\n    return (0, _shallowEqual.default)(node, opts);\n  }\n}\n\n//# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM4MjguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixvQkFBb0IsbUJBQU8sQ0FBQyxLQUEwQjtBQUN0RCxjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyx5QkFBeUIsbUJBQU8sQ0FBQyxLQUF3QjtBQUN6RCxhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pcy5qcz9mNWYyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXM7XG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoXCIuLi91dGlscy9zaGFsbG93RXF1YWwuanNcIik7XG52YXIgX2lzVHlwZSA9IHJlcXVpcmUoXCIuL2lzVHlwZS5qc1wiKTtcbnZhciBfaXNQbGFjZWhvbGRlclR5cGUgPSByZXF1aXJlKFwiLi9pc1BsYWNlaG9sZGVyVHlwZS5qc1wiKTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vZGVmaW5pdGlvbnMvaW5kZXguanNcIik7XG5mdW5jdGlvbiBpcyh0eXBlLCBub2RlLCBvcHRzKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBtYXRjaGVzID0gKDAsIF9pc1R5cGUuZGVmYXVsdCkobm9kZS50eXBlLCB0eXBlKTtcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgaWYgKCFvcHRzICYmIG5vZGUudHlwZSA9PT0gXCJQbGFjZWhvbGRlclwiICYmIHR5cGUgaW4gX2luZGV4LkZMSVBQRURfQUxJQVNfS0VZUykge1xuICAgICAgcmV0dXJuICgwLCBfaXNQbGFjZWhvbGRlclR5cGUuZGVmYXVsdCkobm9kZS5leHBlY3RlZE5vZGUsIHR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG9wdHMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbC5kZWZhdWx0KShub2RlLCBvcHRzKTtcbiAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93828\n')},2687:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isBinding;\nvar _getBindingIdentifiers = __webpack_require__(70329);\nfunction isBinding(node, parent, grandparent) {\n  if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {\n    return false;\n  }\n  const keys = _getBindingIdentifiers.default.keys[parent.type];\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const val = parent[key];\n      if (Array.isArray(val)) {\n        if (val.includes(node)) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=isBinding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLDZCQUE2QixtQkFBTyxDQUFDLEtBQXdDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNCaW5kaW5nLmpzP2M0ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0JpbmRpbmc7XG52YXIgX2dldEJpbmRpbmdJZGVudGlmaWVycyA9IHJlcXVpcmUoXCIuLi9yZXRyaWV2ZXJzL2dldEJpbmRpbmdJZGVudGlmaWVycy5qc1wiKTtcbmZ1bmN0aW9uIGlzQmluZGluZyhub2RlLCBwYXJlbnQsIGdyYW5kcGFyZW50KSB7XG4gIGlmIChncmFuZHBhcmVudCAmJiBub2RlLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIHBhcmVudC50eXBlID09PSBcIk9iamVjdFByb3BlcnR5XCIgJiYgZ3JhbmRwYXJlbnQudHlwZSA9PT0gXCJPYmplY3RFeHByZXNzaW9uXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3Qga2V5cyA9IF9nZXRCaW5kaW5nSWRlbnRpZmllcnMuZGVmYXVsdC5rZXlzW3BhcmVudC50eXBlXTtcbiAgaWYgKGtleXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBjb25zdCB2YWwgPSBwYXJlbnRba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgaWYgKHZhbC5pbmNsdWRlcyhub2RlKSkgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmFsID09PSBub2RlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0JpbmRpbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2687\n')},29127:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isBlockScoped;\nvar _index = __webpack_require__(98960);\nvar _isLet = __webpack_require__(63847);\nfunction isBlockScoped(node) {\n  return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);\n}\n\n//# sourceMappingURL=isBlockScoped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkxMjcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBc0I7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLEtBQVk7QUFDakM7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNCbG9ja1Njb3BlZC5qcz9lOTExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNCbG9ja1Njb3BlZDtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX2lzTGV0ID0gcmVxdWlyZShcIi4vaXNMZXQuanNcIik7XG5mdW5jdGlvbiBpc0Jsb2NrU2NvcGVkKG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfaW5kZXguaXNGdW5jdGlvbkRlY2xhcmF0aW9uKShub2RlKSB8fCAoMCwgX2luZGV4LmlzQ2xhc3NEZWNsYXJhdGlvbikobm9kZSkgfHwgKDAsIF9pc0xldC5kZWZhdWx0KShub2RlKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNCbG9ja1Njb3BlZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29127\n')},19722:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isImmutable;\nvar _isType = __webpack_require__(94460);\nvar _index = __webpack_require__(98960);\nfunction isImmutable(node) {\n  if ((0, _isType.default)(node.type, "Immutable")) return true;\n  if ((0, _index.isIdentifier)(node)) {\n    if (node.name === "undefined") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=isImmutable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3MjIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixjQUFjLG1CQUFPLENBQUMsS0FBYTtBQUNuQyxhQUFhLG1CQUFPLENBQUMsS0FBc0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNJbW11dGFibGUuanM/MGFlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzSW1tdXRhYmxlO1xudmFyIF9pc1R5cGUgPSByZXF1aXJlKFwiLi9pc1R5cGUuanNcIik7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gaXNJbW11dGFibGUobm9kZSkge1xuICBpZiAoKDAsIF9pc1R5cGUuZGVmYXVsdCkobm9kZS50eXBlLCBcIkltbXV0YWJsZVwiKSkgcmV0dXJuIHRydWU7XG4gIGlmICgoMCwgX2luZGV4LmlzSWRlbnRpZmllcikobm9kZSkpIHtcbiAgICBpZiAobm9kZS5uYW1lID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW1tdXRhYmxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19722\n')},63847:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isLet;\nvar _index = __webpack_require__(98960);\nvar _index2 = __webpack_require__(93422);\nfunction isLet(node) {\n  return (0, _index.isVariableDeclaration)(node) && (node.kind !== "var" || node[_index2.BLOCK_SCOPED_SYMBOL]);\n}\n\n//# sourceMappingURL=isLet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM4NDcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBc0I7QUFDM0MsY0FBYyxtQkFBTyxDQUFDLEtBQXVCO0FBQzdDO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzTGV0LmpzP2U0MzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0xldDtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX2luZGV4MiA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvaW5kZXguanNcIik7XG5mdW5jdGlvbiBpc0xldChub2RlKSB7XG4gIHJldHVybiAoMCwgX2luZGV4LmlzVmFyaWFibGVEZWNsYXJhdGlvbikobm9kZSkgJiYgKG5vZGUua2luZCAhPT0gXCJ2YXJcIiB8fCBub2RlW19pbmRleDIuQkxPQ0tfU0NPUEVEX1NZTUJPTF0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0xldC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63847\n')},73908:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isNode;\nvar _index = __webpack_require__(39793);\nfunction isNode(node) {\n  return !!(node && _index.VISITOR_KEYS[node.type]);\n}\n\n//# sourceMappingURL=isNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM5MDguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUM7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNOb2RlLmpzP2U2ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc05vZGU7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uL2RlZmluaXRpb25zL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgcmV0dXJuICEhKG5vZGUgJiYgX2luZGV4LlZJU0lUT1JfS0VZU1tub2RlLnR5cGVdKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNOb2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73908\n')},7003:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isNodesEquivalent;\nvar _index = __webpack_require__(39793);\nfunction isNodesEquivalent(a, b) {\n  if (typeof a !== "object" || typeof b !== "object" || a == null || b == null) {\n    return a === b;\n  }\n  if (a.type !== b.type) {\n    return false;\n  }\n  const fields = Object.keys(_index.NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = _index.VISITOR_KEYS[a.type];\n  for (const field of fields) {\n    const val_a = a[field];\n    const val_b = b[field];\n    if (typeof val_a !== typeof val_b) {\n      return false;\n    }\n    if (val_a == null && val_b == null) {\n      continue;\n    } else if (val_a == null || val_b == null) {\n      return false;\n    }\n    if (Array.isArray(val_a)) {\n      if (!Array.isArray(val_b)) {\n        return false;\n      }\n      if (val_a.length !== val_b.length) {\n        return false;\n      }\n      for (let i = 0; i < val_a.length; i++) {\n        if (!isNodesEquivalent(val_a[i], val_b[i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n    if (typeof val_a === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {\n      for (const key of Object.keys(val_a)) {\n        if (val_a[key] !== val_b[key]) {\n          return false;\n        }\n      }\n      continue;\n    }\n    if (!isNodesEquivalent(val_a, val_b)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n//# sourceMappingURL=isNodesEquivalent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAwMy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7QUFDRixrQkFBZTtBQUNmLGFBQWEsbUJBQU8sQ0FBQyxLQUF5QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzTm9kZXNFcXVpdmFsZW50LmpzP2Y4YzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc05vZGVzRXF1aXZhbGVudDtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vZGVmaW5pdGlvbnMvaW5kZXguanNcIik7XG5mdW5jdGlvbiBpc05vZGVzRXF1aXZhbGVudChhLCBiKSB7XG4gIGlmICh0eXBlb2YgYSAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIiB8fCBhID09IG51bGwgfHwgYiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cbiAgaWYgKGEudHlwZSAhPT0gYi50eXBlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGZpZWxkcyA9IE9iamVjdC5rZXlzKF9pbmRleC5OT0RFX0ZJRUxEU1thLnR5cGVdIHx8IGEudHlwZSk7XG4gIGNvbnN0IHZpc2l0b3JLZXlzID0gX2luZGV4LlZJU0lUT1JfS0VZU1thLnR5cGVdO1xuICBmb3IgKGNvbnN0IGZpZWxkIG9mIGZpZWxkcykge1xuICAgIGNvbnN0IHZhbF9hID0gYVtmaWVsZF07XG4gICAgY29uc3QgdmFsX2IgPSBiW2ZpZWxkXTtcbiAgICBpZiAodHlwZW9mIHZhbF9hICE9PSB0eXBlb2YgdmFsX2IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbF9hID09IG51bGwgJiYgdmFsX2IgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmICh2YWxfYSA9PSBudWxsIHx8IHZhbF9iID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsX2EpKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsX2IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWxfYS5sZW5ndGggIT09IHZhbF9iLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbF9hLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNOb2Rlc0VxdWl2YWxlbnQodmFsX2FbaV0sIHZhbF9iW2ldKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsX2EgPT09IFwib2JqZWN0XCIgJiYgISh2aXNpdG9yS2V5cyAhPSBudWxsICYmIHZpc2l0b3JLZXlzLmluY2x1ZGVzKGZpZWxkKSkpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHZhbF9hKSkge1xuICAgICAgICBpZiAodmFsX2Fba2V5XSAhPT0gdmFsX2Jba2V5XSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghaXNOb2Rlc0VxdWl2YWxlbnQodmFsX2EsIHZhbF9iKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNOb2Rlc0VxdWl2YWxlbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7003\n')},53571:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isPlaceholderType;\nvar _index = __webpack_require__(39793);\nfunction isPlaceholderType(placeholderType, targetType) {\n  if (placeholderType === targetType) return true;\n  const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];\n  if (aliases) {\n    for (const alias of aliases) {\n      if (targetType === alias) return true;\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=isPlaceholderType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTM1NzEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc1BsYWNlaG9sZGVyVHlwZS5qcz9lM2Y0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNQbGFjZWhvbGRlclR5cGU7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4uL2RlZmluaXRpb25zL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gaXNQbGFjZWhvbGRlclR5cGUocGxhY2Vob2xkZXJUeXBlLCB0YXJnZXRUeXBlKSB7XG4gIGlmIChwbGFjZWhvbGRlclR5cGUgPT09IHRhcmdldFR5cGUpIHJldHVybiB0cnVlO1xuICBjb25zdCBhbGlhc2VzID0gX2luZGV4LlBMQUNFSE9MREVSU19BTElBU1twbGFjZWhvbGRlclR5cGVdO1xuICBpZiAoYWxpYXNlcykge1xuICAgIGZvciAoY29uc3QgYWxpYXMgb2YgYWxpYXNlcykge1xuICAgICAgaWYgKHRhcmdldFR5cGUgPT09IGFsaWFzKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1BsYWNlaG9sZGVyVHlwZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53571\n')},37591:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isReferenced;\nfunction isReferenced(node, parent, grandparent) {\n  switch (parent.type) {\n    case "MemberExpression":\n    case "OptionalMemberExpression":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n    case "JSXMemberExpression":\n      return parent.object === node;\n    case "VariableDeclarator":\n      return parent.init === node;\n    case "ArrowFunctionExpression":\n      return parent.body === node;\n    case "PrivateName":\n      return false;\n    case "ClassMethod":\n    case "ClassPrivateMethod":\n    case "ObjectMethod":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n    case "ObjectProperty":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return !grandparent || grandparent.type !== "ObjectPattern";\n    case "ClassProperty":\n    case "ClassAccessorProperty":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case "ClassPrivateProperty":\n      return parent.key !== node;\n    case "ClassDeclaration":\n    case "ClassExpression":\n      return parent.superClass === node;\n    case "AssignmentExpression":\n      return parent.right === node;\n    case "AssignmentPattern":\n      return parent.right === node;\n    case "LabeledStatement":\n      return false;\n    case "CatchClause":\n      return false;\n    case "RestElement":\n      return false;\n    case "BreakStatement":\n    case "ContinueStatement":\n      return false;\n    case "FunctionDeclaration":\n    case "FunctionExpression":\n      return false;\n    case "ExportNamespaceSpecifier":\n    case "ExportDefaultSpecifier":\n      return false;\n    case "ExportSpecifier":\n      if (grandparent != null && grandparent.source) {\n        return false;\n      }\n      return parent.local === node;\n    case "ImportDefaultSpecifier":\n    case "ImportNamespaceSpecifier":\n    case "ImportSpecifier":\n      return false;\n    case "ImportAttribute":\n      return false;\n    case "JSXAttribute":\n      return false;\n    case "ObjectPattern":\n    case "ArrayPattern":\n      return false;\n    case "MetaProperty":\n      return false;\n    case "ObjectTypeProperty":\n      return parent.key !== node;\n    case "TSEnumMember":\n      return parent.id !== node;\n    case "TSPropertySignature":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n  }\n  return true;\n}\n\n//# sourceMappingURL=isReferenced.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc1OTEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzUmVmZXJlbmNlZC5qcz8zZmQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNSZWZlcmVuY2VkO1xuZnVuY3Rpb24gaXNSZWZlcmVuY2VkKG5vZGUsIHBhcmVudCwgZ3JhbmRwYXJlbnQpIHtcbiAgc3dpdGNoIChwYXJlbnQudHlwZSkge1xuICAgIGNhc2UgXCJNZW1iZXJFeHByZXNzaW9uXCI6XG4gICAgY2FzZSBcIk9wdGlvbmFsTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgaWYgKHBhcmVudC5wcm9wZXJ0eSA9PT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gISFwYXJlbnQuY29tcHV0ZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyZW50Lm9iamVjdCA9PT0gbm9kZTtcbiAgICBjYXNlIFwiSlNYTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgcmV0dXJuIHBhcmVudC5vYmplY3QgPT09IG5vZGU7XG4gICAgY2FzZSBcIlZhcmlhYmxlRGVjbGFyYXRvclwiOlxuICAgICAgcmV0dXJuIHBhcmVudC5pbml0ID09PSBub2RlO1xuICAgIGNhc2UgXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiOlxuICAgICAgcmV0dXJuIHBhcmVudC5ib2R5ID09PSBub2RlO1xuICAgIGNhc2UgXCJQcml2YXRlTmFtZVwiOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJDbGFzc01ldGhvZFwiOlxuICAgIGNhc2UgXCJDbGFzc1ByaXZhdGVNZXRob2RcIjpcbiAgICBjYXNlIFwiT2JqZWN0TWV0aG9kXCI6XG4gICAgICBpZiAocGFyZW50LmtleSA9PT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gISFwYXJlbnQuY29tcHV0ZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIk9iamVjdFByb3BlcnR5XCI6XG4gICAgICBpZiAocGFyZW50LmtleSA9PT0gbm9kZSkge1xuICAgICAgICByZXR1cm4gISFwYXJlbnQuY29tcHV0ZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gIWdyYW5kcGFyZW50IHx8IGdyYW5kcGFyZW50LnR5cGUgIT09IFwiT2JqZWN0UGF0dGVyblwiO1xuICAgIGNhc2UgXCJDbGFzc1Byb3BlcnR5XCI6XG4gICAgY2FzZSBcIkNsYXNzQWNjZXNzb3JQcm9wZXJ0eVwiOlxuICAgICAgaWYgKHBhcmVudC5rZXkgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICEhcGFyZW50LmNvbXB1dGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSBcIkNsYXNzUHJpdmF0ZVByb3BlcnR5XCI6XG4gICAgICByZXR1cm4gcGFyZW50LmtleSAhPT0gbm9kZTtcbiAgICBjYXNlIFwiQ2xhc3NEZWNsYXJhdGlvblwiOlxuICAgIGNhc2UgXCJDbGFzc0V4cHJlc3Npb25cIjpcbiAgICAgIHJldHVybiBwYXJlbnQuc3VwZXJDbGFzcyA9PT0gbm9kZTtcbiAgICBjYXNlIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIjpcbiAgICAgIHJldHVybiBwYXJlbnQucmlnaHQgPT09IG5vZGU7XG4gICAgY2FzZSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCI6XG4gICAgICByZXR1cm4gcGFyZW50LnJpZ2h0ID09PSBub2RlO1xuICAgIGNhc2UgXCJMYWJlbGVkU3RhdGVtZW50XCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIkNhdGNoQ2xhdXNlXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIlJlc3RFbGVtZW50XCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIkJyZWFrU3RhdGVtZW50XCI6XG4gICAgY2FzZSBcIkNvbnRpbnVlU3RhdGVtZW50XCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIjpcbiAgICBjYXNlIFwiRnVuY3Rpb25FeHByZXNzaW9uXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIkV4cG9ydE5hbWVzcGFjZVNwZWNpZmllclwiOlxuICAgIGNhc2UgXCJFeHBvcnREZWZhdWx0U3BlY2lmaWVyXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIkV4cG9ydFNwZWNpZmllclwiOlxuICAgICAgaWYgKGdyYW5kcGFyZW50ICE9IG51bGwgJiYgZ3JhbmRwYXJlbnQuc291cmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJlbnQubG9jYWwgPT09IG5vZGU7XG4gICAgY2FzZSBcIkltcG9ydERlZmF1bHRTcGVjaWZpZXJcIjpcbiAgICBjYXNlIFwiSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCI6XG4gICAgY2FzZSBcIkltcG9ydFNwZWNpZmllclwiOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJJbXBvcnRBdHRyaWJ1dGVcIjpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwiSlNYQXR0cmlidXRlXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcbiAgICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcIk1ldGFQcm9wZXJ0eVwiOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNhc2UgXCJPYmplY3RUeXBlUHJvcGVydHlcIjpcbiAgICAgIHJldHVybiBwYXJlbnQua2V5ICE9PSBub2RlO1xuICAgIGNhc2UgXCJUU0VudW1NZW1iZXJcIjpcbiAgICAgIHJldHVybiBwYXJlbnQuaWQgIT09IG5vZGU7XG4gICAgY2FzZSBcIlRTUHJvcGVydHlTaWduYXR1cmVcIjpcbiAgICAgIGlmIChwYXJlbnQua2V5ID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiAhIXBhcmVudC5jb21wdXRlZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlZmVyZW5jZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37591\n')},89246:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isScope;\nvar _index = __webpack_require__(98960);\nfunction isScope(node, parent) {\n  if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {\n    return false;\n  }\n  if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {\n    return true;\n  }\n  return (0, _index.isScopable)(node);\n}\n\n//# sourceMappingURL=isScope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkyNDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBc0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNTY29wZS5qcz8zZmI2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNTY29wZTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG5mdW5jdGlvbiBpc1Njb3BlKG5vZGUsIHBhcmVudCkge1xuICBpZiAoKDAsIF9pbmRleC5pc0Jsb2NrU3RhdGVtZW50KShub2RlKSAmJiAoKDAsIF9pbmRleC5pc0Z1bmN0aW9uKShwYXJlbnQpIHx8ICgwLCBfaW5kZXguaXNDYXRjaENsYXVzZSkocGFyZW50KSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKCgwLCBfaW5kZXguaXNQYXR0ZXJuKShub2RlKSAmJiAoKDAsIF9pbmRleC5pc0Z1bmN0aW9uKShwYXJlbnQpIHx8ICgwLCBfaW5kZXguaXNDYXRjaENsYXVzZSkocGFyZW50KSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gKDAsIF9pbmRleC5pc1Njb3BhYmxlKShub2RlKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTY29wZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///89246\n')},22457:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isSpecifierDefault;\nvar _index = __webpack_require__(98960);\nfunction isSpecifierDefault(specifier) {\n  return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, {\n    name: "default"\n  });\n}\n\n//# sourceMappingURL=isSpecifierDefault.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0NTcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBc0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvaXNTcGVjaWZpZXJEZWZhdWx0LmpzPzgwZDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1NwZWNpZmllckRlZmF1bHQ7XG52YXIgX2luZGV4ID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVkL2luZGV4LmpzXCIpO1xuZnVuY3Rpb24gaXNTcGVjaWZpZXJEZWZhdWx0KHNwZWNpZmllcikge1xuICByZXR1cm4gKDAsIF9pbmRleC5pc0ltcG9ydERlZmF1bHRTcGVjaWZpZXIpKHNwZWNpZmllcikgfHwgKDAsIF9pbmRleC5pc0lkZW50aWZpZXIpKHNwZWNpZmllci5pbXBvcnRlZCB8fCBzcGVjaWZpZXIuZXhwb3J0ZWQsIHtcbiAgICBuYW1lOiBcImRlZmF1bHRcIlxuICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTcGVjaWZpZXJEZWZhdWx0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22457\n')},94460:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isType;\nvar _index = __webpack_require__(39793);\nfunction isType(nodeType, targetType) {\n  if (nodeType === targetType) return true;\n  if (nodeType == null) return false;\n  if (_index.ALIAS_KEYS[targetType]) return false;\n  const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n    for (const alias of aliases) {\n      if (nodeType === alias) return true;\n    }\n  }\n  return false;\n}\n\n//# sourceMappingURL=isType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ0NjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc1R5cGUuanM/ZmE0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVHlwZTtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi4vZGVmaW5pdGlvbnMvaW5kZXguanNcIik7XG5mdW5jdGlvbiBpc1R5cGUobm9kZVR5cGUsIHRhcmdldFR5cGUpIHtcbiAgaWYgKG5vZGVUeXBlID09PSB0YXJnZXRUeXBlKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG5vZGVUeXBlID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKF9pbmRleC5BTElBU19LRVlTW3RhcmdldFR5cGVdKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGFsaWFzZXMgPSBfaW5kZXguRkxJUFBFRF9BTElBU19LRVlTW3RhcmdldFR5cGVdO1xuICBpZiAoYWxpYXNlcykge1xuICAgIGlmIChhbGlhc2VzWzBdID09PSBub2RlVHlwZSkgcmV0dXJuIHRydWU7XG4gICAgZm9yIChjb25zdCBhbGlhcyBvZiBhbGlhc2VzKSB7XG4gICAgICBpZiAobm9kZVR5cGUgPT09IGFsaWFzKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1R5cGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94460\n')},91384:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isValidES3Identifier;\nvar _isValidIdentifier = __webpack_require__(60983);\nconst RESERVED_WORDS_ES3_ONLY = new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);\nfunction isValidES3Identifier(name) {\n  return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);\n}\n\n//# sourceMappingURL=isValidES3Identifier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEzODQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZix5QkFBeUIsbUJBQU8sQ0FBQyxLQUF3QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzVmFsaWRFUzNJZGVudGlmaWVyLmpzPzFiM2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ZhbGlkRVMzSWRlbnRpZmllcjtcbnZhciBfaXNWYWxpZElkZW50aWZpZXIgPSByZXF1aXJlKFwiLi9pc1ZhbGlkSWRlbnRpZmllci5qc1wiKTtcbmNvbnN0IFJFU0VSVkVEX1dPUkRTX0VTM19PTkxZID0gbmV3IFNldChbXCJhYnN0cmFjdFwiLCBcImJvb2xlYW5cIiwgXCJieXRlXCIsIFwiY2hhclwiLCBcImRvdWJsZVwiLCBcImVudW1cIiwgXCJmaW5hbFwiLCBcImZsb2F0XCIsIFwiZ290b1wiLCBcImltcGxlbWVudHNcIiwgXCJpbnRcIiwgXCJpbnRlcmZhY2VcIiwgXCJsb25nXCIsIFwibmF0aXZlXCIsIFwicGFja2FnZVwiLCBcInByaXZhdGVcIiwgXCJwcm90ZWN0ZWRcIiwgXCJwdWJsaWNcIiwgXCJzaG9ydFwiLCBcInN0YXRpY1wiLCBcInN5bmNocm9uaXplZFwiLCBcInRocm93c1wiLCBcInRyYW5zaWVudFwiLCBcInZvbGF0aWxlXCJdKTtcbmZ1bmN0aW9uIGlzVmFsaWRFUzNJZGVudGlmaWVyKG5hbWUpIHtcbiAgcmV0dXJuICgwLCBfaXNWYWxpZElkZW50aWZpZXIuZGVmYXVsdCkobmFtZSkgJiYgIVJFU0VSVkVEX1dPUkRTX0VTM19PTkxZLmhhcyhuYW1lKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNWYWxpZEVTM0lkZW50aWZpZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91384\n')},60983:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isValidIdentifier;\nvar _helperValidatorIdentifier = __webpack_require__(61000);\nfunction isValidIdentifier(name, reserved = true) {\n  if (typeof name !== "string") return false;\n  if (reserved) {\n    if ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)) {\n      return false;\n    }\n  }\n  return (0, _helperValidatorIdentifier.isIdentifierName)(name);\n}\n\n//# sourceMappingURL=isValidIdentifier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA5ODMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixpQ0FBaUMsbUJBQU8sQ0FBQyxLQUFvQztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9pc1ZhbGlkSWRlbnRpZmllci5qcz84MWUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNWYWxpZElkZW50aWZpZXI7XG52YXIgX2hlbHBlclZhbGlkYXRvcklkZW50aWZpZXIgPSByZXF1aXJlKFwiQGJhYmVsL2hlbHBlci12YWxpZGF0b3ItaWRlbnRpZmllclwiKTtcbmZ1bmN0aW9uIGlzVmFsaWRJZGVudGlmaWVyKG5hbWUsIHJlc2VydmVkID0gdHJ1ZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHJldHVybiBmYWxzZTtcbiAgaWYgKHJlc2VydmVkKSB7XG4gICAgaWYgKCgwLCBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllci5pc0tleXdvcmQpKG5hbWUpIHx8ICgwLCBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllci5pc1N0cmljdFJlc2VydmVkV29yZCkobmFtZSwgdHJ1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICgwLCBfaGVscGVyVmFsaWRhdG9ySWRlbnRpZmllci5pc0lkZW50aWZpZXJOYW1lKShuYW1lKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNWYWxpZElkZW50aWZpZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60983\n')},70499:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isVar;\nvar _index = __webpack_require__(98960);\nvar _index2 = __webpack_require__(93422);\nfunction isVar(node) {\n  return (0, _index.isVariableDeclaration)(node, {\n    kind: "var"\n  }) && !node[_index2.BLOCK_SCOPED_SYMBOL];\n}\n\n//# sourceMappingURL=isVar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA0OTkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBc0I7QUFDM0MsY0FBYyxtQkFBTyxDQUFDLEtBQXVCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3R5cGVzL2xpYi92YWxpZGF0b3JzL2lzVmFyLmpzP2ZkNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ZhcjtcbnZhciBfaW5kZXggPSByZXF1aXJlKFwiLi9nZW5lcmF0ZWQvaW5kZXguanNcIik7XG52YXIgX2luZGV4MiA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMvaW5kZXguanNcIik7XG5mdW5jdGlvbiBpc1Zhcihub2RlKSB7XG4gIHJldHVybiAoMCwgX2luZGV4LmlzVmFyaWFibGVEZWNsYXJhdGlvbikobm9kZSwge1xuICAgIGtpbmQ6IFwidmFyXCJcbiAgfSkgJiYgIW5vZGVbX2luZGV4Mi5CTE9DS19TQ09QRURfU1lNQk9MXTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNWYXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70499\n')},94965:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = matchesPattern;\nvar _index = __webpack_require__(98960);\nfunction matchesPattern(member, match, allowPartial) {\n  if (!(0, _index.isMemberExpression)(member)) return false;\n  const parts = Array.isArray(match) ? match : match.split(".");\n  const nodes = [];\n  let node;\n  for (node = member; (0, _index.isMemberExpression)(node); node = node.object) {\n    nodes.push(node.property);\n  }\n  nodes.push(node);\n  if (nodes.length < parts.length) return false;\n  if (!allowPartial && nodes.length > parts.length) return false;\n  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {\n    const node = nodes[j];\n    let value;\n    if ((0, _index.isIdentifier)(node)) {\n      value = node.name;\n    } else if ((0, _index.isStringLiteral)(node)) {\n      value = node.value;\n    } else if ((0, _index.isThisExpression)(node)) {\n      value = "this";\n    } else {\n      return false;\n    }\n    if (parts[i] !== value) return false;\n  }\n  return true;\n}\n\n//# sourceMappingURL=matchesPattern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ5NjUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixhQUFhLG1CQUFPLENBQUMsS0FBc0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQ0FBc0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxrQkFBa0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvbWF0Y2hlc1BhdHRlcm4uanM/OGM0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1hdGNoZXNQYXR0ZXJuO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZC9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIG1hdGNoZXNQYXR0ZXJuKG1lbWJlciwgbWF0Y2gsIGFsbG93UGFydGlhbCkge1xuICBpZiAoISgwLCBfaW5kZXguaXNNZW1iZXJFeHByZXNzaW9uKShtZW1iZXIpKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHBhcnRzID0gQXJyYXkuaXNBcnJheShtYXRjaCkgPyBtYXRjaCA6IG1hdGNoLnNwbGl0KFwiLlwiKTtcbiAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgbGV0IG5vZGU7XG4gIGZvciAobm9kZSA9IG1lbWJlcjsgKDAsIF9pbmRleC5pc01lbWJlckV4cHJlc3Npb24pKG5vZGUpOyBub2RlID0gbm9kZS5vYmplY3QpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUucHJvcGVydHkpO1xuICB9XG4gIG5vZGVzLnB1c2gobm9kZSk7XG4gIGlmIChub2Rlcy5sZW5ndGggPCBwYXJ0cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFhbGxvd1BhcnRpYWwgJiYgbm9kZXMubGVuZ3RoID4gcGFydHMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwLCBqID0gbm9kZXMubGVuZ3RoIC0gMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrLCBqLS0pIHtcbiAgICBjb25zdCBub2RlID0gbm9kZXNbal07XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICgoMCwgX2luZGV4LmlzSWRlbnRpZmllcikobm9kZSkpIHtcbiAgICAgIHZhbHVlID0gbm9kZS5uYW1lO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pbmRleC5pc1N0cmluZ0xpdGVyYWwpKG5vZGUpKSB7XG4gICAgICB2YWx1ZSA9IG5vZGUudmFsdWU7XG4gICAgfSBlbHNlIGlmICgoMCwgX2luZGV4LmlzVGhpc0V4cHJlc3Npb24pKG5vZGUpKSB7XG4gICAgICB2YWx1ZSA9IFwidGhpc1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwYXJ0c1tpXSAhPT0gdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2hlc1BhdHRlcm4uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94965\n')},85004:(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = isCompatTag;\nfunction isCompatTag(tagName) {\n  return !!tagName && /^[a-z]/.test(tagName);\n}\n\n//# sourceMappingURL=isCompatTag.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUwMDQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWdhbC11aS1kb2NzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC90eXBlcy9saWIvdmFsaWRhdG9ycy9yZWFjdC9pc0NvbXBhdFRhZy5qcz8zMThlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNDb21wYXRUYWc7XG5mdW5jdGlvbiBpc0NvbXBhdFRhZyh0YWdOYW1lKSB7XG4gIHJldHVybiAhIXRhZ05hbWUgJiYgL15bYS16XS8udGVzdCh0YWdOYW1lKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNDb21wYXRUYWcuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///85004\n')},45682:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = void 0;\nvar _buildMatchMemberExpression = __webpack_require__(3937);\nconst isReactComponent = (0, _buildMatchMemberExpression.default)("React.Component");\nvar _default = exports["default"] = isReactComponent;\n\n//# sourceMappingURL=isReactComponent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU2ODIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixrQ0FBa0MsbUJBQU8sQ0FBQyxJQUFrQztBQUM1RTtBQUNBLGVBQWUsa0JBQWU7O0FBRTlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvcmVhY3QvaXNSZWFjdENvbXBvbmVudC5qcz9lNjVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9idWlsZE1hdGNoTWVtYmVyRXhwcmVzc2lvbiA9IHJlcXVpcmUoXCIuLi9idWlsZE1hdGNoTWVtYmVyRXhwcmVzc2lvbi5qc1wiKTtcbmNvbnN0IGlzUmVhY3RDb21wb25lbnQgPSAoMCwgX2J1aWxkTWF0Y2hNZW1iZXJFeHByZXNzaW9uLmRlZmF1bHQpKFwiUmVhY3QuQ29tcG9uZW50XCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gaXNSZWFjdENvbXBvbmVudDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFjdENvbXBvbmVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45682\n')},57446:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports["default"] = validate;\nexports.validateChild = validateChild;\nexports.validateField = validateField;\nexports.validateInternal = validateInternal;\nvar _index = __webpack_require__(39793);\nfunction validate(node, key, val) {\n  if (!node) return;\n  const fields = _index.NODE_FIELDS[node.type];\n  if (!fields) return;\n  const field = fields[key];\n  validateField(node, key, val, field);\n  validateChild(node, key, val);\n}\nfunction validateInternal(field, node, key, val, maybeNode) {\n  if (!(field != null && field.validate)) return;\n  if (field.optional && val == null) return;\n  field.validate(node, key, val);\n  if (maybeNode) {\n    var _NODE_PARENT_VALIDATI;\n    const type = val.type;\n    if (type == null) return;\n    (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);\n  }\n}\nfunction validateField(node, key, val, field) {\n  if (!(field != null && field.validate)) return;\n  if (field.optional && val == null) return;\n  field.validate(node, key, val);\n}\nfunction validateChild(node, key, val) {\n  var _NODE_PARENT_VALIDATI2;\n  const type = val == null ? void 0 : val.type;\n  if (type == null) return;\n  (_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);\n}\n\n//# sourceMappingURL=validate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc0NDYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7QUFDZixxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCLHdCQUF3QjtBQUN4QixhQUFhLG1CQUFPLENBQUMsS0FBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVnYWwtdWktZG9jcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvdHlwZXMvbGliL3ZhbGlkYXRvcnMvdmFsaWRhdGUuanM/ODNlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlO1xuZXhwb3J0cy52YWxpZGF0ZUNoaWxkID0gdmFsaWRhdGVDaGlsZDtcbmV4cG9ydHMudmFsaWRhdGVGaWVsZCA9IHZhbGlkYXRlRmllbGQ7XG5leHBvcnRzLnZhbGlkYXRlSW50ZXJuYWwgPSB2YWxpZGF0ZUludGVybmFsO1xudmFyIF9pbmRleCA9IHJlcXVpcmUoXCIuLi9kZWZpbml0aW9ucy9pbmRleC5qc1wiKTtcbmZ1bmN0aW9uIHZhbGlkYXRlKG5vZGUsIGtleSwgdmFsKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuO1xuICBjb25zdCBmaWVsZHMgPSBfaW5kZXguTk9ERV9GSUVMRFNbbm9kZS50eXBlXTtcbiAgaWYgKCFmaWVsZHMpIHJldHVybjtcbiAgY29uc3QgZmllbGQgPSBmaWVsZHNba2V5XTtcbiAgdmFsaWRhdGVGaWVsZChub2RlLCBrZXksIHZhbCwgZmllbGQpO1xuICB2YWxpZGF0ZUNoaWxkKG5vZGUsIGtleSwgdmFsKTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlSW50ZXJuYWwoZmllbGQsIG5vZGUsIGtleSwgdmFsLCBtYXliZU5vZGUpIHtcbiAgaWYgKCEoZmllbGQgIT0gbnVsbCAmJiBmaWVsZC52YWxpZGF0ZSkpIHJldHVybjtcbiAgaWYgKGZpZWxkLm9wdGlvbmFsICYmIHZhbCA9PSBudWxsKSByZXR1cm47XG4gIGZpZWxkLnZhbGlkYXRlKG5vZGUsIGtleSwgdmFsKTtcbiAgaWYgKG1heWJlTm9kZSkge1xuICAgIHZhciBfTk9ERV9QQVJFTlRfVkFMSURBVEk7XG4gICAgY29uc3QgdHlwZSA9IHZhbC50eXBlO1xuICAgIGlmICh0eXBlID09IG51bGwpIHJldHVybjtcbiAgICAoX05PREVfUEFSRU5UX1ZBTElEQVRJID0gX2luZGV4Lk5PREVfUEFSRU5UX1ZBTElEQVRJT05TW3R5cGVdKSA9PSBudWxsIHx8IF9OT0RFX1BBUkVOVF9WQUxJREFUSS5jYWxsKF9pbmRleC5OT0RFX1BBUkVOVF9WQUxJREFUSU9OUywgbm9kZSwga2V5LCB2YWwpO1xuICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUZpZWxkKG5vZGUsIGtleSwgdmFsLCBmaWVsZCkge1xuICBpZiAoIShmaWVsZCAhPSBudWxsICYmIGZpZWxkLnZhbGlkYXRlKSkgcmV0dXJuO1xuICBpZiAoZmllbGQub3B0aW9uYWwgJiYgdmFsID09IG51bGwpIHJldHVybjtcbiAgZmllbGQudmFsaWRhdGUobm9kZSwga2V5LCB2YWwpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZChub2RlLCBrZXksIHZhbCkge1xuICB2YXIgX05PREVfUEFSRU5UX1ZBTElEQVRJMjtcbiAgY29uc3QgdHlwZSA9IHZhbCA9PSBudWxsID8gdm9pZCAwIDogdmFsLnR5cGU7XG4gIGlmICh0eXBlID09IG51bGwpIHJldHVybjtcbiAgKF9OT0RFX1BBUkVOVF9WQUxJREFUSTIgPSBfaW5kZXguTk9ERV9QQVJFTlRfVkFMSURBVElPTlNbdHlwZV0pID09IG51bGwgfHwgX05PREVfUEFSRU5UX1ZBTElEQVRJMi5jYWxsKF9pbmRleC5OT0RFX1BBUkVOVF9WQUxJREFUSU9OUywgbm9kZSwga2V5LCB2YWwpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///57446\n')},68553:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Ay: () => (/* binding */ Ft)\n});\n\n// UNUSED EXPORTS: DiffEditor, Editor, loader, useMonaco\n\n;// ./node_modules/@monaco-editor/loader/lib/es/_virtual/_rollupPluginBabelHelpers.js\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\n\n\n;// ./node_modules/state-local/lib/es/state-local.js\nfunction state_local_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction state_local_ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction state_local_objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      state_local_ownKeys(Object(source), true).forEach(function (key) {\n        state_local_defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      state_local_ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction compose() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (x) {\n    return fns.reduceRight(function (y, f) {\n      return f(y);\n    }, x);\n  };\n}\n\nfunction curry(fn) {\n  return function curried() {\n    var _this = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return args.length >= fn.length ? fn.apply(this, args) : function () {\n      for (var _len3 = arguments.length, nextArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        nextArgs[_key3] = arguments[_key3];\n      }\n\n      return curried.apply(_this, [].concat(args, nextArgs));\n    };\n  };\n}\n\nfunction isObject(value) {\n  return {}.toString.call(value).includes(\'Object\');\n}\n\nfunction isEmpty(obj) {\n  return !Object.keys(obj).length;\n}\n\nfunction isFunction(value) {\n  return typeof value === \'function\';\n}\n\nfunction state_local_hasOwnProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\n\nfunction validateChanges(initial, changes) {\n  if (!isObject(changes)) errorHandler(\'changeType\');\n  if (Object.keys(changes).some(function (field) {\n    return !state_local_hasOwnProperty(initial, field);\n  })) errorHandler(\'changeField\');\n  return changes;\n}\n\nfunction validateSelector(selector) {\n  if (!isFunction(selector)) errorHandler(\'selectorType\');\n}\n\nfunction validateHandler(handler) {\n  if (!(isFunction(handler) || isObject(handler))) errorHandler(\'handlerType\');\n  if (isObject(handler) && Object.values(handler).some(function (_handler) {\n    return !isFunction(_handler);\n  })) errorHandler(\'handlersType\');\n}\n\nfunction validateInitial(initial) {\n  if (!initial) errorHandler(\'initialIsRequired\');\n  if (!isObject(initial)) errorHandler(\'initialType\');\n  if (isEmpty(initial)) errorHandler(\'initialContent\');\n}\n\nfunction throwError(errorMessages, type) {\n  throw new Error(errorMessages[type] || errorMessages["default"]);\n}\n\nvar errorMessages = {\n  initialIsRequired: \'initial state is required\',\n  initialType: \'initial state should be an object\',\n  initialContent: \'initial state shouldn\\\'t be an empty object\',\n  handlerType: \'handler should be an object or a function\',\n  handlersType: \'all handlers should be a functions\',\n  selectorType: \'selector should be a function\',\n  changeType: \'provided value of changes should be an object\',\n  changeField: \'it seams you want to change a field in the state which is not specified in the "initial" state\',\n  "default": \'an unknown error accured in `state-local` package\'\n};\nvar errorHandler = curry(throwError)(errorMessages);\nvar validators = {\n  changes: validateChanges,\n  selector: validateSelector,\n  handler: validateHandler,\n  initial: validateInitial\n};\n\nfunction create(initial) {\n  var handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validators.initial(initial);\n  validators.handler(handler);\n  var state = {\n    current: initial\n  };\n  var didUpdate = curry(didStateUpdate)(state, handler);\n  var update = curry(updateState)(state);\n  var validate = curry(validators.changes)(initial);\n  var getChanges = curry(extractChanges)(state);\n\n  function getState() {\n    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (state) {\n      return state;\n    };\n    validators.selector(selector);\n    return selector(state.current);\n  }\n\n  function setState(causedChanges) {\n    compose(didUpdate, update, validate, getChanges)(causedChanges);\n  }\n\n  return [getState, setState];\n}\n\nfunction extractChanges(state, causedChanges) {\n  return isFunction(causedChanges) ? causedChanges(state.current) : causedChanges;\n}\n\nfunction updateState(state, changes) {\n  state.current = state_local_objectSpread2(state_local_objectSpread2({}, state.current), changes);\n  return changes;\n}\n\nfunction didStateUpdate(state, handler, changes) {\n  isFunction(handler) ? handler(state.current) : Object.keys(changes).forEach(function (field) {\n    var _handler$field;\n\n    return (_handler$field = handler[field]) === null || _handler$field === void 0 ? void 0 : _handler$field.call(handler, state.current[field]);\n  });\n  return changes;\n}\n\nvar index = {\n  create: create\n};\n\n/* harmony default export */ const state_local = (index);\n\n;// ./node_modules/@monaco-editor/loader/lib/es/config/index.js\nvar config = {\n  paths: {\n    vs: \'https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs\'\n  }\n};\n\n/* harmony default export */ const es_config = (config);\n\n;// ./node_modules/@monaco-editor/loader/lib/es/utils/curry.js\nfunction curry_curry(fn) {\n  return function curried() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return args.length >= fn.length ? fn.apply(this, args) : function () {\n      for (var _len2 = arguments.length, nextArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nextArgs[_key2] = arguments[_key2];\n      }\n\n      return curried.apply(_this, [].concat(args, nextArgs));\n    };\n  };\n}\n\n/* harmony default export */ const utils_curry = (curry_curry);\n\n;// ./node_modules/@monaco-editor/loader/lib/es/utils/isObject.js\nfunction isObject_isObject(value) {\n  return {}.toString.call(value).includes(\'Object\');\n}\n\n/* harmony default export */ const utils_isObject = (isObject_isObject);\n\n;// ./node_modules/@monaco-editor/loader/lib/es/validators/index.js\n\n\n\n/**\n * validates the configuration object and informs about deprecation\n * @param {Object} config - the configuration object \n * @return {Object} config - the validated configuration object\n */\n\nfunction validateConfig(config) {\n  if (!config) validators_errorHandler(\'configIsRequired\');\n  if (!utils_isObject(config)) validators_errorHandler(\'configType\');\n\n  if (config.urls) {\n    informAboutDeprecation();\n    return {\n      paths: {\n        vs: config.urls.monacoBase\n      }\n    };\n  }\n\n  return config;\n}\n/**\n * logs deprecation message\n */\n\n\nfunction informAboutDeprecation() {\n  console.warn(validators_errorMessages.deprecation);\n}\n\nfunction validators_throwError(errorMessages, type) {\n  throw new Error(errorMessages[type] || errorMessages["default"]);\n}\n\nvar validators_errorMessages = {\n  configIsRequired: \'the configuration object is required\',\n  configType: \'the configuration object should be an object\',\n  "default": \'an unknown error accured in `@monaco-editor/loader` package\',\n  deprecation: "Deprecation warning!\\n    You are using deprecated way of configuration.\\n\\n    Instead of using\\n      monaco.config({ urls: { monacoBase: \'...\' } })\\n    use\\n      monaco.config({ paths: { vs: \'...\' } })\\n\\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\\n  "\n};\nvar validators_errorHandler = utils_curry(validators_throwError)(validators_errorMessages);\nvar validators_validators = {\n  config: validateConfig\n};\n\n/* harmony default export */ const es_validators = (validators_validators);\n\n\n;// ./node_modules/@monaco-editor/loader/lib/es/utils/compose.js\nvar compose_compose = function compose() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function (x) {\n    return fns.reduceRight(function (y, f) {\n      return f(y);\n    }, x);\n  };\n};\n\n/* harmony default export */ const utils_compose = (compose_compose);\n\n;// ./node_modules/@monaco-editor/loader/lib/es/utils/deepMerge.js\n\n\nfunction merge(target, source) {\n  Object.keys(source).forEach(function (key) {\n    if (source[key] instanceof Object) {\n      if (target[key]) {\n        Object.assign(source[key], merge(target[key], source[key]));\n      }\n    }\n  });\n  return _objectSpread2(_objectSpread2({}, target), source);\n}\n\n/* harmony default export */ const deepMerge = (merge);\n\n;// ./node_modules/@monaco-editor/loader/lib/es/utils/makeCancelable.js\n// The source (has been changed) is https://github.com/facebook/react/issues/5465#issuecomment-157888325\nvar CANCELATION_MESSAGE = {\n  type: \'cancelation\',\n  msg: \'operation is manually canceled\'\n};\n\nfunction makeCancelable(promise) {\n  var hasCanceled_ = false;\n  var wrappedPromise = new Promise(function (resolve, reject) {\n    promise.then(function (val) {\n      return hasCanceled_ ? reject(CANCELATION_MESSAGE) : resolve(val);\n    });\n    promise["catch"](reject);\n  });\n  return wrappedPromise.cancel = function () {\n    return hasCanceled_ = true;\n  }, wrappedPromise;\n}\n\n/* harmony default export */ const utils_makeCancelable = (makeCancelable);\n\n\n;// ./node_modules/@monaco-editor/loader/lib/es/loader/index.js\n\n\n\n\n\n\n\n\n/** the local state of the module */\n\nvar _state$create = state_local.create({\n  config: es_config,\n  isInitialized: false,\n  resolve: null,\n  reject: null,\n  monaco: null\n}),\n    _state$create2 = _slicedToArray(_state$create, 2),\n    getState = _state$create2[0],\n    setState = _state$create2[1];\n/**\n * set the loader configuration\n * @param {Object} config - the configuration object\n */\n\n\nfunction loader_config(globalConfig) {\n  var _validators$config = es_validators.config(globalConfig),\n      monaco = _validators$config.monaco,\n      config = _objectWithoutProperties(_validators$config, ["monaco"]);\n\n  setState(function (state) {\n    return {\n      config: deepMerge(state.config, config),\n      monaco: monaco\n    };\n  });\n}\n/**\n * handles the initialization of the monaco-editor\n * @return {Promise} - returns an instance of monaco (with a cancelable promise)\n */\n\n\nfunction init() {\n  var state = getState(function (_ref) {\n    var monaco = _ref.monaco,\n        isInitialized = _ref.isInitialized,\n        resolve = _ref.resolve;\n    return {\n      monaco: monaco,\n      isInitialized: isInitialized,\n      resolve: resolve\n    };\n  });\n\n  if (!state.isInitialized) {\n    setState({\n      isInitialized: true\n    });\n\n    if (state.monaco) {\n      state.resolve(state.monaco);\n      return utils_makeCancelable(wrapperPromise);\n    }\n\n    if (window.monaco && window.monaco.editor) {\n      storeMonacoInstance(window.monaco);\n      state.resolve(window.monaco);\n      return utils_makeCancelable(wrapperPromise);\n    }\n\n    utils_compose(injectScripts, getMonacoLoaderScript)(configureLoader);\n  }\n\n  return utils_makeCancelable(wrapperPromise);\n}\n/**\n * injects provided scripts into the document.body\n * @param {Object} script - an HTML script element\n * @return {Object} - the injected HTML script element\n */\n\n\nfunction injectScripts(script) {\n  return document.body.appendChild(script);\n}\n/**\n * creates an HTML script element with/without provided src\n * @param {string} [src] - the source path of the script\n * @return {Object} - the created HTML script element\n */\n\n\nfunction createScript(src) {\n  var script = document.createElement(\'script\');\n  return src && (script.src = src), script;\n}\n/**\n * creates an HTML script element with the monaco loader src\n * @return {Object} - the created HTML script element\n */\n\n\nfunction getMonacoLoaderScript(configureLoader) {\n  var state = getState(function (_ref2) {\n    var config = _ref2.config,\n        reject = _ref2.reject;\n    return {\n      config: config,\n      reject: reject\n    };\n  });\n  var loaderScript = createScript("".concat(state.config.paths.vs, "/loader.js"));\n\n  loaderScript.onload = function () {\n    return configureLoader();\n  };\n\n  loaderScript.onerror = state.reject;\n  return loaderScript;\n}\n/**\n * configures the monaco loader\n */\n\n\nfunction configureLoader() {\n  var state = getState(function (_ref3) {\n    var config = _ref3.config,\n        resolve = _ref3.resolve,\n        reject = _ref3.reject;\n    return {\n      config: config,\n      resolve: resolve,\n      reject: reject\n    };\n  });\n  var require = window.require;\n\n  require.config(state.config);\n\n  require([\'vs/editor/editor.main\'], function (monaco) {\n    storeMonacoInstance(monaco);\n    state.resolve(monaco);\n  }, function (error) {\n    state.reject(error);\n  });\n}\n/**\n * store monaco instance in local state\n */\n\n\nfunction storeMonacoInstance(monaco) {\n  if (!getState().monaco) {\n    setState({\n      monaco: monaco\n    });\n  }\n}\n/**\n * internal helper function\n * extracts stored monaco instance\n * @return {Object|null} - the monaco instance\n */\n\n\nfunction __getMonacoInstance() {\n  return getState(function (_ref4) {\n    var monaco = _ref4.monaco;\n    return monaco;\n  });\n}\n\nvar wrapperPromise = new Promise(function (resolve, reject) {\n  return setState({\n    resolve: resolve,\n    reject: reject\n  });\n});\nvar loader = {\n  config: loader_config,\n  init: init,\n  __getMonacoInstance: __getMonacoInstance\n};\n\n/* harmony default export */ const es_loader = (loader);\n\n;// ./node_modules/@monaco-editor/loader/lib/es/index.js\n\n\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n;// ./node_modules/@monaco-editor/react/dist/index.mjs\nvar le={wrapper:{display:"flex",position:"relative",textAlign:"initial"},fullWidth:{width:"100%"},hide:{display:"none"}},v=le;var ae={container:{display:"flex",height:"100%",width:"100%",justifyContent:"center",alignItems:"center"}},Y=ae;function Me({children:e}){return react.createElement("div",{style:Y.container},e)}var Z=Me;var $=Z;function Ee({width:e,height:r,isEditorReady:n,loading:t,_ref:a,className:m,wrapperProps:E}){return react.createElement("section",{style:{...v.wrapper,width:e,height:r},...E},!n&&react.createElement($,null,t),react.createElement("div",{ref:a,style:{...v.fullWidth,...!n&&v.hide},className:m}))}var ee=Ee;var H=(0,react.memo)(ee);function Ce(e){(0,react.useEffect)(e,[])}var k=Ce;function he(e,r,n=!0){let t=(0,react.useRef)(!0);(0,react.useEffect)(t.current||!n?()=>{t.current=!1}:e,r)}var l=he;function D(){}function h(e,r,n,t){return De(e,t)||be(e,r,n,t)}function De(e,r){return e.editor.getModel(te(e,r))}function be(e,r,n,t){return e.editor.createModel(r,n,t?te(e,t):void 0)}function te(e,r){return e.Uri.parse(r)}function Oe({original:e,modified:r,language:n,originalLanguage:t,modifiedLanguage:a,originalModelPath:m,modifiedModelPath:E,keepCurrentOriginalModel:g=!1,keepCurrentModifiedModel:N=!1,theme:x="light",loading:P="Loading...",options:y={},height:V="100%",width:z="100%",className:F,wrapperProps:j={},beforeMount:A=D,onMount:q=D}){let[M,O]=(0,react.useState)(!1),[T,s]=(0,react.useState)(!0),u=(0,react.useRef)(null),c=(0,react.useRef)(null),w=(0,react.useRef)(null),d=(0,react.useRef)(q),o=(0,react.useRef)(A),b=(0,react.useRef)(!1);k(()=>{let i=es_loader.init();return i.then(f=>(c.current=f)&&s(!1)).catch(f=>f?.type!=="cancelation"&&console.error("Monaco initialization: error:",f)),()=>u.current?I():i.cancel()}),l(()=>{if(u.current&&c.current){let i=u.current.getOriginalEditor(),f=h(c.current,e||"",t||n||"text",m||"");f!==i.getModel()&&i.setModel(f)}},[m],M),l(()=>{if(u.current&&c.current){let i=u.current.getModifiedEditor(),f=h(c.current,r||"",a||n||"text",E||"");f!==i.getModel()&&i.setModel(f)}},[E],M),l(()=>{let i=u.current.getModifiedEditor();i.getOption(c.current.editor.EditorOption.readOnly)?i.setValue(r||""):r!==i.getValue()&&(i.executeEdits("",[{range:i.getModel().getFullModelRange(),text:r||"",forceMoveMarkers:!0}]),i.pushUndoStop())},[r],M),l(()=>{u.current?.getModel()?.original.setValue(e||"")},[e],M),l(()=>{let{original:i,modified:f}=u.current.getModel();c.current.editor.setModelLanguage(i,t||n||"text"),c.current.editor.setModelLanguage(f,a||n||"text")},[n,t,a],M),l(()=>{c.current?.editor.setTheme(x)},[x],M),l(()=>{u.current?.updateOptions(y)},[y],M);let L=(0,react.useCallback)(()=>{if(!c.current)return;o.current(c.current);let i=h(c.current,e||"",t||n||"text",m||""),f=h(c.current,r||"",a||n||"text",E||"");u.current?.setModel({original:i,modified:f})},[n,r,a,e,t,m,E]),U=(0,react.useCallback)(()=>{!b.current&&w.current&&(u.current=c.current.editor.createDiffEditor(w.current,{automaticLayout:!0,...y}),L(),c.current?.editor.setTheme(x),O(!0),b.current=!0)},[y,x,L]);(0,react.useEffect)(()=>{M&&d.current(u.current,c.current)},[M]),(0,react.useEffect)(()=>{!T&&!M&&U()},[T,M,U]);function I(){let i=u.current?.getModel();g||i?.original?.dispose(),N||i?.modified?.dispose(),u.current?.dispose()}return react.createElement(H,{width:z,height:V,isEditorReady:M,loading:P,_ref:w,className:F,wrapperProps:j})}var ie=Oe;var we=(0,react.memo)(ie);function Pe(){let[e,r]=Ie(ce.__getMonacoInstance());return k(()=>{let n;return e||(n=ce.init(),n.then(t=>{r(t)})),()=>n?.cancel()}),e}var Le=(/* unused pure expression or super */ null && (Pe));function He(e){let r=(0,react.useRef)();return (0,react.useEffect)(()=>{r.current=e},[e]),r.current}var se=He;var _=new Map;function Ve({defaultValue:e,defaultLanguage:r,defaultPath:n,value:t,language:a,path:m,theme:E="light",line:g,loading:N="Loading...",options:x={},overrideServices:P={},saveViewState:y=!0,keepCurrentModel:V=!1,width:z="100%",height:F="100%",className:j,wrapperProps:A={},beforeMount:q=D,onMount:M=D,onChange:O,onValidate:T=D}){let[s,u]=(0,react.useState)(!1),[c,w]=(0,react.useState)(!0),d=(0,react.useRef)(null),o=(0,react.useRef)(null),b=(0,react.useRef)(null),L=(0,react.useRef)(M),U=(0,react.useRef)(q),I=(0,react.useRef)(),i=(0,react.useRef)(t),f=se(m),Q=(0,react.useRef)(!1),B=(0,react.useRef)(!1);k(()=>{let p=es_loader.init();return p.then(R=>(d.current=R)&&w(!1)).catch(R=>R?.type!=="cancelation"&&console.error("Monaco initialization: error:",R)),()=>o.current?pe():p.cancel()}),l(()=>{let p=h(d.current,e||t||"",r||a||"",m||n||"");p!==o.current?.getModel()&&(y&&_.set(f,o.current?.saveViewState()),o.current?.setModel(p),y&&o.current?.restoreViewState(_.get(m)))},[m],s),l(()=>{o.current?.updateOptions(x)},[x],s),l(()=>{!o.current||t===void 0||(o.current.getOption(d.current.editor.EditorOption.readOnly)?o.current.setValue(t):t!==o.current.getValue()&&(B.current=!0,o.current.executeEdits("",[{range:o.current.getModel().getFullModelRange(),text:t,forceMoveMarkers:!0}]),o.current.pushUndoStop(),B.current=!1))},[t],s),l(()=>{let p=o.current?.getModel();p&&a&&d.current?.editor.setModelLanguage(p,a)},[a],s),l(()=>{g!==void 0&&o.current?.revealLine(g)},[g],s),l(()=>{d.current?.editor.setTheme(E)},[E],s);let X=(0,react.useCallback)(()=>{if(!(!b.current||!d.current)&&!Q.current){U.current(d.current);let p=m||n,R=h(d.current,t||e||"",r||a||"",p||"");o.current=d.current?.editor.create(b.current,{model:R,automaticLayout:!0,...x},P),y&&o.current.restoreViewState(_.get(p)),d.current.editor.setTheme(E),g!==void 0&&o.current.revealLine(g),u(!0),Q.current=!0}},[e,r,n,t,a,m,x,P,y,E,g]);(0,react.useEffect)(()=>{s&&L.current(o.current,d.current)},[s]),(0,react.useEffect)(()=>{!c&&!s&&X()},[c,s,X]),i.current=t,(0,react.useEffect)(()=>{s&&O&&(I.current?.dispose(),I.current=o.current?.onDidChangeModelContent(p=>{B.current||O(o.current.getValue(),p)}))},[s,O]),(0,react.useEffect)(()=>{if(s){let p=d.current.editor.onDidChangeMarkers(R=>{let G=o.current.getModel()?.uri;if(G&&R.find(J=>J.path===G.path)){let J=d.current.editor.getModelMarkers({resource:G});T?.(J)}});return()=>{p?.dispose()}}return()=>{}},[s,T]);function pe(){I.current?.dispose(),V?y&&_.set(m,o.current.saveViewState()):o.current.getModel()?.dispose(),o.current.dispose()}return react.createElement(H,{width:z,height:F,isEditorReady:s,loading:N,_ref:b,className:j,wrapperProps:A})}var fe=Ve;var de=(0,react.memo)(fe);var Ft=de;\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///68553\n')},14652:n=>{"use strict";n.exports=JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}')}}]);