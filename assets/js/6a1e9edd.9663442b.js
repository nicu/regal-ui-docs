"use strict";(self.webpackChunkregal_ui_docs=self.webpackChunkregal_ui_docs||[]).push([[6804],{71719:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  assets: () => (/* binding */ assets),\n  contentTitle: () => (/* binding */ contentTitle),\n  "default": () => (/* binding */ MDXContent),\n  frontMatter: () => (/* binding */ frontMatter),\n  metadata: () => (/* reexport */ site_docs_tests_mocks_index_md_6a1_namespaceObject),\n  toc: () => (/* binding */ toc)\n});\n\n;// ./.docusaurus/docusaurus-plugin-content-docs/default/site-docs-tests-mocks-index-md-6a1.json\nconst site_docs_tests_mocks_index_md_6a1_namespaceObject = /*#__PURE__*/JSON.parse(\'{"id":"tests/mocks/index","title":"Mocks","description":"Conventions","source":"@site/docs/tests/mocks/index.md","sourceDirName":"tests/mocks","slug":"/tests/mocks/","permalink":"/regal-ui-docs/docs/tests/mocks/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"toc_min_heading_level":2,"toc_max_heading_level":5},"sidebar":"docusaurusTutorialSidebar","previous":{"title":"Tests","permalink":"/regal-ui-docs/docs/tests/"}}\');\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(74848);\n// EXTERNAL MODULE: ./node_modules/@mdx-js/react/lib/index.js\nvar lib = __webpack_require__(28453);\n;// ./docs/tests/mocks/index.md\n\n\nconst frontMatter = {\n\ttoc_min_heading_level: 2,\n\ttoc_max_heading_level: 5\n};\nconst contentTitle = \'Mocks\';\n\nconst assets = {\n\n};\n\n\n\nconst toc = [{\n  "value": "Conventions",\n  "id": "conventions",\n  "level": 2\n}, {\n  "value": "Example",\n  "id": "example",\n  "level": 2\n}, {\n  "value": "Diagram",\n  "id": "diagram",\n  "level": 3\n}, {\n  "value": "Type Definitions",\n  "id": "type-definitions",\n  "level": 3\n}, {\n  "value": "Mocks",\n  "id": "mocks-1",\n  "level": 3\n}, {\n  "value": "MockActivityFeedItem",\n  "id": "mockactivityfeeditem",\n  "level": 4\n}, {\n  "value": "MockMessageEvent",\n  "id": "mockmessageevent",\n  "level": 4\n}, {\n  "value": "MockEmailAddress",\n  "id": "mockemailaddress",\n  "level": 4\n}, {\n  "value": "MockEmailBaseAttributes",\n  "id": "mockemailbaseattributes",\n  "level": 4\n}, {\n  "value": "MockEmailEvent",\n  "id": "mockemailevent",\n  "level": 4\n}, {\n  "value": "MockEmailSentEvent",\n  "id": "mockemailsentevent",\n  "level": 4\n}, {\n  "value": "MockEmailReceivedEvent",\n  "id": "mockemailreceivedevent",\n  "level": 4\n}, {\n  "value": "MockEmailThread",\n  "id": "mockemailthread",\n  "level": 4\n}, {\n  "value": "MockActivityFeedItemLike",\n  "id": "mockactivityfeeditemlike",\n  "level": 4\n}, {\n  "value": "Usage",\n  "id": "usage",\n  "level": 3\n}, {\n  "value": "Defaults",\n  "id": "defaults",\n  "level": 4\n}, {\n  "value": "Overrides",\n  "id": "overrides",\n  "level": 4\n}, {\n  "value": "Properties",\n  "id": "properties",\n  "level": 5\n}, {\n  "value": "Nested properties",\n  "id": "nested-properties",\n  "level": 5\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    admonition: "admonition",\n    br: "br",\n    code: "code",\n    em: "em",\n    h1: "h1",\n    h2: "h2",\n    h3: "h3",\n    h4: "h4",\n    h5: "h5",\n    header: "header",\n    li: "li",\n    mermaid: "mermaid",\n    p: "p",\n    pre: "pre",\n    strong: "strong",\n    ul: "ul",\n    ...(0,lib/* useMDXComponents */.R)(),\n    ...props.components\n  };\n  return (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [(0,jsx_runtime.jsx)(_components.header, {\n      children: (0,jsx_runtime.jsx)(_components.h1, {\n        id: "mocks",\n        children: "Mocks"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h2, {\n      id: "conventions",\n      children: "Conventions"\n    }), "\\n", (0,jsx_runtime.jsxs)(_components.ul, {\n      children: ["\\n", (0,jsx_runtime.jsxs)(_components.li, {\n        children: ["Each mocked entity should have the same name as the original entity, prefixed with \\"Mock\\". Example: ", (0,jsx_runtime.jsx)(_components.code, {\n          children: "MockEmailAddress"\n        }), "."]\n      }), "\\n", (0,jsx_runtime.jsxs)(_components.li, {\n        children: ["Each mock function should take an ", (0,jsx_runtime.jsx)(_components.code, {\n          children: "overrides"\n        }), " object which allows passing predefined data to the mock.", (0,jsx_runtime.jsx)(_components.br, {}), "\\n", (0,jsx_runtime.jsxs)("small", {\n          children: [(0,jsx_runtime.jsx)(_components.strong, {\n            children: "Note"\n          }), ": this only applies to mocks for \\"object\\" types"]\n        })]\n      }), "\\n", (0,jsx_runtime.jsx)(_components.li, {\n        children: (0,jsx_runtime.jsxs)(_components.em, {\n          children: ["TODO: Each mock function should accept a second argument for specifying the ", (0,jsx_runtime.jsx)(_components.code, {\n            children: "seed"\n          })]\n        })\n      }), "\\n", (0,jsx_runtime.jsx)(_components.li, {\n        children: "When a property from \\"EntityA\\" references \\"EntityB\\", the mock for that property should just call the mock generator for \\"EntityB\\" (if available). See the examples below."\n      }), "\\n"]\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h2, {\n      id: "example",\n      children: "Example"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.p, {\n      children: "Here\'s a concrete example of implementing mocks for a few entities."\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h3, {\n      id: "diagram",\n      children: "Diagram"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.mermaid, {\n      value: "classDiagram\\n    ActivityFeedItem <|-- MessageEvent\\n    ActivityFeedItem <|-- EmailEvent\\n    ActivityFeedItem <|-- EmailThread\\n    EmailEvent <|-- EmailSentEvent\\n    EmailEvent <|-- EmailReceivedEvent\\n\\n    class ActivityFeedItem {\\n    }\\n\\n    class MessageEvent {\\n    }\\n\\n    class EmailEvent {\\n    }\\n\\n    class EmailSentEvent {\\n    }\\n\\n    class EmailReceivedEvent {\\n    }\\n\\n    class EmailThread {\\n    }\\n"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h3, {\n      id: "type-definitions",\n      children: "Type Definitions"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.admonition, {\n      type: "info",\n      children: (0,jsx_runtime.jsxs)(_components.p, {\n        children: ["The data models used in this example are ", (0,jsx_runtime.jsx)(_components.strong, {\n          children: "not"\n        }), " real. For brevity reasons, most of the fields are omitted."]\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export interface ActivityFeedItem {\\n  eventType: string;\\n  createdAt: number;\\n  updatedAt: number;\\n}\\n\\nexport interface MessageEvent extends ActivityFeedItem {\\n  content: string;\\n  direction: \\"INBOUND\\" | \\"OUTBOUND\\";\\n  eventType: \\"message_event\\";\\n}\\n\\nexport declare type EmailAddress = {\\n  name: string;\\n  address: string;\\n};\\n\\nexport declare type EmailBaseAttributes = {\\n  senderEmail: EmailAddress;\\n  toEmails: EmailAddress[];\\n  subject: string;\\n  threadId: string;\\n  messageId: string;\\n  bodySnippet: string;\\n  name: \\"Email Sent\\" | \\"Email Received\\";\\n  direction: \\"inbound\\" | \\"outbound\\";\\n};\\n\\nexport interface EmailEvent extends EmailBaseAttributes, ActivityFeedItem {\\n  eventType: \\"email\\";\\n}\\n\\nexport interface EmailSentEvent extends EmailEvent {\\n  name: \\"Email Sent\\";\\n  direction: \\"outbound\\";\\n}\\n\\nexport interface EmailReceivedEvent extends EmailEvent {\\n  name: \\"Email Received\\";\\n  direction: \\"inbound\\";\\n}\\n\\nexport interface EmailThread {\\n  eventType: \\"email-thread\\";\\n  threadId: string;\\n  events: Array<EmailSentEvent | EmailReceivedEvent>;\\n}\\n\\nexport type ActivityFeedItemLike =\\n  | MessageEvent\\n  | EmailSentEvent\\n  | EmailReceivedEvent\\n  | EmailThread;\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h3, {\n      id: "mocks-1",\n      children: "Mocks"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockactivityfeeditem",\n      children: "MockActivityFeedItem"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockActivityFeedItem(\\n  overrides: Partial<ActivityFeedItem> = {}\\n): ActivityFeedItem {\\n  const result = {\\n    eventType: faker.word.words(),\\n    createdAt: new Date(faker.date.recent()).getTime(),\\n    updatedAt: new Date(faker.date.recent()).getTime(),\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockmessageevent",\n      children: "MockMessageEvent"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockMessageEvent(\\n  overrides: Partial<MessageEvent> = {}\\n): MessageEvent {\\n  const result = {\\n    ...MockActivityFeedItem(),\\n    content: faker.word.words(),\\n    direction: faker.helpers.arrayElement([\\"INBOUND\\", \\"OUTBOUND\\"]),\\n    eventType: \\"message_event\\",\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockemailaddress",\n      children: "MockEmailAddress"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockEmailAddress(\\n  overrides: Partial<EmailAddress> = {}\\n): EmailAddress {\\n  const result = {\\n    name: faker.person.fullName(),\\n    address: faker.internet.email(),\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockemailbaseattributes",\n      children: "MockEmailBaseAttributes"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockEmailBaseAttributes(\\n  overrides: Partial<EmailBaseAttributes> = {}\\n): EmailBaseAttributes {\\n  const result = {\\n    senderEmail: MockEmailAddress(),\\n    toEmails: faker.helpers.multiple(() => MockEmailAddress()),\\n    subject: faker.word.words(),\\n    threadId: faker.string.alpha(34),\\n    messageId: faker.string.alpha(34),\\n    bodySnippet: faker.word.words(),\\n    name: faker.helpers.arrayElement([\\"Email Sent\\", \\"Email Received\\"]),\\n    direction: faker.helpers.arrayElement([\\"inbound\\", \\"outbound\\"]),\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockemailevent",\n      children: "MockEmailEvent"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockEmailEvent(\\n  overrides: Partial<EmailEvent> = {}\\n): EmailEvent {\\n  const result = {\\n    ...MockEmailBaseAttributes(),\\n    ...MockActivityFeedItem(),\\n    eventType: \\"email\\",\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockemailsentevent",\n      children: "MockEmailSentEvent"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockEmailSentEvent(\\n  overrides: Partial<EmailSentEvent> = {}\\n): EmailSentEvent {\\n  const result = {\\n    ...MockEmailEvent(),\\n    name: \\"Email Sent\\",\\n    direction: \\"outbound\\",\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockemailreceivedevent",\n      children: "MockEmailReceivedEvent"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockEmailReceivedEvent(\\n  overrides: Partial<EmailReceivedEvent> = {}\\n): EmailReceivedEvent {\\n  const result = {\\n    ...MockEmailEvent(),\\n    name: \\"Email Received\\",\\n    direction: \\"inbound\\",\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockemailthread",\n      children: "MockEmailThread"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockEmailThread(\\n  overrides: Partial<EmailThread> = {}\\n): EmailThread {\\n  const result = {\\n    eventType: \\"email-thread\\",\\n    threadId: faker.string.alpha(34),\\n    events: faker.helpers.multiple(() =>\\n      faker.helpers.arrayElement([\\n        MockEmailSentEvent(),\\n        MockEmailReceivedEvent(),\\n      ])\\n    ),\\n  };\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "mockactivityfeeditemlike",\n      children: "MockActivityFeedItemLike"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "export function MockActivityFeedItemLike(\\n  overrides: Partial<ActivityFeedItemLike> = {}\\n): ActivityFeedItemLike {\\n  const result = faker.helpers.arrayElement([\\n    faker.helpers.arrayElement([\\n      MockMessageEvent(),\\n      MockEmailSentEvent(),\\n      MockEmailReceivedEvent(),\\n      MockEmailThread(),\\n    ]),\\n  ]);\\n  return { ...result, ...overrides };\\n}\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h3, {\n      id: "usage",\n      children: "Usage"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "defaults",\n      children: "Defaults"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "const randomMessageEvent = MockMessageEvent();\\nconst randomEmailThread = MockEmailThread();\\n\\n// returns one of MessageEvent, EmailSentEvent, EmailReceivedEvent or EmailThread\\nconst randomActivityFeedItemLike = MockActivityFeedItem();\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h4, {\n      id: "overrides",\n      children: "Overrides"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h5, {\n      id: "properties",\n      children: "Properties"\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "const messageEvent = MockMessageEvent({\\n  content: \\"Hardcoded message for this particular test\\",\\n});\\n"\n      })\n    }), "\\n", (0,jsx_runtime.jsx)(_components.h5, {\n      id: "nested-properties",\n      children: "Nested properties"\n    }), "\\n", (0,jsx_runtime.jsxs)(_components.p, {\n      children: ["If you need more control of the threads, for example making sure the ", (0,jsx_runtime.jsx)(_components.code, {\n        children: "sender"\n      }), " and ", (0,jsx_runtime.jsx)(_components.code, {\n        children: "to"\n      }), " email addresses are correct:"]\n    }), "\\n", (0,jsx_runtime.jsx)(_components.pre, {\n      children: (0,jsx_runtime.jsx)(_components.code, {\n        className: "language-ts",\n        children: "const agentEmail: EmailAddress = {\\n  name: \\"Michael Scott\\",\\n  address: \\"michael.scott@regal.io\\",\\n};\\n\\nconst contactEmail: EmailAddress = {\\n  name: \\"Holly Flax\\",\\n  address: \\"holly.flax@gmail.com\\",\\n};\\n\\nconst emailThread = MockEmailThread({\\n  events: [\\n    MockEmailSentEvent({ senderEmail: agentEmail, toEmails: [contactEmail] }),\\n    MockEmailReceivedEvent({\\n      senderEmail: contactEmail,\\n      toEmails: [agentEmail],\\n    }),\\n  ],\\n});\\n"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ...(0,lib/* useMDXComponents */.R)(),\n    ...props.components\n  };\n  return MDXLayout ? (0,jsx_runtime.jsx)(MDXLayout, {\n    ...props,\n    children: (0,jsx_runtime.jsx)(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///71719\n')},28453:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R: () => (/* binding */ useMDXComponents),\n/* harmony export */   x: () => (/* binding */ MDXProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96540);\n/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\n\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nfunction useMDXComponents(components) {\n  const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nfunction MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg0NTMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBLGFBQWEsc0NBQXNDO0FBQ25ELGFBQWEsNEJBQTRCLElBQUksWUFBWTtBQUN6RCxhQUFhLDJCQUEyQjtBQUN4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0EsY0FBYyw4REFBOEQ7QUFDNUU7QUFDQSxjQUFjLDRCQUE0QjtBQUMxQztBQUNBOztBQUV5Qjs7QUFFekIsV0FBVyx5QkFBeUI7QUFDcEM7O0FBRUEsbUJBQW1CLGdEQUFtQjs7QUFFdEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyw4REFBOEQ7QUFDekU7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsNEJBQTRCLDZDQUFnQjs7QUFFNUM7QUFDQSxTQUFTLDBDQUFhO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYztBQUNkLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQSxhQUFhO0FBQ2I7QUFDQSxlQUFlO0FBQ2Y7QUFDTztBQUNQLGFBQWEseUJBQXlCO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSxTQUFTLGdEQUFtQjtBQUM1QjtBQUNBLEtBQUsscUJBQXFCO0FBQzFCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZ2FsLXVpLWRvY3MvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MmU1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21keC90eXBlcy5qcycpLk1EWENvbXBvbmVudHN9IE1EWENvbXBvbmVudHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3JlYWN0JykuQ29tcG9uZW50PHt9LCB7fSwgdW5rbm93bj59IENvbXBvbmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgncmVhY3QnKS5SZWFjdE5vZGV9IFJlYWN0Tm9kZVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28453\n")}}]);